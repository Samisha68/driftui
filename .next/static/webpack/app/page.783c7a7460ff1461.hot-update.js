"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/DriftClientProvider.tsx":
/*!********************************************!*\
  !*** ./components/DriftClientProvider.tsx ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DriftClientProvider: function() { return /* binding */ DriftClientProvider; },\n/* harmony export */   useDriftClient: function() { return /* binding */ useDriftClient; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _drift_labs_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @drift-labs/sdk */ \"(app-pages-browser)/./node_modules/@drift-labs/sdk/lib/index.js\");\n/* harmony import */ var _drift_labs_sdk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_drift_labs_sdk__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"(app-pages-browser)/./node_modules/@solana/wallet-adapter-react/lib/esm/useWallet.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/web3.js */ \"(app-pages-browser)/./node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ DriftClientProvider,useDriftClient auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n// Custom error for rate limiting\nclass RateLimitError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"RateLimitError\";\n    }\n}\nconst DriftClientContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    driftClient: null,\n    userAccounts: null,\n    error: null,\n    isLoading: true,\n    isConnected: false,\n    isSubscribed: false,\n    currentRpcEndpoint: null\n});\n// Define multiple RPC endpoints - Prioritize public Solana endpoint\nconst RPC_ENDPOINTS = [\n    \"https://api.devnet.solana.com\",\n    \"https://devnet.helius-rpc.com/?api-key=76547270-226d-446d-8293-c1b3f8e8ea1b\" || 0\n].filter(Boolean); // Filter out any potential undefined/null values\n_c = RPC_ENDPOINTS;\nconst MAX_RETRIES_PER_ENDPOINT = 5; // Max retries for non-rate-limit errors per endpoint\nconst INITIAL_RETRY_DELAY = 5000; // 5 seconds for regular errors\nconst MAX_RETRY_DELAY = 30000; // 30 seconds for regular errors\nconst ENDPOINT_SWITCH_DELAY = 1000; // Short delay before trying next endpoint\nconst sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\nconst getJitter = (baseDelay)=>{\n    const jitter = Math.random() * 0.2;\n    return baseDelay * (1 + jitter);\n};\n// Updated retry logic: throws RateLimitError on 429, handles backoff for other errors\nconst retryWithBackoff = async function(fn, endpoint) {\n    let retries = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : MAX_RETRIES_PER_ENDPOINT, delay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : INITIAL_RETRY_DELAY;\n    try {\n        return await fn();\n    } catch (error) {\n        var _error_message, _error_message1, _error_message2, _error_message3;\n        // Check specifically for rate limit error first\n        const isRateLimitError = ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"429\")) || error.status === 429 || ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.toLowerCase().includes(\"rate limit\"));\n        if (isRateLimitError) {\n            console.warn(\"Rate limit detected on \".concat(endpoint, \". Switching endpoint.\"));\n            throw new RateLimitError(\"Rate limit hit on \".concat(endpoint)); // Throw specific error\n        }\n        // Better handling for null reference errors\n        if (((_error_message2 = error.message) === null || _error_message2 === void 0 ? void 0 : _error_message2.includes(\"Cannot read properties of null\")) || ((_error_message3 = error.message) === null || _error_message3 === void 0 ? void 0 : _error_message3.includes(\"Cannot read property\"))) {\n            console.warn(\"Null reference error detected in SDK call. Endpoint: \".concat(endpoint, \", Error: \").concat(error.message));\n        // Either try again with backoff or throw a specific error to handle it differently\n        }\n        // Handle other errors with backoff\n        if (retries === 0) {\n            console.error(\"Max retries reached for non-rate-limit error on \".concat(endpoint, \". Error:\"), error);\n            throw error; // Throw original error after max retries\n        }\n        const nextDelay = Math.min(delay * 2, MAX_RETRY_DELAY);\n        const jitteredDelay = getJitter(nextDelay);\n        console.log(\"Retrying on \".concat(endpoint, \" in \").concat(jitteredDelay / 1000, \"s (attempt \").concat(MAX_RETRIES_PER_ENDPOINT - retries + 1, \"/\").concat(MAX_RETRIES_PER_ENDPOINT, \"). Error: \").concat(error.message));\n        await sleep(jitteredDelay);\n        return retryWithBackoff(fn, endpoint, retries - 1, nextDelay);\n    }\n};\n// createConnection now accepts the endpoint URL\nconst createConnection = async (rpcEndpoint)=>{\n    console.log(\"Attempting to connect to RPC: \".concat(rpcEndpoint));\n    const connection = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_3__.Connection(rpcEndpoint, \"confirmed\");\n    await connection.getEpochInfo(); // Test connection\n    console.log(\"Successfully connected to RPC: \".concat(rpcEndpoint));\n    return connection;\n};\n// Add this debugging helper before the DriftClientProvider component\nconst safelyExecuteSdkMethod = async (methodName, method, fallbackValue)=>{\n    try {\n        console.debug(\"Executing SDK method: \".concat(methodName));\n        const result = await method();\n        console.debug(\"Successfully executed SDK method: \".concat(methodName));\n        return result;\n    } catch (error) {\n        console.error(\"Error in SDK method \".concat(methodName, \":\"), error);\n        console.error(\"Stack trace for \".concat(methodName, \":\"), error.stack);\n        if (fallbackValue !== undefined) {\n            console.warn(\"Using fallback value for failed SDK method: \".concat(methodName));\n            return fallbackValue;\n        }\n        throw error;\n    }\n};\nfunction DriftClientProvider(param) {\n    let { children, onConnected } = param;\n    _s();\n    const [driftClient, setDriftClient] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [userAccounts, setUserAccounts] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isSubscribed, setIsSubscribed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [currentRpcIndex, setCurrentRpcIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [currentRpcEndpoint, setCurrentRpcEndpoint] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(RPC_ENDPOINTS[0] || null);\n    const { publicKey, signTransaction, signAllTransactions } = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_5__.useWallet)();\n    const isSubscribedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const isInitializedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const mountedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(true);\n    // Add a debug flag\n    const [sdkDebugMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        mountedRef.current = true;\n        isInitializedRef.current = false; // Reset initialization flag on wallet change\n        isSubscribedRef.current = false; // Reset subscription flag\n        setDriftClient(null); // Clear old client\n        setUserAccounts(null);\n        setError(null);\n        setIsConnected(false);\n        setIsSubscribed(false);\n        setIsLoading(true);\n        setCurrentRpcIndex(0); // Start from the first endpoint\n        setCurrentRpcEndpoint(RPC_ENDPOINTS[0] || null);\n        const initializeDriftClient = async ()=>{\n            if (!publicKey || !signTransaction || !signAllTransactions) {\n                if (mountedRef.current) {\n                    setIsLoading(false);\n                }\n                return;\n            }\n            let successfulInitialization = false;\n            let attemptIndex = 0;\n            const maxEndpointAttempts = RPC_ENDPOINTS.length;\n            while(!successfulInitialization && attemptIndex < maxEndpointAttempts && mountedRef.current){\n                const currentEndpoint = RPC_ENDPOINTS[attemptIndex];\n                setCurrentRpcEndpoint(currentEndpoint);\n                console.log(\"Attempting initialization with endpoint \".concat(attemptIndex + 1, \"/\").concat(maxEndpointAttempts, \": \").concat(currentEndpoint));\n                try {\n                    if (mountedRef.current) setError(null);\n                    // Try connecting with current endpoint\n                    const connection = await retryWithBackoff(()=>createConnection(currentEndpoint), currentEndpoint);\n                    // Initialize client with enhanced error logging\n                    if (sdkDebugMode) console.debug(\"Creating DriftClient instance...\");\n                    const clientConfig = {\n                        connection,\n                        wallet: {\n                            publicKey,\n                            signTransaction,\n                            signAllTransactions\n                        },\n                        env: \"devnet\",\n                        opts: {\n                            commitment: \"confirmed\",\n                            skipPreflight: true\n                        }\n                    };\n                    if (sdkDebugMode) console.debug(\"Client config:\", JSON.stringify(clientConfig, (key, value)=>key === \"connection\" ? \"[Connection Object]\" : key === \"publicKey\" ? value.toString() : key === \"signTransaction\" || key === \"signAllTransactions\" ? \"[Function]\" : value));\n                    const client = new _drift_labs_sdk__WEBPACK_IMPORTED_MODULE_2__.DriftClient(clientConfig);\n                    if (!mountedRef.current) return;\n                    // Additional validation\n                    if (!client) {\n                        console.error(\"DriftClient was not properly initialized\");\n                        throw new Error(\"Failed to initialize DriftClient\");\n                    }\n                    // Check if required methods exist\n                    if (typeof client.subscribe !== \"function\") {\n                        console.error(\"DriftClient.subscribe is not a function\");\n                        throw new Error(\"Malformed DriftClient instance\");\n                    }\n                    if (typeof client.getUserAccountsForAuthority !== \"function\") {\n                        console.error(\"DriftClient.getUserAccountsForAuthority is not a function\");\n                        throw new Error(\"Malformed DriftClient instance\");\n                    }\n                    setDriftClient(client);\n                    setIsConnected(true);\n                    isInitializedRef.current = true;\n                    // Try subscribing with more safety measures\n                    if (!isSubscribedRef.current) {\n                        await sleep(5000); // Increased delay to 5 seconds\n                        if (sdkDebugMode) console.debug(\"Attempting to subscribe to DriftClient events...\");\n                        await retryWithBackoff(async ()=>{\n                            if (!client) throw new Error(\"Client not available for subscribe\");\n                            // Wrap the SDK call in our safe executor\n                            await safelyExecuteSdkMethod(\"client.subscribe\", async ()=>{\n                                // Check internal state of client before subscribing\n                                if (!client.connection) {\n                                    throw new Error(\"Client connection is null before subscribe\");\n                                }\n                                // Safe subscribe with extra logging\n                                console.debug(\"[safelyExecuteSdkMethod] Calling client.subscribe()...\");\n                                try {\n                                    const subscribeResult = await client.subscribe();\n                                    console.debug(\"[safelyExecuteSdkMethod] client.subscribe() returned successfully.\");\n                                    if (!mountedRef.current) return false; // Check mount status after async call\n                                    // Check the result if necessary (depends on SDK)\n                                    if (!subscribeResult) {\n                                        console.warn(\"client.subscribe() returned falsy value\");\n                                    // Consider throwing an error if subscribeResult is critical\n                                    }\n                                    console.log(\"Successfully subscribed on endpoint: \".concat(currentEndpoint));\n                                    setIsSubscribed(true);\n                                    isSubscribedRef.current = true;\n                                    if (onConnected) {\n                                        console.log(\"Calling onConnected callback...\");\n                                        onConnected();\n                                    }\n                                    return true; // Indicate success for retryWithBackoff\n                                } catch (subscribeError) {\n                                    console.error(\"Error during client.subscribe() on \".concat(currentEndpoint, \":\"), subscribeError);\n                                    setIsSubscribed(false);\n                                    isSubscribedRef.current = false;\n                                    // Re-throw to allow retryWithBackoff to handle it\n                                    throw subscribeError;\n                                }\n                            });\n                        }, currentEndpoint);\n                        if (!mountedRef.current) return;\n                        setIsSubscribed(true);\n                        isSubscribedRef.current = true;\n                        console.log(\"Successfully subscribed via \".concat(currentEndpoint));\n                    }\n                    // Try fetching accounts with more safety measures\n                    if (!userAccounts) {\n                        try {\n                            // Longer delay before fetching accounts\n                            await sleep(2000);\n                            if (sdkDebugMode) console.debug(\"Attempting to fetch user accounts...\");\n                            await retryWithBackoff(async ()=>{\n                                if (!client) throw new Error(\"Client not available for getUserAccounts\");\n                                if (!publicKey) throw new Error(\"Public key not available for getUserAccounts\");\n                                // Wrap the SDK call in our safe executor with a fallback empty array\n                                const accounts = await safelyExecuteSdkMethod(\"client.getUserAccountsForAuthority\", async ()=>{\n                                    // Check connection and other required objects\n                                    if (!client.connection) {\n                                        throw new Error(\"Client connection is null before getUserAccounts\");\n                                    }\n                                    // Safe get accounts\n                                    return await client.getUserAccountsForAuthority(publicKey);\n                                }, [] // Fallback to empty array\n                                );\n                                if (mountedRef.current) setUserAccounts(accounts || []);\n                            }, currentEndpoint);\n                        } catch (fetchErr) {\n                            console.warn(\"Failed to fetch user accounts via \".concat(currentEndpoint, \" (non-fatal):\"), fetchErr);\n                            if (mountedRef.current) setUserAccounts([]);\n                        }\n                    }\n                    // Success!\n                    successfulInitialization = true;\n                    if (mountedRef.current) setIsLoading(false);\n                    console.log(\"Drift client fully initialized and subscribed via \".concat(currentEndpoint));\n                } catch (err) {\n                    var _err_message;\n                    if (!mountedRef.current) return;\n                    console.error(\"Error during initialization/subscription: \".concat(err.message || \"Unknown error\"), err);\n                    // Log additional diagnostic info about the failure\n                    if (sdkDebugMode) {\n                        console.debug(\"Error details:\", {\n                            endpoint: currentEndpoint,\n                            message: err.message,\n                            name: err.name,\n                            stack: err.stack,\n                            isRateLimitError: err instanceof RateLimitError\n                        });\n                    }\n                    const isNullReferenceError = (_err_message = err.message) === null || _err_message === void 0 ? void 0 : _err_message.includes(\"Cannot read properties of null\");\n                    if (err instanceof RateLimitError || isNullReferenceError) {\n                        // Treat null reference errors during init/sub like rate limits - try next endpoint immediately\n                        const errorType = err instanceof RateLimitError ? \"Rate limit\" : \"Null reference\";\n                        console.warn(\"\".concat(errorType, \" error hit on \").concat(currentEndpoint, \", trying next endpoint...\"));\n                        await sleep(ENDPOINT_SWITCH_DELAY);\n                    } else {\n                        console.error(\"Failed to initialize/subscribe via \".concat(currentEndpoint, \" after retries:\"), err);\n                        await sleep(ENDPOINT_SWITCH_DELAY);\n                    }\n                }\n                attemptIndex++;\n            }\n            // After loop: check if initialization failed after trying all endpoints\n            if (!successfulInitialization && mountedRef.current) {\n                console.error(\"Failed to initialize Drift client after trying all RPC endpoints.\");\n                setError(\"Failed to connect to Drift after trying all available RPC endpoints.\");\n                setIsLoading(false);\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_4__.toast.error(\"Could not connect to Drift. Please try again later or check network.\");\n            }\n        };\n        initializeDriftClient();\n        // Cleanup function\n        return ()=>{\n            mountedRef.current = false;\n            console.log(\"DriftClientProvider cleaning up...\");\n            const currentDriftClient = driftClient; // Capture current value for cleanup\n            if (currentDriftClient && isSubscribedRef.current) {\n                currentDriftClient.unsubscribe().catch((err)=>{\n                    console.error(\"Error unsubscribing from Drift client:\", err);\n                });\n            }\n            isSubscribedRef.current = false;\n            isInitializedRef.current = false;\n        };\n    // REMOVE driftClient from dependency array\n    }, [\n        publicKey,\n        signTransaction,\n        signAllTransactions,\n        onConnected,\n        sdkDebugMode\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DriftClientContext.Provider, {\n        value: {\n            driftClient,\n            userAccounts,\n            error,\n            isLoading,\n            isConnected,\n            isSubscribed,\n            currentRpcEndpoint\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/samisha/Projects/drift-trading-ui/components/DriftClientProvider.tsx\",\n        lineNumber: 387,\n        columnNumber: 5\n    }, this);\n}\n_s(DriftClientProvider, \"KMJ7NQXOF8HDs/IDHhKKOnSgpq8=\", false, function() {\n    return [\n        _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_5__.useWallet\n    ];\n});\n_c1 = DriftClientProvider;\nconst useDriftClient = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(DriftClientContext);\n    if (context === undefined) {\n        throw new Error(\"useDriftClient must be used within a DriftClientProvider\");\n    }\n    return context;\n};\n_s1(useDriftClient, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c, _c1;\n$RefreshReg$(_c, \"RPC_ENDPOINTS\");\n$RefreshReg$(_c1, \"DriftClientProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/DriftClientProvider.tsx\n"));

/***/ })

});