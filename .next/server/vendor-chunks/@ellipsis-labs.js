"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ellipsis-labs";
exports.ids = ["vendor-chunks/@ellipsis-labs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@ellipsis-labs/phoenix-sdk/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ellipsis-labs/phoenix-sdk/dist/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for(var key in obj){\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    newObj[key] = obj[key];\n                }\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar gn = Object.defineProperty;\nvar Mr = Object.getOwnPropertySymbols;\nvar kn = Object.prototype.hasOwnProperty, Pn = Object.prototype.propertyIsEnumerable;\nvar M = Math.pow, Or = (r, e, t)=>e in r ? gn(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, m = (r, e)=>{\n    for(var t in e || (e = {}))kn.call(e, t) && Or(r, t, e[t]);\n    if (Mr) for (var t of Mr(e))Pn.call(e, t) && Or(r, t, e[t]);\n    return r;\n};\nvar p = (r, e, t)=>new Promise((i, n)=>{\n        var o = (u)=>{\n            try {\n                a(t.next(u));\n            } catch (c) {\n                n(c);\n            }\n        }, s = (u)=>{\n            try {\n                a(t.throw(u));\n            } catch (c) {\n                n(c);\n            }\n        }, a = (u)=>u.done ? i(u.value) : Promise.resolve(u.value).then(o, s);\n        a((t = t.apply(r, e)).next());\n    });\nvar _web3js = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nvar ti = _interopRequireWildcard(_web3js);\nvar ri = _interopRequireWildcard(_web3js);\nvar ii = _interopRequireWildcard(_web3js);\nvar br = _interopRequireWildcard(_web3js);\nvar Me = _interopRequireWildcard(_web3js);\nvar mr = _interopRequireWildcard(_web3js);\nvar oi = _interopRequireWildcard(_web3js);\nvar si = _interopRequireWildcard(_web3js);\nvar Oe = _interopRequireWildcard(_web3js);\nvar ci = _interopRequireWildcard(_web3js);\nvar bi = _interopRequireWildcard(_web3js);\nvar mi = _interopRequireWildcard(_web3js);\nvar Pt = _interopRequireWildcard(_web3js);\nvar xt = _interopRequireWildcard(_web3js);\nvar St = _interopRequireWildcard(_web3js);\nvar It = _interopRequireWildcard(_web3js);\nvar Tt = _interopRequireWildcard(_web3js);\nvar Mt = _interopRequireWildcard(_web3js);\nvar Ft = _interopRequireWildcard(_web3js);\nvar Wt = _interopRequireWildcard(_web3js);\nvar Ut = _interopRequireWildcard(_web3js);\nvar Dt = _interopRequireWildcard(_web3js);\nvar Ct = _interopRequireWildcard(_web3js);\nvar zt = _interopRequireWildcard(_web3js);\nvar Nt = _interopRequireWildcard(_web3js);\nvar _t = _interopRequireWildcard(_web3js);\nvar Fe = _interopRequireWildcard(_web3js);\nvar Zt = _interopRequireWildcard(_web3js);\nvar Jt = _interopRequireWildcard(_web3js);\nvar Xt = _interopRequireWildcard(_web3js);\nvar g = new Map, k = new Map, ne = exports.InvalidMarketParametersError = class extends Error {\n    constructor(){\n        super(\"Invalid market parameters error\");\n        this.code = 0;\n        this.name = \"InvalidMarketParameters\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, ne);\n    }\n};\ng.set(0, ()=>new ne);\nk.set(\"InvalidMarketParameters\", ()=>new ne);\nvar oe = class extends Error {\n    constructor(){\n        super(\"Invalid exchange authority error\");\n        this.code = 1;\n        this.name = \"InvalidMarketAuthority\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, oe);\n    }\n};\ng.set(1, ()=>new oe);\nk.set(\"InvalidMarketAuthority\", ()=>new oe);\nvar se = class extends Error {\n    constructor(){\n        super(\"Market deserialization error\");\n        this.code = 2;\n        this.name = \"FailedToLoadMarketFromAccount\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, se);\n    }\n};\ng.set(2, ()=>new se);\nk.set(\"FailedToLoadMarketFromAccount\", ()=>new se);\nvar ae = class extends Error {\n    constructor(){\n        super(\"Market already initialized error\");\n        this.code = 3;\n        this.name = \"MarketAlreadyInitialized\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, ae);\n    }\n};\ng.set(3, ()=>new ae);\nk.set(\"MarketAlreadyInitialized\", ()=>new ae);\nvar ue = class extends Error {\n    constructor(){\n        super(\"Market is not initialized error\");\n        this.code = 4;\n        this.name = \"MarketUninitialized\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, ue);\n    }\n};\ng.set(4, ()=>new ue);\nk.set(\"MarketUninitialized\", ()=>new ue);\nvar ce = class extends Error {\n    constructor(){\n        super(\"Invalid state transition error\");\n        this.code = 5;\n        this.name = \"InvalidStateTransition\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, ce);\n    }\n};\ng.set(5, ()=>new ce);\nk.set(\"InvalidStateTransition\", ()=>new ce);\nvar le = class extends Error {\n    constructor(){\n        super(\"Invalid market signer error\");\n        this.code = 6;\n        this.name = \"InvalidMarketSigner\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, le);\n    }\n};\ng.set(6, ()=>new le);\nk.set(\"InvalidMarketSigner\", ()=>new le);\nvar be = class extends Error {\n    constructor(){\n        super(\"Invalid lot size error\");\n        this.code = 7;\n        this.name = \"InvalidLotSize\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, be);\n    }\n};\ng.set(7, ()=>new be);\nk.set(\"InvalidLotSize\", ()=>new be);\nvar me = class extends Error {\n    constructor(){\n        super(\"Invalid tick size error\");\n        this.code = 8;\n        this.name = \"InvalidTickSize\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, me);\n    }\n};\ng.set(8, ()=>new me);\nk.set(\"InvalidTickSize\", ()=>new me);\nvar de = class extends Error {\n    constructor(){\n        super(\"Invalid mint error\");\n        this.code = 9;\n        this.name = \"InvalidMint\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, de);\n    }\n};\ng.set(9, ()=>new de);\nk.set(\"InvalidMint\", ()=>new de);\nvar pe = class extends Error {\n    constructor(){\n        super(\"Invalid base vault error\");\n        this.code = 10;\n        this.name = \"InvalidBaseVault\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, pe);\n    }\n};\ng.set(10, ()=>new pe);\nk.set(\"InvalidBaseVault\", ()=>new pe);\nvar ye = class extends Error {\n    constructor(){\n        super(\"Invalid quote vault error\");\n        this.code = 11;\n        this.name = \"InvalidQuoteVault\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, ye);\n    }\n};\ng.set(11, ()=>new ye);\nk.set(\"InvalidQuoteVault\", ()=>new ye);\nvar fe = class extends Error {\n    constructor(){\n        super(\"Invalid base account error\");\n        this.code = 12;\n        this.name = \"InvalidBaseAccount\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, fe);\n    }\n};\ng.set(12, ()=>new fe);\nk.set(\"InvalidBaseAccount\", ()=>new fe);\nvar ge = class extends Error {\n    constructor(){\n        super(\"Invalid quote account error\");\n        this.code = 13;\n        this.name = \"InvalidQuoteAccount\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, ge);\n    }\n};\ng.set(13, ()=>new ge);\nk.set(\"InvalidQuoteAccount\", ()=>new ge);\nvar ke = class extends Error {\n    constructor(){\n        super(\"Too many events error\");\n        this.code = 14;\n        this.name = \"TooManyEvents\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, ke);\n    }\n};\ng.set(14, ()=>new ke);\nk.set(\"TooManyEvents\", ()=>new ke);\nvar Pe = class extends Error {\n    constructor(){\n        super(\"New order error\");\n        this.code = 15;\n        this.name = \"NewOrderError\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, Pe);\n    }\n};\ng.set(15, ()=>new Pe);\nk.set(\"NewOrderError\", ()=>new Pe);\nvar he = class extends Error {\n    constructor(){\n        super(\"Reduce order error\");\n        this.code = 16;\n        this.name = \"ReduceOrderError\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, he);\n    }\n};\ng.set(16, ()=>new he);\nk.set(\"ReduceOrderError\", ()=>new he);\nvar xe = class extends Error {\n    constructor(){\n        super(\"Cancel multiple orders error\");\n        this.code = 17;\n        this.name = \"CancelMultipleOrdersError\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, xe);\n    }\n};\ng.set(17, ()=>new xe);\nk.set(\"CancelMultipleOrdersError\", ()=>new xe);\nvar we = class extends Error {\n    constructor(){\n        super(\"Withdraw funds error\");\n        this.code = 18;\n        this.name = \"WithdrawFundsError\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, we);\n    }\n};\ng.set(18, ()=>new we);\nk.set(\"WithdrawFundsError\", ()=>new we);\nvar Se = class extends Error {\n    constructor(){\n        super(\"Remove empty orders error\");\n        this.code = 19;\n        this.name = \"RemoveEmptyOrdersError\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, Se);\n    }\n};\ng.set(19, ()=>new Se);\nk.set(\"RemoveEmptyOrdersError\", ()=>new Se);\nvar Ae = class extends Error {\n    constructor(){\n        super(\"Trader not found error\");\n        this.code = 20;\n        this.name = \"TraderNotFound\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, Ae);\n    }\n};\ng.set(20, ()=>new Ae);\nk.set(\"TraderNotFound\", ()=>new Ae);\nvar Ie = class extends Error {\n    constructor(){\n        super(\"Invalid seat status\");\n        this.code = 21;\n        this.name = \"InvalidSeatStatus\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, Ie);\n    }\n};\ng.set(21, ()=>new Ie);\nk.set(\"InvalidSeatStatus\", ()=>new Ie);\nvar Be = class extends Error {\n    constructor(){\n        super(\"Failed to evict trader\");\n        this.code = 22;\n        this.name = \"EvictionError\";\n        typeof Error.captureStackTrace == \"function\" && Error.captureStackTrace(this, Be);\n    }\n};\ng.set(22, ()=>new Be);\nk.set(\"EvictionError\", ()=>new Be);\nfunction Wo(r) {\n    let e = g.get(r);\n    return e != null ? e() : null;\n}\nfunction Eo(r) {\n    let e = k.get(r);\n    return e != null ? e() : null;\n}\nvar _beet = __webpack_require__(/*! @metaplex-foundation/beet */ \"(ssr)/./node_modules/@metaplex-foundation/beet/dist/cjs/src/beet.js\");\nvar L = _interopRequireWildcard(_beet);\nvar Ze = _interopRequireWildcard(_beet);\nvar We = _interopRequireWildcard(_beet);\nvar Lr = _interopRequireWildcard(_beet);\nvar W = _interopRequireWildcard(_beet);\nvar R = _interopRequireWildcard(_beet);\nvar Ee = _interopRequireWildcard(_beet);\nvar G = _interopRequireWildcard(_beet);\nvar Z = _interopRequireWildcard(_beet);\nvar Te = _interopRequireWildcard(_beet);\nvar z = _interopRequireWildcard(_beet);\nvar C = _interopRequireWildcard(_beet);\nvar O = _interopRequireWildcard(_beet);\nvar Ke = _interopRequireWildcard(_beet);\nvar B = _interopRequireWildcard(_beet);\nvar Ue = _interopRequireWildcard(_beet);\nvar Nr = _interopRequireWildcard(_beet);\nvar E = _interopRequireWildcard(_beet);\nvar b = _interopRequireWildcard(_beet);\nvar jr = _interopRequireWildcard(_beet);\nvar P = _interopRequireWildcard(_beet);\nvar q = _interopRequireWildcard(_beet);\nvar V = _interopRequireWildcard(_beet);\nvar J = _interopRequireWildcard(_beet);\nvar tt = _interopRequireWildcard(_beet);\nvar Y = _interopRequireWildcard(_beet);\nvar Yr = _interopRequireWildcard(_beet);\nvar X = _interopRequireWildcard(_beet);\nvar w = _interopRequireWildcard(_beet);\nvar U = _interopRequireWildcard(_beet);\nvar nt = _interopRequireWildcard(_beet);\nvar ot = _interopRequireWildcard(_beet);\nvar st = _interopRequireWildcard(_beet);\nvar at = _interopRequireWildcard(_beet);\nvar ut = _interopRequireWildcard(_beet);\nvar ct = _interopRequireWildcard(_beet);\nvar lt = _interopRequireWildcard(_beet);\nvar bt = _interopRequireWildcard(_beet);\nvar mt = _interopRequireWildcard(_beet);\nvar dt = _interopRequireWildcard(_beet);\nvar pt = _interopRequireWildcard(_beet);\nvar yt = _interopRequireWildcard(_beet);\nvar N = _interopRequireWildcard(_beet);\nvar kt = _interopRequireWildcard(_beet);\nvar ht = _interopRequireWildcard(_beet);\nvar wt = _interopRequireWildcard(_beet);\nvar At = _interopRequireWildcard(_beet);\nvar Bt = _interopRequireWildcard(_beet);\nvar Kt = _interopRequireWildcard(_beet);\nvar Ot = _interopRequireWildcard(_beet);\nvar Lt = _interopRequireWildcard(_beet);\nvar Et = _interopRequireWildcard(_beet);\nvar vt = _interopRequireWildcard(_beet);\nvar Rt = _interopRequireWildcard(_beet);\nvar qt = _interopRequireWildcard(_beet);\nvar Vt = _interopRequireWildcard(_beet);\nvar Qt = _interopRequireWildcard(_beet);\nvar jt = _interopRequireWildcard(_beet);\nvar Gt = _interopRequireWildcard(_beet);\nvar Ht = _interopRequireWildcard(_beet);\nvar Yt = _interopRequireWildcard(_beet);\nvar $t = _interopRequireWildcard(_beet);\nvar _beetsolana = __webpack_require__(/*! @metaplex-foundation/beet-solana */ \"(ssr)/./node_modules/@metaplex-foundation/beet-solana/dist/cjs/src/beet-solana.js\");\nvar tr = _interopRequireWildcard(_beetsolana);\nvar Er = _interopRequireWildcard(_beetsolana);\nvar vr = _interopRequireWildcard(_beetsolana);\nvar Cr = _interopRequireWildcard(_beetsolana);\nvar Vr = _interopRequireWildcard(_beetsolana);\nvar Xe = _interopRequireWildcard(_beetsolana);\nvar ir = _interopRequireWildcard(_beetsolana);\nvar ar = _interopRequireWildcard(_beetsolana);\nvar ei = _interopRequireWildcard(_beetsolana);\nvar Ce = _interopRequireWildcard(_beetsolana);\nvar li = _interopRequireWildcard(_beetsolana);\nvar Fr = new L.BeetArgsStruct([\n    [\n        \"instruction\",\n        L.u8\n    ],\n    [\n        \"sequenceNumber\",\n        L.u64\n    ],\n    [\n        \"timestamp\",\n        L.i64\n    ],\n    [\n        \"slot\",\n        L.u64\n    ],\n    [\n        \"market\",\n        tr.publicKey\n    ],\n    [\n        \"signer\",\n        tr.publicKey\n    ],\n    [\n        \"totalEvents\",\n        L.u16\n    ]\n], \"AuditLogHeader\");\nvar je = ((t)=>(t[t.Bid = 0] = \"Bid\", t[t.Ask = 1] = \"Ask\", t))(je || {}), j = exports.sideBeet = Lr.fixedScalarEnum(je);\nvar Ge = new We.BeetArgsStruct([\n    [\n        \"side\",\n        j\n    ],\n    [\n        \"priceInTicks\",\n        We.u64\n    ],\n    [\n        \"orderSequenceNumber\",\n        We.u64\n    ]\n], \"CancelOrderParams\");\nvar He = new Ze.FixableBeetArgsStruct([\n    [\n        \"orders\",\n        Ze.array(Ge)\n    ]\n], \"CancelMultipleOrdersByIdParams\");\nvar Je = new W.FixableBeetArgsStruct([\n    [\n        \"side\",\n        j\n    ],\n    [\n        \"tickLimit\",\n        W.coption(W.u64)\n    ],\n    [\n        \"numOrdersToSearch\",\n        W.coption(W.u32)\n    ],\n    [\n        \"numOrdersToCancel\",\n        W.coption(W.u32)\n    ]\n], \"CancelUpToParams\");\nvar rr = new R.FixableBeetArgsStruct([\n    [\n        \"priceInTicks\",\n        R.u64\n    ],\n    [\n        \"sizeInBaseLots\",\n        R.u64\n    ],\n    [\n        \"lastValidSlot\",\n        R.coption(R.u64)\n    ],\n    [\n        \"lastValidUnixTimestampInSeconds\",\n        R.coption(R.u64)\n    ]\n], \"CondensedOrder\");\nvar Wr = new Ee.BeetArgsStruct([\n    [\n        \"quoteLotsToDeposit\",\n        Ee.u64\n    ],\n    [\n        \"baseLotsToDeposit\",\n        Ee.u64\n    ]\n], \"DepositParams\");\nvar Ur = new G.BeetArgsStruct([\n    [\n        \"index\",\n        G.u16\n    ],\n    [\n        \"makerId\",\n        Er.publicKey\n    ],\n    [\n        \"orderSequenceNumber\",\n        G.u64\n    ],\n    [\n        \"priceInTicks\",\n        G.u64\n    ],\n    [\n        \"baseLotsEvicted\",\n        G.u64\n    ]\n], \"EvictEvent\");\nvar Dr = new Z.BeetArgsStruct([\n    [\n        \"index\",\n        Z.u16\n    ],\n    [\n        \"makerId\",\n        vr.publicKey\n    ],\n    [\n        \"orderSequenceNumber\",\n        Z.u64\n    ],\n    [\n        \"priceInTicks\",\n        Z.u64\n    ],\n    [\n        \"baseLotsRemoved\",\n        Z.u64\n    ]\n], \"ExpiredOrderEvent\");\nvar Rr = new Te.BeetArgsStruct([\n    [\n        \"index\",\n        Te.u16\n    ],\n    [\n        \"feesCollectedInQuoteLots\",\n        Te.u64\n    ]\n], \"FeeEvent\");\nvar qr = new z.BeetArgsStruct([\n    [\n        \"index\",\n        z.u16\n    ],\n    [\n        \"makerId\",\n        Cr.publicKey\n    ],\n    [\n        \"orderSequenceNumber\",\n        z.u64\n    ],\n    [\n        \"priceInTicks\",\n        z.u64\n    ],\n    [\n        \"baseLotsFilled\",\n        z.u64\n    ],\n    [\n        \"baseLotsRemaining\",\n        z.u64\n    ]\n], \"FillEvent\");\nvar zr = new C.BeetArgsStruct([\n    [\n        \"index\",\n        C.u16\n    ],\n    [\n        \"clientOrderId\",\n        C.u128\n    ],\n    [\n        \"totalBaseLotsFilled\",\n        C.u64\n    ],\n    [\n        \"totalQuoteLotsFilled\",\n        C.u64\n    ],\n    [\n        \"totalFeeInQuoteLots\",\n        C.u64\n    ]\n], \"FillSummaryEvent\");\nvar Ye = new Ke.BeetArgsStruct([\n    [\n        \"bidsSize\",\n        Ke.u64\n    ],\n    [\n        \"asksSize\",\n        Ke.u64\n    ],\n    [\n        \"numSeats\",\n        Ke.u64\n    ]\n], \"MarketSizeParams\");\nvar is = new O.FixableBeetArgsStruct([\n    [\n        \"marketSizeParams\",\n        Ye\n    ],\n    [\n        \"numQuoteLotsPerQuoteUnit\",\n        O.u64\n    ],\n    [\n        \"tickSizeInQuoteLotsPerBaseUnit\",\n        O.u64\n    ],\n    [\n        \"numBaseLotsPerBaseUnit\",\n        O.u64\n    ],\n    [\n        \"takerFeeBps\",\n        O.u16\n    ],\n    [\n        \"feeCollector\",\n        Vr.publicKey\n    ],\n    [\n        \"rawBaseUnitsPerBaseUnit\",\n        O.coption(O.u32)\n    ]\n], \"InitializeParams\");\nvar nr = new Ue.BeetArgsStruct([\n    [\n        \"decimals\",\n        Ue.u32\n    ],\n    [\n        \"vaultBump\",\n        Ue.u32\n    ],\n    [\n        \"mintKey\",\n        ir.publicKey\n    ],\n    [\n        \"vaultKey\",\n        ir.publicKey\n    ]\n], \"TokenParams\");\nvar or = new B.BeetArgsStruct([\n    [\n        \"discriminant\",\n        B.u64\n    ],\n    [\n        \"status\",\n        B.u64\n    ],\n    [\n        \"marketSizeParams\",\n        Ye\n    ],\n    [\n        \"baseParams\",\n        nr\n    ],\n    [\n        \"baseLotSize\",\n        B.u64\n    ],\n    [\n        \"quoteParams\",\n        nr\n    ],\n    [\n        \"quoteLotSize\",\n        B.u64\n    ],\n    [\n        \"tickSizeInQuoteAtomsPerBaseUnit\",\n        B.u64\n    ],\n    [\n        \"authority\",\n        Xe.publicKey\n    ],\n    [\n        \"feeRecipient\",\n        Xe.publicKey\n    ],\n    [\n        \"marketSequenceNumber\",\n        B.u64\n    ],\n    [\n        \"successor\",\n        Xe.publicKey\n    ],\n    [\n        \"rawBaseUnitsPerBaseUnit\",\n        B.u32\n    ],\n    [\n        \"padding1\",\n        B.u32\n    ],\n    [\n        \"padding2\",\n        B.uniformFixedSizeArray(B.u64, 32)\n    ]\n], \"MarketHeader\");\nvar Qr = ((s)=>(s[s.Uninitialized = 0] = \"Uninitialized\", s[s.Active = 1] = \"Active\", s[s.PostOnly = 2] = \"PostOnly\", s[s.Paused = 3] = \"Paused\", s[s.Closed = 4] = \"Closed\", s[s.Tombstoned = 5] = \"Tombstoned\", s))(Qr || {}), _r = exports.marketStatusBeet = Nr.fixedScalarEnum(Qr);\nvar $e = new E.FixableBeetArgsStruct([\n    [\n        \"bids\",\n        E.array(rr)\n    ],\n    [\n        \"asks\",\n        E.array(rr)\n    ],\n    [\n        \"clientOrderId\",\n        E.coption(E.u128)\n    ],\n    [\n        \"rejectPostOnly\",\n        E.bool\n    ]\n], \"MultipleOrderPacket\");\nvar et = ((i)=>(i[i.Abort = 0] = \"Abort\", i[i.CancelProvide = 1] = \"CancelProvide\", i[i.DecrementTake = 2] = \"DecrementTake\", i))(et || {}), sr = exports.selfTradeBehaviorBeet = jr.fixedScalarEnum(et);\nvar hs = (r)=>r.__kind === \"PostOnly\", xs = exports.isOrderPacketLimit = (r)=>r.__kind === \"Limit\", ws = exports.isOrderPacketImmediateOrCancel = (r)=>r.__kind === \"ImmediateOrCancel\", H = exports.orderPacketBeet = b.dataEnum([\n    [\n        \"PostOnly\",\n        new b.FixableBeetArgsStruct([\n            [\n                \"side\",\n                j\n            ],\n            [\n                \"priceInTicks\",\n                b.u64\n            ],\n            [\n                \"numBaseLots\",\n                b.u64\n            ],\n            [\n                \"clientOrderId\",\n                b.u128\n            ],\n            [\n                \"rejectPostOnly\",\n                b.bool\n            ],\n            [\n                \"useOnlyDepositedFunds\",\n                b.bool\n            ],\n            [\n                \"lastValidSlot\",\n                b.coption(b.u64)\n            ],\n            [\n                \"lastValidUnixTimestampInSeconds\",\n                b.coption(b.u64)\n            ]\n        ], 'OrderPacketRecord[\"PostOnly\"]')\n    ],\n    [\n        \"Limit\",\n        new b.FixableBeetArgsStruct([\n            [\n                \"side\",\n                j\n            ],\n            [\n                \"priceInTicks\",\n                b.u64\n            ],\n            [\n                \"numBaseLots\",\n                b.u64\n            ],\n            [\n                \"selfTradeBehavior\",\n                sr\n            ],\n            [\n                \"matchLimit\",\n                b.coption(b.u64)\n            ],\n            [\n                \"clientOrderId\",\n                b.u128\n            ],\n            [\n                \"useOnlyDepositedFunds\",\n                b.bool\n            ],\n            [\n                \"lastValidSlot\",\n                b.coption(b.u64)\n            ],\n            [\n                \"lastValidUnixTimestampInSeconds\",\n                b.coption(b.u64)\n            ]\n        ], 'OrderPacketRecord[\"Limit\"]')\n    ],\n    [\n        \"ImmediateOrCancel\",\n        new b.FixableBeetArgsStruct([\n            [\n                \"side\",\n                j\n            ],\n            [\n                \"priceInTicks\",\n                b.coption(b.u64)\n            ],\n            [\n                \"numBaseLots\",\n                b.u64\n            ],\n            [\n                \"numQuoteLots\",\n                b.u64\n            ],\n            [\n                \"minBaseLotsToFill\",\n                b.u64\n            ],\n            [\n                \"minQuoteLotsToFill\",\n                b.u64\n            ],\n            [\n                \"selfTradeBehavior\",\n                sr\n            ],\n            [\n                \"matchLimit\",\n                b.coption(b.u64)\n            ],\n            [\n                \"clientOrderId\",\n                b.u128\n            ],\n            [\n                \"useOnlyDepositedFunds\",\n                b.bool\n            ],\n            [\n                \"lastValidSlot\",\n                b.coption(b.u64)\n            ],\n            [\n                \"lastValidUnixTimestampInSeconds\",\n                b.coption(b.u64)\n            ]\n        ], 'OrderPacketRecord[\"ImmediateOrCancel\"]')\n    ]\n]);\nvar Gr = new q.BeetArgsStruct([\n    [\n        \"index\",\n        q.u16\n    ],\n    [\n        \"orderSequenceNumber\",\n        q.u64\n    ],\n    [\n        \"clientOrderId\",\n        q.u128\n    ],\n    [\n        \"priceInTicks\",\n        q.u64\n    ],\n    [\n        \"baseLotsPlaced\",\n        q.u64\n    ]\n], \"PlaceEvent\");\nvar Zr = new V.BeetArgsStruct([\n    [\n        \"index\",\n        V.u16\n    ],\n    [\n        \"orderSequenceNumber\",\n        V.u64\n    ],\n    [\n        \"priceInTicks\",\n        V.u64\n    ],\n    [\n        \"baseLotsRemoved\",\n        V.u64\n    ],\n    [\n        \"baseLotsRemaining\",\n        V.u64\n    ]\n], \"ReduceEvent\");\nvar Hr = new J.BeetArgsStruct([\n    [\n        \"index\",\n        J.u16\n    ],\n    [\n        \"orderSequenceNumber\",\n        J.u64\n    ],\n    [\n        \"lastValidSlot\",\n        J.u64\n    ],\n    [\n        \"lastValidUnixTimestampInSeconds\",\n        J.u64\n    ]\n], \"TimeInForceEvent\");\nvar _s = (r)=>r.__kind === \"Uninitialized\", js = exports.isPhoenixMarketEventHeader = (r)=>r.__kind === \"Header\", Gs = exports.isPhoenixMarketEventFill = (r)=>r.__kind === \"Fill\", Zs = exports.isPhoenixMarketEventPlace = (r)=>r.__kind === \"Place\", Hs = exports.isPhoenixMarketEventReduce = (r)=>r.__kind === \"Reduce\", Js = exports.isPhoenixMarketEventEvict = (r)=>r.__kind === \"Evict\", Ys = exports.isPhoenixMarketEventFillSummary = (r)=>r.__kind === \"FillSummary\", Xs = exports.isPhoenixMarketEventFee = (r)=>r.__kind === \"Fee\", $s = exports.isPhoenixMarketEventTimeInForce = (r)=>r.__kind === \"TimeInForce\", ea = exports.isPhoenixMarketEventExpiredOrder = (r)=>r.__kind === \"ExpiredOrder\", Jr = exports.phoenixMarketEventBeet = P.dataEnum([\n    [\n        \"Uninitialized\",\n        P.unit\n    ],\n    [\n        \"Header\",\n        new P.BeetArgsStruct([\n            [\n                \"fields\",\n                P.fixedSizeTuple([\n                    Fr\n                ])\n            ]\n        ], 'PhoenixMarketEventRecord[\"Header\"]')\n    ],\n    [\n        \"Fill\",\n        new P.BeetArgsStruct([\n            [\n                \"fields\",\n                P.fixedSizeTuple([\n                    qr\n                ])\n            ]\n        ], 'PhoenixMarketEventRecord[\"Fill\"]')\n    ],\n    [\n        \"Place\",\n        new P.BeetArgsStruct([\n            [\n                \"fields\",\n                P.fixedSizeTuple([\n                    Gr\n                ])\n            ]\n        ], 'PhoenixMarketEventRecord[\"Place\"]')\n    ],\n    [\n        \"Reduce\",\n        new P.BeetArgsStruct([\n            [\n                \"fields\",\n                P.fixedSizeTuple([\n                    Zr\n                ])\n            ]\n        ], 'PhoenixMarketEventRecord[\"Reduce\"]')\n    ],\n    [\n        \"Evict\",\n        new P.BeetArgsStruct([\n            [\n                \"fields\",\n                P.fixedSizeTuple([\n                    Ur\n                ])\n            ]\n        ], 'PhoenixMarketEventRecord[\"Evict\"]')\n    ],\n    [\n        \"FillSummary\",\n        new P.BeetArgsStruct([\n            [\n                \"fields\",\n                P.fixedSizeTuple([\n                    zr\n                ])\n            ]\n        ], 'PhoenixMarketEventRecord[\"FillSummary\"]')\n    ],\n    [\n        \"Fee\",\n        new P.BeetArgsStruct([\n            [\n                \"fields\",\n                P.fixedSizeTuple([\n                    Rr\n                ])\n            ]\n        ], 'PhoenixMarketEventRecord[\"Fee\"]')\n    ],\n    [\n        \"TimeInForce\",\n        new P.BeetArgsStruct([\n            [\n                \"fields\",\n                P.fixedSizeTuple([\n                    Hr\n                ])\n            ]\n        ], 'PhoenixMarketEventRecord[\"TimeInForce\"]')\n    ],\n    [\n        \"ExpiredOrder\",\n        new P.BeetArgsStruct([\n            [\n                \"fields\",\n                P.fixedSizeTuple([\n                    Dr\n                ])\n            ]\n        ], 'PhoenixMarketEventRecord[\"ExpiredOrder\"]')\n    ]\n]);\nvar rt = new tt.BeetArgsStruct([\n    [\n        \"baseParams\",\n        Ge\n    ],\n    [\n        \"size\",\n        tt.u64\n    ]\n], \"ReduceOrderParams\");\nvar oa = new Y.BeetArgsStruct([\n    [\n        \"discriminant\",\n        Y.u64\n    ],\n    [\n        \"market\",\n        ar.publicKey\n    ],\n    [\n        \"trader\",\n        ar.publicKey\n    ],\n    [\n        \"approvalStatus\",\n        Y.u64\n    ],\n    [\n        \"padding\",\n        Y.uniformFixedSizeArray(Y.u64, 6)\n    ]\n], \"Seat\");\nvar Xr = ((i)=>(i[i.NotApproved = 0] = \"NotApproved\", i[i.Approved = 1] = \"Approved\", i[i.Retired = 2] = \"Retired\", i))(Xr || {}), aa = exports.seatApprovalStatusBeet = Yr.fixedScalarEnum(Xr);\nvar $r = new X.FixableBeetArgsStruct([\n    [\n        \"quoteLotsToWithdraw\",\n        X.coption(X.u64)\n    ],\n    [\n        \"baseLotsToWithdraw\",\n        X.coption(X.u64)\n    ]\n], \"WithdrawParams\");\nvar _bnjs = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nvar _bnjs2 = _interopRequireDefault(_bnjs);\nfunction y(r) {\n    let e;\n    return typeof r == \"number\" ? e = r : e = r.toNumber(), e;\n}\nfunction T(r) {\n    return typeof r == \"number\" ? new (0, _bnjs2.default)(r) : r.clone();\n}\nfunction ve(r) {\n    return r.lt(new (0, _bnjs2.default)(0)) ? -1 : r.gt(new (0, _bnjs2.default)(0)) ? 1 : 0;\n}\nvar _spltoken = __webpack_require__(/*! @solana/spl-token */ \"(ssr)/./node_modules/@solana/spl-token/lib/cjs/index.js\");\nvar ai = _interopRequireWildcard(_spltoken);\nvar Mi = _interopRequireWildcard(_spltoken);\nvar Li = _interopRequireWildcard(_spltoken);\nvar Ui = _interopRequireWildcard(_spltoken);\nvar Ri = _interopRequireWildcard(_spltoken);\nvar qi = _interopRequireWildcard(_spltoken);\nvar Ni = _interopRequireWildcard(_spltoken);\nvar ji = _interopRequireWildcard(_spltoken);\nvar Ji = _interopRequireWildcard(_spltoken);\nvar $i = _interopRequireWildcard(_spltoken);\nvar cr = new w.BeetArgsStruct([\n    [\n        \"publicKey\",\n        ei.publicKey\n    ]\n], \"PubkeyWrapper\"), De = new w.BeetArgsStruct([\n    [\n        \"priceInTicks\",\n        w.u64\n    ],\n    [\n        \"orderSequenceNumber\",\n        w.u64\n    ]\n], \"fIFOOrderId\"), Re = new w.BeetArgsStruct([\n    [\n        \"traderIndex\",\n        w.u64\n    ],\n    [\n        \"numBaseLots\",\n        w.u64\n    ],\n    [\n        \"lastValidSlot\",\n        w.u64\n    ],\n    [\n        \"lastValidUnixTimestampInSeconds\",\n        w.u64\n    ]\n], \"fIFORestingOrder\"), it = new w.BeetArgsStruct([\n    [\n        \"quoteLotsLocked\",\n        w.u64\n    ],\n    [\n        \"quoteLotsFree\",\n        w.u64\n    ],\n    [\n        \"baseLotsLocked\",\n        w.u64\n    ],\n    [\n        \"baseLotsFree\",\n        w.u64\n    ],\n    [\n        \"padding\",\n        w.uniformFixedSizeArray(w.u64, 8)\n    ]\n], \"TraderState\");\nfunction lr(r, e, t, i) {\n    return p(this, null, function*() {\n        let n = yield _spltoken.getAssociatedTokenAddress.call(void 0, i, e), o = yield r.getAccountInfo(n, \"confirmed\"), s = [];\n        return (o === null || o.data.length == 0) && s.push(_spltoken.createAssociatedTokenAccountInstruction.call(void 0, t, n, e, i)), s;\n    });\n}\nvar _a = new nt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        nt.u8\n    ]\n], \"AddDesignatedMarketMakerInstructionArgs\");\nvar Ga = new ot.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        ot.u8\n    ]\n], \"ChangeMarketFeeRecipientInstructionArgs\");\nvar Ya = new st.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        st.u8\n    ],\n    [\n        \"marketStatus\",\n        _r\n    ]\n], \"ChangeMarketStatusInstructionArgs\");\nvar eu = new at.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        at.u8\n    ]\n], \"ClaimMarketAuthorityInstructionArgs\");\nvar wn = new ut.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        ut.u8\n    ]\n], \"ClaimSeatInstructionArgs\"), Sn = 1;\nfunction ni(r, e = new Me.PublicKey(\"PSMxQbAoDWDbvd9ezQJgARyq6R9L5kJAasaLDVcZwf1\")) {\n    var o;\n    let [t] = wn.serialize({\n        instructionDiscriminator: Sn\n    }), i = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.seatManager,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.seatDepositCollector,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.payer,\n            isWritable: !0,\n            isSigner: !0\n        },\n        {\n            pubkey: r.seat,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: (o = r.systemProgram) != null ? o : Me.SystemProgram.programId,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Me.TransactionInstruction({\n        programId: e,\n        keys: i,\n        data: t\n    });\n}\nvar iu = new ct.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        ct.u8\n    ]\n], \"ClaimSeatAuthorizedInstructionArgs\");\nvar ou = new lt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        lt.u8\n    ]\n], \"ClaimSeatManagerAuthorityInstructionArgs\");\nvar au = new bt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        bt.u8\n    ]\n], \"ConfirmRenounceSeatManagerAuthorityInstructionArgs\");\nvar An = new mt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        mt.u8\n    ]\n], \"EvictSeatInstructionArgs\"), In = 3;\nfunction ui(r, e = new Oe.PublicKey(\"PSMxQbAoDWDbvd9ezQJgARyq6R9L5kJAasaLDVcZwf1\")) {\n    var o, s;\n    let [t] = An.serialize({\n        instructionDiscriminator: In\n    }), i = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.seatManager,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.seatDepositCollector,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseMint,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteMint,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.associatedTokenAccountProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: (o = r.tokenProgram) != null ? o : ai.TOKEN_PROGRAM_ID,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: (s = r.systemProgram) != null ? s : Oe.SystemProgram.programId,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.signer,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.seat,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseAccountBackup,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteAccountBackup,\n            isWritable: !0,\n            isSigner: !1\n        }\n    ];\n    return new Oe.TransactionInstruction({\n        programId: e,\n        keys: i,\n        data: t\n    });\n}\nvar lu = new dt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        dt.u8\n    ],\n    [\n        \"successor\",\n        li.publicKey\n    ]\n], \"NameMarketAuthoritySuccessorInstructionArgs\");\nvar du = new pt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        pt.u8\n    ]\n], \"NameSuccessorInstructionArgs\");\nvar yu = new yt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        yt.u8\n    ]\n], \"RemoveDesignatedMarketMakerInstructionArgs\");\nvar Tn = \"PSMxQbAoDWDbvd9ezQJgARyq6R9L5kJAasaLDVcZwf1\", dr = new (0, _web3js.PublicKey)(Tn);\nfunction Kn(r) {\n    return Mn.deserialize(r, 0)[0];\n}\nvar Mn = new U.BeetArgsStruct([\n    [\n        \"market\",\n        Ce.publicKey\n    ],\n    [\n        \"authority\",\n        Ce.publicKey\n    ],\n    [\n        \"successor\",\n        Ce.publicKey\n    ],\n    [\n        \"numMakers\",\n        U.u64\n    ],\n    [\n        \"_headerPadding\",\n        U.uniformFixedSizeArray(U.u64, 11)\n    ],\n    [\n        \"designatedMarketMaker\",\n        U.uniformFixedSizeArray(Ce.publicKey, 128)\n    ],\n    [\n        \"_dmmPadding\",\n        U.uniformFixedSizeArray(U.u128, 128)\n    ]\n], \"SeatManagerData\");\nfunction yr(r) {\n    return _web3js.PublicKey.findProgramAddressSync([\n        r.toBuffer()\n    ], dr)[0];\n}\nfunction pi(r) {\n    return _web3js.PublicKey.findProgramAddressSync([\n        r.toBuffer(),\n        Buffer.from(\"deposit\")\n    ], dr)[0];\n}\nfunction yi(r, e) {\n    let t = yr(r), i = pi(r), n = qe(r, e), o = x();\n    return ni({\n        phoenixProgram: f,\n        logAuthority: o,\n        market: r,\n        seatManager: t,\n        seatDepositCollector: i,\n        trader: e,\n        payer: e,\n        seat: n\n    });\n}\nfunction fi(r, e, t, i, n) {\n    let o = yr(r.address), s = pi(r.address), a = qe(r.address, e), u = x(), c = _web3js.PublicKey.findProgramAddressSync([\n        e.toBuffer(),\n        _spltoken.TOKEN_PROGRAM_ID.toBuffer(),\n        r.data.header.baseParams.mintKey.toBuffer()\n    ], _spltoken.ASSOCIATED_TOKEN_PROGRAM_ID)[0], l = _web3js.PublicKey.findProgramAddressSync([\n        e.toBuffer(),\n        _spltoken.TOKEN_PROGRAM_ID.toBuffer(),\n        r.data.header.quoteParams.mintKey.toBuffer()\n    ], _spltoken.ASSOCIATED_TOKEN_PROGRAM_ID)[0], d = {\n        phoenixProgram: f,\n        logAuthority: u,\n        market: r.address,\n        seatManager: o,\n        seatDepositCollector: s,\n        baseMint: r.data.header.baseParams.mintKey,\n        quoteMint: r.data.header.quoteParams.mintKey,\n        baseVault: r.data.header.baseParams.vaultKey,\n        quoteVault: r.data.header.quoteParams.vaultKey,\n        associatedTokenAccountProgram: _spltoken.ASSOCIATED_TOKEN_PROGRAM_ID,\n        signer: t,\n        trader: e,\n        seat: a,\n        baseAccount: c,\n        quoteAccount: l,\n        baseAccountBackup: i != null ? i : _web3js.PublicKey.default,\n        quoteAccountBackup: n != null ? n : _web3js.PublicKey.default\n    };\n    return ui(d);\n}\nfunction fr(r, e, t) {\n    return p(this, null, function*() {\n        let i = e.getSeatAddress(t), n = [], o;\n        try {\n            o = yield r.getAccountInfo(i, \"confirmed\");\n        } catch (s) {\n            o = null;\n        }\n        if (o === null || o.data.length == 0) {\n            let s = yield gi(r, e);\n            s && n.push(fi(e, s, t)), n.push(yi(e.address, t));\n        }\n        return n;\n    });\n}\nfunction qu(r, e, t) {\n    return p(this, null, function*() {\n        let i = [], n = yield gi(r, e);\n        return n && i.push(fi(e, n, t)), i.push(yi(e.address, t)), i;\n    });\n}\nfunction gi(r, e) {\n    return p(this, null, function*() {\n        let t = e.data.traders, i = yr(e.address), n = Kn((yield r.getAccountInfo(i, \"confirmed\")).data);\n        if (t.size >= Number(e.data.header.marketSizeParams.numSeats)) {\n            for (let [o, s] of t)if (s.baseLotsLocked == 0 && s.quoteLotsLocked == 0) {\n                if (n.designatedMarketMaker.includes(new (0, _web3js.PublicKey)(o))) continue;\n                return new (0, _web3js.PublicKey)(o);\n            }\n        }\n    });\n}\nvar ee = 10, re = exports.DEFAULT_L3_BOOK_DEPTH = 20, Si = exports.DEFAULT_MATCH_LIMIT = 2048, kr = exports.DEFAULT_SLIPPAGE_PERCENT = .005;\nfunction qe(r, e) {\n    return _web3js.PublicKey.findProgramAddressSync([\n        Buffer.from(\"seat\"),\n        r.toBuffer(),\n        e.toBuffer()\n    ], f)[0];\n}\nfunction Ve(r) {\n    let e = or.byteSize, [t] = or.deserialize(r.subarray(0, e)), i = 8 * 32, n = r.subarray(e + i);\n    e = 0;\n    let o = Number(n.readBigUInt64LE(e));\n    e += 8;\n    let s = Number(n.readBigUInt64LE(e));\n    e += 8;\n    let a = Number(n.readBigUInt64LE(e));\n    e += 8;\n    let u = Number(n.readBigUInt64LE(e));\n    e += 8;\n    let c = Number(n.readBigUInt64LE(e));\n    e += 8;\n    let l = Number(n.readBigUInt64LE(e));\n    e += 8, n = n.subarray(e);\n    let d = y(t.marketSizeParams.bidsSize), h = y(t.marketSizeParams.asksSize), S = y(t.marketSizeParams.numSeats), A = 16 + 16 + (16 + De.byteSize + Re.byteSize) * d, K = 16 + 16 + (16 + De.byteSize + Re.byteSize) * h, I = 16 + 16 + (16 + 32 + it.byteSize) * S;\n    e = 0;\n    let F = n.subarray(e, e + A);\n    e += A;\n    let _e = n.subarray(e, e + K);\n    e += K;\n    let Ir = n.subarray(e, e + I), dn = gr(F, De, Re), pn = gr(_e, De, Re), yn = [\n        ...dn\n    ].sort((v, D)=>{\n        let Le = ve(T(D[0].priceInTicks).sub(T(v[0].priceInTicks)));\n        return Le !== 0 ? Le : ve(ze(v[0]).sub(ze(D[0])));\n    }), fn = [\n        ...pn\n    ].sort((v, D)=>{\n        let Le = ve(T(v[0].priceInTicks).sub(T(D[0].priceInTicks)));\n        return Le !== 0 ? Le : ve(ze(v[0]).sub(ze(D[0])));\n    }), Br = new Map;\n    for (let [v, D] of gr(Ir, cr, it))Br.set(v.publicKey.toString(), D);\n    let Tr = new Map, Kr = new Map;\n    for (let [v, D] of Wn(Ir, cr, it))Tr.set(v.publicKey.toString(), D), Kr.set(D, v.publicKey.toString());\n    return {\n        header: t,\n        baseLotsPerBaseUnit: o,\n        quoteLotsPerBaseUnitPerTick: s,\n        sequenceNumber: a,\n        takerFeeBps: u,\n        collectedQuoteLotFees: c,\n        unclaimedQuoteLotFees: l,\n        bids: yn,\n        asks: fn,\n        traders: Br,\n        traderPubkeyToTraderIndex: Tr,\n        traderIndexToTraderPubkey: Kr\n    };\n}\nfunction gr(r, e, t) {\n    let i = new Map, n = Ai(r, e, t), o = n[0], s = n[1];\n    for (let [a, [u, c]] of o.entries())s.has(a) || i.set(u, c);\n    return i;\n}\nfunction Wn(r, e, t) {\n    let i = new Map, n = Ai(r, e, t), o = n[0], s = n[1];\n    for (let [a, [u]] of o.entries())s.has(a) || i.set(u, a + 1);\n    return i;\n}\nfunction ze(r) {\n    let e = r.orderSequenceNumber.fromTwos(64);\n    return e.isNeg() ? e.neg().sub(new (0, _bnjs2.default)(1)) : e;\n}\nfunction En(r) {\n    let e = r.orderSequenceNumber;\n    return r.side === 0 && (e = e.add(T(1)).neg().toTwos(64)), e;\n}\nfunction cc(r) {\n    return {\n        side: r.side,\n        orderSequenceNumber: En(r),\n        priceInTicks: r.priceInTicks\n    };\n}\nfunction Ai(r, e, t) {\n    let i = 0, n = e.byteSize, o = t.byteSize, s = new Array;\n    i += 16, i += 8;\n    let a = r.readInt32LE(i);\n    i += 4;\n    let u = r.readInt32LE(i);\n    i += 4;\n    let c = new Array;\n    for(let S = 0; i < r.length && S < a - 1; S++){\n        let A = new Array;\n        for(let F = 0; F < 4; F++)A.push(r.readInt32LE(i)), i += 4;\n        let [K] = e.deserialize(r.subarray(i, i + n));\n        i += n;\n        let [I] = t.deserialize(r.subarray(i, i + o));\n        i += o, s.push([\n            K,\n            I\n        ]), c.push([\n            S,\n            A[0]\n        ]);\n    }\n    let l = new Set, d = u - 1, h = 0;\n    for(; u < a;)if ([d, u] = c[u - 1], l.add(d), h += 1, h > a) throw new Error(\"Infinite loop detected\");\n    return [\n        s,\n        l\n    ];\n}\nfunction lc(r, e, t, i = ee) {\n    return r.getLadder(e, t, i);\n}\nfunction bc(r, e, t) {\n    return r.levelToUiLevel(e, t);\n}\nfunction Pr(r, e = ee, t = 0, i = 0) {\n    return r.getUiLadder(e, t, i);\n}\nfunction Ii(r) {\n    let e = r.bids, t = r.asks, n = Math.max(...e.map((s)=>s[1]), ...t.map((s)=>s[1])).toString().length, o = (s, a, u)=>{\n        let c = s.toFixed(3), l = a.toFixed(2).padStart(n, \" \");\n        console.log(c + `\\x1B[3${u === \"green\" ? 2 : 1}m` + l + \"\\x1b[0m\");\n    };\n    console.log(\"\\x1b[30mAsks\\x1b[0m\");\n    for (let { price: s, quantity: a } of t.reverse())o(s, a, \"red\");\n    console.log(\"\\x1b[30mBids\\x1b[0m\");\n    for (let { price: s, quantity: a } of e)o(s, a, \"green\");\n}\nfunction gt(r, e, t, i = re) {\n    let n = [], o = [];\n    for (let s of [\n        1,\n        0\n    ]){\n        let a = s === 1 ? r.asks : r.bids;\n        for (let [u, c] of a){\n            if (c.lastValidSlot != 0 && c.lastValidSlot < e || c.lastValidUnixTimestampInSeconds != 0 && c.lastValidUnixTimestampInSeconds < t) continue;\n            let l = T(u.priceInTicks), d = T(c.numBaseLots), h = {\n                priceInTicks: l,\n                sizeInBaseLots: d,\n                side: s,\n                makerPubkey: r.traderIndexToTraderPubkey.get(y(c.traderIndex)),\n                orderSequenceNumber: ze(u),\n                lastValidSlot: T(c.lastValidSlot),\n                lastValidUnixTimestampInSeconds: T(c.lastValidUnixTimestampInSeconds)\n            };\n            if (s === 1 ? o.push(h) : n.push(h), s === 1 && o.length === i || s === 0 && n.length === i) break;\n        }\n    }\n    return {\n        asks: o,\n        bids: n\n    };\n}\nfunction hr(r, e = re, t = 0, i = 0) {\n    let n = gt(r, t, i, e);\n    return {\n        bids: n.bids.map((o)=>wi(o, r)),\n        asks: n.asks.map((o)=>wi(o, r))\n    };\n}\nfunction wi(r, e) {\n    return {\n        price: y(r.priceInTicks) * e.quoteLotsPerBaseUnitPerTick * y(e.header.quoteLotSize) / (M(10, e.header.quoteParams.decimals) * e.header.rawBaseUnitsPerBaseUnit),\n        side: r.side,\n        size: y(r.sizeInBaseLots) * e.header.rawBaseUnitsPerBaseUnit / e.baseLotsPerBaseUnit,\n        makerPubkey: r.makerPubkey,\n        orderSequenceNumber: r.orderSequenceNumber.toString(),\n        lastValidSlot: y(r.lastValidSlot),\n        lastValidUnixTimestampInSeconds: y(r.lastValidUnixTimestampInSeconds)\n    };\n}\nfunction mc({ market: r, trader: e, side: t, inAmount: i, slippage: n = kr, clientOrderId: o = 0, idempotent: s = !1 }) {\n    let a = r.data.header.quoteParams.mintKey, u = r.data.header.baseParams.mintKey, c = r.getBaseAccountKey(e), l = r.getQuoteAccountKey(e), d = new _web3js.Transaction;\n    (u.equals(_spltoken.NATIVE_MINT) || s) && d.add(_spltoken.createAssociatedTokenAccountIdempotentInstruction.call(void 0, e, c, e, u, _spltoken.TOKEN_PROGRAM_ID, _spltoken.ASSOCIATED_TOKEN_PROGRAM_ID)), (a.equals(_spltoken.NATIVE_MINT) || s) && d.add(_spltoken.createAssociatedTokenAccountIdempotentInstruction.call(void 0, e, l, e, a, _spltoken.TOKEN_PROGRAM_ID, _spltoken.ASSOCIATED_TOKEN_PROGRAM_ID));\n    let h = r.getSwapOrderPacket({\n        side: t,\n        inAmount: i,\n        slippage: n,\n        clientOrderId: o\n    }), S = r.createSwapInstruction(h, e);\n    return d.add(S), u.equals(_spltoken.NATIVE_MINT) && d.add(_spltoken.createCloseAccountInstruction.call(void 0, c, e, e)), a.equals(_spltoken.NATIVE_MINT) && d.add(_spltoken.createCloseAccountInstruction.call(void 0, l, e, e)), d;\n}\nfunction xr({ uiLadder: r, side: e, takerFeeBps: t, inAmount: i }) {\n    return e == 0 ? Un({\n        uiLadder: r,\n        takerFeeBps: t,\n        quoteUnitsIn: i\n    }) : vn({\n        uiLadder: r,\n        takerFeeBps: t,\n        rawBaseUnitsIn: i\n    });\n}\nfunction Bi({ uiLadder: r, side: e, takerFeeBps: t, outAmount: i }) {\n    return e == 0 ? Rn({\n        uiLadder: r,\n        takerFeeBps: t,\n        rawBaseUnitsOut: i\n    }) : Dn({\n        uiLadder: r,\n        takerFeeBps: t,\n        quoteUnitsOut: i\n    });\n}\nfunction Un({ uiLadder: r, takerFeeBps: e, quoteUnitsIn: t }) {\n    return Ti({\n        sideOfBook: r.asks,\n        quoteAmountBudget: t / (1 + e / 1e4)\n    });\n}\nfunction vn({ uiLadder: r, takerFeeBps: e, rawBaseUnitsIn: t }) {\n    return Ki({\n        sideOfBook: r.bids,\n        baseAmountBudget: t\n    }) * (1 - e / 1e4);\n}\nfunction Dn({ uiLadder: r, takerFeeBps: e, quoteUnitsOut: t }) {\n    return Ti({\n        sideOfBook: r.bids,\n        quoteAmountBudget: t / (1 - e / 1e4)\n    });\n}\nfunction Rn({ uiLadder: r, takerFeeBps: e, rawBaseUnitsOut: t }) {\n    return Ki({\n        sideOfBook: r.asks,\n        baseAmountBudget: t\n    }) * (1 + e / 1e4);\n}\nfunction Ti({ sideOfBook: r, quoteAmountBudget: e }) {\n    let t = e, i = 0;\n    for (let { price: n, quantity: o } of r)if (n * o >= t) {\n        i += t / n, t = 0;\n        break;\n    } else i += o, t -= n * o;\n    return i;\n}\nfunction Ki({ sideOfBook: r, baseAmountBudget: e }) {\n    let t = e, i = 0;\n    for (let { price: n, quantity: o } of r)if (o >= t) {\n        i += t * n, t = 0;\n        break;\n    } else i += o * n, t -= o;\n    return i;\n}\nfunction Cn(r, e, t) {\n    return p(this, null, function*() {\n        let i = yield lr(r, t, t, e.data.header.baseParams.mintKey), n = yield lr(r, t, t, e.data.header.quoteParams.mintKey), o = yield fr(r, e, t);\n        return [\n            ...i,\n            ...n,\n            ...o\n        ];\n    });\n}\nfunction dc(r, e, t, i) {\n    return p(this, null, function*() {\n        let n = yield Cn(r, e, t);\n        return n.push(e.createPlaceLimitOrderInstruction(i, t)), n;\n    });\n}\nfunction pc(r, e, t, i) {\n    return p(this, null, function*() {\n        let n = [], o = yield fr(r, e, t);\n        return n.push(...o), n.push(e.createPlaceLimitOrderInstruction(i, t)), n;\n    });\n}\nfunction wr(r) {\n    return r.includes(\"dev\") ? \"devnet\" : r.includes(\"local\") || r.includes(\"127.0.0.1\") ? \"localhost\" : \"mainnet-beta\";\n}\nfunction Ne(r) {\n    let [e] = qn.deserialize(r, 0);\n    return e;\n}\nvar qn = new N.BeetArgsStruct([\n    [\n        \"slot\",\n        N.u64\n    ],\n    [\n        \"epochStartTime\",\n        N.i64\n    ],\n    [\n        \"epoch\",\n        N.u64\n    ],\n    [\n        \"leaderScheduleEpoch\",\n        N.u64\n    ],\n    [\n        \"unixTimestamp\",\n        N.i64\n    ]\n], \"ClockData\");\nvar zn = new kt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        kt.u8\n    ]\n], \"CancelAllOrdersInstructionArgs\"), Vn = exports.cancelAllOrdersInstructionDiscriminator = 6;\nfunction Oi(r, e = new Pt.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    var o;\n    let [t] = zn.serialize({\n        instructionDiscriminator: Vn\n    }), i = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.baseAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: (o = r.tokenProgram) != null ? o : Mi.TOKEN_PROGRAM_ID,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Pt.TransactionInstruction({\n        programId: e,\n        keys: i,\n        data: t\n    });\n}\nvar Nn = new ht.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        ht.u8\n    ]\n], \"CancelAllOrdersWithFreeFundsInstructionArgs\"), Qn = exports.cancelAllOrdersWithFreeFundsInstructionDiscriminator = 7;\nfunction Fi(r, e = new xt.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    let [t] = Nn.serialize({\n        instructionDiscriminator: Qn\n    }), i = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        }\n    ];\n    return new xt.TransactionInstruction({\n        programId: e,\n        keys: i,\n        data: t\n    });\n}\nvar _n = new wt.FixableBeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        wt.u8\n    ],\n    [\n        \"params\",\n        He\n    ]\n], \"CancelMultipleOrdersByIdInstructionArgs\"), jn = exports.cancelMultipleOrdersByIdInstructionDiscriminator = 10;\nfunction Wi(r, e, t = new St.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    var s;\n    let [i] = _n.serialize(m({\n        instructionDiscriminator: jn\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.baseAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: (s = r.tokenProgram) != null ? s : Li.TOKEN_PROGRAM_ID,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new St.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar Gn = new At.FixableBeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        At.u8\n    ],\n    [\n        \"params\",\n        He\n    ]\n], \"CancelMultipleOrdersByIdWithFreeFundsInstructionArgs\"), Zn = exports.cancelMultipleOrdersByIdWithFreeFundsInstructionDiscriminator = 11;\nfunction Ei(r, e, t = new It.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    let [i] = Gn.serialize(m({\n        instructionDiscriminator: Zn\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        }\n    ];\n    return new It.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar Hn = new Bt.FixableBeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        Bt.u8\n    ],\n    [\n        \"params\",\n        Je\n    ]\n], \"CancelUpToInstructionArgs\"), Jn = exports.cancelUpToInstructionDiscriminator = 8;\nfunction vi(r, e, t = new Tt.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    var s;\n    let [i] = Hn.serialize(m({\n        instructionDiscriminator: Jn\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.baseAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: (s = r.tokenProgram) != null ? s : Ui.TOKEN_PROGRAM_ID,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Tt.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar Yn = new Kt.FixableBeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        Kt.u8\n    ],\n    [\n        \"params\",\n        Je\n    ]\n], \"CancelUpToWithFreeFundsInstructionArgs\"), Xn = exports.cancelUpToWithFreeFundsInstructionDiscriminator = 9;\nfunction Di(r, e, t = new Mt.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    let [i] = Yn.serialize(m({\n        instructionDiscriminator: Xn\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        }\n    ];\n    return new Mt.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar $n = new Ot.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        Ot.u8\n    ],\n    [\n        \"depositFundsParams\",\n        Wr\n    ]\n], \"DepositFundsInstructionArgs\"), eo = exports.depositFundsInstructionDiscriminator = 13;\nfunction Ci(r, e, t = new Ft.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    var s;\n    let [i] = $n.serialize(m({\n        instructionDiscriminator: eo\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.seat,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: (s = r.tokenProgram) != null ? s : Ri.TOKEN_PROGRAM_ID,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Ft.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar to = new Lt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        Lt.u8\n    ]\n], \"LogInstructionArgs\"), Sr = exports.logInstructionDiscriminator = 15;\nfunction jc(r, e = new Wt.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    let [t] = to.serialize({\n        instructionDiscriminator: Sr\n    }), i = [\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !0\n        }\n    ];\n    return new Wt.TransactionInstruction({\n        programId: e,\n        keys: i,\n        data: t\n    });\n}\nvar ro = new Et.FixableBeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        Et.u8\n    ],\n    [\n        \"orderPacket\",\n        H\n    ]\n], \"PlaceLimitOrderInstructionArgs\"), io = exports.placeLimitOrderInstructionDiscriminator = 2;\nfunction zi(r, e, t = new Ut.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    var s;\n    let [i] = ro.serialize(m({\n        instructionDiscriminator: io\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.seat,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: (s = r.tokenProgram) != null ? s : qi.TOKEN_PROGRAM_ID,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Ut.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar no = new vt.FixableBeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        vt.u8\n    ],\n    [\n        \"orderPacket\",\n        H\n    ]\n], \"PlaceLimitOrderWithFreeFundsInstructionArgs\"), oo = exports.placeLimitOrderWithFreeFundsInstructionDiscriminator = 3;\nfunction Vi(r, e, t = new Dt.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    let [i] = no.serialize(m({\n        instructionDiscriminator: oo\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.seat,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Dt.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar so = new Rt.FixableBeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        Rt.u8\n    ],\n    [\n        \"multipleOrderPacket\",\n        $e\n    ]\n], \"PlaceMultiplePostOnlyOrdersInstructionArgs\"), ao = exports.placeMultiplePostOnlyOrdersInstructionDiscriminator = 16;\nfunction Qi(r, e, t = new Ct.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    var s;\n    let [i] = so.serialize(m({\n        instructionDiscriminator: ao\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.seat,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: (s = r.tokenProgram) != null ? s : Ni.TOKEN_PROGRAM_ID,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Ct.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar uo = new qt.FixableBeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        qt.u8\n    ],\n    [\n        \"multipleOrderPacket\",\n        $e\n    ]\n], \"PlaceMultiplePostOnlyOrdersWithFreeFundsInstructionArgs\"), co = exports.placeMultiplePostOnlyOrdersWithFreeFundsInstructionDiscriminator = 17;\nfunction _i(r, e, t = new zt.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    let [i] = uo.serialize(m({\n        instructionDiscriminator: co\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.seat,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new zt.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar lo = new Vt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        Vt.u8\n    ],\n    [\n        \"params\",\n        rt\n    ]\n], \"ReduceOrderInstructionArgs\"), bo = exports.reduceOrderInstructionDiscriminator = 4;\nfunction Gi(r, e, t = new Nt.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    var s;\n    let [i] = lo.serialize(m({\n        instructionDiscriminator: bo\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.baseAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: (s = r.tokenProgram) != null ? s : ji.TOKEN_PROGRAM_ID,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Nt.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar mo = new Qt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        Qt.u8\n    ],\n    [\n        \"params\",\n        rt\n    ]\n], \"ReduceOrderWithFreeFundsInstructionArgs\"), po = exports.reduceOrderWithFreeFundsInstructionDiscriminator = 5;\nfunction Zi(r, e, t = new _t.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    let [i] = mo.serialize(m({\n        instructionDiscriminator: po\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !0,\n            isSigner: !0\n        }\n    ];\n    return new _t.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar yo = new jt.BeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        jt.u8\n    ]\n], \"RequestSeatInstructionArgs\"), fo = exports.requestSeatInstructionDiscriminator = 14;\nfunction Hi(r, e = new Fe.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    var o;\n    let [t] = yo.serialize({\n        instructionDiscriminator: fo\n    }), i = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.payer,\n            isWritable: !0,\n            isSigner: !0\n        },\n        {\n            pubkey: r.seat,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: (o = r.systemProgram) != null ? o : Fe.SystemProgram.programId,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Fe.TransactionInstruction({\n        programId: e,\n        keys: i,\n        data: t\n    });\n}\nvar go = new Gt.FixableBeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        Gt.u8\n    ],\n    [\n        \"orderPacket\",\n        H\n    ]\n], \"SwapInstructionArgs\"), ko = exports.swapInstructionDiscriminator = 0;\nfunction Yi(r, e, t = new Zt.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    var s;\n    let [i] = go.serialize(m({\n        instructionDiscriminator: ko\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.baseAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: (s = r.tokenProgram) != null ? s : Ji.TOKEN_PROGRAM_ID,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Zt.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar Po = new Ht.FixableBeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        Ht.u8\n    ],\n    [\n        \"orderPacket\",\n        H\n    ]\n], \"SwapWithFreeFundsInstructionArgs\"), ho = exports.swapWithFreeFundsInstructionDiscriminator = 1;\nfunction Xi(r, e, t = new Jt.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    let [i] = Po.serialize(m({\n        instructionDiscriminator: ho\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.seat,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Jt.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar xo = new Yt.FixableBeetArgsStruct([\n    [\n        \"instructionDiscriminator\",\n        Yt.u8\n    ],\n    [\n        \"withdrawFundsParams\",\n        $r\n    ]\n], \"WithdrawFundsInstructionArgs\"), wo = exports.withdrawFundsInstructionDiscriminator = 12;\nfunction en(r, e, t = new Xt.PublicKey(\"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\")) {\n    var s;\n    let [i] = xo.serialize(m({\n        instructionDiscriminator: wo\n    }, e)), n = [\n        {\n            pubkey: r.phoenixProgram,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.logAuthority,\n            isWritable: !1,\n            isSigner: !1\n        },\n        {\n            pubkey: r.market,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.trader,\n            isWritable: !1,\n            isSigner: !0\n        },\n        {\n            pubkey: r.baseAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteAccount,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.baseVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: r.quoteVault,\n            isWritable: !0,\n            isSigner: !1\n        },\n        {\n            pubkey: (s = r.tokenProgram) != null ? s : $i.TOKEN_PROGRAM_ID,\n            isWritable: !1,\n            isSigner: !1\n        }\n    ];\n    return new Xt.TransactionInstruction({\n        programId: t,\n        keys: n,\n        data: i\n    });\n}\nvar Qe = class {\n    constructor({ name: e, symbol: t, logoUri: i, data: n }){\n        this.name = e, this.symbol = t, this.logoUri = i, this.data = n;\n    }\n};\nvar _borsh = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/borsh/lib/index.js\");\nvar _bs58 = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/@ellipsis-labs/phoenix-sdk/node_modules/bs58/index.js\");\nvar _bs582 = _interopRequireDefault(_bs58);\nvar Bo = new $t.FixableBeetArgsStruct([\n    [\n        \"events\",\n        $t.array(Jr)\n    ]\n], \"PhoenixEvents\");\nfunction To(r) {\n    let e = Buffer.from(r), [t] = Bo.deserialize(e, 0);\n    return t.events;\n}\nfunction tn(r) {\n    return new (0, _web3js.PublicKey)(r.readFixedArray(32));\n}\nfunction Ko(r) {\n    let e = new (0, _borsh.BinaryReader)(Buffer.from(r));\n    if (e.readU8() != 1) throw new Error(\"early Unexpected event\");\n    let i = {\n        instruction: e.readU8(),\n        sequenceNumber: e.readU64(),\n        timestamp: e.readU64(),\n        slot: e.readU64(),\n        market: tn(e),\n        signer: tn(e),\n        totalEvents: e.readU16()\n    }, n = new ArrayBuffer(4);\n    new DataView(n).setUint16(0, i.totalEvents, !0);\n    let s = To(Buffer.concat([\n        Buffer.from(n),\n        Buffer.from(r.slice(e.offset))\n    ]));\n    return {\n        header: i,\n        events: s\n    };\n}\nfunction rn(r) {\n    var o;\n    let e = r == null ? void 0 : r.meta;\n    if (e === void 0) return {\n        instructions: [],\n        txReceived: !1,\n        txFailed: !0\n    };\n    if ((e == null ? void 0 : e.err) !== null) return {\n        instructions: [],\n        txReceived: !0,\n        txFailed: !0\n    };\n    let t = (o = r == null ? void 0 : r.meta) == null ? void 0 : o.innerInstructions;\n    if (!t || !r || !r.slot) return {\n        instructions: [],\n        txReceived: !0,\n        txFailed: !0\n    };\n    let i = [];\n    for (let s of t)for (let a of s.instructions){\n        if (a.programId.toBase58() != f.toBase58()) continue;\n        let u = _bs582.default.decode(a.data);\n        u[0] == Sr && i.push(u.slice(1));\n    }\n    let n = new Array;\n    for (let s of i)n.push(Ko(s));\n    return {\n        instructions: n,\n        signature: r.transaction.signatures[0],\n        txReceived: !0,\n        txFailed: !1\n    };\n}\nfunction cb(r, e) {\n    return p(this, null, function*() {\n        let t = yield r.getParsedTransaction(e, {\n            commitment: \"confirmed\",\n            maxSupportedTransactionVersion: 1\n        });\n        return rn(t);\n    });\n}\nfunction lb(r, e) {\n    return p(this, null, function*() {\n        let t = yield r.getParsedTransaction(e, {\n            commitment: \"confirmed\",\n            maxSupportedTransactionVersion: 1\n        });\n        return rn(t);\n    });\n}\nvar Q = class {\n    constructor({ name: e, address: t, baseToken: i, quoteToken: n, data: o }){\n        this.address = t, this.data = o, this.name = e, this.baseToken = i, this.quoteToken = n;\n    }\n    static load({ address: e, buffer: t, tokenList: i }) {\n        let n = Ve(t), o = i.find((A)=>A.mint === n.header.baseParams.mintKey.toBase58()), s = i.find((A)=>A.mint === n.header.quoteParams.mintKey.toBase58()), a = n.header.baseParams.mintKey.toBase58(), u = a.slice(0, 8) + \"...\" + a.slice(-8), c = n.header.baseParams.mintKey.toBase58(), l = c.slice(0, 8) + \"...\" + c.slice(-8), d = new Qe({\n            name: o !== void 0 ? o.name : u,\n            symbol: o !== void 0 ? o.symbol : a,\n            logoUri: o !== void 0 ? o.logoUri : \"Unknown\",\n            data: m({}, n.header.baseParams)\n        }), h = new Qe({\n            name: s !== void 0 ? s.name : l,\n            symbol: s !== void 0 ? s.symbol : c,\n            logoUri: s !== void 0 ? s.logoUri : \"Unknown\",\n            data: m({}, n.header.quoteParams)\n        });\n        return new Q({\n            name: `${d.symbol}/${h.symbol}`,\n            address: e,\n            baseToken: d,\n            quoteToken: h,\n            data: n\n        });\n    }\n    static loadFromAddress(n) {\n        return p(this, arguments, function*({ connection: e, address: t, tokenList: i }) {\n            let o = yield e.getAccountInfo(t, \"confirmed\").then((s)=>s == null ? void 0 : s.data);\n            return i ? Q.load({\n                address: t,\n                buffer: o,\n                tokenList: i\n            }) : new Q({\n                address: t,\n                data: Ve(o)\n            });\n        });\n    }\n    reload(e) {\n        let t = Ve(e);\n        return this.data = t, this;\n    }\n    reloadFromNetwork(e) {\n        return p(this, null, function*() {\n            let t = Ve((yield e.getAccountInfo(this.address, \"confirmed\").then((i)=>i == null ? void 0 : i.data)));\n            this.data = t;\n        });\n    }\n    getBaseAccountKey(e) {\n        return _spltoken.getAssociatedTokenAddressSync.call(void 0, this.data.header.baseParams.mintKey, e, !0);\n    }\n    getQuoteAccountKey(e) {\n        return _spltoken.getAssociatedTokenAddressSync.call(void 0, this.data.header.quoteParams.mintKey, e, !0);\n    }\n    getQuoteVaultKey() {\n        return this.data.header.quoteParams.vaultKey;\n    }\n    getBaseVaultKey() {\n        return this.data.header.baseParams.vaultKey;\n    }\n    getSeatAddress(e) {\n        return qe(this.address, e);\n    }\n    getUiLadder(e = ee, t = 0, i = 0) {\n        let n = this.getLadder(t, i, e);\n        return {\n            bids: n.bids.map(({ priceInTicks: o, sizeInBaseLots: s })=>this.levelToUiLevel(y(o), y(s))),\n            asks: n.asks.map(({ priceInTicks: o, sizeInBaseLots: s })=>this.levelToUiLevel(y(o), y(s)))\n        };\n    }\n    getLadder(e, t, i = ee) {\n        let n = [], o = [];\n        for (let [s, a] of this.data.bids){\n            if (a.lastValidSlot != 0 && a.lastValidSlot < e || a.lastValidUnixTimestampInSeconds != 0 && a.lastValidUnixTimestampInSeconds < t) continue;\n            let u = T(s.priceInTicks), c = T(a.numBaseLots);\n            if (n.length === 0) n.push({\n                priceInTicks: u,\n                sizeInBaseLots: c\n            });\n            else {\n                let l = n[n.length - 1];\n                if (!l) throw Error;\n                if (u.eq(l.priceInTicks)) l.sizeInBaseLots = l.sizeInBaseLots.add(c);\n                else {\n                    if (n.length === i) break;\n                    n.push({\n                        priceInTicks: u,\n                        sizeInBaseLots: c\n                    });\n                }\n            }\n        }\n        for (let [s, a] of this.data.asks){\n            if (a.lastValidSlot != 0 && a.lastValidSlot < e || a.lastValidUnixTimestampInSeconds != 0 && a.lastValidUnixTimestampInSeconds < t) continue;\n            let u = T(s.priceInTicks), c = T(a.numBaseLots);\n            if (o.length === 0) o.push({\n                priceInTicks: u,\n                sizeInBaseLots: c\n            });\n            else {\n                let l = o[o.length - 1];\n                if (!l) throw Error;\n                if (u.eq(l.priceInTicks)) l.sizeInBaseLots = l.sizeInBaseLots.add(c);\n                else {\n                    if (o.length === i) break;\n                    o.push({\n                        priceInTicks: u,\n                        sizeInBaseLots: c\n                    });\n                }\n            }\n        }\n        return {\n            asks: o,\n            bids: n\n        };\n    }\n    levelToUiLevel(e, t) {\n        return {\n            price: this.ticksToFloatPrice(e),\n            quantity: this.baseLotsToRawBaseUnits(t)\n        };\n    }\n    getExpectedOutAmount({ side: e, inAmount: t, slot: i, unixTimestamp: n }) {\n        let o = y(this.data.header.marketSizeParams.bidsSize), s = y(this.data.header.marketSizeParams.asksSize), a = this.getUiLadder(Math.max(o, s), i, n);\n        return xr({\n            uiLadder: a,\n            side: e,\n            takerFeeBps: this.data.takerFeeBps,\n            inAmount: t\n        });\n    }\n    getRequiredInAmount({ side: e, outAmount: t, slot: i, unixTimestamp: n }) {\n        let o = y(this.data.header.marketSizeParams.bidsSize), s = y(this.data.header.marketSizeParams.asksSize), a = Pr(this, Math.max(o, s), i, n);\n        return Bi({\n            uiLadder: a,\n            side: e,\n            takerFeeBps: this.data.takerFeeBps,\n            outAmount: t\n        });\n    }\n    getPriceDecimalPlaces() {\n        let e = Math.floor(Math.pow(10, this.data.header.quoteParams.decimals) * this.data.header.rawBaseUnitsPerBaseUnit / y(this.data.header.tickSizeInQuoteAtomsPerBaseUnit));\n        if (e === 0) return 0;\n        let t = 0;\n        for(; e % 2 === 0;)e /= 2, t += 1;\n        let i = 0;\n        for(; e % 5 === 0;)e /= 5, i += 1;\n        let n = Math.max(t, i);\n        return n === 0 ? 3 : n;\n    }\n    floatPriceToTicks(e) {\n        return Math.round(e * this.data.header.rawBaseUnitsPerBaseUnit * M(10, this.data.header.quoteParams.decimals) / (this.data.quoteLotsPerBaseUnitPerTick * y(this.data.header.quoteLotSize)));\n    }\n    ticksToFloatPrice(e) {\n        return e * this.data.quoteLotsPerBaseUnitPerTick * y(this.data.header.quoteLotSize) / (M(10, this.data.header.quoteParams.decimals) * this.data.header.rawBaseUnitsPerBaseUnit);\n    }\n    rawBaseUnitsToBaseLotsRoundedDown(e) {\n        let t = e / this.data.header.rawBaseUnitsPerBaseUnit;\n        return Math.floor(t * this.data.baseLotsPerBaseUnit);\n    }\n    rawBaseUnitsToBaseLotsRoundedUp(e) {\n        let t = e / this.data.header.rawBaseUnitsPerBaseUnit;\n        return Math.ceil(t * this.data.baseLotsPerBaseUnit);\n    }\n    baseAtomsToBaseLots(e) {\n        return Math.round(e / y(this.data.header.baseLotSize));\n    }\n    baseLotsToBaseAtoms(e) {\n        return e * y(this.data.header.baseLotSize);\n    }\n    baseLotsToRawBaseUnits(e) {\n        return this.baseAtomsToRawBaseUnits(this.baseLotsToBaseAtoms(e));\n    }\n    quoteUnitsToQuoteLots(e) {\n        return Math.round(e * M(10, this.data.header.quoteParams.decimals) / y(this.data.header.quoteLotSize));\n    }\n    quoteAtomsToQuoteLots(e) {\n        return Math.round(e / y(this.data.header.quoteLotSize));\n    }\n    quoteLotsToQuoteAtoms(e) {\n        return e * y(this.data.header.quoteLotSize);\n    }\n    quoteLotsToQuoteUnits(e) {\n        return this.quoteAtomsToQuoteUnits(this.quoteLotsToQuoteAtoms(e));\n    }\n    baseAtomsToRawBaseUnits(e) {\n        return e / M(10, this.data.header.baseParams.decimals);\n    }\n    quoteAtomsToQuoteUnits(e) {\n        return e / M(10, this.data.header.quoteParams.decimals);\n    }\n    createCancelAllOrdersInstruction(e) {\n        let t = this.address;\n        return Oi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: t,\n            trader: e,\n            baseAccount: this.getBaseAccountKey(e),\n            quoteAccount: this.getQuoteAccountKey(e),\n            baseVault: this.getBaseVaultKey(),\n            quoteVault: this.getQuoteVaultKey()\n        });\n    }\n    createCancelAllOrdersWithFreeFundsInstruction(e) {\n        return Fi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: e\n        });\n    }\n    createCancelMultipleOrdersByIdInstruction(e, t) {\n        return Wi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t,\n            baseAccount: this.getBaseAccountKey(t),\n            quoteAccount: this.getQuoteAccountKey(t),\n            baseVault: this.getBaseVaultKey(),\n            quoteVault: this.getQuoteVaultKey()\n        }, e);\n    }\n    createCancelMultipleOrdersByIdWithFreeFundsInstruction(e, t) {\n        return Ei({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t\n        }, e);\n    }\n    createCancelUpToInstruction(e, t) {\n        return vi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t,\n            baseAccount: this.getBaseAccountKey(t),\n            quoteAccount: this.getQuoteAccountKey(t),\n            baseVault: this.getBaseVaultKey(),\n            quoteVault: this.getQuoteVaultKey()\n        }, e);\n    }\n    createCancelUpToWithFreeFundsInstruction(e, t) {\n        return Di({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t\n        }, e);\n    }\n    createDepositFundsInstruction(e, t) {\n        return Ci({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t,\n            seat: this.getSeatAddress(t),\n            baseAccount: this.getBaseAccountKey(t),\n            quoteAccount: this.getQuoteAccountKey(t),\n            baseVault: this.getBaseVaultKey(),\n            quoteVault: this.getQuoteVaultKey()\n        }, e);\n    }\n    createPlaceLimitOrderInstruction(e, t) {\n        return zi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t,\n            seat: this.getSeatAddress(t),\n            baseAccount: this.getBaseAccountKey(t),\n            quoteAccount: this.getQuoteAccountKey(t),\n            baseVault: this.getBaseVaultKey(),\n            quoteVault: this.getQuoteVaultKey()\n        }, {\n            orderPacket: e\n        });\n    }\n    createPlaceLimitOrderWithFreeFundsInstruction(e, t) {\n        return Vi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t,\n            seat: this.getSeatAddress(t)\n        }, {\n            orderPacket: e\n        });\n    }\n    createPlaceMultiplePostOnlyOrdersInstruction(e, t) {\n        return Qi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t,\n            seat: this.getSeatAddress(t),\n            baseAccount: this.getBaseAccountKey(t),\n            quoteAccount: this.getQuoteAccountKey(t),\n            baseVault: this.getBaseVaultKey(),\n            quoteVault: this.getQuoteVaultKey()\n        }, e);\n    }\n    createPlaceMultiplePostOnlyOrdersInstructionWithFreeFunds(e, t) {\n        return _i({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t,\n            seat: this.getSeatAddress(t)\n        }, e);\n    }\n    createReduceOrderInstruction(e, t) {\n        return Gi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t,\n            baseAccount: this.getBaseAccountKey(t),\n            quoteAccount: this.getQuoteAccountKey(t),\n            baseVault: this.getBaseVaultKey(),\n            quoteVault: this.getQuoteVaultKey()\n        }, e);\n    }\n    createReduceOrderWithFreeFundsInstruction(e, t) {\n        return Zi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t\n        }, e);\n    }\n    createRequestSeatInstruction(e, t) {\n        return Hi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            payer: e,\n            seat: this.getSeatAddress(t)\n        });\n    }\n    createSwapInstruction(e, t) {\n        return Yi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t,\n            baseAccount: this.getBaseAccountKey(t),\n            quoteAccount: this.getQuoteAccountKey(t),\n            baseVault: this.getBaseVaultKey(),\n            quoteVault: this.getQuoteVaultKey()\n        }, {\n            orderPacket: e\n        });\n    }\n    createSwapWithFreeFundsInstruction(e, t) {\n        return Xi({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t,\n            seat: this.getSeatAddress(t)\n        }, {\n            orderPacket: e\n        });\n    }\n    createWithdrawFundsInstruction(e, t) {\n        return en({\n            phoenixProgram: f,\n            logAuthority: x(),\n            market: this.address,\n            trader: t,\n            baseAccount: this.getBaseAccountKey(t),\n            quoteAccount: this.getQuoteAccountKey(t),\n            baseVault: this.getBaseVaultKey(),\n            quoteVault: this.getQuoteVaultKey()\n        }, e);\n    }\n    getSwapOrderPacket({ side: e, inAmount: t, slippage: i = kr, selfTradeBehavior: n = 0, matchLimit: o = Si, clientOrderId: s = 0, useOnlyDepositedFunds: a = !1, lastValidSlot: u = null, lastValidUnixTimestampInSeconds: c = null }) {\n        let l = Pr(this, Number.MAX_SAFE_INTEGER), d = xr({\n            uiLadder: l,\n            takerFeeBps: this.data.takerFeeBps,\n            side: e,\n            inAmount: t\n        }), h = M(10, this.data.header.baseParams.decimals), S = M(10, this.data.header.quoteParams.decimals), A = 1 - i, K = 0, I = 0, F = 0, _e = 0;\n        return e === 1 ? (K = t * h / parseFloat(this.data.header.baseLotSize.toString()), _e = Math.ceil(d * S / parseFloat(this.data.header.quoteLotSize.toString()) * A)) : (F = t * S / parseFloat(this.data.header.quoteLotSize.toString()), I = Math.ceil(d * h / parseFloat(this.data.header.baseLotSize.toString()) * A)), Ar({\n            side: e,\n            numBaseLots: K,\n            numQuoteLots: F,\n            minBaseLotsToFill: I,\n            minQuoteLotsToFill: _e,\n            selfTradeBehavior: n,\n            matchLimit: o,\n            clientOrderId: s,\n            useOnlyDepositedFunds: a,\n            lastValidSlot: u,\n            lastValidUnixTimestampInSeconds: c\n        });\n    }\n    getLimitOrderInstructionfromTemplate(e, t) {\n        let i = this.floatPriceToTicks(t.priceAsFloat), n = this.rawBaseUnitsToBaseLotsRoundedDown(t.sizeInBaseUnits), o = sn({\n            side: t.side,\n            priceInTicks: i,\n            numBaseLots: n,\n            selfTradeBehavior: t.selfTradeBehavior,\n            matchLimit: t.matchLimit,\n            clientOrderId: t.clientOrderId,\n            useOnlyDepositedFunds: t.useOnlyDepositedFunds,\n            lastValidSlot: t.lastValidSlot,\n            lastValidUnixTimestampInSeconds: t.lastValidUnixTimestampInSeconds\n        });\n        return this.createPlaceLimitOrderInstruction(o, e);\n    }\n    getPostOnlyOrderInstructionfromTemplate(e, t) {\n        let i = this.floatPriceToTicks(t.priceAsFloat), n = this.rawBaseUnitsToBaseLotsRoundedDown(t.sizeInBaseUnits), o = on({\n            side: t.side,\n            priceInTicks: i,\n            numBaseLots: n,\n            clientOrderId: t.clientOrderId,\n            rejectPostOnly: t.rejectPostOnly,\n            useOnlyDepositedFunds: t.useOnlyDepositedFunds,\n            lastValidSlot: t.lastValidSlot,\n            lastValidUnixTimestampInSeconds: t.lastValidUnixTimestampInSeconds\n        });\n        return this.createPlaceLimitOrderInstruction(o, e);\n    }\n    getImmediateOrCancelOrderInstructionfromTemplate(e, t) {\n        let i = this.floatPriceToTicks(t.priceAsFloat), n = this.rawBaseUnitsToBaseLotsRoundedDown(t.sizeInBaseUnits), o = this.quoteUnitsToQuoteLots(t.sizeInQuoteUnits), s = this.rawBaseUnitsToBaseLotsRoundedDown(t.minBaseUnitsToFill), a = this.quoteUnitsToQuoteLots(t.minQuoteUnitsToFill), u = Ar({\n            side: t.side,\n            priceInTicks: i,\n            numBaseLots: n,\n            numQuoteLots: o,\n            minBaseLotsToFill: s,\n            minQuoteLotsToFill: a,\n            selfTradeBehavior: t.selfTradeBehavior,\n            matchLimit: t.matchLimit,\n            clientOrderId: t.clientOrderId,\n            useOnlyDepositedFunds: t.useOnlyDepositedFunds,\n            lastValidSlot: t.lastValidSlot,\n            lastValidUnixTimestampInSeconds: t.lastValidUnixTimestampInSeconds\n        });\n        return this.createSwapInstruction(u, e);\n    }\n};\nvar te = class {\n    constructor(e){\n        this.pubkey = e, this.tokenBalances = {};\n    }\n    static create(n) {\n        return p(this, arguments, function*({ connection: e, pubkey: t, tokens: i }) {\n            let o = new te(t);\n            for (let s of i){\n                let a = yield e.getTokenAccountsByOwner(t, {\n                    programId: _spltoken.TOKEN_PROGRAM_ID,\n                    mint: s.data.mintKey\n                });\n                if (a.value.length === 0) continue;\n                let u = a.value[0];\n                o.tokenBalances[s.data.mintKey.toBase58()] = un(u.account.data, s.data.decimals);\n            }\n            return o;\n        });\n    }\n    refresh(e) {\n        return p(this, null, function*() {\n            return yield Promise.all(Object.keys(this.tokenBalances).map((t)=>p(this, null, function*() {\n                    let n = (yield e.getTokenAccountsByOwner(this.pubkey, {\n                        programId: _spltoken.TOKEN_PROGRAM_ID,\n                        mint: new (0, _web3js.PublicKey)(t)\n                    })).value[0];\n                    this.tokenBalances[t] = un(n.account.data, this.tokenBalances[t].decimals);\n                }))), this;\n        });\n    }\n};\nfunction un(r, e) {\n    let i = _spltoken.AccountLayout.decode(r).amount.toString();\n    return {\n        amount: i,\n        decimals: e,\n        uiAmount: parseInt(i) / M(10, e)\n    };\n}\nvar _ = class {\n    constructor({ connection: e, tokens: t, tokenConfig: i, markets: n, clock: o, trader: s }){\n        this.connection = e, this.tokens = t, this.tokenConfig = i, this.markets = n, this.clock = o, s && (this.trader = s);\n    }\n    static loadMarketsAndTokens(e, t) {\n        let i = [], n = new Map;\n        return e.map(([o, s])=>{\n            let a = Q.load({\n                address: o,\n                buffer: s.data,\n                tokenList: t\n            });\n            n.set(o.toString(), a);\n            for (let u of [\n                a.baseToken,\n                a.quoteToken\n            ]){\n                let c = u.data.mintKey.toBase58();\n                i.find((l)=>l.data.mintKey.toBase58() === c) || i.push(u);\n            }\n        }), [\n            n,\n            i\n        ];\n    }\n    static create(e, t, i) {\n        return p(this, null, function*() {\n            var K;\n            let n = wr(t), s = yield fetch(\"https://raw.githubusercontent.com/Ellipsis-Labs/phoenix-sdk/master/master_config.json\").then((I)=>I.json()), a = s[n].markets.map((I)=>new (0, _web3js.PublicKey)(I.market)), u = s[n].tokens, c = yield e.getMultipleAccountsInfo([\n                ...a,\n                _web3js.SYSVAR_CLOCK_PUBKEY\n            ], \"confirmed\"), l = (K = c.pop()) == null ? void 0 : K.data;\n            if (l === void 0) throw new Error(\"Unable to get clock\");\n            let d = Ne(l), h = a.map((I, F)=>[\n                    I,\n                    c[F]\n                ]), [S, A] = _.loadMarketsAndTokens(h, u);\n            return new _({\n                connection: e,\n                tokens: A,\n                markets: S,\n                tokenConfig: u,\n                trader: i ? yield te.create({\n                    connection: e,\n                    pubkey: i,\n                    tokens: A\n                }) : void 0,\n                clock: d\n            });\n        });\n    }\n    static createWithoutConfig(e, t, i) {\n        return p(this, null, function*() {\n            var l;\n            let n = yield e.getMultipleAccountsInfo([\n                ...t,\n                _web3js.SYSVAR_CLOCK_PUBKEY\n            ], \"confirmed\"), o = (l = n.pop()) == null ? void 0 : l.data;\n            if (o === void 0) throw new Error(\"Unable to get clock\");\n            let s = Ne(o);\n            if (n.length !== t.length) throw Error(\"Unable to get all market accounts\");\n            let a = t.map((d, h)=>[\n                    d,\n                    n[h]\n                ]), [u, c] = _.loadMarketsAndTokens(a, []);\n            return new _({\n                connection: e,\n                tokens: c,\n                markets: u,\n                tokenConfig: [],\n                trader: i ? yield te.create({\n                    connection: e,\n                    pubkey: i,\n                    tokens: c\n                }) : void 0,\n                clock: s\n            });\n        });\n    }\n    static createWithMarketAddresses(e, t, i, n) {\n        return p(this, null, function*() {\n            var K;\n            let o = wr(t), u = (yield fetch(\"https://raw.githubusercontent.com/Ellipsis-Labs/phoenix-sdk/master/master_config.json\").then((I)=>I.json()))[o].tokens, c = yield e.getMultipleAccountsInfo([\n                ...i,\n                _web3js.SYSVAR_CLOCK_PUBKEY\n            ], \"confirmed\"), l = (K = c.pop()) == null ? void 0 : K.data;\n            if (l === void 0) throw new Error(\"Unable to get clock\");\n            let d = Ne(l), h = i.map((I, F)=>[\n                    I,\n                    c[F]\n                ]), [S, A] = _.loadMarketsAndTokens(h, u);\n            return new _({\n                connection: e,\n                tokens: A,\n                markets: S,\n                tokenConfig: u,\n                trader: n ? yield te.create({\n                    connection: e,\n                    pubkey: n,\n                    tokens: A\n                }) : void 0,\n                clock: d\n            });\n        });\n    }\n    addMarket(e, t = !1) {\n        return p(this, null, function*() {\n            var c, l;\n            if (this.markets.get(e) !== void 0) {\n                t ? yield this.refreshMarket(e) : console.log(\"Market already exists: \", e);\n                return;\n            }\n            let n = new (0, _web3js.PublicKey)(e), o = yield this.connection.getMultipleAccountsInfo([\n                n,\n                _web3js.SYSVAR_CLOCK_PUBKEY\n            ], \"confirmed\");\n            if (o.length !== 2) throw new Error(\"Account not found for market: \" + n.toBase58());\n            let s = (c = o[0]) == null ? void 0 : c.data;\n            if (s === void 0) throw new Error(\"Unable to get market account data\");\n            let a = yield Q.load({\n                address: n,\n                buffer: s,\n                tokenList: this.tokenConfig\n            });\n            for (let d of [\n                a.baseToken,\n                a.quoteToken\n            ]){\n                let h = d.data.mintKey.toBase58();\n                this.tokens.find((S)=>S.data.mintKey.toBase58() === h) || this.tokens.push(d);\n            }\n            this.markets.set(e, a);\n            let u = (l = o[1]) == null ? void 0 : l.data;\n            if (u === void 0) throw new Error(\"Unable to get clock\");\n            this.reloadClockFromBuffer(u);\n        });\n    }\n    refreshAllMarkets() {\n        return p(this, null, function*() {\n            var n, o;\n            let e = Array.from(this.markets.keys()).map((s)=>new (0, _web3js.PublicKey)(s)), t = yield this.connection.getMultipleAccountsInfo([\n                ...e,\n                _web3js.SYSVAR_CLOCK_PUBKEY\n            ], \"confirmed\"), i = (n = t.pop()) == null ? void 0 : n.data;\n            if (i === void 0) throw new Error(\"Unable to get clock\");\n            this.reloadClockFromBuffer(i);\n            for (let [s, a] of e.entries()){\n                let u = this.markets.get(a.toString());\n                if (u === void 0) throw new Error(\"Market does not exist: \" + a.toBase58());\n                let c = (o = t[s]) == null ? void 0 : o.data;\n                if (c === void 0) throw new Error(\"Unable to get market account data\");\n                u.reload(c);\n            }\n        });\n    }\n    refreshMarket(e) {\n        return p(this, null, function*() {\n            var a, u;\n            let t = new (0, _web3js.PublicKey)(e), i = this.markets.get(t.toString());\n            if (i === void 0) throw new Error(\"Market does not exist: \" + t.toBase58());\n            let n = yield this.connection.getMultipleAccountsInfo([\n                t,\n                _web3js.SYSVAR_CLOCK_PUBKEY\n            ], \"confirmed\");\n            if (n.length !== 2) throw new Error(\"Account not found for market: \" + t.toBase58());\n            let o = (a = n[0]) == null ? void 0 : a.data;\n            if (o === void 0) throw new Error(\"Unable to get market account data\");\n            i.reload(o);\n            let s = (u = n[1]) == null ? void 0 : u.data;\n            if (s === void 0) throw new Error(\"Unable to get clock\");\n            return this.reloadClockFromBuffer(s), i;\n        });\n    }\n    reloadClock() {\n        return p(this, null, function*() {\n            let e = yield this.connection.getAccountInfo(_web3js.SYSVAR_CLOCK_PUBKEY, \"confirmed\"), t = e == null ? void 0 : e.data;\n            if (t === void 0) throw new Error(\"Unable to get clock\");\n            this.reloadClockFromBuffer(t);\n        });\n    }\n    reloadClockFromBuffer(e) {\n        this.clock = Ne(e);\n    }\n    getLadder(e, t = ee) {\n        let i = this.markets.get(e);\n        if (!i) throw new Error(\"Market not found: \" + e);\n        return i.getLadder(this.clock.slot, this.clock.unixTimestamp, t);\n    }\n    getUiLadder(e, t = ee) {\n        let i = this.markets.get(e);\n        if (!i) throw new Error(\"Market not found: \" + e);\n        return i.getUiLadder(t, this.clock.slot, this.clock.unixTimestamp);\n    }\n    getL3Book(e, t = re) {\n        let i = this.markets.get(e);\n        if (!i) throw new Error(\"Market not found: \" + e);\n        return gt(i.data, this.clock.slot, this.clock.unixTimestamp, t);\n    }\n    getL3BookWithParams(e, t, i, n = re) {\n        let o = this.markets.get(e);\n        if (!o) throw new Error(\"Market not found: \" + e);\n        return gt(o.data, t, i, n);\n    }\n    getL3UiBook(e, t = re) {\n        let i = this.markets.get(e);\n        if (!i) throw new Error(\"Market not found: \" + e);\n        return hr(i.data, t, this.clock.slot, this.clock.unixTimestamp);\n    }\n    getL3UiBookWithParams(e, t, i, n = re) {\n        let o = this.markets.get(e);\n        if (!o) throw new Error(\"Market not found: \" + e);\n        return hr(o.data, n, t, i);\n    }\n    printLadder(e) {\n        Ii(this.getUiLadder(e));\n    }\n    getMarketExpectedOutAmount({ marketAddress: e, side: t, inAmount: i }) {\n        let n = this.markets.get(e);\n        if (!n) throw new Error(\"Market not found: \" + e);\n        return n.getExpectedOutAmount({\n            side: t,\n            inAmount: i,\n            slot: this.clock.slot,\n            unixTimestamp: this.clock.unixTimestamp\n        });\n    }\n    getBaseAccountKey(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.getBaseAccountKey(e);\n    }\n    getQuoteAccountKey(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.getQuoteAccountKey(e);\n    }\n    getQuoteVaultKey(e) {\n        let t = this.markets.get(e);\n        if (!t) throw new Error(\"Market not found: \" + e);\n        return t.getQuoteVaultKey();\n    }\n    getBaseVaultKey(e) {\n        let t = this.markets.get(e);\n        if (!t) throw new Error(\"Market not found: \" + e);\n        return t.getBaseVaultKey();\n    }\n    getSeatKey(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.getSeatAddress(e);\n    }\n    floatPriceToTicks(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.floatPriceToTicks(e);\n    }\n    ticksToFloatPrice(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.ticksToFloatPrice(e);\n    }\n    rawBaseUnitsToBaseLotsRoundedDown(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.rawBaseUnitsToBaseLotsRoundedDown(e);\n    }\n    rawBaseUnitsToBaseLotsRoundedUp(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.rawBaseUnitsToBaseLotsRoundedUp(e);\n    }\n    baseAtomsToBaseLots(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.baseAtomsToBaseLots(e);\n    }\n    baseLotsToBaseAtoms(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.baseLotsToBaseAtoms(e);\n    }\n    quoteUnitsToQuoteLots(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.quoteUnitsToQuoteLots(e);\n    }\n    quoteAtomsToQuoteLots(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.quoteAtomsToQuoteLots(e);\n    }\n    quoteLotsToQuoteAtoms(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.quoteLotsToQuoteAtoms(e);\n    }\n    baseAtomsToRawBaseUnits(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.baseAtomsToRawBaseUnits(e);\n    }\n    quoteAtomsToQuoteUnits(e, t) {\n        let i = this.markets.get(t);\n        if (!i) throw new Error(\"Market not found: \" + t);\n        return i.quoteAtomsToQuoteUnits(e);\n    }\n    createCancelAllOrdersInstruction(e, t) {\n        t || (t = this.trader.pubkey);\n        let i = this.markets.get(e);\n        if (!i) throw new Error(\"Market not found: \" + e);\n        return i.createCancelAllOrdersInstruction(t);\n    }\n    createCancelAllOrdersWithFreeFundsInstruction(e, t) {\n        t || (t = this.trader.pubkey);\n        let i = this.markets.get(e);\n        if (!i) throw new Error(\"Market not found: \" + e);\n        return i.createCancelAllOrdersWithFreeFundsInstruction(t);\n    }\n    createCancelMultipleOrdersByIdInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createCancelMultipleOrdersByIdInstruction(e, i);\n    }\n    createCancelMultipleOrdersByIdWithFreeFundsInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createCancelMultipleOrdersByIdWithFreeFundsInstruction(e, i);\n    }\n    createCancelUpToInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createCancelUpToInstruction(e, i);\n    }\n    createCancelUpToWithFreeFundsInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createCancelUpToWithFreeFundsInstruction(e, i);\n    }\n    createDepositFundsInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createDepositFundsInstruction(e, i);\n    }\n    createPlaceLimitOrderInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createPlaceLimitOrderInstruction(e, i);\n    }\n    createPlaceLimitOrderWithFreeFundsInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createPlaceLimitOrderWithFreeFundsInstruction(e, i);\n    }\n    createPlaceMultiplePostOnlyOrdersInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createPlaceMultiplePostOnlyOrdersInstruction(e, i);\n    }\n    createPlaceMultiplePostOnlyOrdersInstructionWithFreeFunds(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createPlaceMultiplePostOnlyOrdersInstructionWithFreeFunds(e, i);\n    }\n    createReduceOrderInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createReduceOrderInstruction(e, i);\n    }\n    createReduceOrderWithFreeFundsInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createReduceOrderWithFreeFundsInstruction(e, i);\n    }\n    createRequestSeatInstruction(e, t, i) {\n        t || (t = this.trader.pubkey), i || (i = t);\n        let n = this.markets.get(e);\n        if (!n) throw new Error(\"Market not found: \" + e);\n        return n.createRequestSeatInstruction(t, i);\n    }\n    createSwapInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createSwapInstruction(e, i);\n    }\n    createSwapWithFreeFundsInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createSwapWithFreeFundsInstruction(e, i);\n    }\n    createWithdrawFundsInstruction(e, t, i) {\n        i || (i = this.trader.pubkey);\n        let n = this.markets.get(t);\n        if (!n) throw new Error(\"Market not found: \" + t);\n        return n.createWithdrawFundsInstruction(e, i);\n    }\n    getLimitOrderInstructionfromTemplate(e, t, i) {\n        let n = this.markets.get(e);\n        if (!n) throw new Error(\"Market not found: \" + e);\n        return n.getLimitOrderInstructionfromTemplate(t, i);\n    }\n    getPostOnlyOrderInstructionfromTemplate(e, t, i) {\n        let n = this.markets.get(e);\n        if (!n) throw new Error(\"Market not found: \" + e);\n        return n.getPostOnlyOrderInstructionfromTemplate(t, i);\n    }\n    getImmediateOrCancelOrderIxfromTemplate(e, t, i) {\n        let n = this.markets.get(e);\n        if (!n) throw new Error(\"Market not found: \" + e);\n        return n.getImmediateOrCancelOrderInstructionfromTemplate(t, i);\n    }\n};\nvar cn = class {\n}, ln = exports.LimitOrderTemplate = class {\n}, bn = exports.ImmediateOrCancelOrderTemplate = class {\n};\nfunction on({ side: r, priceInTicks: e, numBaseLots: t, rejectPostOnly: i = !0, clientOrderId: n = 0, useOnlyDepositedFunds: o = !1, lastValidSlot: s, lastValidUnixTimestampInSeconds: a }) {\n    return {\n        __kind: \"PostOnly\",\n        side: r,\n        priceInTicks: e,\n        numBaseLots: t,\n        clientOrderId: n != null ? n : 0,\n        rejectPostOnly: i != null ? i : !0,\n        useOnlyDepositedFunds: o != null ? o : !1,\n        lastValidSlot: s,\n        lastValidUnixTimestampInSeconds: a\n    };\n}\nfunction sn({ side: r, priceInTicks: e = null, numBaseLots: t, selfTradeBehavior: i = 1, matchLimit: n, clientOrderId: o = 0, useOnlyDepositedFunds: s = !1, lastValidSlot: a, lastValidUnixTimestampInSeconds: u }) {\n    return {\n        __kind: \"Limit\",\n        side: r,\n        priceInTicks: e,\n        numBaseLots: t,\n        selfTradeBehavior: i != null ? i : 1,\n        matchLimit: n,\n        clientOrderId: o != null ? o : 0,\n        useOnlyDepositedFunds: s != null ? s : !1,\n        lastValidSlot: a,\n        lastValidUnixTimestampInSeconds: u\n    };\n}\nfunction Ar({ side: r, priceInTicks: e = null, numBaseLots: t, numQuoteLots: i, minBaseLotsToFill: n = 0, minQuoteLotsToFill: o = 0, selfTradeBehavior: s = 1, matchLimit: a, clientOrderId: u = 0, useOnlyDepositedFunds: c = !1, lastValidSlot: l, lastValidUnixTimestampInSeconds: d }) {\n    return {\n        __kind: \"ImmediateOrCancel\",\n        side: r,\n        priceInTicks: e,\n        numBaseLots: t,\n        numQuoteLots: i,\n        minBaseLotsToFill: n,\n        minQuoteLotsToFill: o,\n        selfTradeBehavior: s,\n        matchLimit: a,\n        clientOrderId: u,\n        useOnlyDepositedFunds: c,\n        lastValidSlot: l,\n        lastValidUnixTimestampInSeconds: d\n    };\n}\nvar Fo = \"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\", f = exports.PROGRAM_ID = new (0, _web3js.PublicKey)(Fo);\nfunction x() {\n    return _web3js.PublicKey.findProgramAddressSync([\n        Buffer.from(\"log\")\n    ], f)[0];\n}\nexports.CancelAllOrdersStruct = zn;\nexports.CancelAllOrdersWithFreeFundsStruct = Nn;\nexports.CancelMultipleOrdersByIdStruct = _n;\nexports.CancelMultipleOrdersByIdWithFreeFundsStruct = Gn;\nexports.CancelMultipleOrdersErrorError = xe;\nexports.CancelUpToStruct = Hn;\nexports.CancelUpToWithFreeFundsStruct = Yn;\nexports.Client = _;\nexports.DEFAULT_L2_LADDER_DEPTH = ee;\nexports.DEFAULT_L3_BOOK_DEPTH = re;\nexports.DEFAULT_MATCH_LIMIT = Si;\nexports.DEFAULT_SLIPPAGE_PERCENT = kr;\nexports.DepositFundsStruct = $n;\nexports.EvictionErrorError = Be;\nexports.FailedToLoadMarketFromAccountError = se;\nexports.ImmediateOrCancelOrderTemplate = bn;\nexports.InvalidBaseAccountError = fe;\nexports.InvalidBaseVaultError = pe;\nexports.InvalidLotSizeError = be;\nexports.InvalidMarketAuthorityError = oe;\nexports.InvalidMarketParametersError = ne;\nexports.InvalidMarketSignerError = le;\nexports.InvalidMintError = de;\nexports.InvalidQuoteAccountError = ge;\nexports.InvalidQuoteVaultError = ye;\nexports.InvalidSeatStatusError = Ie;\nexports.InvalidStateTransitionError = ce;\nexports.InvalidTickSizeError = me;\nexports.LimitOrderTemplate = ln;\nexports.LogStruct = to;\nexports.Market = Q;\nexports.MarketAlreadyInitializedError = ae;\nexports.MarketStatus = Qr;\nexports.MarketUninitializedError = ue;\nexports.NewOrderErrorError = Pe;\nexports.PROGRAM_ADDRESS = Fo;\nexports.PROGRAM_ID = f;\nexports.PlaceLimitOrderStruct = ro;\nexports.PlaceLimitOrderWithFreeFundsStruct = no;\nexports.PlaceMultiplePostOnlyOrdersStruct = so;\nexports.PlaceMultiplePostOnlyOrdersWithFreeFundsStruct = uo;\nexports.PostOnlyOrderTemplate = cn;\nexports.ReduceOrderErrorError = he;\nexports.ReduceOrderStruct = lo;\nexports.ReduceOrderWithFreeFundsStruct = mo;\nexports.RemoveEmptyOrdersErrorError = Se;\nexports.RequestSeatStruct = yo;\nexports.SeatApprovalStatus = Xr;\nexports.SelfTradeBehavior = et;\nexports.Side = je;\nexports.SwapStruct = go;\nexports.SwapWithFreeFundsStruct = Po;\nexports.Token = Qe;\nexports.TooManyEventsError = ke;\nexports.Trader = te;\nexports.TraderNotFoundError = Ae;\nexports.WithdrawFundsErrorError = we;\nexports.WithdrawFundsStruct = xo;\nexports.auditLogHeaderBeet = Fr;\nexports.cancelAllOrdersInstructionDiscriminator = Vn;\nexports.cancelAllOrdersWithFreeFundsInstructionDiscriminator = Qn;\nexports.cancelMultipleOrdersByIdInstructionDiscriminator = jn;\nexports.cancelMultipleOrdersByIdParamsBeet = He;\nexports.cancelMultipleOrdersByIdWithFreeFundsInstructionDiscriminator = Zn;\nexports.cancelOrderParamsBeet = Ge;\nexports.cancelUpToInstructionDiscriminator = Jn;\nexports.cancelUpToParamsBeet = Je;\nexports.cancelUpToWithFreeFundsInstructionDiscriminator = Xn;\nexports.clockBeet = qn;\nexports.condensedOrderBeet = rr;\nexports.confirmOrCreateClaimSeatIxs = fr;\nexports.createCancelAllOrdersInstruction = Oi;\nexports.createCancelAllOrdersWithFreeFundsInstruction = Fi;\nexports.createCancelMultipleOrdersByIdInstruction = Wi;\nexports.createCancelMultipleOrdersByIdWithFreeFundsInstruction = Ei;\nexports.createCancelUpToInstruction = vi;\nexports.createCancelUpToWithFreeFundsInstruction = Di;\nexports.createClaimSeatInstructions = qu;\nexports.createDepositFundsInstruction = Ci;\nexports.createLogInstruction = jc;\nexports.createPlaceLimitOrderInstruction = zi;\nexports.createPlaceLimitOrderWithFreeFundsInstruction = Vi;\nexports.createPlaceMultiplePostOnlyOrdersInstruction = Qi;\nexports.createPlaceMultiplePostOnlyOrdersWithFreeFundsInstruction = _i;\nexports.createReduceOrderInstruction = Gi;\nexports.createReduceOrderWithFreeFundsInstruction = Zi;\nexports.createRequestSeatInstruction = Hi;\nexports.createSwapInstruction = Yi;\nexports.createSwapWithFreeFundsInstruction = Xi;\nexports.createWithdrawFundsInstruction = en;\nexports.decodePhoenixEvents = To;\nexports.depositFundsInstructionDiscriminator = eo;\nexports.depositParamsBeet = Wr;\nexports.deserializeClockData = Ne;\nexports.deserializeMarketData = Ve;\nexports.deserializeSeatManagerData = Kn;\nexports.errorFromCode = Wo;\nexports.errorFromName = Eo;\nexports.evictEventBeet = Ur;\nexports.expiredOrderEventBeet = Dr;\nexports.feeEventBeet = Rr;\nexports.fillEventBeet = qr;\nexports.fillSummaryEventBeet = zr;\nexports.findTraderToEvict = gi;\nexports.getBaseAmountFromQuoteAmountBudgetAndBook = Ti;\nexports.getCancelOrderParamsFromL3Order = cc;\nexports.getClaimSeatIx = yi;\nexports.getClusterFromEndpoint = wr;\nexports.getCreateTokenAccountInstructions = lr;\nexports.getEventsFromTransaction = lb;\nexports.getEvictSeatIx = fi;\nexports.getExpectedOutAmountRouter = xr;\nexports.getImmediateOrCancelOrderPacket = Ar;\nexports.getLimitOrderNewMakerIxs = dc;\nexports.getLimitOrderPacket = sn;\nexports.getLimitOrderUnknownSeatIxs = pc;\nexports.getLogAuthority = x;\nexports.getMakerSetupInstructionsForMarket = Cn;\nexports.getMarketL3Book = gt;\nexports.getMarketL3UiBook = hr;\nexports.getMarketLadder = lc;\nexports.getMarketSwapTransaction = mc;\nexports.getMarketUiLadder = Pr;\nexports.getOrderSequenceNumberFromL3Order = En;\nexports.getPhoenixEventsFromLogData = Ko;\nexports.getPhoenixEventsFromTransactionData = rn;\nexports.getPhoenixEventsFromTransactionSignature = cb;\nexports.getPostOnlyOrderPacket = on;\nexports.getQuoteAmountFromBaseAmountBudgetAndBook = Ki;\nexports.getQuoteUnitsInFromRawBaseUnitsOut = Rn;\nexports.getQuoteUnitsOutFromRawBaseUnitsIn = vn;\nexports.getRawBaseUnitsInFromQuoteUnitsOut = Dn;\nexports.getRawBaseUnitsOutFromQuoteUnitsIn = Un;\nexports.getRequiredInAmountRouter = Bi;\nexports.getSeatAddress = qe;\nexports.getSeatDepositCollectorAddress = pi;\nexports.getSeatManagerAddress = yr;\nexports.getUiOrderSequenceNumber = ze;\nexports.initializeParamsBeet = is;\nexports.isOrderPacketImmediateOrCancel = ws;\nexports.isOrderPacketLimit = xs;\nexports.isOrderPacketPostOnly = hs;\nexports.isPhoenixMarketEventEvict = Js;\nexports.isPhoenixMarketEventExpiredOrder = ea;\nexports.isPhoenixMarketEventFee = Xs;\nexports.isPhoenixMarketEventFill = Gs;\nexports.isPhoenixMarketEventFillSummary = Ys;\nexports.isPhoenixMarketEventHeader = js;\nexports.isPhoenixMarketEventPlace = Zs;\nexports.isPhoenixMarketEventReduce = Hs;\nexports.isPhoenixMarketEventTimeInForce = $s;\nexports.isPhoenixMarketEventUninitialized = _s;\nexports.levelToUiLevel = bc;\nexports.logInstructionDiscriminator = Sr;\nexports.marketHeaderBeet = or;\nexports.marketSizeParamsBeet = Ye;\nexports.marketStatusBeet = _r;\nexports.multipleOrderPacketBeet = $e;\nexports.orderPacketBeet = H;\nexports.phoenixEventsBeet = Bo;\nexports.phoenixMarketEventBeet = Jr;\nexports.placeEventBeet = Gr;\nexports.placeLimitOrderInstructionDiscriminator = io;\nexports.placeLimitOrderWithFreeFundsInstructionDiscriminator = oo;\nexports.placeMultiplePostOnlyOrdersInstructionDiscriminator = ao;\nexports.placeMultiplePostOnlyOrdersWithFreeFundsInstructionDiscriminator = co;\nexports.printUiLadder = Ii;\nexports.readPublicKey = tn;\nexports.reduceEventBeet = Zr;\nexports.reduceOrderInstructionDiscriminator = bo;\nexports.reduceOrderParamsBeet = rt;\nexports.reduceOrderWithFreeFundsInstructionDiscriminator = po;\nexports.requestSeatInstructionDiscriminator = fo;\nexports.seatApprovalStatusBeet = aa;\nexports.seatBeet = oa;\nexports.seatManagerBeet = Mn;\nexports.selfTradeBehaviorBeet = sr;\nexports.sideBeet = j;\nexports.sign = ve;\nexports.swapInstructionDiscriminator = ko;\nexports.swapWithFreeFundsInstructionDiscriminator = ho;\nexports.timeInForceEventBeet = Hr;\nexports.toBN = T;\nexports.toNum = y;\nexports.tokenParamsBeet = nr;\nexports.withdrawFundsInstructionDiscriminator = wo;\nexports.withdrawParamsBeet = $r;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ellipsis-labs/phoenix-sdk/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ellipsis-labs/phoenix-sdk/node_modules/base-x/src/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@ellipsis-labs/phoenix-sdk/node_modules/base-x/src/index.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base(ALPHABET) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError(\"Alphabet too long\");\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for(var j = 0; j < BASE_MAP.length; j++){\n        BASE_MAP[j] = 255;\n    }\n    for(var i = 0; i < ALPHABET.length; i++){\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + \" is ambiguous\");\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n    ;\n    var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n    ;\n    function encode(source) {\n        if (source instanceof Uint8Array) {} else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        } else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError(\"Expected Uint8Array\");\n        }\n        if (source.length === 0) {\n            return \"\";\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while(pbegin !== pend && source[pbegin] === 0){\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while(pbegin !== pend){\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){\n                carry += 256 * b58[it1] >>> 0;\n                b58[it1] = carry % BASE >>> 0;\n                carry = carry / BASE >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error(\"Non-zero carry\");\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while(it2 !== size && b58[it2] === 0){\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for(; it2 < size; ++it2){\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    function decodeUnsafe(source) {\n        if (typeof source !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while(source[psz] === LEADER){\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (source.length - psz) * FACTOR + 1 >>> 0 // log(58) / log(256), rounded up.\n        ;\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while(source[psz]){\n            // Find code of next character\n            var charCode = source.charCodeAt(psz);\n            // Base map can not be indexed using char code\n            if (charCode > 255) {\n                return;\n            }\n            // Decode character\n            var carry = BASE_MAP[charCode];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){\n                carry += BASE * b256[it3] >>> 0;\n                b256[it3] = carry % 256 >>> 0;\n                carry = carry / 256 >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error(\"Non-zero carry\");\n            }\n            length = i;\n            psz++;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while(it4 !== size && b256[it4] === 0){\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while(it4 !== size){\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(\"Non-base\" + BASE + \" character\");\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nmodule.exports = base;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ellipsis-labs/phoenix-sdk/node_modules/base-x/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ellipsis-labs/phoenix-sdk/node_modules/bs58/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@ellipsis-labs/phoenix-sdk/node_modules/bs58/index.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst basex = __webpack_require__(/*! base-x */ \"(ssr)/./node_modules/@ellipsis-labs/phoenix-sdk/node_modules/base-x/src/index.js\");\nconst ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nmodule.exports = basex(ALPHABET);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGVsbGlwc2lzLWxhYnMvcGhvZW5peC1zZGsvbm9kZV9tb2R1bGVzL2JzNTgvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3RCLE1BQU1DLFdBQVc7QUFFakJDLE9BQU9DLE9BQU8sR0FBR0osTUFBTUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BlbGxpcHNpcy1sYWJzL3Bob2VuaXgtc2RrL25vZGVfbW9kdWxlcy9iczU4L2luZGV4LmpzPzNmNTAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYmFzZXggPSByZXF1aXJlKCdiYXNlLXgnKVxuY29uc3QgQUxQSEFCRVQgPSAnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eidcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNleChBTFBIQUJFVClcbiJdLCJuYW1lcyI6WyJiYXNleCIsInJlcXVpcmUiLCJBTFBIQUJFVCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ellipsis-labs/phoenix-sdk/node_modules/bs58/index.js\n");

/***/ })

};
;