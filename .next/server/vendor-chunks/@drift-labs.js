"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@drift-labs";
exports.ids = ["vendor-chunks/@drift-labs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/bulkAccountLoader.js":
/*!************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/bulkAccountLoader.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BulkAccountLoader = void 0;\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\nconst promiseTimeout_1 = __webpack_require__(/*! ../util/promiseTimeout */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/util/promiseTimeout.js\");\nconst GET_MULTIPLE_ACCOUNTS_CHUNK_SIZE = 99;\nconst oneMinute = 60 * 1000;\nclass BulkAccountLoader {\n    constructor(connection, commitment, pollingFrequency){\n        this.accountsToLoad = new Map();\n        this.bufferAndSlotMap = new Map();\n        this.errorCallbacks = new Map();\n        this.lastTimeLoadingPromiseCleared = Date.now();\n        this.mostRecentSlot = 0;\n        this.connection = connection;\n        this.commitment = commitment;\n        this.pollingFrequency = pollingFrequency;\n    }\n    async addAccount(publicKey, callback) {\n        const existingSize = this.accountsToLoad.size;\n        const callbackId = (0, uuid_1.v4)();\n        const existingAccountToLoad = this.accountsToLoad.get(publicKey.toString());\n        if (existingAccountToLoad) {\n            existingAccountToLoad.callbacks.set(callbackId, callback);\n        } else {\n            const callbacks = new Map();\n            callbacks.set(callbackId, callback);\n            const newAccountToLoad = {\n                publicKey,\n                callbacks\n            };\n            this.accountsToLoad.set(publicKey.toString(), newAccountToLoad);\n        }\n        if (existingSize === 0) {\n            this.startPolling();\n        }\n        // resolve the current loadPromise in case client wants to call load\n        await this.loadPromise;\n        return callbackId;\n    }\n    removeAccount(publicKey, callbackId) {\n        const existingAccountToLoad = this.accountsToLoad.get(publicKey.toString());\n        if (existingAccountToLoad) {\n            existingAccountToLoad.callbacks.delete(callbackId);\n            if (existingAccountToLoad.callbacks.size === 0) {\n                this.accountsToLoad.delete(existingAccountToLoad.publicKey.toString());\n            }\n        }\n        if (this.accountsToLoad.size === 0) {\n            this.stopPolling();\n        }\n    }\n    addErrorCallbacks(callback) {\n        const callbackId = (0, uuid_1.v4)();\n        this.errorCallbacks.set(callbackId, callback);\n        return callbackId;\n    }\n    removeErrorCallbacks(callbackId) {\n        this.errorCallbacks.delete(callbackId);\n    }\n    chunks(array, size) {\n        return new Array(Math.ceil(array.length / size)).fill(null).map((_, index)=>index * size).map((begin)=>array.slice(begin, begin + size));\n    }\n    async load() {\n        if (this.loadPromise) {\n            const now = Date.now();\n            if (now - this.lastTimeLoadingPromiseCleared > oneMinute) {\n                this.loadPromise = undefined;\n            } else {\n                return this.loadPromise;\n            }\n        }\n        this.loadPromise = new Promise((resolver)=>{\n            this.loadPromiseResolver = resolver;\n        });\n        this.lastTimeLoadingPromiseCleared = Date.now();\n        try {\n            const chunks = this.chunks(this.chunks(Array.from(this.accountsToLoad.values()), GET_MULTIPLE_ACCOUNTS_CHUNK_SIZE), 10);\n            await Promise.all(chunks.map((chunk)=>{\n                return this.loadChunk(chunk);\n            }));\n        } catch (e) {\n            console.error(`Error in bulkAccountLoader.load()`);\n            console.error(e);\n            for (const [_, callback] of this.errorCallbacks){\n                callback(e);\n            }\n        } finally{\n            this.loadPromiseResolver();\n            this.loadPromise = undefined;\n        }\n    }\n    async loadChunk(accountsToLoadChunks) {\n        if (accountsToLoadChunks.length === 0) {\n            return;\n        }\n        const requests = new Array();\n        for (const accountsToLoadChunk of accountsToLoadChunks){\n            const args = [\n                accountsToLoadChunk.map((accountToLoad)=>{\n                    return accountToLoad.publicKey.toBase58();\n                }),\n                {\n                    commitment: this.commitment\n                }\n            ];\n            requests.push({\n                methodName: \"getMultipleAccounts\",\n                args\n            });\n        }\n        const rpcResponses = await (0, promiseTimeout_1.promiseTimeout)(// @ts-ignore\n        this.connection._rpcBatchRequest(requests), 10 * 1000 // 30 second timeout\n        );\n        if (rpcResponses === null) {\n            this.log(\"request to rpc timed out\");\n            return;\n        }\n        for(const i in rpcResponses){\n            const rpcResponse = rpcResponses[i];\n            if (!rpcResponse.result) {\n                console.error(\"rpc response missing result:\");\n                console.log(JSON.stringify(rpcResponse));\n                continue;\n            }\n            const newSlot = rpcResponse.result.context.slot;\n            if (newSlot > this.mostRecentSlot) {\n                this.mostRecentSlot = newSlot;\n            }\n            const accountsToLoad = accountsToLoadChunks[i];\n            for(const j in accountsToLoad){\n                const accountToLoad = accountsToLoad[j];\n                const key = accountToLoad.publicKey.toBase58();\n                const oldRPCResponse = this.bufferAndSlotMap.get(key);\n                if (oldRPCResponse && newSlot <= oldRPCResponse.slot) {\n                    continue;\n                }\n                let newBuffer = undefined;\n                if (rpcResponse.result.value[j]) {\n                    const raw = rpcResponse.result.value[j].data[0];\n                    const dataType = rpcResponse.result.value[j].data[1];\n                    newBuffer = Buffer.from(raw, dataType);\n                }\n                if (!oldRPCResponse) {\n                    this.bufferAndSlotMap.set(key, {\n                        slot: newSlot,\n                        buffer: newBuffer\n                    });\n                    this.handleAccountCallbacks(accountToLoad, newBuffer, newSlot);\n                    continue;\n                }\n                const oldBuffer = oldRPCResponse.buffer;\n                if (newBuffer && (!oldBuffer || !newBuffer.equals(oldBuffer))) {\n                    this.bufferAndSlotMap.set(key, {\n                        slot: newSlot,\n                        buffer: newBuffer\n                    });\n                    this.handleAccountCallbacks(accountToLoad, newBuffer, newSlot);\n                }\n            }\n        }\n    }\n    handleAccountCallbacks(accountToLoad, buffer, slot) {\n        for (const [_, callback] of accountToLoad.callbacks){\n            try {\n                callback(buffer, slot);\n            } catch (e) {\n                console.log(\"Bulk account load: error in account callback\");\n                console.log(\"accounto to load\", accountToLoad.publicKey.toString());\n                console.log(\"buffer\", buffer.toString(\"base64\"));\n                for (const callback of accountToLoad.callbacks.values()){\n                    console.log(\"account to load cb\", callback);\n                }\n                throw e;\n            }\n        }\n    }\n    getBufferAndSlot(publicKey) {\n        return this.bufferAndSlotMap.get(publicKey.toString());\n    }\n    startPolling() {\n        if (this.intervalId) {\n            return;\n        }\n        if (this.pollingFrequency !== 0) this.intervalId = setInterval(this.load.bind(this), this.pollingFrequency);\n    }\n    stopPolling() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        }\n    }\n    log(msg) {\n        console.log(msg);\n    }\n    updatePollingFrequency(pollingFrequency) {\n        this.stopPolling();\n        this.pollingFrequency = pollingFrequency;\n        if (this.accountsToLoad.size > 0) {\n            this.startPolling();\n        }\n    }\n}\nexports.BulkAccountLoader = BulkAccountLoader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/bulkAccountLoader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/bulkUserStatsSubscription.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/bulkUserStatsSubscription.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.bulkPollingUserStatsSubscribe = void 0;\n/**\n * @param userStats\n * @param accountLoader\n */ async function bulkPollingUserStatsSubscribe(userStats, accountLoader) {\n    if (userStats.length === 0) {\n        await accountLoader.load();\n        return;\n    }\n    await Promise.all(userStats.map((userStat)=>{\n        return userStat.accountSubscriber.addToAccountLoader();\n    }));\n    await accountLoader.load();\n    await Promise.all(userStats.map(async (userStat)=>{\n        return userStat.subscribe();\n    }));\n}\nexports.bulkPollingUserStatsSubscribe = bulkPollingUserStatsSubscribe;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy9idWxrVXNlclN0YXRzU3Vic2NyaXB0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQ0FBcUMsR0FBRyxLQUFLO0FBQzdDOzs7Q0FHQyxHQUNELGVBQWVFLDhCQUE4QkMsU0FBUyxFQUFFQyxhQUFhO0lBQ2pFLElBQUlELFVBQVVFLE1BQU0sS0FBSyxHQUFHO1FBQ3hCLE1BQU1ELGNBQWNFLElBQUk7UUFDeEI7SUFDSjtJQUNBLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0wsVUFBVU0sR0FBRyxDQUFDLENBQUNDO1FBQzdCLE9BQU9BLFNBQVNDLGlCQUFpQixDQUFDQyxrQkFBa0I7SUFDeEQ7SUFDQSxNQUFNUixjQUFjRSxJQUFJO0lBQ3hCLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0wsVUFBVU0sR0FBRyxDQUFDLE9BQU9DO1FBQ25DLE9BQU9BLFNBQVNHLFNBQVM7SUFDN0I7QUFDSjtBQUNBYixxQ0FBcUMsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvYWNjb3VudHMvYnVsa1VzZXJTdGF0c1N1YnNjcmlwdGlvbi5qcz84ZDI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5idWxrUG9sbGluZ1VzZXJTdGF0c1N1YnNjcmliZSA9IHZvaWQgMDtcbi8qKlxuICogQHBhcmFtIHVzZXJTdGF0c1xuICogQHBhcmFtIGFjY291bnRMb2FkZXJcbiAqL1xuYXN5bmMgZnVuY3Rpb24gYnVsa1BvbGxpbmdVc2VyU3RhdHNTdWJzY3JpYmUodXNlclN0YXRzLCBhY2NvdW50TG9hZGVyKSB7XG4gICAgaWYgKHVzZXJTdGF0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYXdhaXQgYWNjb3VudExvYWRlci5sb2FkKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwodXNlclN0YXRzLm1hcCgodXNlclN0YXQpID0+IHtcbiAgICAgICAgcmV0dXJuIHVzZXJTdGF0LmFjY291bnRTdWJzY3JpYmVyLmFkZFRvQWNjb3VudExvYWRlcigpO1xuICAgIH0pKTtcbiAgICBhd2FpdCBhY2NvdW50TG9hZGVyLmxvYWQoKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbCh1c2VyU3RhdHMubWFwKGFzeW5jICh1c2VyU3RhdCkgPT4ge1xuICAgICAgICByZXR1cm4gdXNlclN0YXQuc3Vic2NyaWJlKCk7XG4gICAgfSkpO1xufVxuZXhwb3J0cy5idWxrUG9sbGluZ1VzZXJTdGF0c1N1YnNjcmliZSA9IGJ1bGtQb2xsaW5nVXNlclN0YXRzU3Vic2NyaWJlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYnVsa1BvbGxpbmdVc2VyU3RhdHNTdWJzY3JpYmUiLCJ1c2VyU3RhdHMiLCJhY2NvdW50TG9hZGVyIiwibGVuZ3RoIiwibG9hZCIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJ1c2VyU3RhdCIsImFjY291bnRTdWJzY3JpYmVyIiwiYWRkVG9BY2NvdW50TG9hZGVyIiwic3Vic2NyaWJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/bulkUserStatsSubscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/bulkUserSubscription.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/bulkUserSubscription.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.bulkPollingUserSubscribe = void 0;\n/**\n * @param users\n * @param accountLoader\n */ async function bulkPollingUserSubscribe(users, accountLoader) {\n    if (users.length === 0) {\n        await accountLoader.load();\n        return;\n    }\n    await Promise.all(users.map((user)=>{\n        return user.accountSubscriber.addToAccountLoader();\n    }));\n    await accountLoader.load();\n    await Promise.all(users.map(async (user)=>{\n        return user.subscribe();\n    }));\n}\nexports.bulkPollingUserSubscribe = bulkPollingUserSubscribe;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy9idWxrVXNlclN1YnNjcmlwdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0NBQWdDLEdBQUcsS0FBSztBQUN4Qzs7O0NBR0MsR0FDRCxlQUFlRSx5QkFBeUJDLEtBQUssRUFBRUMsYUFBYTtJQUN4RCxJQUFJRCxNQUFNRSxNQUFNLEtBQUssR0FBRztRQUNwQixNQUFNRCxjQUFjRSxJQUFJO1FBQ3hCO0lBQ0o7SUFDQSxNQUFNQyxRQUFRQyxHQUFHLENBQUNMLE1BQU1NLEdBQUcsQ0FBQyxDQUFDQztRQUN6QixPQUFPQSxLQUFLQyxpQkFBaUIsQ0FBQ0Msa0JBQWtCO0lBQ3BEO0lBQ0EsTUFBTVIsY0FBY0UsSUFBSTtJQUN4QixNQUFNQyxRQUFRQyxHQUFHLENBQUNMLE1BQU1NLEdBQUcsQ0FBQyxPQUFPQztRQUMvQixPQUFPQSxLQUFLRyxTQUFTO0lBQ3pCO0FBQ0o7QUFDQWIsZ0NBQWdDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL2FjY291bnRzL2J1bGtVc2VyU3Vic2NyaXB0aW9uLmpzP2FiMDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ1bGtQb2xsaW5nVXNlclN1YnNjcmliZSA9IHZvaWQgMDtcbi8qKlxuICogQHBhcmFtIHVzZXJzXG4gKiBAcGFyYW0gYWNjb3VudExvYWRlclxuICovXG5hc3luYyBmdW5jdGlvbiBidWxrUG9sbGluZ1VzZXJTdWJzY3JpYmUodXNlcnMsIGFjY291bnRMb2FkZXIpIHtcbiAgICBpZiAodXNlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGF3YWl0IGFjY291bnRMb2FkZXIubG9hZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGF3YWl0IFByb21pc2UuYWxsKHVzZXJzLm1hcCgodXNlcikgPT4ge1xuICAgICAgICByZXR1cm4gdXNlci5hY2NvdW50U3Vic2NyaWJlci5hZGRUb0FjY291bnRMb2FkZXIoKTtcbiAgICB9KSk7XG4gICAgYXdhaXQgYWNjb3VudExvYWRlci5sb2FkKCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwodXNlcnMubWFwKGFzeW5jICh1c2VyKSA9PiB7XG4gICAgICAgIHJldHVybiB1c2VyLnN1YnNjcmliZSgpO1xuICAgIH0pKTtcbn1cbmV4cG9ydHMuYnVsa1BvbGxpbmdVc2VyU3Vic2NyaWJlID0gYnVsa1BvbGxpbmdVc2VyU3Vic2NyaWJlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYnVsa1BvbGxpbmdVc2VyU3Vic2NyaWJlIiwidXNlcnMiLCJhY2NvdW50TG9hZGVyIiwibGVuZ3RoIiwibG9hZCIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJ1c2VyIiwiYWNjb3VudFN1YnNjcmliZXIiLCJhZGRUb0FjY291bnRMb2FkZXIiLCJzdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/bulkUserSubscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/fetch.js":
/*!************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/fetch.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fetchUserStatsAccount = exports.fetchUserAccountsUsingKeys = exports.fetchUserAccounts = void 0;\nconst pda_1 = __webpack_require__(/*! ../addresses/pda */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/addresses/pda.js\");\nasync function fetchUserAccounts(connection, program, authority, limit = 8) {\n    const userAccountPublicKeys = new Array();\n    for(let i = 0; i < limit; i++){\n        userAccountPublicKeys.push(await (0, pda_1.getUserAccountPublicKey)(program.programId, authority, i));\n    }\n    return fetchUserAccountsUsingKeys(connection, program, userAccountPublicKeys);\n}\nexports.fetchUserAccounts = fetchUserAccounts;\nasync function fetchUserAccountsUsingKeys(connection, program, userAccountPublicKeys) {\n    const accountInfos = await connection.getMultipleAccountsInfo(userAccountPublicKeys, \"confirmed\");\n    return accountInfos.map((accountInfo)=>{\n        if (!accountInfo) {\n            return undefined;\n        }\n        return program.account.user.coder.accounts.decode(\"User\", accountInfo.data);\n    });\n}\nexports.fetchUserAccountsUsingKeys = fetchUserAccountsUsingKeys;\nasync function fetchUserStatsAccount(connection, program, authority) {\n    const userStatsPublicKey = (0, pda_1.getUserStatsAccountPublicKey)(program.programId, authority);\n    const accountInfo = await connection.getAccountInfo(userStatsPublicKey, \"confirmed\");\n    return accountInfo ? program.account.user.coder.accounts.decode(\"UserStats\", accountInfo.data) : undefined;\n}\nexports.fetchUserStatsAccount = fetchUserStatsAccount;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy9mZXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUdBLGtDQUFrQyxHQUFHQSx5QkFBeUIsR0FBRyxLQUFLO0FBQ3RHLE1BQU1LLFFBQVFDLG1CQUFPQSxDQUFDLG1GQUFrQjtBQUN4QyxlQUFlRixrQkFBa0JHLFVBQVUsRUFBRUMsT0FBTyxFQUFFQyxTQUFTLEVBQUVDLFFBQVEsQ0FBQztJQUN0RSxNQUFNQyx3QkFBd0IsSUFBSUM7SUFDbEMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILE9BQU9HLElBQUs7UUFDNUJGLHNCQUFzQkcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHVCxNQUFNVSx1QkFBdUIsRUFBRVAsUUFBUVEsU0FBUyxFQUFFUCxXQUFXSTtJQUN0RztJQUNBLE9BQU9WLDJCQUEyQkksWUFBWUMsU0FBU0c7QUFDM0Q7QUFDQVgseUJBQXlCLEdBQUdJO0FBQzVCLGVBQWVELDJCQUEyQkksVUFBVSxFQUFFQyxPQUFPLEVBQUVHLHFCQUFxQjtJQUNoRixNQUFNTSxlQUFlLE1BQU1WLFdBQVdXLHVCQUF1QixDQUFDUCx1QkFBdUI7SUFDckYsT0FBT00sYUFBYUUsR0FBRyxDQUFDLENBQUNDO1FBQ3JCLElBQUksQ0FBQ0EsYUFBYTtZQUNkLE9BQU9DO1FBQ1g7UUFDQSxPQUFPYixRQUFRYyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxRQUFRLENBQUNDLE1BQU0sQ0FBQyxRQUFRTixZQUFZTyxJQUFJO0lBQzlFO0FBQ0o7QUFDQTNCLGtDQUFrQyxHQUFHRztBQUNyQyxlQUFlRCxzQkFBc0JLLFVBQVUsRUFBRUMsT0FBTyxFQUFFQyxTQUFTO0lBQy9ELE1BQU1tQixxQkFBcUIsQ0FBQyxHQUFHdkIsTUFBTXdCLDRCQUE0QixFQUFFckIsUUFBUVEsU0FBUyxFQUFFUDtJQUN0RixNQUFNVyxjQUFjLE1BQU1iLFdBQVd1QixjQUFjLENBQUNGLG9CQUFvQjtJQUN4RSxPQUFPUixjQUNEWixRQUFRYyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxRQUFRLENBQUNDLE1BQU0sQ0FBQyxhQUFhTixZQUFZTyxJQUFJLElBQ3hFTjtBQUNWO0FBQ0FyQiw2QkFBNkIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvYWNjb3VudHMvZmV0Y2guanM/YmU1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmV0Y2hVc2VyU3RhdHNBY2NvdW50ID0gZXhwb3J0cy5mZXRjaFVzZXJBY2NvdW50c1VzaW5nS2V5cyA9IGV4cG9ydHMuZmV0Y2hVc2VyQWNjb3VudHMgPSB2b2lkIDA7XG5jb25zdCBwZGFfMSA9IHJlcXVpcmUoXCIuLi9hZGRyZXNzZXMvcGRhXCIpO1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hVc2VyQWNjb3VudHMoY29ubmVjdGlvbiwgcHJvZ3JhbSwgYXV0aG9yaXR5LCBsaW1pdCA9IDgpIHtcbiAgICBjb25zdCB1c2VyQWNjb3VudFB1YmxpY0tleXMgPSBuZXcgQXJyYXkoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbWl0OyBpKyspIHtcbiAgICAgICAgdXNlckFjY291bnRQdWJsaWNLZXlzLnB1c2goYXdhaXQgKDAsIHBkYV8xLmdldFVzZXJBY2NvdW50UHVibGljS2V5KShwcm9ncmFtLnByb2dyYW1JZCwgYXV0aG9yaXR5LCBpKSk7XG4gICAgfVxuICAgIHJldHVybiBmZXRjaFVzZXJBY2NvdW50c1VzaW5nS2V5cyhjb25uZWN0aW9uLCBwcm9ncmFtLCB1c2VyQWNjb3VudFB1YmxpY0tleXMpO1xufVxuZXhwb3J0cy5mZXRjaFVzZXJBY2NvdW50cyA9IGZldGNoVXNlckFjY291bnRzO1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hVc2VyQWNjb3VudHNVc2luZ0tleXMoY29ubmVjdGlvbiwgcHJvZ3JhbSwgdXNlckFjY291bnRQdWJsaWNLZXlzKSB7XG4gICAgY29uc3QgYWNjb3VudEluZm9zID0gYXdhaXQgY29ubmVjdGlvbi5nZXRNdWx0aXBsZUFjY291bnRzSW5mbyh1c2VyQWNjb3VudFB1YmxpY0tleXMsICdjb25maXJtZWQnKTtcbiAgICByZXR1cm4gYWNjb3VudEluZm9zLm1hcCgoYWNjb3VudEluZm8pID0+IHtcbiAgICAgICAgaWYgKCFhY2NvdW50SW5mbykge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvZ3JhbS5hY2NvdW50LnVzZXIuY29kZXIuYWNjb3VudHMuZGVjb2RlKCdVc2VyJywgYWNjb3VudEluZm8uZGF0YSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZldGNoVXNlckFjY291bnRzVXNpbmdLZXlzID0gZmV0Y2hVc2VyQWNjb3VudHNVc2luZ0tleXM7XG5hc3luYyBmdW5jdGlvbiBmZXRjaFVzZXJTdGF0c0FjY291bnQoY29ubmVjdGlvbiwgcHJvZ3JhbSwgYXV0aG9yaXR5KSB7XG4gICAgY29uc3QgdXNlclN0YXRzUHVibGljS2V5ID0gKDAsIHBkYV8xLmdldFVzZXJTdGF0c0FjY291bnRQdWJsaWNLZXkpKHByb2dyYW0ucHJvZ3JhbUlkLCBhdXRob3JpdHkpO1xuICAgIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgY29ubmVjdGlvbi5nZXRBY2NvdW50SW5mbyh1c2VyU3RhdHNQdWJsaWNLZXksICdjb25maXJtZWQnKTtcbiAgICByZXR1cm4gYWNjb3VudEluZm9cbiAgICAgICAgPyBwcm9ncmFtLmFjY291bnQudXNlci5jb2Rlci5hY2NvdW50cy5kZWNvZGUoJ1VzZXJTdGF0cycsIGFjY291bnRJbmZvLmRhdGEpXG4gICAgICAgIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5mZXRjaFVzZXJTdGF0c0FjY291bnQgPSBmZXRjaFVzZXJTdGF0c0FjY291bnQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmZXRjaFVzZXJTdGF0c0FjY291bnQiLCJmZXRjaFVzZXJBY2NvdW50c1VzaW5nS2V5cyIsImZldGNoVXNlckFjY291bnRzIiwicGRhXzEiLCJyZXF1aXJlIiwiY29ubmVjdGlvbiIsInByb2dyYW0iLCJhdXRob3JpdHkiLCJsaW1pdCIsInVzZXJBY2NvdW50UHVibGljS2V5cyIsIkFycmF5IiwiaSIsInB1c2giLCJnZXRVc2VyQWNjb3VudFB1YmxpY0tleSIsInByb2dyYW1JZCIsImFjY291bnRJbmZvcyIsImdldE11bHRpcGxlQWNjb3VudHNJbmZvIiwibWFwIiwiYWNjb3VudEluZm8iLCJ1bmRlZmluZWQiLCJhY2NvdW50IiwidXNlciIsImNvZGVyIiwiYWNjb3VudHMiLCJkZWNvZGUiLCJkYXRhIiwidXNlclN0YXRzUHVibGljS2V5IiwiZ2V0VXNlclN0YXRzQWNjb3VudFB1YmxpY0tleSIsImdldEFjY291bnRJbmZvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/fetch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/mockUserAccountSubscriber.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/mockUserAccountSubscriber.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MockUserAccountSubscriber = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nclass MockUserAccountSubscriber {\n    constructor(userAccountPublicKey, data, slot){\n        this.isSubscribed = true;\n        this.eventEmitter = new events_1.EventEmitter();\n        this.userAccountPublicKey = userAccountPublicKey;\n        this.user = {\n            data,\n            slot\n        };\n    }\n    async subscribe(_userAccount) {\n        return true;\n    }\n    async addToAccountLoader() {}\n    async fetch() {}\n    doesAccountExist() {\n        return this.user !== undefined;\n    }\n    async unsubscribe() {}\n    assertIsSubscribed() {}\n    getUserAccountAndSlot() {\n        return this.user;\n    }\n    updateData(userAccount, slot) {\n        this.user = {\n            data: userAccount,\n            slot\n        };\n        this.eventEmitter.emit(\"userAccountUpdate\", userAccount);\n        this.eventEmitter.emit(\"update\");\n    }\n}\nexports.MockUserAccountSubscriber = MockUserAccountSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy9tb2NrVXNlckFjY291bnRTdWJzY3JpYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQ0FBaUMsR0FBRyxLQUFLO0FBQ3pDLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1GO0lBQ0ZHLFlBQVlDLG9CQUFvQixFQUFFQyxJQUFJLEVBQUVDLElBQUksQ0FBRTtRQUMxQyxJQUFJLENBQUNDLFlBQVksR0FBRztRQUNwQixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJUCxTQUFTUSxZQUFZO1FBQzdDLElBQUksQ0FBQ0wsb0JBQW9CLEdBQUdBO1FBQzVCLElBQUksQ0FBQ00sSUFBSSxHQUFHO1lBQUVMO1lBQU1DO1FBQUs7SUFDN0I7SUFDQSxNQUFNSyxVQUFVQyxZQUFZLEVBQUU7UUFDMUIsT0FBTztJQUNYO0lBQ0EsTUFBTUMscUJBQXFCLENBQUU7SUFDN0IsTUFBTUMsUUFBUSxDQUFFO0lBQ2hCQyxtQkFBbUI7UUFDZixPQUFPLElBQUksQ0FBQ0wsSUFBSSxLQUFLTTtJQUN6QjtJQUNBLE1BQU1DLGNBQWMsQ0FBRTtJQUN0QkMscUJBQXFCLENBQUU7SUFDdkJDLHdCQUF3QjtRQUNwQixPQUFPLElBQUksQ0FBQ1QsSUFBSTtJQUNwQjtJQUNBVSxXQUFXQyxXQUFXLEVBQUVmLElBQUksRUFBRTtRQUMxQixJQUFJLENBQUNJLElBQUksR0FBRztZQUFFTCxNQUFNZ0I7WUFBYWY7UUFBSztRQUN0QyxJQUFJLENBQUNFLFlBQVksQ0FBQ2MsSUFBSSxDQUFDLHFCQUFxQkQ7UUFDNUMsSUFBSSxDQUFDYixZQUFZLENBQUNjLElBQUksQ0FBQztJQUMzQjtBQUNKO0FBQ0F4QixpQ0FBaUMsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvYWNjb3VudHMvbW9ja1VzZXJBY2NvdW50U3Vic2NyaWJlci5qcz8yMjBhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb2NrVXNlckFjY291bnRTdWJzY3JpYmVyID0gdm9pZCAwO1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY2xhc3MgTW9ja1VzZXJBY2NvdW50U3Vic2NyaWJlciB7XG4gICAgY29uc3RydWN0b3IodXNlckFjY291bnRQdWJsaWNLZXksIGRhdGEsIHNsb3QpIHtcbiAgICAgICAgdGhpcy5pc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlciA9IG5ldyBldmVudHNfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy51c2VyQWNjb3VudFB1YmxpY0tleSA9IHVzZXJBY2NvdW50UHVibGljS2V5O1xuICAgICAgICB0aGlzLnVzZXIgPSB7IGRhdGEsIHNsb3QgfTtcbiAgICB9XG4gICAgYXN5bmMgc3Vic2NyaWJlKF91c2VyQWNjb3VudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgYXN5bmMgYWRkVG9BY2NvdW50TG9hZGVyKCkgeyB9XG4gICAgYXN5bmMgZmV0Y2goKSB7IH1cbiAgICBkb2VzQWNjb3VudEV4aXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VyICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGFzeW5jIHVuc3Vic2NyaWJlKCkgeyB9XG4gICAgYXNzZXJ0SXNTdWJzY3JpYmVkKCkgeyB9XG4gICAgZ2V0VXNlckFjY291bnRBbmRTbG90KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VyO1xuICAgIH1cbiAgICB1cGRhdGVEYXRhKHVzZXJBY2NvdW50LCBzbG90KSB7XG4gICAgICAgIHRoaXMudXNlciA9IHsgZGF0YTogdXNlckFjY291bnQsIHNsb3QgfTtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgndXNlckFjY291bnRVcGRhdGUnLCB1c2VyQWNjb3VudCk7XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoJ3VwZGF0ZScpO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9ja1VzZXJBY2NvdW50U3Vic2NyaWJlciA9IE1vY2tVc2VyQWNjb3VudFN1YnNjcmliZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNb2NrVXNlckFjY291bnRTdWJzY3JpYmVyIiwiZXZlbnRzXzEiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJ1c2VyQWNjb3VudFB1YmxpY0tleSIsImRhdGEiLCJzbG90IiwiaXNTdWJzY3JpYmVkIiwiZXZlbnRFbWl0dGVyIiwiRXZlbnRFbWl0dGVyIiwidXNlciIsInN1YnNjcmliZSIsIl91c2VyQWNjb3VudCIsImFkZFRvQWNjb3VudExvYWRlciIsImZldGNoIiwiZG9lc0FjY291bnRFeGlzdCIsInVuZGVmaW5lZCIsInVuc3Vic2NyaWJlIiwiYXNzZXJ0SXNTdWJzY3JpYmVkIiwiZ2V0VXNlckFjY291bnRBbmRTbG90IiwidXBkYXRlRGF0YSIsInVzZXJBY2NvdW50IiwiZW1pdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/mockUserAccountSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingDriftClientAccountSubscriber.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/pollingDriftClientAccountSubscriber.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PollingDriftClientAccountSubscriber = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/types.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst pda_1 = __webpack_require__(/*! ../addresses/pda */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/addresses/pda.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/utils.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst oracleClientCache_1 = __webpack_require__(/*! ../oracles/oracleClientCache */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/oracleClientCache.js\");\nconst quoteAssetOracleClient_1 = __webpack_require__(/*! ../oracles/quoteAssetOracleClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/quoteAssetOracleClient.js\");\nconst config_1 = __webpack_require__(/*! ../config */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/config.js\");\nclass PollingDriftClientAccountSubscriber {\n    constructor(program, accountLoader, perpMarketIndexes, spotMarketIndexes, oracleInfos, shouldFindAllMarketsAndOracles){\n        this.oracleClientCache = new oracleClientCache_1.OracleClientCache();\n        this.accountsToPoll = new Map();\n        this.oraclesToPoll = new Map();\n        this.perpMarket = new Map();\n        this.spotMarket = new Map();\n        this.oracles = new Map();\n        this.isSubscribing = false;\n        this.isSubscribed = false;\n        this.program = program;\n        this.eventEmitter = new events_1.EventEmitter();\n        this.accountLoader = accountLoader;\n        this.perpMarketIndexes = perpMarketIndexes;\n        this.spotMarketIndexes = spotMarketIndexes;\n        this.oracleInfos = oracleInfos;\n        this.shouldFindAllMarketsAndOracles = shouldFindAllMarketsAndOracles;\n    }\n    async subscribe() {\n        if (this.isSubscribed) {\n            return true;\n        }\n        if (this.isSubscribing) {\n            return await this.subscriptionPromise;\n        }\n        this.isSubscribing = true;\n        this.subscriptionPromise = new Promise((res)=>{\n            this.subscriptionPromiseResolver = res;\n        });\n        if (this.shouldFindAllMarketsAndOracles) {\n            const { perpMarketIndexes, spotMarketIndexes, oracleInfos } = await (0, config_1.findAllMarketAndOracles)(this.program);\n            this.perpMarketIndexes = perpMarketIndexes;\n            this.spotMarketIndexes = spotMarketIndexes;\n            this.oracleInfos = oracleInfos;\n        }\n        await this.updateAccountsToPoll();\n        await this.updateOraclesToPoll();\n        await this.addToAccountLoader();\n        let subscriptionSucceeded = false;\n        let retries = 0;\n        while(!subscriptionSucceeded && retries < 5){\n            await this.fetch();\n            subscriptionSucceeded = this.didSubscriptionSucceed();\n            retries++;\n        }\n        if (subscriptionSucceeded) {\n            this.eventEmitter.emit(\"update\");\n        }\n        this.isSubscribing = false;\n        this.isSubscribed = subscriptionSucceeded;\n        this.subscriptionPromiseResolver(subscriptionSucceeded);\n        return subscriptionSucceeded;\n    }\n    async updateAccountsToPoll() {\n        if (this.accountsToPoll.size > 0) {\n            return;\n        }\n        const statePublicKey = await (0, pda_1.getDriftStateAccountPublicKey)(this.program.programId);\n        this.accountsToPoll.set(statePublicKey.toString(), {\n            key: \"state\",\n            publicKey: statePublicKey,\n            eventType: \"stateAccountUpdate\"\n        });\n        await this.updatePerpMarketAccountsToPoll();\n        await this.updateSpotMarketAccountsToPoll();\n    }\n    async updatePerpMarketAccountsToPoll() {\n        for (const marketIndex of this.perpMarketIndexes){\n            await this.addPerpMarketAccountToPoll(marketIndex);\n        }\n        return true;\n    }\n    async addPerpMarketAccountToPoll(marketIndex) {\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, marketIndex);\n        this.accountsToPoll.set(perpMarketPublicKey.toString(), {\n            key: \"perpMarket\",\n            publicKey: perpMarketPublicKey,\n            eventType: \"perpMarketAccountUpdate\",\n            mapKey: marketIndex\n        });\n        return true;\n    }\n    async updateSpotMarketAccountsToPoll() {\n        for (const marketIndex of this.spotMarketIndexes){\n            await this.addSpotMarketAccountToPoll(marketIndex);\n        }\n        return true;\n    }\n    async addSpotMarketAccountToPoll(marketIndex) {\n        const marketPublicKey = await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, marketIndex);\n        this.accountsToPoll.set(marketPublicKey.toString(), {\n            key: \"spotMarket\",\n            publicKey: marketPublicKey,\n            eventType: \"spotMarketAccountUpdate\",\n            mapKey: marketIndex\n        });\n        return true;\n    }\n    updateOraclesToPoll() {\n        for (const oracleInfo of this.oracleInfos){\n            if (!oracleInfo.publicKey.equals(web3_js_1.PublicKey.default)) {\n                this.addOracleToPoll(oracleInfo);\n            }\n        }\n        return true;\n    }\n    addOracleToPoll(oracleInfo) {\n        this.oraclesToPoll.set(oracleInfo.publicKey.toString(), {\n            publicKey: oracleInfo.publicKey,\n            source: oracleInfo.source\n        });\n        return true;\n    }\n    async addToAccountLoader() {\n        for (const [_, accountToPoll] of this.accountsToPoll){\n            await this.addAccountToAccountLoader(accountToPoll);\n        }\n        for (const [_, oracleToPoll] of this.oraclesToPoll){\n            await this.addOracleToAccountLoader(oracleToPoll);\n        }\n        this.errorCallbackId = this.accountLoader.addErrorCallbacks((error)=>{\n            this.eventEmitter.emit(\"error\", error);\n        });\n    }\n    async addAccountToAccountLoader(accountToPoll) {\n        accountToPoll.callbackId = await this.accountLoader.addAccount(accountToPoll.publicKey, (buffer, slot)=>{\n            if (!buffer) return;\n            const account = this.program.account[accountToPoll.key].coder.accounts.decode((0, utils_1.capitalize)(accountToPoll.key), buffer);\n            const dataAndSlot = {\n                data: account,\n                slot\n            };\n            if (accountToPoll.mapKey != undefined) {\n                this[accountToPoll.key].set(accountToPoll.mapKey, dataAndSlot);\n            } else {\n                this[accountToPoll.key] = dataAndSlot;\n            }\n            // @ts-ignore\n            this.eventEmitter.emit(accountToPoll.eventType, account);\n            this.eventEmitter.emit(\"update\");\n            if (!this.isSubscribed) {\n                this.isSubscribed = this.didSubscriptionSucceed();\n            }\n        });\n    }\n    async addOracleToAccountLoader(oracleToPoll) {\n        const oracleClient = this.oracleClientCache.get(oracleToPoll.source, this.program.provider.connection);\n        oracleToPoll.callbackId = await this.accountLoader.addAccount(oracleToPoll.publicKey, (buffer, slot)=>{\n            if (!buffer) return;\n            const oraclePriceData = oracleClient.getOraclePriceDataFromBuffer(buffer);\n            const dataAndSlot = {\n                data: oraclePriceData,\n                slot\n            };\n            this.oracles.set(oracleToPoll.publicKey.toString(), dataAndSlot);\n            this.eventEmitter.emit(\"oraclePriceUpdate\", oracleToPoll.publicKey, oraclePriceData);\n            this.eventEmitter.emit(\"update\");\n        });\n    }\n    async fetch() {\n        await this.accountLoader.load();\n        for (const [_, accountToPoll] of this.accountsToPoll){\n            const { buffer, slot } = this.accountLoader.getBufferAndSlot(accountToPoll.publicKey);\n            if (buffer) {\n                const account = this.program.account[accountToPoll.key].coder.accounts.decode((0, utils_1.capitalize)(accountToPoll.key), buffer);\n                if (accountToPoll.mapKey != undefined) {\n                    this[accountToPoll.key].set(accountToPoll.mapKey, {\n                        data: account,\n                        slot\n                    });\n                } else {\n                    this[accountToPoll.key] = {\n                        data: account,\n                        slot\n                    };\n                }\n            }\n        }\n        for (const [_, oracleToPoll] of this.oraclesToPoll){\n            const { buffer, slot } = this.accountLoader.getBufferAndSlot(oracleToPoll.publicKey);\n            if (buffer) {\n                const oracleClient = this.oracleClientCache.get(oracleToPoll.source, this.program.provider.connection);\n                const oraclePriceData = oracleClient.getOraclePriceDataFromBuffer(buffer);\n                this.oracles.set(oracleToPoll.publicKey.toString(), {\n                    data: oraclePriceData,\n                    slot\n                });\n            }\n        }\n    }\n    didSubscriptionSucceed() {\n        if (this.state) return true;\n        return false;\n    }\n    async unsubscribe() {\n        for (const [_, accountToPoll] of this.accountsToPoll){\n            this.accountLoader.removeAccount(accountToPoll.publicKey, accountToPoll.callbackId);\n        }\n        for (const [_, oracleToPoll] of this.oraclesToPoll){\n            this.accountLoader.removeAccount(oracleToPoll.publicKey, oracleToPoll.callbackId);\n        }\n        this.accountLoader.removeErrorCallbacks(this.errorCallbackId);\n        this.errorCallbackId = undefined;\n        this.accountsToPoll.clear();\n        this.oraclesToPoll.clear();\n        this.isSubscribed = false;\n    }\n    async addSpotMarket(marketIndex) {\n        const marketPublicKey = await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, marketIndex);\n        if (this.accountsToPoll.has(marketPublicKey.toString())) {\n            return true;\n        }\n        await this.addSpotMarketAccountToPoll(marketIndex);\n        const accountToPoll = this.accountsToPoll.get(marketPublicKey.toString());\n        await this.addAccountToAccountLoader(accountToPoll);\n        return true;\n    }\n    async addPerpMarket(marketIndex) {\n        const marketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, marketIndex);\n        if (this.accountsToPoll.has(marketPublicKey.toString())) {\n            return true;\n        }\n        await this.addPerpMarketAccountToPoll(marketIndex);\n        const accountToPoll = this.accountsToPoll.get(marketPublicKey.toString());\n        await this.addAccountToAccountLoader(accountToPoll);\n        return true;\n    }\n    async addOracle(oracleInfo) {\n        if (oracleInfo.publicKey.equals(web3_js_1.PublicKey.default) || this.oraclesToPoll.has(oracleInfo.publicKey.toString())) {\n            return true;\n        }\n        this.addOracleToPoll(oracleInfo);\n        const oracleToPoll = this.oraclesToPoll.get(oracleInfo.publicKey.toString());\n        await this.addOracleToAccountLoader(oracleToPoll);\n        return true;\n    }\n    assertIsSubscribed() {\n        if (!this.isSubscribed) {\n            throw new types_1.NotSubscribedError(\"You must call `subscribe` before using this function\");\n        }\n    }\n    getStateAccountAndSlot() {\n        this.assertIsSubscribed();\n        return this.state;\n    }\n    getMarketAccountAndSlot(marketIndex) {\n        return this.perpMarket.get(marketIndex);\n    }\n    getMarketAccountsAndSlots() {\n        return Array.from(this.perpMarket.values());\n    }\n    getSpotMarketAccountAndSlot(marketIndex) {\n        return this.spotMarket.get(marketIndex);\n    }\n    getSpotMarketAccountsAndSlots() {\n        return Array.from(this.spotMarket.values());\n    }\n    getOraclePriceDataAndSlot(oraclePublicKey) {\n        this.assertIsSubscribed();\n        if (oraclePublicKey.equals(web3_js_1.PublicKey.default)) {\n            return {\n                data: quoteAssetOracleClient_1.QUOTE_ORACLE_PRICE_DATA,\n                slot: 0\n            };\n        }\n        return this.oracles.get(oraclePublicKey.toString());\n    }\n    updateAccountLoaderPollingFrequency(pollingFrequency) {\n        this.accountLoader.updatePollingFrequency(pollingFrequency);\n    }\n}\nexports.PollingDriftClientAccountSubscriber = PollingDriftClientAccountSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingDriftClientAccountSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingOracleAccountSubscriber.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/pollingOracleAccountSubscriber.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PollingOracleAccountSubscriber = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/types.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nclass PollingOracleAccountSubscriber {\n    constructor(publicKey, oracleClient, accountLoader){\n        this.isSubscribed = false;\n        this.publicKey = publicKey;\n        this.oracleClient = oracleClient;\n        this.accountLoader = accountLoader;\n        this.eventEmitter = new events_1.EventEmitter();\n    }\n    async subscribe() {\n        if (this.isSubscribed) {\n            return true;\n        }\n        await this.addToAccountLoader();\n        let subscriptionSucceeded = false;\n        let retries = 0;\n        while(!subscriptionSucceeded && retries < 5){\n            await this.fetch();\n            subscriptionSucceeded = this.didSubscriptionSucceed();\n            retries++;\n        }\n        if (subscriptionSucceeded) {\n            this.eventEmitter.emit(\"update\");\n        }\n        this.isSubscribed = subscriptionSucceeded;\n        return subscriptionSucceeded;\n    }\n    async addToAccountLoader() {\n        if (this.callbackId) {\n            return;\n        }\n        this.callbackId = await this.accountLoader.addAccount(this.publicKey, async (buffer, slot)=>{\n            const oraclePriceData = await this.oracleClient.getOraclePriceDataFromBuffer(buffer);\n            this.oraclePriceData = {\n                data: oraclePriceData,\n                slot\n            };\n            // @ts-ignore\n            this.eventEmitter.emit(\"oracleUpdate\", oraclePriceData);\n            this.eventEmitter.emit(\"update\");\n        });\n        this.errorCallbackId = this.accountLoader.addErrorCallbacks((error)=>{\n            this.eventEmitter.emit(\"error\", error);\n        });\n    }\n    async fetch() {\n        await this.accountLoader.load();\n        const { buffer, slot } = this.accountLoader.getBufferAndSlot(this.publicKey);\n        this.oraclePriceData = {\n            data: await this.oracleClient.getOraclePriceDataFromBuffer(buffer),\n            slot\n        };\n    }\n    async unsubscribe() {\n        if (!this.isSubscribed) {\n            return;\n        }\n        this.accountLoader.removeAccount(this.publicKey, this.callbackId);\n        this.callbackId = undefined;\n        this.accountLoader.removeErrorCallbacks(this.errorCallbackId);\n        this.errorCallbackId = undefined;\n        this.isSubscribed = false;\n    }\n    assertIsSubscribed() {\n        if (!this.isSubscribed) {\n            throw new types_1.NotSubscribedError(\"You must call `subscribe` before using this function\");\n        }\n    }\n    getOraclePriceData() {\n        this.assertIsSubscribed();\n        return this.oraclePriceData;\n    }\n    didSubscriptionSucceed() {\n        return !!this.oraclePriceData;\n    }\n}\nexports.PollingOracleAccountSubscriber = PollingOracleAccountSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy9wb2xsaW5nT3JhY2xlQWNjb3VudFN1YnNjcmliZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNDQUFzQyxHQUFHLEtBQUs7QUFDOUMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsMkVBQVM7QUFDakMsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUY7SUFDRkksWUFBWUMsU0FBUyxFQUFFQyxZQUFZLEVBQUVDLGFBQWEsQ0FBRTtRQUNoRCxJQUFJLENBQUNDLFlBQVksR0FBRztRQUNwQixJQUFJLENBQUNILFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDQyxZQUFZLEdBQUdBO1FBQ3BCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQTtRQUNyQixJQUFJLENBQUNFLFlBQVksR0FBRyxJQUFJTixTQUFTTyxZQUFZO0lBQ2pEO0lBQ0EsTUFBTUMsWUFBWTtRQUNkLElBQUksSUFBSSxDQUFDSCxZQUFZLEVBQUU7WUFDbkIsT0FBTztRQUNYO1FBQ0EsTUFBTSxJQUFJLENBQUNJLGtCQUFrQjtRQUM3QixJQUFJQyx3QkFBd0I7UUFDNUIsSUFBSUMsVUFBVTtRQUNkLE1BQU8sQ0FBQ0QseUJBQXlCQyxVQUFVLEVBQUc7WUFDMUMsTUFBTSxJQUFJLENBQUNDLEtBQUs7WUFDaEJGLHdCQUF3QixJQUFJLENBQUNHLHNCQUFzQjtZQUNuREY7UUFDSjtRQUNBLElBQUlELHVCQUF1QjtZQUN2QixJQUFJLENBQUNKLFlBQVksQ0FBQ1EsSUFBSSxDQUFDO1FBQzNCO1FBQ0EsSUFBSSxDQUFDVCxZQUFZLEdBQUdLO1FBQ3BCLE9BQU9BO0lBQ1g7SUFDQSxNQUFNRCxxQkFBcUI7UUFDdkIsSUFBSSxJQUFJLENBQUNNLFVBQVUsRUFBRTtZQUNqQjtRQUNKO1FBQ0EsSUFBSSxDQUFDQSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUNYLGFBQWEsQ0FBQ1ksVUFBVSxDQUFDLElBQUksQ0FBQ2QsU0FBUyxFQUFFLE9BQU9lLFFBQVFDO1lBQ2pGLE1BQU1DLGtCQUFrQixNQUFNLElBQUksQ0FBQ2hCLFlBQVksQ0FBQ2lCLDRCQUE0QixDQUFDSDtZQUM3RSxJQUFJLENBQUNFLGVBQWUsR0FBRztnQkFBRUUsTUFBTUY7Z0JBQWlCRDtZQUFLO1lBQ3JELGFBQWE7WUFDYixJQUFJLENBQUNaLFlBQVksQ0FBQ1EsSUFBSSxDQUFDLGdCQUFnQks7WUFDdkMsSUFBSSxDQUFDYixZQUFZLENBQUNRLElBQUksQ0FBQztRQUMzQjtRQUNBLElBQUksQ0FBQ1EsZUFBZSxHQUFHLElBQUksQ0FBQ2xCLGFBQWEsQ0FBQ21CLGlCQUFpQixDQUFDLENBQUNDO1lBQ3pELElBQUksQ0FBQ2xCLFlBQVksQ0FBQ1EsSUFBSSxDQUFDLFNBQVNVO1FBQ3BDO0lBQ0o7SUFDQSxNQUFNWixRQUFRO1FBQ1YsTUFBTSxJQUFJLENBQUNSLGFBQWEsQ0FBQ3FCLElBQUk7UUFDN0IsTUFBTSxFQUFFUixNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQ2QsYUFBYSxDQUFDc0IsZ0JBQWdCLENBQUMsSUFBSSxDQUFDeEIsU0FBUztRQUMzRSxJQUFJLENBQUNpQixlQUFlLEdBQUc7WUFDbkJFLE1BQU0sTUFBTSxJQUFJLENBQUNsQixZQUFZLENBQUNpQiw0QkFBNEIsQ0FBQ0g7WUFDM0RDO1FBQ0o7SUFDSjtJQUNBLE1BQU1TLGNBQWM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQ3RCLFlBQVksRUFBRTtZQUNwQjtRQUNKO1FBQ0EsSUFBSSxDQUFDRCxhQUFhLENBQUN3QixhQUFhLENBQUMsSUFBSSxDQUFDMUIsU0FBUyxFQUFFLElBQUksQ0FBQ2EsVUFBVTtRQUNoRSxJQUFJLENBQUNBLFVBQVUsR0FBR2M7UUFDbEIsSUFBSSxDQUFDekIsYUFBYSxDQUFDMEIsb0JBQW9CLENBQUMsSUFBSSxDQUFDUixlQUFlO1FBQzVELElBQUksQ0FBQ0EsZUFBZSxHQUFHTztRQUN2QixJQUFJLENBQUN4QixZQUFZLEdBQUc7SUFDeEI7SUFDQTBCLHFCQUFxQjtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDMUIsWUFBWSxFQUFFO1lBQ3BCLE1BQU0sSUFBSVAsUUFBUWtDLGtCQUFrQixDQUFDO1FBQ3pDO0lBQ0o7SUFDQUMscUJBQXFCO1FBQ2pCLElBQUksQ0FBQ0Ysa0JBQWtCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDWixlQUFlO0lBQy9CO0lBQ0FOLHlCQUF5QjtRQUNyQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNNLGVBQWU7SUFDakM7QUFDSjtBQUNBeEIsc0NBQXNDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL2FjY291bnRzL3BvbGxpbmdPcmFjbGVBY2NvdW50U3Vic2NyaWJlci5qcz9hMTk4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qb2xsaW5nT3JhY2xlQWNjb3VudFN1YnNjcmliZXIgPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5jbGFzcyBQb2xsaW5nT3JhY2xlQWNjb3VudFN1YnNjcmliZXIge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpY0tleSwgb3JhY2xlQ2xpZW50LCBhY2NvdW50TG9hZGVyKSB7XG4gICAgICAgIHRoaXMuaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHVibGljS2V5ID0gcHVibGljS2V5O1xuICAgICAgICB0aGlzLm9yYWNsZUNsaWVudCA9IG9yYWNsZUNsaWVudDtcbiAgICAgICAgdGhpcy5hY2NvdW50TG9hZGVyID0gYWNjb3VudExvYWRlcjtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRXZlbnRFbWl0dGVyKCk7XG4gICAgfVxuICAgIGFzeW5jIHN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLmFkZFRvQWNjb3VudExvYWRlcigpO1xuICAgICAgICBsZXQgc3Vic2NyaXB0aW9uU3VjY2VlZGVkID0gZmFsc2U7XG4gICAgICAgIGxldCByZXRyaWVzID0gMDtcbiAgICAgICAgd2hpbGUgKCFzdWJzY3JpcHRpb25TdWNjZWVkZWQgJiYgcmV0cmllcyA8IDUpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZmV0Y2goKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvblN1Y2NlZWRlZCA9IHRoaXMuZGlkU3Vic2NyaXB0aW9uU3VjY2VlZCgpO1xuICAgICAgICAgICAgcmV0cmllcysrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25TdWNjZWVkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoJ3VwZGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNTdWJzY3JpYmVkID0gc3Vic2NyaXB0aW9uU3VjY2VlZGVkO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uU3VjY2VlZGVkO1xuICAgIH1cbiAgICBhc3luYyBhZGRUb0FjY291bnRMb2FkZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhbGxiYWNrSWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbGxiYWNrSWQgPSBhd2FpdCB0aGlzLmFjY291bnRMb2FkZXIuYWRkQWNjb3VudCh0aGlzLnB1YmxpY0tleSwgYXN5bmMgKGJ1ZmZlciwgc2xvdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3JhY2xlUHJpY2VEYXRhID0gYXdhaXQgdGhpcy5vcmFjbGVDbGllbnQuZ2V0T3JhY2xlUHJpY2VEYXRhRnJvbUJ1ZmZlcihidWZmZXIpO1xuICAgICAgICAgICAgdGhpcy5vcmFjbGVQcmljZURhdGEgPSB7IGRhdGE6IG9yYWNsZVByaWNlRGF0YSwgc2xvdCB9O1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgnb3JhY2xlVXBkYXRlJywgb3JhY2xlUHJpY2VEYXRhKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoJ3VwZGF0ZScpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lcnJvckNhbGxiYWNrSWQgPSB0aGlzLmFjY291bnRMb2FkZXIuYWRkRXJyb3JDYWxsYmFja3MoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGZldGNoKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmFjY291bnRMb2FkZXIubG9hZCgpO1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgc2xvdCB9ID0gdGhpcy5hY2NvdW50TG9hZGVyLmdldEJ1ZmZlckFuZFNsb3QodGhpcy5wdWJsaWNLZXkpO1xuICAgICAgICB0aGlzLm9yYWNsZVByaWNlRGF0YSA9IHtcbiAgICAgICAgICAgIGRhdGE6IGF3YWl0IHRoaXMub3JhY2xlQ2xpZW50LmdldE9yYWNsZVByaWNlRGF0YUZyb21CdWZmZXIoYnVmZmVyKSxcbiAgICAgICAgICAgIHNsb3QsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY2NvdW50TG9hZGVyLnJlbW92ZUFjY291bnQodGhpcy5wdWJsaWNLZXksIHRoaXMuY2FsbGJhY2tJZCk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5hY2NvdW50TG9hZGVyLnJlbW92ZUVycm9yQ2FsbGJhY2tzKHRoaXMuZXJyb3JDYWxsYmFja0lkKTtcbiAgICAgICAgdGhpcy5lcnJvckNhbGxiYWNrSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgfVxuICAgIGFzc2VydElzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuTm90U3Vic2NyaWJlZEVycm9yKCdZb3UgbXVzdCBjYWxsIGBzdWJzY3JpYmVgIGJlZm9yZSB1c2luZyB0aGlzIGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0T3JhY2xlUHJpY2VEYXRhKCkge1xuICAgICAgICB0aGlzLmFzc2VydElzU3Vic2NyaWJlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5vcmFjbGVQcmljZURhdGE7XG4gICAgfVxuICAgIGRpZFN1YnNjcmlwdGlvblN1Y2NlZWQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMub3JhY2xlUHJpY2VEYXRhO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9sbGluZ09yYWNsZUFjY291bnRTdWJzY3JpYmVyID0gUG9sbGluZ09yYWNsZUFjY291bnRTdWJzY3JpYmVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUG9sbGluZ09yYWNsZUFjY291bnRTdWJzY3JpYmVyIiwidHlwZXNfMSIsInJlcXVpcmUiLCJldmVudHNfMSIsImNvbnN0cnVjdG9yIiwicHVibGljS2V5Iiwib3JhY2xlQ2xpZW50IiwiYWNjb3VudExvYWRlciIsImlzU3Vic2NyaWJlZCIsImV2ZW50RW1pdHRlciIsIkV2ZW50RW1pdHRlciIsInN1YnNjcmliZSIsImFkZFRvQWNjb3VudExvYWRlciIsInN1YnNjcmlwdGlvblN1Y2NlZWRlZCIsInJldHJpZXMiLCJmZXRjaCIsImRpZFN1YnNjcmlwdGlvblN1Y2NlZWQiLCJlbWl0IiwiY2FsbGJhY2tJZCIsImFkZEFjY291bnQiLCJidWZmZXIiLCJzbG90Iiwib3JhY2xlUHJpY2VEYXRhIiwiZ2V0T3JhY2xlUHJpY2VEYXRhRnJvbUJ1ZmZlciIsImRhdGEiLCJlcnJvckNhbGxiYWNrSWQiLCJhZGRFcnJvckNhbGxiYWNrcyIsImVycm9yIiwibG9hZCIsImdldEJ1ZmZlckFuZFNsb3QiLCJ1bnN1YnNjcmliZSIsInJlbW92ZUFjY291bnQiLCJ1bmRlZmluZWQiLCJyZW1vdmVFcnJvckNhbGxiYWNrcyIsImFzc2VydElzU3Vic2NyaWJlZCIsIk5vdFN1YnNjcmliZWRFcnJvciIsImdldE9yYWNsZVByaWNlRGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingOracleAccountSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingTokenAccountSubscriber.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/pollingTokenAccountSubscriber.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PollingTokenAccountSubscriber = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/types.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst token_1 = __webpack_require__(/*! ../token */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/token/index.js\");\nclass PollingTokenAccountSubscriber {\n    constructor(publicKey, accountLoader){\n        this.isSubscribed = false;\n        this.publicKey = publicKey;\n        this.accountLoader = accountLoader;\n        this.eventEmitter = new events_1.EventEmitter();\n    }\n    async subscribe() {\n        if (this.isSubscribed) {\n            return true;\n        }\n        await this.addToAccountLoader();\n        let subscriptionSucceeded = false;\n        let retries = 0;\n        while(!subscriptionSucceeded && retries < 5){\n            await this.fetch();\n            subscriptionSucceeded = this.didSubscriptionSucceed();\n            retries++;\n        }\n        if (subscriptionSucceeded) {\n            this.eventEmitter.emit(\"update\");\n        }\n        this.isSubscribed = subscriptionSucceeded;\n        return subscriptionSucceeded;\n    }\n    async addToAccountLoader() {\n        if (this.callbackId) {\n            return;\n        }\n        this.callbackId = await this.accountLoader.addAccount(this.publicKey, (buffer, slot)=>{\n            const tokenAccount = (0, token_1.parseTokenAccount)(buffer, this.publicKey);\n            this.tokenAccountAndSlot = {\n                data: tokenAccount,\n                slot\n            };\n            // @ts-ignore\n            this.eventEmitter.emit(\"tokenAccountUpdate\", tokenAccount);\n            this.eventEmitter.emit(\"update\");\n        });\n        this.errorCallbackId = this.accountLoader.addErrorCallbacks((error)=>{\n            this.eventEmitter.emit(\"error\", error);\n        });\n    }\n    async fetch() {\n        await this.accountLoader.load();\n        const { buffer, slot } = this.accountLoader.getBufferAndSlot(this.publicKey);\n        this.tokenAccountAndSlot = {\n            data: (0, token_1.parseTokenAccount)(buffer, this.publicKey),\n            slot\n        };\n    }\n    async unsubscribe() {\n        if (!this.isSubscribed) {\n            return;\n        }\n        this.accountLoader.removeAccount(this.publicKey, this.callbackId);\n        this.callbackId = undefined;\n        this.accountLoader.removeErrorCallbacks(this.errorCallbackId);\n        this.errorCallbackId = undefined;\n        this.isSubscribed = false;\n    }\n    assertIsSubscribed() {\n        if (!this.isSubscribed) {\n            throw new types_1.NotSubscribedError(\"You must call `subscribe` before using this function\");\n        }\n    }\n    getTokenAccountAndSlot() {\n        this.assertIsSubscribed();\n        return this.tokenAccountAndSlot;\n    }\n    didSubscriptionSucceed() {\n        return !!this.tokenAccountAndSlot;\n    }\n}\nexports.PollingTokenAccountSubscriber = PollingTokenAccountSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy9wb2xsaW5nVG9rZW5BY2NvdW50U3Vic2NyaWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUNBQXFDLEdBQUcsS0FBSztBQUM3QyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywyRUFBUztBQUNqQyxNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNRSxVQUFVRixtQkFBT0EsQ0FBQyx5RUFBVTtBQUNsQyxNQUFNRjtJQUNGSyxZQUFZQyxTQUFTLEVBQUVDLGFBQWEsQ0FBRTtRQUNsQyxJQUFJLENBQUNDLFlBQVksR0FBRztRQUNwQixJQUFJLENBQUNGLFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDQyxhQUFhLEdBQUdBO1FBQ3JCLElBQUksQ0FBQ0UsWUFBWSxHQUFHLElBQUlOLFNBQVNPLFlBQVk7SUFDakQ7SUFDQSxNQUFNQyxZQUFZO1FBQ2QsSUFBSSxJQUFJLENBQUNILFlBQVksRUFBRTtZQUNuQixPQUFPO1FBQ1g7UUFDQSxNQUFNLElBQUksQ0FBQ0ksa0JBQWtCO1FBQzdCLElBQUlDLHdCQUF3QjtRQUM1QixJQUFJQyxVQUFVO1FBQ2QsTUFBTyxDQUFDRCx5QkFBeUJDLFVBQVUsRUFBRztZQUMxQyxNQUFNLElBQUksQ0FBQ0MsS0FBSztZQUNoQkYsd0JBQXdCLElBQUksQ0FBQ0csc0JBQXNCO1lBQ25ERjtRQUNKO1FBQ0EsSUFBSUQsdUJBQXVCO1lBQ3ZCLElBQUksQ0FBQ0osWUFBWSxDQUFDUSxJQUFJLENBQUM7UUFDM0I7UUFDQSxJQUFJLENBQUNULFlBQVksR0FBR0s7UUFDcEIsT0FBT0E7SUFDWDtJQUNBLE1BQU1ELHFCQUFxQjtRQUN2QixJQUFJLElBQUksQ0FBQ00sVUFBVSxFQUFFO1lBQ2pCO1FBQ0o7UUFDQSxJQUFJLENBQUNBLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQ1gsYUFBYSxDQUFDWSxVQUFVLENBQUMsSUFBSSxDQUFDYixTQUFTLEVBQUUsQ0FBQ2MsUUFBUUM7WUFDM0UsTUFBTUMsZUFBZSxDQUFDLEdBQUdsQixRQUFRbUIsaUJBQWlCLEVBQUVILFFBQVEsSUFBSSxDQUFDZCxTQUFTO1lBQzFFLElBQUksQ0FBQ2tCLG1CQUFtQixHQUFHO2dCQUFFQyxNQUFNSDtnQkFBY0Q7WUFBSztZQUN0RCxhQUFhO1lBQ2IsSUFBSSxDQUFDWixZQUFZLENBQUNRLElBQUksQ0FBQyxzQkFBc0JLO1lBQzdDLElBQUksQ0FBQ2IsWUFBWSxDQUFDUSxJQUFJLENBQUM7UUFDM0I7UUFDQSxJQUFJLENBQUNTLGVBQWUsR0FBRyxJQUFJLENBQUNuQixhQUFhLENBQUNvQixpQkFBaUIsQ0FBQyxDQUFDQztZQUN6RCxJQUFJLENBQUNuQixZQUFZLENBQUNRLElBQUksQ0FBQyxTQUFTVztRQUNwQztJQUNKO0lBQ0EsTUFBTWIsUUFBUTtRQUNWLE1BQU0sSUFBSSxDQUFDUixhQUFhLENBQUNzQixJQUFJO1FBQzdCLE1BQU0sRUFBRVQsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUNkLGFBQWEsQ0FBQ3VCLGdCQUFnQixDQUFDLElBQUksQ0FBQ3hCLFNBQVM7UUFDM0UsSUFBSSxDQUFDa0IsbUJBQW1CLEdBQUc7WUFDdkJDLE1BQU0sQ0FBQyxHQUFHckIsUUFBUW1CLGlCQUFpQixFQUFFSCxRQUFRLElBQUksQ0FBQ2QsU0FBUztZQUMzRGU7UUFDSjtJQUNKO0lBQ0EsTUFBTVUsY0FBYztRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDdkIsWUFBWSxFQUFFO1lBQ3BCO1FBQ0o7UUFDQSxJQUFJLENBQUNELGFBQWEsQ0FBQ3lCLGFBQWEsQ0FBQyxJQUFJLENBQUMxQixTQUFTLEVBQUUsSUFBSSxDQUFDWSxVQUFVO1FBQ2hFLElBQUksQ0FBQ0EsVUFBVSxHQUFHZTtRQUNsQixJQUFJLENBQUMxQixhQUFhLENBQUMyQixvQkFBb0IsQ0FBQyxJQUFJLENBQUNSLGVBQWU7UUFDNUQsSUFBSSxDQUFDQSxlQUFlLEdBQUdPO1FBQ3ZCLElBQUksQ0FBQ3pCLFlBQVksR0FBRztJQUN4QjtJQUNBMkIscUJBQXFCO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMzQixZQUFZLEVBQUU7WUFDcEIsTUFBTSxJQUFJUCxRQUFRbUMsa0JBQWtCLENBQUM7UUFDekM7SUFDSjtJQUNBQyx5QkFBeUI7UUFDckIsSUFBSSxDQUFDRixrQkFBa0I7UUFDdkIsT0FBTyxJQUFJLENBQUNYLG1CQUFtQjtJQUNuQztJQUNBUix5QkFBeUI7UUFDckIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDUSxtQkFBbUI7SUFDckM7QUFDSjtBQUNBMUIscUNBQXFDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL2FjY291bnRzL3BvbGxpbmdUb2tlbkFjY291bnRTdWJzY3JpYmVyLmpzPzYxMTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBvbGxpbmdUb2tlbkFjY291bnRTdWJzY3JpYmVyID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY29uc3QgdG9rZW5fMSA9IHJlcXVpcmUoXCIuLi90b2tlblwiKTtcbmNsYXNzIFBvbGxpbmdUb2tlbkFjY291bnRTdWJzY3JpYmVyIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWNLZXksIGFjY291bnRMb2FkZXIpIHtcbiAgICAgICAgdGhpcy5pc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBwdWJsaWNLZXk7XG4gICAgICAgIHRoaXMuYWNjb3VudExvYWRlciA9IGFjY291bnRMb2FkZXI7XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyID0gbmV3IGV2ZW50c18xLkV2ZW50RW1pdHRlcigpO1xuICAgIH1cbiAgICBhc3luYyBzdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5hZGRUb0FjY291bnRMb2FkZXIoKTtcbiAgICAgICAgbGV0IHN1YnNjcmlwdGlvblN1Y2NlZWRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgcmV0cmllcyA9IDA7XG4gICAgICAgIHdoaWxlICghc3Vic2NyaXB0aW9uU3VjY2VlZGVkICYmIHJldHJpZXMgPCA1KSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZldGNoKCk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25TdWNjZWVkZWQgPSB0aGlzLmRpZFN1YnNjcmlwdGlvblN1Y2NlZWQoKTtcbiAgICAgICAgICAgIHJldHJpZXMrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uU3VjY2VlZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCd1cGRhdGUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzU3Vic2NyaWJlZCA9IHN1YnNjcmlwdGlvblN1Y2NlZWRlZDtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvblN1Y2NlZWRlZDtcbiAgICB9XG4gICAgYXN5bmMgYWRkVG9BY2NvdW50TG9hZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5jYWxsYmFja0lkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWxsYmFja0lkID0gYXdhaXQgdGhpcy5hY2NvdW50TG9hZGVyLmFkZEFjY291bnQodGhpcy5wdWJsaWNLZXksIChidWZmZXIsIHNsb3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuQWNjb3VudCA9ICgwLCB0b2tlbl8xLnBhcnNlVG9rZW5BY2NvdW50KShidWZmZXIsIHRoaXMucHVibGljS2V5KTtcbiAgICAgICAgICAgIHRoaXMudG9rZW5BY2NvdW50QW5kU2xvdCA9IHsgZGF0YTogdG9rZW5BY2NvdW50LCBzbG90IH07XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCd0b2tlbkFjY291bnRVcGRhdGUnLCB0b2tlbkFjY291bnQpO1xuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgndXBkYXRlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVycm9yQ2FsbGJhY2tJZCA9IHRoaXMuYWNjb3VudExvYWRlci5hZGRFcnJvckNhbGxiYWNrcygoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgZmV0Y2goKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYWNjb3VudExvYWRlci5sb2FkKCk7XG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCBzbG90IH0gPSB0aGlzLmFjY291bnRMb2FkZXIuZ2V0QnVmZmVyQW5kU2xvdCh0aGlzLnB1YmxpY0tleSk7XG4gICAgICAgIHRoaXMudG9rZW5BY2NvdW50QW5kU2xvdCA9IHtcbiAgICAgICAgICAgIGRhdGE6ICgwLCB0b2tlbl8xLnBhcnNlVG9rZW5BY2NvdW50KShidWZmZXIsIHRoaXMucHVibGljS2V5KSxcbiAgICAgICAgICAgIHNsb3QsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY2NvdW50TG9hZGVyLnJlbW92ZUFjY291bnQodGhpcy5wdWJsaWNLZXksIHRoaXMuY2FsbGJhY2tJZCk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5hY2NvdW50TG9hZGVyLnJlbW92ZUVycm9yQ2FsbGJhY2tzKHRoaXMuZXJyb3JDYWxsYmFja0lkKTtcbiAgICAgICAgdGhpcy5lcnJvckNhbGxiYWNrSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgfVxuICAgIGFzc2VydElzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuTm90U3Vic2NyaWJlZEVycm9yKCdZb3UgbXVzdCBjYWxsIGBzdWJzY3JpYmVgIGJlZm9yZSB1c2luZyB0aGlzIGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0VG9rZW5BY2NvdW50QW5kU2xvdCgpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRJc1N1YnNjcmliZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5BY2NvdW50QW5kU2xvdDtcbiAgICB9XG4gICAgZGlkU3Vic2NyaXB0aW9uU3VjY2VlZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy50b2tlbkFjY291bnRBbmRTbG90O1xuICAgIH1cbn1cbmV4cG9ydHMuUG9sbGluZ1Rva2VuQWNjb3VudFN1YnNjcmliZXIgPSBQb2xsaW5nVG9rZW5BY2NvdW50U3Vic2NyaWJlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlBvbGxpbmdUb2tlbkFjY291bnRTdWJzY3JpYmVyIiwidHlwZXNfMSIsInJlcXVpcmUiLCJldmVudHNfMSIsInRva2VuXzEiLCJjb25zdHJ1Y3RvciIsInB1YmxpY0tleSIsImFjY291bnRMb2FkZXIiLCJpc1N1YnNjcmliZWQiLCJldmVudEVtaXR0ZXIiLCJFdmVudEVtaXR0ZXIiLCJzdWJzY3JpYmUiLCJhZGRUb0FjY291bnRMb2FkZXIiLCJzdWJzY3JpcHRpb25TdWNjZWVkZWQiLCJyZXRyaWVzIiwiZmV0Y2giLCJkaWRTdWJzY3JpcHRpb25TdWNjZWVkIiwiZW1pdCIsImNhbGxiYWNrSWQiLCJhZGRBY2NvdW50IiwiYnVmZmVyIiwic2xvdCIsInRva2VuQWNjb3VudCIsInBhcnNlVG9rZW5BY2NvdW50IiwidG9rZW5BY2NvdW50QW5kU2xvdCIsImRhdGEiLCJlcnJvckNhbGxiYWNrSWQiLCJhZGRFcnJvckNhbGxiYWNrcyIsImVycm9yIiwibG9hZCIsImdldEJ1ZmZlckFuZFNsb3QiLCJ1bnN1YnNjcmliZSIsInJlbW92ZUFjY291bnQiLCJ1bmRlZmluZWQiLCJyZW1vdmVFcnJvckNhbGxiYWNrcyIsImFzc2VydElzU3Vic2NyaWJlZCIsIk5vdFN1YnNjcmliZWRFcnJvciIsImdldFRva2VuQWNjb3VudEFuZFNsb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingTokenAccountSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingUserAccountSubscriber.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/pollingUserAccountSubscriber.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PollingUserAccountSubscriber = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/types.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nclass PollingUserAccountSubscriber {\n    constructor(program, userAccountPublicKey, accountLoader){\n        this.isSubscribed = false;\n        this.program = program;\n        this.accountLoader = accountLoader;\n        this.eventEmitter = new events_1.EventEmitter();\n        this.userAccountPublicKey = userAccountPublicKey;\n    }\n    async subscribe(userAccount) {\n        if (this.isSubscribed) {\n            return true;\n        }\n        if (userAccount) {\n            this.user = {\n                data: userAccount,\n                slot: undefined\n            };\n        }\n        await this.addToAccountLoader();\n        await this.fetchIfUnloaded();\n        if (this.doesAccountExist()) {\n            this.eventEmitter.emit(\"update\");\n        }\n        this.isSubscribed = true;\n        return true;\n    }\n    async addToAccountLoader() {\n        if (this.callbackId) {\n            return;\n        }\n        this.callbackId = await this.accountLoader.addAccount(this.userAccountPublicKey, (buffer, slot)=>{\n            if (!buffer) {\n                return;\n            }\n            if (this.user && this.user.slot > slot) {\n                return;\n            }\n            const account = this.program.account.user.coder.accounts.decode(\"User\", buffer);\n            this.user = {\n                data: account,\n                slot\n            };\n            this.eventEmitter.emit(\"userAccountUpdate\", account);\n            this.eventEmitter.emit(\"update\");\n        });\n        this.errorCallbackId = this.accountLoader.addErrorCallbacks((error)=>{\n            this.eventEmitter.emit(\"error\", error);\n        });\n    }\n    async fetchIfUnloaded() {\n        if (this.user === undefined) {\n            await this.fetch();\n        }\n    }\n    async fetch() {\n        var _a, _b;\n        await this.accountLoader.load();\n        const { buffer, slot } = this.accountLoader.getBufferAndSlot(this.userAccountPublicKey);\n        const currentSlot = (_b = (_a = this.user) === null || _a === void 0 ? void 0 : _a.slot) !== null && _b !== void 0 ? _b : 0;\n        if (buffer && slot > currentSlot) {\n            const account = this.program.account.user.coder.accounts.decode(\"User\", buffer);\n            this.user = {\n                data: account,\n                slot\n            };\n        }\n    }\n    doesAccountExist() {\n        return this.user !== undefined;\n    }\n    async unsubscribe() {\n        if (!this.isSubscribed) {\n            return;\n        }\n        this.accountLoader.removeAccount(this.userAccountPublicKey, this.callbackId);\n        this.callbackId = undefined;\n        this.accountLoader.removeErrorCallbacks(this.errorCallbackId);\n        this.errorCallbackId = undefined;\n        this.isSubscribed = false;\n    }\n    assertIsSubscribed() {\n        if (!this.isSubscribed) {\n            throw new types_1.NotSubscribedError(\"You must call `subscribe` before using this function\");\n        }\n    }\n    getUserAccountAndSlot() {\n        this.assertIsSubscribed();\n        return this.user;\n    }\n    updateData(userAccount, slot) {\n        if (!this.user || this.user.slot < slot) {\n            this.user = {\n                data: userAccount,\n                slot\n            };\n            this.eventEmitter.emit(\"userAccountUpdate\", userAccount);\n            this.eventEmitter.emit(\"update\");\n        }\n    }\n}\nexports.PollingUserAccountSubscriber = PollingUserAccountSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingUserAccountSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingUserStatsAccountSubscriber.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/pollingUserStatsAccountSubscriber.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PollingUserStatsAccountSubscriber = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/types.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nclass PollingUserStatsAccountSubscriber {\n    constructor(program, userStatsAccountPublicKey, accountLoader){\n        this.isSubscribed = false;\n        this.program = program;\n        this.accountLoader = accountLoader;\n        this.eventEmitter = new events_1.EventEmitter();\n        this.userStatsAccountPublicKey = userStatsAccountPublicKey;\n    }\n    async subscribe(userStatsAccount) {\n        if (this.isSubscribed) {\n            return true;\n        }\n        if (userStatsAccount) {\n            this.userStats = {\n                data: userStatsAccount,\n                slot: undefined\n            };\n        }\n        await this.addToAccountLoader();\n        await this.fetchIfUnloaded();\n        if (this.doesAccountExist()) {\n            this.eventEmitter.emit(\"update\");\n        }\n        this.isSubscribed = true;\n        return true;\n    }\n    async addToAccountLoader() {\n        if (this.callbackId !== undefined) {\n            return;\n        }\n        this.callbackId = await this.accountLoader.addAccount(this.userStatsAccountPublicKey, (buffer, slot)=>{\n            if (!buffer) {\n                return;\n            }\n            if (this.userStats && this.userStats.slot > slot) {\n                return;\n            }\n            const account = this.program.account.userStats.coder.accounts.decode(\"UserStats\", buffer);\n            this.userStats = {\n                data: account,\n                slot\n            };\n            this.eventEmitter.emit(\"userStatsAccountUpdate\", account);\n            this.eventEmitter.emit(\"update\");\n        });\n        this.errorCallbackId = this.accountLoader.addErrorCallbacks((error)=>{\n            this.eventEmitter.emit(\"error\", error);\n        });\n    }\n    async fetchIfUnloaded() {\n        if (this.userStats === undefined) {\n            await this.fetch();\n        }\n    }\n    async fetch() {\n        var _a, _b;\n        await this.accountLoader.load();\n        const { buffer, slot } = this.accountLoader.getBufferAndSlot(this.userStatsAccountPublicKey);\n        const currentSlot = (_b = (_a = this.userStats) === null || _a === void 0 ? void 0 : _a.slot) !== null && _b !== void 0 ? _b : 0;\n        if (buffer && slot > currentSlot) {\n            const account = this.program.account.userStats.coder.accounts.decode(\"UserStats\", buffer);\n            this.userStats = {\n                data: account,\n                slot\n            };\n        }\n    }\n    doesAccountExist() {\n        return this.userStats !== undefined;\n    }\n    async unsubscribe() {\n        if (!this.isSubscribed) {\n            return;\n        }\n        this.accountLoader.removeAccount(this.userStatsAccountPublicKey, this.callbackId);\n        this.callbackId = undefined;\n        this.accountLoader.removeErrorCallbacks(this.errorCallbackId);\n        this.errorCallbackId = undefined;\n        this.isSubscribed = false;\n    }\n    assertIsSubscribed() {\n        if (!this.isSubscribed) {\n            throw new types_1.NotSubscribedError(\"You must call `subscribe` before using this function\");\n        }\n    }\n    getUserStatsAccountAndSlot() {\n        this.assertIsSubscribed();\n        return this.userStats;\n    }\n}\nexports.PollingUserStatsAccountSubscriber = PollingUserStatsAccountSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy9wb2xsaW5nVXNlclN0YXRzQWNjb3VudFN1YnNjcmliZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlDQUF5QyxHQUFHLEtBQUs7QUFDakQsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsMkVBQVM7QUFDakMsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUY7SUFDRkksWUFBWUMsT0FBTyxFQUFFQyx5QkFBeUIsRUFBRUMsYUFBYSxDQUFFO1FBQzNELElBQUksQ0FBQ0MsWUFBWSxHQUFHO1FBQ3BCLElBQUksQ0FBQ0gsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0UsYUFBYSxHQUFHQTtRQUNyQixJQUFJLENBQUNFLFlBQVksR0FBRyxJQUFJTixTQUFTTyxZQUFZO1FBQzdDLElBQUksQ0FBQ0oseUJBQXlCLEdBQUdBO0lBQ3JDO0lBQ0EsTUFBTUssVUFBVUMsZ0JBQWdCLEVBQUU7UUFDOUIsSUFBSSxJQUFJLENBQUNKLFlBQVksRUFBRTtZQUNuQixPQUFPO1FBQ1g7UUFDQSxJQUFJSSxrQkFBa0I7WUFDbEIsSUFBSSxDQUFDQyxTQUFTLEdBQUc7Z0JBQUVDLE1BQU1GO2dCQUFrQkcsTUFBTUM7WUFBVTtRQUMvRDtRQUNBLE1BQU0sSUFBSSxDQUFDQyxrQkFBa0I7UUFDN0IsTUFBTSxJQUFJLENBQUNDLGVBQWU7UUFDMUIsSUFBSSxJQUFJLENBQUNDLGdCQUFnQixJQUFJO1lBQ3pCLElBQUksQ0FBQ1YsWUFBWSxDQUFDVyxJQUFJLENBQUM7UUFDM0I7UUFDQSxJQUFJLENBQUNaLFlBQVksR0FBRztRQUNwQixPQUFPO0lBQ1g7SUFDQSxNQUFNUyxxQkFBcUI7UUFDdkIsSUFBSSxJQUFJLENBQUNJLFVBQVUsS0FBS0wsV0FBVztZQUMvQjtRQUNKO1FBQ0EsSUFBSSxDQUFDSyxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUNkLGFBQWEsQ0FBQ2UsVUFBVSxDQUFDLElBQUksQ0FBQ2hCLHlCQUF5QixFQUFFLENBQUNpQixRQUFRUjtZQUMzRixJQUFJLENBQUNRLFFBQVE7Z0JBQ1Q7WUFDSjtZQUNBLElBQUksSUFBSSxDQUFDVixTQUFTLElBQUksSUFBSSxDQUFDQSxTQUFTLENBQUNFLElBQUksR0FBR0EsTUFBTTtnQkFDOUM7WUFDSjtZQUNBLE1BQU1TLFVBQVUsSUFBSSxDQUFDbkIsT0FBTyxDQUFDbUIsT0FBTyxDQUFDWCxTQUFTLENBQUNZLEtBQUssQ0FBQ0MsUUFBUSxDQUFDQyxNQUFNLENBQUMsYUFBYUo7WUFDbEYsSUFBSSxDQUFDVixTQUFTLEdBQUc7Z0JBQUVDLE1BQU1VO2dCQUFTVDtZQUFLO1lBQ3ZDLElBQUksQ0FBQ04sWUFBWSxDQUFDVyxJQUFJLENBQUMsMEJBQTBCSTtZQUNqRCxJQUFJLENBQUNmLFlBQVksQ0FBQ1csSUFBSSxDQUFDO1FBQzNCO1FBQ0EsSUFBSSxDQUFDUSxlQUFlLEdBQUcsSUFBSSxDQUFDckIsYUFBYSxDQUFDc0IsaUJBQWlCLENBQUMsQ0FBQ0M7WUFDekQsSUFBSSxDQUFDckIsWUFBWSxDQUFDVyxJQUFJLENBQUMsU0FBU1U7UUFDcEM7SUFDSjtJQUNBLE1BQU1aLGtCQUFrQjtRQUNwQixJQUFJLElBQUksQ0FBQ0wsU0FBUyxLQUFLRyxXQUFXO1lBQzlCLE1BQU0sSUFBSSxDQUFDZSxLQUFLO1FBQ3BCO0lBQ0o7SUFDQSxNQUFNQSxRQUFRO1FBQ1YsSUFBSUMsSUFBSUM7UUFDUixNQUFNLElBQUksQ0FBQzFCLGFBQWEsQ0FBQzJCLElBQUk7UUFDN0IsTUFBTSxFQUFFWCxNQUFNLEVBQUVSLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQ1IsYUFBYSxDQUFDNEIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDN0IseUJBQXlCO1FBQzNGLE1BQU04QixjQUFjLENBQUNILEtBQUssQ0FBQ0QsS0FBSyxJQUFJLENBQUNuQixTQUFTLE1BQU0sUUFBUW1CLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR2pCLElBQUksTUFBTSxRQUFRa0IsT0FBTyxLQUFLLElBQUlBLEtBQUs7UUFDL0gsSUFBSVYsVUFBVVIsT0FBT3FCLGFBQWE7WUFDOUIsTUFBTVosVUFBVSxJQUFJLENBQUNuQixPQUFPLENBQUNtQixPQUFPLENBQUNYLFNBQVMsQ0FBQ1ksS0FBSyxDQUFDQyxRQUFRLENBQUNDLE1BQU0sQ0FBQyxhQUFhSjtZQUNsRixJQUFJLENBQUNWLFNBQVMsR0FBRztnQkFBRUMsTUFBTVU7Z0JBQVNUO1lBQUs7UUFDM0M7SUFDSjtJQUNBSSxtQkFBbUI7UUFDZixPQUFPLElBQUksQ0FBQ04sU0FBUyxLQUFLRztJQUM5QjtJQUNBLE1BQU1xQixjQUFjO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUM3QixZQUFZLEVBQUU7WUFDcEI7UUFDSjtRQUNBLElBQUksQ0FBQ0QsYUFBYSxDQUFDK0IsYUFBYSxDQUFDLElBQUksQ0FBQ2hDLHlCQUF5QixFQUFFLElBQUksQ0FBQ2UsVUFBVTtRQUNoRixJQUFJLENBQUNBLFVBQVUsR0FBR0w7UUFDbEIsSUFBSSxDQUFDVCxhQUFhLENBQUNnQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUNYLGVBQWU7UUFDNUQsSUFBSSxDQUFDQSxlQUFlLEdBQUdaO1FBQ3ZCLElBQUksQ0FBQ1IsWUFBWSxHQUFHO0lBQ3hCO0lBQ0FnQyxxQkFBcUI7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQ2hDLFlBQVksRUFBRTtZQUNwQixNQUFNLElBQUlQLFFBQVF3QyxrQkFBa0IsQ0FBQztRQUN6QztJQUNKO0lBQ0FDLDZCQUE2QjtRQUN6QixJQUFJLENBQUNGLGtCQUFrQjtRQUN2QixPQUFPLElBQUksQ0FBQzNCLFNBQVM7SUFDekI7QUFDSjtBQUNBZix5Q0FBeUMsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvYWNjb3VudHMvcG9sbGluZ1VzZXJTdGF0c0FjY291bnRTdWJzY3JpYmVyLmpzPzg1NzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBvbGxpbmdVc2VyU3RhdHNBY2NvdW50U3Vic2NyaWJlciA9IHZvaWQgMDtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNsYXNzIFBvbGxpbmdVc2VyU3RhdHNBY2NvdW50U3Vic2NyaWJlciB7XG4gICAgY29uc3RydWN0b3IocHJvZ3JhbSwgdXNlclN0YXRzQWNjb3VudFB1YmxpY0tleSwgYWNjb3VudExvYWRlcikge1xuICAgICAgICB0aGlzLmlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB0aGlzLmFjY291bnRMb2FkZXIgPSBhY2NvdW50TG9hZGVyO1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlciA9IG5ldyBldmVudHNfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy51c2VyU3RhdHNBY2NvdW50UHVibGljS2V5ID0gdXNlclN0YXRzQWNjb3VudFB1YmxpY0tleTtcbiAgICB9XG4gICAgYXN5bmMgc3Vic2NyaWJlKHVzZXJTdGF0c0FjY291bnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXNlclN0YXRzQWNjb3VudCkge1xuICAgICAgICAgICAgdGhpcy51c2VyU3RhdHMgPSB7IGRhdGE6IHVzZXJTdGF0c0FjY291bnQsIHNsb3Q6IHVuZGVmaW5lZCB9O1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuYWRkVG9BY2NvdW50TG9hZGVyKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuZmV0Y2hJZlVubG9hZGVkKCk7XG4gICAgICAgIGlmICh0aGlzLmRvZXNBY2NvdW50RXhpc3QoKSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgndXBkYXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgYXN5bmMgYWRkVG9BY2NvdW50TG9hZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5jYWxsYmFja0lkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbGxiYWNrSWQgPSBhd2FpdCB0aGlzLmFjY291bnRMb2FkZXIuYWRkQWNjb3VudCh0aGlzLnVzZXJTdGF0c0FjY291bnRQdWJsaWNLZXksIChidWZmZXIsIHNsb3QpID0+IHtcbiAgICAgICAgICAgIGlmICghYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudXNlclN0YXRzICYmIHRoaXMudXNlclN0YXRzLnNsb3QgPiBzbG90KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWNjb3VudCA9IHRoaXMucHJvZ3JhbS5hY2NvdW50LnVzZXJTdGF0cy5jb2Rlci5hY2NvdW50cy5kZWNvZGUoJ1VzZXJTdGF0cycsIGJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLnVzZXJTdGF0cyA9IHsgZGF0YTogYWNjb3VudCwgc2xvdCB9O1xuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgndXNlclN0YXRzQWNjb3VudFVwZGF0ZScsIGFjY291bnQpO1xuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgndXBkYXRlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVycm9yQ2FsbGJhY2tJZCA9IHRoaXMuYWNjb3VudExvYWRlci5hZGRFcnJvckNhbGxiYWNrcygoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgZmV0Y2hJZlVubG9hZGVkKCkge1xuICAgICAgICBpZiAodGhpcy51c2VyU3RhdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5mZXRjaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGZldGNoKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBhd2FpdCB0aGlzLmFjY291bnRMb2FkZXIubG9hZCgpO1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgc2xvdCB9ID0gdGhpcy5hY2NvdW50TG9hZGVyLmdldEJ1ZmZlckFuZFNsb3QodGhpcy51c2VyU3RhdHNBY2NvdW50UHVibGljS2V5KTtcbiAgICAgICAgY29uc3QgY3VycmVudFNsb3QgPSAoX2IgPSAoX2EgPSB0aGlzLnVzZXJTdGF0cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNsb3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDA7XG4gICAgICAgIGlmIChidWZmZXIgJiYgc2xvdCA+IGN1cnJlbnRTbG90KSB7XG4gICAgICAgICAgICBjb25zdCBhY2NvdW50ID0gdGhpcy5wcm9ncmFtLmFjY291bnQudXNlclN0YXRzLmNvZGVyLmFjY291bnRzLmRlY29kZSgnVXNlclN0YXRzJywgYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMudXNlclN0YXRzID0geyBkYXRhOiBhY2NvdW50LCBzbG90IH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZG9lc0FjY291bnRFeGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlclN0YXRzICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGFzeW5jIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY2NvdW50TG9hZGVyLnJlbW92ZUFjY291bnQodGhpcy51c2VyU3RhdHNBY2NvdW50UHVibGljS2V5LCB0aGlzLmNhbGxiYWNrSWQpO1xuICAgICAgICB0aGlzLmNhbGxiYWNrSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYWNjb3VudExvYWRlci5yZW1vdmVFcnJvckNhbGxiYWNrcyh0aGlzLmVycm9yQ2FsbGJhY2tJZCk7XG4gICAgICAgIHRoaXMuZXJyb3JDYWxsYmFja0lkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBhc3NlcnRJc1N1YnNjcmliZWQoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyB0eXBlc18xLk5vdFN1YnNjcmliZWRFcnJvcignWW91IG11c3QgY2FsbCBgc3Vic2NyaWJlYCBiZWZvcmUgdXNpbmcgdGhpcyBmdW5jdGlvbicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFVzZXJTdGF0c0FjY291bnRBbmRTbG90KCkge1xuICAgICAgICB0aGlzLmFzc2VydElzU3Vic2NyaWJlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy51c2VyU3RhdHM7XG4gICAgfVxufVxuZXhwb3J0cy5Qb2xsaW5nVXNlclN0YXRzQWNjb3VudFN1YnNjcmliZXIgPSBQb2xsaW5nVXNlclN0YXRzQWNjb3VudFN1YnNjcmliZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQb2xsaW5nVXNlclN0YXRzQWNjb3VudFN1YnNjcmliZXIiLCJ0eXBlc18xIiwicmVxdWlyZSIsImV2ZW50c18xIiwiY29uc3RydWN0b3IiLCJwcm9ncmFtIiwidXNlclN0YXRzQWNjb3VudFB1YmxpY0tleSIsImFjY291bnRMb2FkZXIiLCJpc1N1YnNjcmliZWQiLCJldmVudEVtaXR0ZXIiLCJFdmVudEVtaXR0ZXIiLCJzdWJzY3JpYmUiLCJ1c2VyU3RhdHNBY2NvdW50IiwidXNlclN0YXRzIiwiZGF0YSIsInNsb3QiLCJ1bmRlZmluZWQiLCJhZGRUb0FjY291bnRMb2FkZXIiLCJmZXRjaElmVW5sb2FkZWQiLCJkb2VzQWNjb3VudEV4aXN0IiwiZW1pdCIsImNhbGxiYWNrSWQiLCJhZGRBY2NvdW50IiwiYnVmZmVyIiwiYWNjb3VudCIsImNvZGVyIiwiYWNjb3VudHMiLCJkZWNvZGUiLCJlcnJvckNhbGxiYWNrSWQiLCJhZGRFcnJvckNhbGxiYWNrcyIsImVycm9yIiwiZmV0Y2giLCJfYSIsIl9iIiwibG9hZCIsImdldEJ1ZmZlckFuZFNsb3QiLCJjdXJyZW50U2xvdCIsInVuc3Vic2NyaWJlIiwicmVtb3ZlQWNjb3VudCIsInJlbW92ZUVycm9yQ2FsbGJhY2tzIiwiYXNzZXJ0SXNTdWJzY3JpYmVkIiwiTm90U3Vic2NyaWJlZEVycm9yIiwiZ2V0VXNlclN0YXRzQWNjb3VudEFuZFNsb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingUserStatsAccountSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/types.js":
/*!************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/types.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NotSubscribedError = void 0;\nclass NotSubscribedError extends Error {\n    constructor(){\n        super(...arguments);\n        this.name = \"NotSubscribedError\";\n    }\n}\nexports.NotSubscribedError = NotSubscribedError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUcsS0FBSztBQUNsQyxNQUFNRSwyQkFBMkJDO0lBQzdCQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsSUFBSSxHQUFHO0lBQ2hCO0FBQ0o7QUFDQU4sMEJBQTBCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL2FjY291bnRzL3R5cGVzLmpzPzdjYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5vdFN1YnNjcmliZWRFcnJvciA9IHZvaWQgMDtcbmNsYXNzIE5vdFN1YnNjcmliZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ05vdFN1YnNjcmliZWRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RTdWJzY3JpYmVkRXJyb3IgPSBOb3RTdWJzY3JpYmVkRXJyb3I7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJOb3RTdWJzY3JpYmVkRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.capitalize = void 0;\nfunction capitalize(value) {\n    return value[0].toUpperCase() + value.slice(1);\n}\nexports.capitalize = capitalize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWtCLEdBQUcsS0FBSztBQUMxQixTQUFTRSxXQUFXRCxLQUFLO0lBQ3JCLE9BQU9BLEtBQUssQ0FBQyxFQUFFLENBQUNFLFdBQVcsS0FBS0YsTUFBTUcsS0FBSyxDQUFDO0FBQ2hEO0FBQ0FKLGtCQUFrQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy91dGlscy5qcz84NmRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jYXBpdGFsaXplID0gdm9pZCAwO1xuZnVuY3Rpb24gY2FwaXRhbGl6ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZVswXS50b1VwcGVyQ2FzZSgpICsgdmFsdWUuc2xpY2UoMSk7XG59XG5leHBvcnRzLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2FwaXRhbGl6ZSIsInRvVXBwZXJDYXNlIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketAccountSubscriber.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/webSocketAccountSubscriber.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebSocketAccountSubscriber = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/utils.js\");\nclass WebSocketAccountSubscriber {\n    constructor(accountName, program, accountPublicKey, decodeBuffer){\n        this.accountName = accountName;\n        this.program = program;\n        this.accountPublicKey = accountPublicKey;\n        this.decodeBufferFn = decodeBuffer;\n    }\n    async subscribe(onChange) {\n        if (this.listenerId) {\n            return;\n        }\n        this.onChange = onChange;\n        if (!this.dataAndSlot) {\n            await this.fetch();\n        }\n        this.listenerId = this.program.provider.connection.onAccountChange(this.accountPublicKey, (accountInfo, context)=>{\n            this.handleRpcResponse(context, accountInfo);\n        }, this.program.provider.opts.commitment);\n    }\n    setData(data, slot) {\n        const newSlot = slot || 0;\n        if (this.dataAndSlot && this.dataAndSlot.slot > newSlot) {\n            return;\n        }\n        this.dataAndSlot = {\n            data,\n            slot\n        };\n    }\n    async fetch() {\n        const rpcResponse = await this.program.provider.connection.getAccountInfoAndContext(this.accountPublicKey, this.program.provider.opts.commitment);\n        this.handleRpcResponse(rpcResponse.context, rpcResponse === null || rpcResponse === void 0 ? void 0 : rpcResponse.value);\n    }\n    handleRpcResponse(context, accountInfo) {\n        const newSlot = context.slot;\n        let newBuffer = undefined;\n        if (accountInfo) {\n            newBuffer = accountInfo.data;\n        }\n        if (!this.bufferAndSlot) {\n            this.bufferAndSlot = {\n                buffer: newBuffer,\n                slot: newSlot\n            };\n            if (newBuffer) {\n                const account = this.decodeBuffer(newBuffer);\n                this.dataAndSlot = {\n                    data: account,\n                    slot: newSlot\n                };\n                this.onChange(account);\n            }\n            return;\n        }\n        if (newSlot <= this.bufferAndSlot.slot) {\n            return;\n        }\n        const oldBuffer = this.bufferAndSlot.buffer;\n        if (newBuffer && (!oldBuffer || !newBuffer.equals(oldBuffer))) {\n            this.bufferAndSlot = {\n                buffer: newBuffer,\n                slot: newSlot\n            };\n            const account = this.decodeBuffer(newBuffer);\n            this.dataAndSlot = {\n                data: account,\n                slot: newSlot\n            };\n            this.onChange(account);\n        }\n    }\n    decodeBuffer(buffer) {\n        if (this.decodeBufferFn) {\n            return this.decodeBufferFn(buffer);\n        } else {\n            return this.program.account[this.accountName].coder.accounts.decode((0, utils_1.capitalize)(this.accountName), buffer);\n        }\n    }\n    unsubscribe() {\n        if (this.listenerId) {\n            const promise = this.program.provider.connection.removeAccountChangeListener(this.listenerId);\n            this.listenerId = undefined;\n            return promise;\n        }\n    }\n}\nexports.WebSocketAccountSubscriber = WebSocketAccountSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy93ZWJTb2NrZXRBY2NvdW50U3Vic2NyaWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0NBQWtDLEdBQUcsS0FBSztBQUMxQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywyRUFBUztBQUNqQyxNQUFNRjtJQUNGRyxZQUFZQyxXQUFXLEVBQUVDLE9BQU8sRUFBRUMsZ0JBQWdCLEVBQUVDLFlBQVksQ0FBRTtRQUM5RCxJQUFJLENBQUNILFdBQVcsR0FBR0E7UUFDbkIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR0E7UUFDeEIsSUFBSSxDQUFDRSxjQUFjLEdBQUdEO0lBQzFCO0lBQ0EsTUFBTUUsVUFBVUMsUUFBUSxFQUFFO1FBQ3RCLElBQUksSUFBSSxDQUFDQyxVQUFVLEVBQUU7WUFDakI7UUFDSjtRQUNBLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDRSxXQUFXLEVBQUU7WUFDbkIsTUFBTSxJQUFJLENBQUNDLEtBQUs7UUFDcEI7UUFDQSxJQUFJLENBQUNGLFVBQVUsR0FBRyxJQUFJLENBQUNOLE9BQU8sQ0FBQ1MsUUFBUSxDQUFDQyxVQUFVLENBQUNDLGVBQWUsQ0FBQyxJQUFJLENBQUNWLGdCQUFnQixFQUFFLENBQUNXLGFBQWFDO1lBQ3BHLElBQUksQ0FBQ0MsaUJBQWlCLENBQUNELFNBQVNEO1FBQ3BDLEdBQUcsSUFBSSxDQUFDWixPQUFPLENBQUNTLFFBQVEsQ0FBQ00sSUFBSSxDQUFDQyxVQUFVO0lBQzVDO0lBQ0FDLFFBQVFDLElBQUksRUFBRUMsSUFBSSxFQUFFO1FBQ2hCLE1BQU1DLFVBQVVELFFBQVE7UUFDeEIsSUFBSSxJQUFJLENBQUNaLFdBQVcsSUFBSSxJQUFJLENBQUNBLFdBQVcsQ0FBQ1ksSUFBSSxHQUFHQyxTQUFTO1lBQ3JEO1FBQ0o7UUFDQSxJQUFJLENBQUNiLFdBQVcsR0FBRztZQUNmVztZQUNBQztRQUNKO0lBQ0o7SUFDQSxNQUFNWCxRQUFRO1FBQ1YsTUFBTWEsY0FBYyxNQUFNLElBQUksQ0FBQ3JCLE9BQU8sQ0FBQ1MsUUFBUSxDQUFDQyxVQUFVLENBQUNZLHdCQUF3QixDQUFDLElBQUksQ0FBQ3JCLGdCQUFnQixFQUFFLElBQUksQ0FBQ0QsT0FBTyxDQUFDUyxRQUFRLENBQUNNLElBQUksQ0FBQ0MsVUFBVTtRQUNoSixJQUFJLENBQUNGLGlCQUFpQixDQUFDTyxZQUFZUixPQUFPLEVBQUVRLGdCQUFnQixRQUFRQSxnQkFBZ0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsWUFBWTNCLEtBQUs7SUFDM0g7SUFDQW9CLGtCQUFrQkQsT0FBTyxFQUFFRCxXQUFXLEVBQUU7UUFDcEMsTUFBTVEsVUFBVVAsUUFBUU0sSUFBSTtRQUM1QixJQUFJSSxZQUFZQztRQUNoQixJQUFJWixhQUFhO1lBQ2JXLFlBQVlYLFlBQVlNLElBQUk7UUFDaEM7UUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDTyxhQUFhLEVBQUU7WUFDckIsSUFBSSxDQUFDQSxhQUFhLEdBQUc7Z0JBQ2pCQyxRQUFRSDtnQkFDUkosTUFBTUM7WUFDVjtZQUNBLElBQUlHLFdBQVc7Z0JBQ1gsTUFBTUksVUFBVSxJQUFJLENBQUN6QixZQUFZLENBQUNxQjtnQkFDbEMsSUFBSSxDQUFDaEIsV0FBVyxHQUFHO29CQUNmVyxNQUFNUztvQkFDTlIsTUFBTUM7Z0JBQ1Y7Z0JBQ0EsSUFBSSxDQUFDZixRQUFRLENBQUNzQjtZQUNsQjtZQUNBO1FBQ0o7UUFDQSxJQUFJUCxXQUFXLElBQUksQ0FBQ0ssYUFBYSxDQUFDTixJQUFJLEVBQUU7WUFDcEM7UUFDSjtRQUNBLE1BQU1TLFlBQVksSUFBSSxDQUFDSCxhQUFhLENBQUNDLE1BQU07UUFDM0MsSUFBSUgsYUFBYyxFQUFDSyxhQUFhLENBQUNMLFVBQVVNLE1BQU0sQ0FBQ0QsVUFBUyxHQUFJO1lBQzNELElBQUksQ0FBQ0gsYUFBYSxHQUFHO2dCQUNqQkMsUUFBUUg7Z0JBQ1JKLE1BQU1DO1lBQ1Y7WUFDQSxNQUFNTyxVQUFVLElBQUksQ0FBQ3pCLFlBQVksQ0FBQ3FCO1lBQ2xDLElBQUksQ0FBQ2hCLFdBQVcsR0FBRztnQkFDZlcsTUFBTVM7Z0JBQ05SLE1BQU1DO1lBQ1Y7WUFDQSxJQUFJLENBQUNmLFFBQVEsQ0FBQ3NCO1FBQ2xCO0lBQ0o7SUFDQXpCLGFBQWF3QixNQUFNLEVBQUU7UUFDakIsSUFBSSxJQUFJLENBQUN2QixjQUFjLEVBQUU7WUFDckIsT0FBTyxJQUFJLENBQUNBLGNBQWMsQ0FBQ3VCO1FBQy9CLE9BQ0s7WUFDRCxPQUFPLElBQUksQ0FBQzFCLE9BQU8sQ0FBQzJCLE9BQU8sQ0FBQyxJQUFJLENBQUM1QixXQUFXLENBQUMsQ0FBQytCLEtBQUssQ0FBQ0MsUUFBUSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxHQUFHcEMsUUFBUXFDLFVBQVUsRUFBRSxJQUFJLENBQUNsQyxXQUFXLEdBQUcyQjtRQUNuSDtJQUNKO0lBQ0FRLGNBQWM7UUFDVixJQUFJLElBQUksQ0FBQzVCLFVBQVUsRUFBRTtZQUNqQixNQUFNNkIsVUFBVSxJQUFJLENBQUNuQyxPQUFPLENBQUNTLFFBQVEsQ0FBQ0MsVUFBVSxDQUFDMEIsMkJBQTJCLENBQUMsSUFBSSxDQUFDOUIsVUFBVTtZQUM1RixJQUFJLENBQUNBLFVBQVUsR0FBR2tCO1lBQ2xCLE9BQU9XO1FBQ1g7SUFDSjtBQUNKO0FBQ0ExQyxrQ0FBa0MsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvYWNjb3VudHMvd2ViU29ja2V0QWNjb3VudFN1YnNjcmliZXIuanM/YjJjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2ViU29ja2V0QWNjb3VudFN1YnNjcmliZXIgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jbGFzcyBXZWJTb2NrZXRBY2NvdW50U3Vic2NyaWJlciB7XG4gICAgY29uc3RydWN0b3IoYWNjb3VudE5hbWUsIHByb2dyYW0sIGFjY291bnRQdWJsaWNLZXksIGRlY29kZUJ1ZmZlcikge1xuICAgICAgICB0aGlzLmFjY291bnROYW1lID0gYWNjb3VudE5hbWU7XG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG4gICAgICAgIHRoaXMuYWNjb3VudFB1YmxpY0tleSA9IGFjY291bnRQdWJsaWNLZXk7XG4gICAgICAgIHRoaXMuZGVjb2RlQnVmZmVyRm4gPSBkZWNvZGVCdWZmZXI7XG4gICAgfVxuICAgIGFzeW5jIHN1YnNjcmliZShvbkNoYW5nZSkge1xuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcklkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IG9uQ2hhbmdlO1xuICAgICAgICBpZiAoIXRoaXMuZGF0YUFuZFNsb3QpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZmV0Y2goKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxpc3RlbmVySWQgPSB0aGlzLnByb2dyYW0ucHJvdmlkZXIuY29ubmVjdGlvbi5vbkFjY291bnRDaGFuZ2UodGhpcy5hY2NvdW50UHVibGljS2V5LCAoYWNjb3VudEluZm8sIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUnBjUmVzcG9uc2UoY29udGV4dCwgYWNjb3VudEluZm8pO1xuICAgICAgICB9LCB0aGlzLnByb2dyYW0ucHJvdmlkZXIub3B0cy5jb21taXRtZW50KTtcbiAgICB9XG4gICAgc2V0RGF0YShkYXRhLCBzbG90KSB7XG4gICAgICAgIGNvbnN0IG5ld1Nsb3QgPSBzbG90IHx8IDA7XG4gICAgICAgIGlmICh0aGlzLmRhdGFBbmRTbG90ICYmIHRoaXMuZGF0YUFuZFNsb3Quc2xvdCA+IG5ld1Nsb3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGFBbmRTbG90ID0ge1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHNsb3QsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIGZldGNoKCkge1xuICAgICAgICBjb25zdCBycGNSZXNwb25zZSA9IGF3YWl0IHRoaXMucHJvZ3JhbS5wcm92aWRlci5jb25uZWN0aW9uLmdldEFjY291bnRJbmZvQW5kQ29udGV4dCh0aGlzLmFjY291bnRQdWJsaWNLZXksIHRoaXMucHJvZ3JhbS5wcm92aWRlci5vcHRzLmNvbW1pdG1lbnQpO1xuICAgICAgICB0aGlzLmhhbmRsZVJwY1Jlc3BvbnNlKHJwY1Jlc3BvbnNlLmNvbnRleHQsIHJwY1Jlc3BvbnNlID09PSBudWxsIHx8IHJwY1Jlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBycGNSZXNwb25zZS52YWx1ZSk7XG4gICAgfVxuICAgIGhhbmRsZVJwY1Jlc3BvbnNlKGNvbnRleHQsIGFjY291bnRJbmZvKSB7XG4gICAgICAgIGNvbnN0IG5ld1Nsb3QgPSBjb250ZXh0LnNsb3Q7XG4gICAgICAgIGxldCBuZXdCdWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChhY2NvdW50SW5mbykge1xuICAgICAgICAgICAgbmV3QnVmZmVyID0gYWNjb3VudEluZm8uZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuYnVmZmVyQW5kU2xvdCkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXJBbmRTbG90ID0ge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcjogbmV3QnVmZmVyLFxuICAgICAgICAgICAgICAgIHNsb3Q6IG5ld1Nsb3QsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKG5ld0J1ZmZlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnQgPSB0aGlzLmRlY29kZUJ1ZmZlcihuZXdCdWZmZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YUFuZFNsb3QgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGFjY291bnQsXG4gICAgICAgICAgICAgICAgICAgIHNsb3Q6IG5ld1Nsb3QsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKGFjY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdTbG90IDw9IHRoaXMuYnVmZmVyQW5kU2xvdC5zbG90KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkQnVmZmVyID0gdGhpcy5idWZmZXJBbmRTbG90LmJ1ZmZlcjtcbiAgICAgICAgaWYgKG5ld0J1ZmZlciAmJiAoIW9sZEJ1ZmZlciB8fCAhbmV3QnVmZmVyLmVxdWFscyhvbGRCdWZmZXIpKSkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXJBbmRTbG90ID0ge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcjogbmV3QnVmZmVyLFxuICAgICAgICAgICAgICAgIHNsb3Q6IG5ld1Nsb3QsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYWNjb3VudCA9IHRoaXMuZGVjb2RlQnVmZmVyKG5ld0J1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmRhdGFBbmRTbG90ID0ge1xuICAgICAgICAgICAgICAgIGRhdGE6IGFjY291bnQsXG4gICAgICAgICAgICAgICAgc2xvdDogbmV3U2xvdCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKGFjY291bnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlY29kZUJ1ZmZlcihidWZmZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVjb2RlQnVmZmVyRm4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZUJ1ZmZlckZuKGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9ncmFtLmFjY291bnRbdGhpcy5hY2NvdW50TmFtZV0uY29kZXIuYWNjb3VudHMuZGVjb2RlKCgwLCB1dGlsc18xLmNhcGl0YWxpemUpKHRoaXMuYWNjb3VudE5hbWUpLCBidWZmZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcklkKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmFtLnByb3ZpZGVyLmNvbm5lY3Rpb24ucmVtb3ZlQWNjb3VudENoYW5nZUxpc3RlbmVyKHRoaXMubGlzdGVuZXJJZCk7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVySWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuV2ViU29ja2V0QWNjb3VudFN1YnNjcmliZXIgPSBXZWJTb2NrZXRBY2NvdW50U3Vic2NyaWJlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIldlYlNvY2tldEFjY291bnRTdWJzY3JpYmVyIiwidXRpbHNfMSIsInJlcXVpcmUiLCJjb25zdHJ1Y3RvciIsImFjY291bnROYW1lIiwicHJvZ3JhbSIsImFjY291bnRQdWJsaWNLZXkiLCJkZWNvZGVCdWZmZXIiLCJkZWNvZGVCdWZmZXJGbiIsInN1YnNjcmliZSIsIm9uQ2hhbmdlIiwibGlzdGVuZXJJZCIsImRhdGFBbmRTbG90IiwiZmV0Y2giLCJwcm92aWRlciIsImNvbm5lY3Rpb24iLCJvbkFjY291bnRDaGFuZ2UiLCJhY2NvdW50SW5mbyIsImNvbnRleHQiLCJoYW5kbGVScGNSZXNwb25zZSIsIm9wdHMiLCJjb21taXRtZW50Iiwic2V0RGF0YSIsImRhdGEiLCJzbG90IiwibmV3U2xvdCIsInJwY1Jlc3BvbnNlIiwiZ2V0QWNjb3VudEluZm9BbmRDb250ZXh0IiwibmV3QnVmZmVyIiwidW5kZWZpbmVkIiwiYnVmZmVyQW5kU2xvdCIsImJ1ZmZlciIsImFjY291bnQiLCJvbGRCdWZmZXIiLCJlcXVhbHMiLCJjb2RlciIsImFjY291bnRzIiwiZGVjb2RlIiwiY2FwaXRhbGl6ZSIsInVuc3Vic2NyaWJlIiwicHJvbWlzZSIsInJlbW92ZUFjY291bnRDaGFuZ2VMaXN0ZW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketAccountSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketDriftClientAccountSubscriber.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/webSocketDriftClientAccountSubscriber.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebSocketDriftClientAccountSubscriber = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/types.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst pda_1 = __webpack_require__(/*! ../addresses/pda */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/addresses/pda.js\");\nconst webSocketAccountSubscriber_1 = __webpack_require__(/*! ./webSocketAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketAccountSubscriber.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst oracleClientCache_1 = __webpack_require__(/*! ../oracles/oracleClientCache */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/oracleClientCache.js\");\nconst quoteAssetOracleClient_1 = __webpack_require__(/*! ../oracles/quoteAssetOracleClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/quoteAssetOracleClient.js\");\nconst config_1 = __webpack_require__(/*! ../config */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/config.js\");\nclass WebSocketDriftClientAccountSubscriber {\n    constructor(program, perpMarketIndexes, spotMarketIndexes, oracleInfos, shouldFindAllMarketsAndOracles){\n        this.oracleClientCache = new oracleClientCache_1.OracleClientCache();\n        this.perpMarketAccountSubscribers = new Map();\n        this.spotMarketAccountSubscribers = new Map();\n        this.oracleSubscribers = new Map();\n        this.isSubscribing = false;\n        this.isSubscribed = false;\n        this.program = program;\n        this.eventEmitter = new events_1.EventEmitter();\n        this.perpMarketIndexes = perpMarketIndexes;\n        this.spotMarketIndexes = spotMarketIndexes;\n        this.oracleInfos = oracleInfos;\n        this.shouldFindAllMarketsAndOracles = shouldFindAllMarketsAndOracles;\n    }\n    async subscribe() {\n        if (this.isSubscribed) {\n            return true;\n        }\n        if (this.isSubscribing) {\n            return await this.subscriptionPromise;\n        }\n        this.isSubscribing = true;\n        this.subscriptionPromise = new Promise((res)=>{\n            this.subscriptionPromiseResolver = res;\n        });\n        if (this.shouldFindAllMarketsAndOracles) {\n            const { perpMarketIndexes, spotMarketIndexes, oracleInfos } = await (0, config_1.findAllMarketAndOracles)(this.program);\n            this.perpMarketIndexes = perpMarketIndexes;\n            this.spotMarketIndexes = spotMarketIndexes;\n            this.oracleInfos = oracleInfos;\n        }\n        const statePublicKey = await (0, pda_1.getDriftStateAccountPublicKey)(this.program.programId);\n        // create and activate main state account subscription\n        this.stateAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber(\"state\", this.program, statePublicKey);\n        await this.stateAccountSubscriber.subscribe((data)=>{\n            this.eventEmitter.emit(\"stateAccountUpdate\", data);\n            this.eventEmitter.emit(\"update\");\n        });\n        // subscribe to market accounts\n        await this.subscribeToPerpMarketAccounts();\n        // subscribe to spot market accounts\n        await this.subscribeToSpotMarketAccounts();\n        // subscribe to oracles\n        await this.subscribeToOracles();\n        this.eventEmitter.emit(\"update\");\n        this.isSubscribing = false;\n        this.isSubscribed = true;\n        this.subscriptionPromiseResolver(true);\n        return true;\n    }\n    async subscribeToPerpMarketAccounts() {\n        for (const marketIndex of this.perpMarketIndexes){\n            await this.subscribeToPerpMarketAccount(marketIndex);\n        }\n        return true;\n    }\n    async subscribeToPerpMarketAccount(marketIndex) {\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, marketIndex);\n        const accountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber(\"perpMarket\", this.program, perpMarketPublicKey);\n        await accountSubscriber.subscribe((data)=>{\n            this.eventEmitter.emit(\"perpMarketAccountUpdate\", data);\n            this.eventEmitter.emit(\"update\");\n        });\n        this.perpMarketAccountSubscribers.set(marketIndex, accountSubscriber);\n        return true;\n    }\n    async subscribeToSpotMarketAccounts() {\n        for (const marketIndex of this.spotMarketIndexes){\n            await this.subscribeToSpotMarketAccount(marketIndex);\n        }\n        return true;\n    }\n    async subscribeToSpotMarketAccount(marketIndex) {\n        const marketPublicKey = await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, marketIndex);\n        const accountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber(\"spotMarket\", this.program, marketPublicKey);\n        await accountSubscriber.subscribe((data)=>{\n            this.eventEmitter.emit(\"spotMarketAccountUpdate\", data);\n            this.eventEmitter.emit(\"update\");\n        });\n        this.spotMarketAccountSubscribers.set(marketIndex, accountSubscriber);\n        return true;\n    }\n    async subscribeToOracles() {\n        for (const oracleInfo of this.oracleInfos){\n            if (!oracleInfo.publicKey.equals(web3_js_1.PublicKey.default)) {\n                await this.subscribeToOracle(oracleInfo);\n            }\n        }\n        return true;\n    }\n    async subscribeToOracle(oracleInfo) {\n        const client = this.oracleClientCache.get(oracleInfo.source, this.program.provider.connection);\n        const accountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber(\"oracle\", this.program, oracleInfo.publicKey, (buffer)=>{\n            return client.getOraclePriceDataFromBuffer(buffer);\n        });\n        await accountSubscriber.subscribe((data)=>{\n            this.eventEmitter.emit(\"oraclePriceUpdate\", oracleInfo.publicKey, data);\n            this.eventEmitter.emit(\"update\");\n        });\n        this.oracleSubscribers.set(oracleInfo.publicKey.toString(), accountSubscriber);\n        return true;\n    }\n    async unsubscribeFromMarketAccounts() {\n        for (const accountSubscriber of this.perpMarketAccountSubscribers.values()){\n            await accountSubscriber.unsubscribe();\n        }\n    }\n    async unsubscribeFromSpotMarketAccounts() {\n        for (const accountSubscriber of this.spotMarketAccountSubscribers.values()){\n            await accountSubscriber.unsubscribe();\n        }\n    }\n    async unsubscribeFromOracles() {\n        for (const accountSubscriber of this.oracleSubscribers.values()){\n            await accountSubscriber.unsubscribe();\n        }\n    }\n    async fetch() {\n        if (!this.isSubscribed) {\n            return;\n        }\n        const promises = [\n            this.stateAccountSubscriber.fetch()\n        ].concat(Array.from(this.perpMarketAccountSubscribers.values()).map((subscriber)=>subscriber.fetch())).concat(Array.from(this.spotMarketAccountSubscribers.values()).map((subscriber)=>subscriber.fetch()));\n        await Promise.all(promises);\n    }\n    async unsubscribe() {\n        if (!this.isSubscribed) {\n            return;\n        }\n        await this.stateAccountSubscriber.unsubscribe();\n        await this.unsubscribeFromMarketAccounts();\n        await this.unsubscribeFromSpotMarketAccounts();\n        await this.unsubscribeFromOracles();\n        this.isSubscribed = false;\n    }\n    async addSpotMarket(marketIndex) {\n        if (this.spotMarketAccountSubscribers.has(marketIndex)) {\n            return true;\n        }\n        return this.subscribeToSpotMarketAccount(marketIndex);\n    }\n    async addPerpMarket(marketIndex) {\n        if (this.perpMarketAccountSubscribers.has(marketIndex)) {\n            return true;\n        }\n        return this.subscribeToPerpMarketAccount(marketIndex);\n    }\n    async addOracle(oracleInfo) {\n        if (this.oracleSubscribers.has(oracleInfo.publicKey.toString())) {\n            return true;\n        }\n        if (oracleInfo.publicKey.equals(web3_js_1.PublicKey.default)) {\n            return true;\n        }\n        return this.subscribeToOracle(oracleInfo);\n    }\n    assertIsSubscribed() {\n        if (!this.isSubscribed) {\n            throw new types_1.NotSubscribedError(\"You must call `subscribe` before using this function\");\n        }\n    }\n    getStateAccountAndSlot() {\n        this.assertIsSubscribed();\n        return this.stateAccountSubscriber.dataAndSlot;\n    }\n    getMarketAccountAndSlot(marketIndex) {\n        this.assertIsSubscribed();\n        return this.perpMarketAccountSubscribers.get(marketIndex).dataAndSlot;\n    }\n    getMarketAccountsAndSlots() {\n        return Array.from(this.perpMarketAccountSubscribers.values()).map((subscriber)=>subscriber.dataAndSlot);\n    }\n    getSpotMarketAccountAndSlot(marketIndex) {\n        this.assertIsSubscribed();\n        return this.spotMarketAccountSubscribers.get(marketIndex).dataAndSlot;\n    }\n    getSpotMarketAccountsAndSlots() {\n        return Array.from(this.spotMarketAccountSubscribers.values()).map((subscriber)=>subscriber.dataAndSlot);\n    }\n    getOraclePriceDataAndSlot(oraclePublicKey) {\n        this.assertIsSubscribed();\n        if (oraclePublicKey.equals(web3_js_1.PublicKey.default)) {\n            return {\n                data: quoteAssetOracleClient_1.QUOTE_ORACLE_PRICE_DATA,\n                slot: 0\n            };\n        }\n        return this.oracleSubscribers.get(oraclePublicKey.toString()).dataAndSlot;\n    }\n}\nexports.WebSocketDriftClientAccountSubscriber = WebSocketDriftClientAccountSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketDriftClientAccountSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketUserAccountSubscriber.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/webSocketUserAccountSubscriber.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebSocketUserAccountSubscriber = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/types.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst webSocketAccountSubscriber_1 = __webpack_require__(/*! ./webSocketAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketAccountSubscriber.js\");\nclass WebSocketUserAccountSubscriber {\n    constructor(program, userAccountPublicKey){\n        this.isSubscribed = false;\n        this.program = program;\n        this.userAccountPublicKey = userAccountPublicKey;\n        this.eventEmitter = new events_1.EventEmitter();\n    }\n    async subscribe(userAccount) {\n        if (this.isSubscribed) {\n            return true;\n        }\n        this.userDataAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber(\"user\", this.program, this.userAccountPublicKey);\n        if (userAccount) {\n            this.userDataAccountSubscriber.setData(userAccount);\n        }\n        await this.userDataAccountSubscriber.subscribe((data)=>{\n            this.eventEmitter.emit(\"userAccountUpdate\", data);\n            this.eventEmitter.emit(\"update\");\n        });\n        this.eventEmitter.emit(\"update\");\n        this.isSubscribed = true;\n        return true;\n    }\n    async fetch() {\n        await Promise.all([\n            this.userDataAccountSubscriber.fetch()\n        ]);\n    }\n    async unsubscribe() {\n        if (!this.isSubscribed) {\n            return;\n        }\n        await Promise.all([\n            this.userDataAccountSubscriber.unsubscribe()\n        ]);\n        this.isSubscribed = false;\n    }\n    assertIsSubscribed() {\n        if (!this.isSubscribed) {\n            throw new types_1.NotSubscribedError(\"You must call `subscribe` before using this function\");\n        }\n    }\n    getUserAccountAndSlot() {\n        this.assertIsSubscribed();\n        return this.userDataAccountSubscriber.dataAndSlot;\n    }\n    updateData(userAccount, slot) {\n        var _a;\n        const currentDataSlot = ((_a = this.userDataAccountSubscriber.dataAndSlot) === null || _a === void 0 ? void 0 : _a.slot) || 0;\n        if (currentDataSlot < slot) {\n            this.userDataAccountSubscriber.setData(userAccount, slot);\n            this.eventEmitter.emit(\"userAccountUpdate\", userAccount);\n            this.eventEmitter.emit(\"update\");\n        }\n    }\n}\nexports.WebSocketUserAccountSubscriber = WebSocketUserAccountSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy93ZWJTb2NrZXRVc2VyQWNjb3VudFN1YnNjcmliZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNDQUFzQyxHQUFHLEtBQUs7QUFDOUMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsMkVBQVM7QUFDakMsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUUsK0JBQStCRixtQkFBT0EsQ0FBQyxxSEFBOEI7QUFDM0UsTUFBTUY7SUFDRkssWUFBWUMsT0FBTyxFQUFFQyxvQkFBb0IsQ0FBRTtRQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBRztRQUNwQixJQUFJLENBQUNGLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLG9CQUFvQixHQUFHQTtRQUM1QixJQUFJLENBQUNFLFlBQVksR0FBRyxJQUFJTixTQUFTTyxZQUFZO0lBQ2pEO0lBQ0EsTUFBTUMsVUFBVUMsV0FBVyxFQUFFO1FBQ3pCLElBQUksSUFBSSxDQUFDSixZQUFZLEVBQUU7WUFDbkIsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDSyx5QkFBeUIsR0FBRyxJQUFJVCw2QkFBNkJVLDBCQUEwQixDQUFDLFFBQVEsSUFBSSxDQUFDUixPQUFPLEVBQUUsSUFBSSxDQUFDQyxvQkFBb0I7UUFDNUksSUFBSUssYUFBYTtZQUNiLElBQUksQ0FBQ0MseUJBQXlCLENBQUNFLE9BQU8sQ0FBQ0g7UUFDM0M7UUFDQSxNQUFNLElBQUksQ0FBQ0MseUJBQXlCLENBQUNGLFNBQVMsQ0FBQyxDQUFDSztZQUM1QyxJQUFJLENBQUNQLFlBQVksQ0FBQ1EsSUFBSSxDQUFDLHFCQUFxQkQ7WUFDNUMsSUFBSSxDQUFDUCxZQUFZLENBQUNRLElBQUksQ0FBQztRQUMzQjtRQUNBLElBQUksQ0FBQ1IsWUFBWSxDQUFDUSxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDVCxZQUFZLEdBQUc7UUFDcEIsT0FBTztJQUNYO0lBQ0EsTUFBTVUsUUFBUTtRQUNWLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQztZQUFDLElBQUksQ0FBQ1AseUJBQXlCLENBQUNLLEtBQUs7U0FBRztJQUM5RDtJQUNBLE1BQU1HLGNBQWM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQ2IsWUFBWSxFQUFFO1lBQ3BCO1FBQ0o7UUFDQSxNQUFNVyxRQUFRQyxHQUFHLENBQUM7WUFBQyxJQUFJLENBQUNQLHlCQUF5QixDQUFDUSxXQUFXO1NBQUc7UUFDaEUsSUFBSSxDQUFDYixZQUFZLEdBQUc7SUFDeEI7SUFDQWMscUJBQXFCO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUNkLFlBQVksRUFBRTtZQUNwQixNQUFNLElBQUlQLFFBQVFzQixrQkFBa0IsQ0FBQztRQUN6QztJQUNKO0lBQ0FDLHdCQUF3QjtRQUNwQixJQUFJLENBQUNGLGtCQUFrQjtRQUN2QixPQUFPLElBQUksQ0FBQ1QseUJBQXlCLENBQUNZLFdBQVc7SUFDckQ7SUFDQUMsV0FBV2QsV0FBVyxFQUFFZSxJQUFJLEVBQUU7UUFDMUIsSUFBSUM7UUFDSixNQUFNQyxrQkFBa0IsQ0FBQyxDQUFDRCxLQUFLLElBQUksQ0FBQ2YseUJBQXlCLENBQUNZLFdBQVcsTUFBTSxRQUFRRyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdELElBQUksS0FBSztRQUM1SCxJQUFJRSxrQkFBa0JGLE1BQU07WUFDeEIsSUFBSSxDQUFDZCx5QkFBeUIsQ0FBQ0UsT0FBTyxDQUFDSCxhQUFhZTtZQUNwRCxJQUFJLENBQUNsQixZQUFZLENBQUNRLElBQUksQ0FBQyxxQkFBcUJMO1lBQzVDLElBQUksQ0FBQ0gsWUFBWSxDQUFDUSxJQUFJLENBQUM7UUFDM0I7SUFDSjtBQUNKO0FBQ0FuQixzQ0FBc0MsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvYWNjb3VudHMvd2ViU29ja2V0VXNlckFjY291bnRTdWJzY3JpYmVyLmpzPzIzZjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldlYlNvY2tldFVzZXJBY2NvdW50U3Vic2NyaWJlciA9IHZvaWQgMDtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNvbnN0IHdlYlNvY2tldEFjY291bnRTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi93ZWJTb2NrZXRBY2NvdW50U3Vic2NyaWJlclwiKTtcbmNsYXNzIFdlYlNvY2tldFVzZXJBY2NvdW50U3Vic2NyaWJlciB7XG4gICAgY29uc3RydWN0b3IocHJvZ3JhbSwgdXNlckFjY291bnRQdWJsaWNLZXkpIHtcbiAgICAgICAgdGhpcy5pc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgdGhpcy51c2VyQWNjb3VudFB1YmxpY0tleSA9IHVzZXJBY2NvdW50UHVibGljS2V5O1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlciA9IG5ldyBldmVudHNfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICB9XG4gICAgYXN5bmMgc3Vic2NyaWJlKHVzZXJBY2NvdW50KSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51c2VyRGF0YUFjY291bnRTdWJzY3JpYmVyID0gbmV3IHdlYlNvY2tldEFjY291bnRTdWJzY3JpYmVyXzEuV2ViU29ja2V0QWNjb3VudFN1YnNjcmliZXIoJ3VzZXInLCB0aGlzLnByb2dyYW0sIHRoaXMudXNlckFjY291bnRQdWJsaWNLZXkpO1xuICAgICAgICBpZiAodXNlckFjY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMudXNlckRhdGFBY2NvdW50U3Vic2NyaWJlci5zZXREYXRhKHVzZXJBY2NvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnVzZXJEYXRhQWNjb3VudFN1YnNjcmliZXIuc3Vic2NyaWJlKChkYXRhKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCd1c2VyQWNjb3VudFVwZGF0ZScsIGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgndXBkYXRlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCd1cGRhdGUnKTtcbiAgICAgICAgdGhpcy5pc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgYXN5bmMgZmV0Y2goKSB7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFt0aGlzLnVzZXJEYXRhQWNjb3VudFN1YnNjcmliZXIuZmV0Y2goKV0pO1xuICAgIH1cbiAgICBhc3luYyB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFt0aGlzLnVzZXJEYXRhQWNjb3VudFN1YnNjcmliZXIudW5zdWJzY3JpYmUoKV0pO1xuICAgICAgICB0aGlzLmlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBhc3NlcnRJc1N1YnNjcmliZWQoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyB0eXBlc18xLk5vdFN1YnNjcmliZWRFcnJvcignWW91IG11c3QgY2FsbCBgc3Vic2NyaWJlYCBiZWZvcmUgdXNpbmcgdGhpcyBmdW5jdGlvbicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFVzZXJBY2NvdW50QW5kU2xvdCgpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRJc1N1YnNjcmliZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlckRhdGFBY2NvdW50U3Vic2NyaWJlci5kYXRhQW5kU2xvdDtcbiAgICB9XG4gICAgdXBkYXRlRGF0YSh1c2VyQWNjb3VudCwgc2xvdCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGN1cnJlbnREYXRhU2xvdCA9ICgoX2EgPSB0aGlzLnVzZXJEYXRhQWNjb3VudFN1YnNjcmliZXIuZGF0YUFuZFNsb3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zbG90KSB8fCAwO1xuICAgICAgICBpZiAoY3VycmVudERhdGFTbG90IDwgc2xvdCkge1xuICAgICAgICAgICAgdGhpcy51c2VyRGF0YUFjY291bnRTdWJzY3JpYmVyLnNldERhdGEodXNlckFjY291bnQsIHNsb3QpO1xuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgndXNlckFjY291bnRVcGRhdGUnLCB1c2VyQWNjb3VudCk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCd1cGRhdGUnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuV2ViU29ja2V0VXNlckFjY291bnRTdWJzY3JpYmVyID0gV2ViU29ja2V0VXNlckFjY291bnRTdWJzY3JpYmVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV2ViU29ja2V0VXNlckFjY291bnRTdWJzY3JpYmVyIiwidHlwZXNfMSIsInJlcXVpcmUiLCJldmVudHNfMSIsIndlYlNvY2tldEFjY291bnRTdWJzY3JpYmVyXzEiLCJjb25zdHJ1Y3RvciIsInByb2dyYW0iLCJ1c2VyQWNjb3VudFB1YmxpY0tleSIsImlzU3Vic2NyaWJlZCIsImV2ZW50RW1pdHRlciIsIkV2ZW50RW1pdHRlciIsInN1YnNjcmliZSIsInVzZXJBY2NvdW50IiwidXNlckRhdGFBY2NvdW50U3Vic2NyaWJlciIsIldlYlNvY2tldEFjY291bnRTdWJzY3JpYmVyIiwic2V0RGF0YSIsImRhdGEiLCJlbWl0IiwiZmV0Y2giLCJQcm9taXNlIiwiYWxsIiwidW5zdWJzY3JpYmUiLCJhc3NlcnRJc1N1YnNjcmliZWQiLCJOb3RTdWJzY3JpYmVkRXJyb3IiLCJnZXRVc2VyQWNjb3VudEFuZFNsb3QiLCJkYXRhQW5kU2xvdCIsInVwZGF0ZURhdGEiLCJzbG90IiwiX2EiLCJjdXJyZW50RGF0YVNsb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketUserAccountSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketUserStatsAccountSubsriber.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/accounts/webSocketUserStatsAccountSubsriber.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebSocketUserStatsAccountSubscriber = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/types.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst webSocketAccountSubscriber_1 = __webpack_require__(/*! ./webSocketAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketAccountSubscriber.js\");\nclass WebSocketUserStatsAccountSubscriber {\n    constructor(program, userStatsAccountPublicKey){\n        this.isSubscribed = false;\n        this.program = program;\n        this.userStatsAccountPublicKey = userStatsAccountPublicKey;\n        this.eventEmitter = new events_1.EventEmitter();\n    }\n    async subscribe(userStatsAccount) {\n        if (this.isSubscribed) {\n            return true;\n        }\n        this.userStatsAccountSubscriber = new webSocketAccountSubscriber_1.WebSocketAccountSubscriber(\"userStats\", this.program, this.userStatsAccountPublicKey);\n        if (userStatsAccount) {\n            this.userStatsAccountSubscriber.setData(userStatsAccount);\n        }\n        await this.userStatsAccountSubscriber.subscribe((data)=>{\n            this.eventEmitter.emit(\"userStatsAccountUpdate\", data);\n            this.eventEmitter.emit(\"update\");\n        });\n        this.eventEmitter.emit(\"update\");\n        this.isSubscribed = true;\n        return true;\n    }\n    async fetch() {\n        await Promise.all([\n            this.userStatsAccountSubscriber.fetch()\n        ]);\n    }\n    async unsubscribe() {\n        if (!this.isSubscribed) {\n            return;\n        }\n        await Promise.all([\n            this.userStatsAccountSubscriber.unsubscribe()\n        ]);\n        this.isSubscribed = false;\n    }\n    assertIsSubscribed() {\n        if (!this.isSubscribed) {\n            throw new types_1.NotSubscribedError(\"You must call `subscribe` before using this function\");\n        }\n    }\n    getUserStatsAccountAndSlot() {\n        this.assertIsSubscribed();\n        return this.userStatsAccountSubscriber.dataAndSlot;\n    }\n}\nexports.WebSocketUserStatsAccountSubscriber = WebSocketUserStatsAccountSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hY2NvdW50cy93ZWJTb2NrZXRVc2VyU3RhdHNBY2NvdW50U3Vic3JpYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwyQ0FBMkMsR0FBRyxLQUFLO0FBQ25ELE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLDJFQUFTO0FBQ2pDLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1FLCtCQUErQkYsbUJBQU9BLENBQUMscUhBQThCO0FBQzNFLE1BQU1GO0lBQ0ZLLFlBQVlDLE9BQU8sRUFBRUMseUJBQXlCLENBQUU7UUFDNUMsSUFBSSxDQUFDQyxZQUFZLEdBQUc7UUFDcEIsSUFBSSxDQUFDRixPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyx5QkFBeUIsR0FBR0E7UUFDakMsSUFBSSxDQUFDRSxZQUFZLEdBQUcsSUFBSU4sU0FBU08sWUFBWTtJQUNqRDtJQUNBLE1BQU1DLFVBQVVDLGdCQUFnQixFQUFFO1FBQzlCLElBQUksSUFBSSxDQUFDSixZQUFZLEVBQUU7WUFDbkIsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDSywwQkFBMEIsR0FBRyxJQUFJVCw2QkFBNkJVLDBCQUEwQixDQUFDLGFBQWEsSUFBSSxDQUFDUixPQUFPLEVBQUUsSUFBSSxDQUFDQyx5QkFBeUI7UUFDdkosSUFBSUssa0JBQWtCO1lBQ2xCLElBQUksQ0FBQ0MsMEJBQTBCLENBQUNFLE9BQU8sQ0FBQ0g7UUFDNUM7UUFDQSxNQUFNLElBQUksQ0FBQ0MsMEJBQTBCLENBQUNGLFNBQVMsQ0FBQyxDQUFDSztZQUM3QyxJQUFJLENBQUNQLFlBQVksQ0FBQ1EsSUFBSSxDQUFDLDBCQUEwQkQ7WUFDakQsSUFBSSxDQUFDUCxZQUFZLENBQUNRLElBQUksQ0FBQztRQUMzQjtRQUNBLElBQUksQ0FBQ1IsWUFBWSxDQUFDUSxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDVCxZQUFZLEdBQUc7UUFDcEIsT0FBTztJQUNYO0lBQ0EsTUFBTVUsUUFBUTtRQUNWLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQztZQUFDLElBQUksQ0FBQ1AsMEJBQTBCLENBQUNLLEtBQUs7U0FBRztJQUMvRDtJQUNBLE1BQU1HLGNBQWM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQ2IsWUFBWSxFQUFFO1lBQ3BCO1FBQ0o7UUFDQSxNQUFNVyxRQUFRQyxHQUFHLENBQUM7WUFBQyxJQUFJLENBQUNQLDBCQUEwQixDQUFDUSxXQUFXO1NBQUc7UUFDakUsSUFBSSxDQUFDYixZQUFZLEdBQUc7SUFDeEI7SUFDQWMscUJBQXFCO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUNkLFlBQVksRUFBRTtZQUNwQixNQUFNLElBQUlQLFFBQVFzQixrQkFBa0IsQ0FBQztRQUN6QztJQUNKO0lBQ0FDLDZCQUE2QjtRQUN6QixJQUFJLENBQUNGLGtCQUFrQjtRQUN2QixPQUFPLElBQUksQ0FBQ1QsMEJBQTBCLENBQUNZLFdBQVc7SUFDdEQ7QUFDSjtBQUNBM0IsMkNBQTJDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL2FjY291bnRzL3dlYlNvY2tldFVzZXJTdGF0c0FjY291bnRTdWJzcmliZXIuanM/ZjYwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2ViU29ja2V0VXNlclN0YXRzQWNjb3VudFN1YnNjcmliZXIgPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5jb25zdCB3ZWJTb2NrZXRBY2NvdW50U3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vd2ViU29ja2V0QWNjb3VudFN1YnNjcmliZXJcIik7XG5jbGFzcyBXZWJTb2NrZXRVc2VyU3RhdHNBY2NvdW50U3Vic2NyaWJlciB7XG4gICAgY29uc3RydWN0b3IocHJvZ3JhbSwgdXNlclN0YXRzQWNjb3VudFB1YmxpY0tleSkge1xuICAgICAgICB0aGlzLmlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB0aGlzLnVzZXJTdGF0c0FjY291bnRQdWJsaWNLZXkgPSB1c2VyU3RhdHNBY2NvdW50UHVibGljS2V5O1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlciA9IG5ldyBldmVudHNfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICB9XG4gICAgYXN5bmMgc3Vic2NyaWJlKHVzZXJTdGF0c0FjY291bnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVzZXJTdGF0c0FjY291bnRTdWJzY3JpYmVyID0gbmV3IHdlYlNvY2tldEFjY291bnRTdWJzY3JpYmVyXzEuV2ViU29ja2V0QWNjb3VudFN1YnNjcmliZXIoJ3VzZXJTdGF0cycsIHRoaXMucHJvZ3JhbSwgdGhpcy51c2VyU3RhdHNBY2NvdW50UHVibGljS2V5KTtcbiAgICAgICAgaWYgKHVzZXJTdGF0c0FjY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMudXNlclN0YXRzQWNjb3VudFN1YnNjcmliZXIuc2V0RGF0YSh1c2VyU3RhdHNBY2NvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnVzZXJTdGF0c0FjY291bnRTdWJzY3JpYmVyLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgndXNlclN0YXRzQWNjb3VudFVwZGF0ZScsIGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgndXBkYXRlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCd1cGRhdGUnKTtcbiAgICAgICAgdGhpcy5pc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgYXN5bmMgZmV0Y2goKSB7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFt0aGlzLnVzZXJTdGF0c0FjY291bnRTdWJzY3JpYmVyLmZldGNoKCldKTtcbiAgICB9XG4gICAgYXN5bmMgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbdGhpcy51c2VyU3RhdHNBY2NvdW50U3Vic2NyaWJlci51bnN1YnNjcmliZSgpXSk7XG4gICAgICAgIHRoaXMuaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgfVxuICAgIGFzc2VydElzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuTm90U3Vic2NyaWJlZEVycm9yKCdZb3UgbXVzdCBjYWxsIGBzdWJzY3JpYmVgIGJlZm9yZSB1c2luZyB0aGlzIGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0VXNlclN0YXRzQWNjb3VudEFuZFNsb3QoKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0SXNTdWJzY3JpYmVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJTdGF0c0FjY291bnRTdWJzY3JpYmVyLmRhdGFBbmRTbG90O1xuICAgIH1cbn1cbmV4cG9ydHMuV2ViU29ja2V0VXNlclN0YXRzQWNjb3VudFN1YnNjcmliZXIgPSBXZWJTb2NrZXRVc2VyU3RhdHNBY2NvdW50U3Vic2NyaWJlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIldlYlNvY2tldFVzZXJTdGF0c0FjY291bnRTdWJzY3JpYmVyIiwidHlwZXNfMSIsInJlcXVpcmUiLCJldmVudHNfMSIsIndlYlNvY2tldEFjY291bnRTdWJzY3JpYmVyXzEiLCJjb25zdHJ1Y3RvciIsInByb2dyYW0iLCJ1c2VyU3RhdHNBY2NvdW50UHVibGljS2V5IiwiaXNTdWJzY3JpYmVkIiwiZXZlbnRFbWl0dGVyIiwiRXZlbnRFbWl0dGVyIiwic3Vic2NyaWJlIiwidXNlclN0YXRzQWNjb3VudCIsInVzZXJTdGF0c0FjY291bnRTdWJzY3JpYmVyIiwiV2ViU29ja2V0QWNjb3VudFN1YnNjcmliZXIiLCJzZXREYXRhIiwiZGF0YSIsImVtaXQiLCJmZXRjaCIsIlByb21pc2UiLCJhbGwiLCJ1bnN1YnNjcmliZSIsImFzc2VydElzU3Vic2NyaWJlZCIsIk5vdFN1YnNjcmliZWRFcnJvciIsImdldFVzZXJTdGF0c0FjY291bnRBbmRTbG90IiwiZGF0YUFuZFNsb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketUserStatsAccountSubsriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/addresses/pda.js":
/*!***********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/addresses/pda.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getReferrerNamePublicKeySync = exports.getPhoenixFulfillmentConfigPublicKey = exports.getSerumFulfillmentConfigPublicKey = exports.getSerumSignerPublicKey = exports.getSerumOpenOrdersPublicKey = exports.getDriftSignerPublicKey = exports.getInsuranceFundStakeAccountPublicKey = exports.getInsuranceFundVaultPublicKey = exports.getSpotMarketVaultPublicKey = exports.getSpotMarketPublicKey = exports.getPerpMarketPublicKey = exports.getUserStatsAccountPublicKey = exports.getUserAccountPublicKeySync = exports.getUserAccountPublicKey = exports.getUserAccountPublicKeyAndNonce = exports.getDriftStateAccountPublicKey = exports.getDriftStateAccountPublicKeyAndNonce = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst anchor = __importStar(__webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\"));\nasync function getDriftStateAccountPublicKeyAndNonce(programId) {\n    return web3_js_1.PublicKey.findProgramAddress([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"drift_state\"))\n    ], programId);\n}\nexports.getDriftStateAccountPublicKeyAndNonce = getDriftStateAccountPublicKeyAndNonce;\nasync function getDriftStateAccountPublicKey(programId) {\n    return (await getDriftStateAccountPublicKeyAndNonce(programId))[0];\n}\nexports.getDriftStateAccountPublicKey = getDriftStateAccountPublicKey;\nasync function getUserAccountPublicKeyAndNonce(programId, authority, subAccountId = 0) {\n    return web3_js_1.PublicKey.findProgramAddress([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"user\")),\n        authority.toBuffer(),\n        new anchor.BN(subAccountId).toArrayLike(Buffer, \"le\", 2)\n    ], programId);\n}\nexports.getUserAccountPublicKeyAndNonce = getUserAccountPublicKeyAndNonce;\nasync function getUserAccountPublicKey(programId, authority, subAccountId = 0) {\n    return (await getUserAccountPublicKeyAndNonce(programId, authority, subAccountId))[0];\n}\nexports.getUserAccountPublicKey = getUserAccountPublicKey;\nfunction getUserAccountPublicKeySync(programId, authority, subAccountId = 0) {\n    return web3_js_1.PublicKey.findProgramAddressSync([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"user\")),\n        authority.toBuffer(),\n        new anchor.BN(subAccountId).toArrayLike(Buffer, \"le\", 2)\n    ], programId)[0];\n}\nexports.getUserAccountPublicKeySync = getUserAccountPublicKeySync;\nfunction getUserStatsAccountPublicKey(programId, authority) {\n    return web3_js_1.PublicKey.findProgramAddressSync([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"user_stats\")),\n        authority.toBuffer()\n    ], programId)[0];\n}\nexports.getUserStatsAccountPublicKey = getUserStatsAccountPublicKey;\nasync function getPerpMarketPublicKey(programId, marketIndex) {\n    return (await web3_js_1.PublicKey.findProgramAddress([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"perp_market\")),\n        new anchor.BN(marketIndex).toArrayLike(Buffer, \"le\", 2)\n    ], programId))[0];\n}\nexports.getPerpMarketPublicKey = getPerpMarketPublicKey;\nasync function getSpotMarketPublicKey(programId, marketIndex) {\n    return (await web3_js_1.PublicKey.findProgramAddress([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"spot_market\")),\n        new anchor.BN(marketIndex).toArrayLike(Buffer, \"le\", 2)\n    ], programId))[0];\n}\nexports.getSpotMarketPublicKey = getSpotMarketPublicKey;\nasync function getSpotMarketVaultPublicKey(programId, marketIndex) {\n    return (await web3_js_1.PublicKey.findProgramAddress([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"spot_market_vault\")),\n        new anchor.BN(marketIndex).toArrayLike(Buffer, \"le\", 2)\n    ], programId))[0];\n}\nexports.getSpotMarketVaultPublicKey = getSpotMarketVaultPublicKey;\nasync function getInsuranceFundVaultPublicKey(programId, marketIndex) {\n    return (await web3_js_1.PublicKey.findProgramAddress([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"insurance_fund_vault\")),\n        new anchor.BN(marketIndex).toArrayLike(Buffer, \"le\", 2)\n    ], programId))[0];\n}\nexports.getInsuranceFundVaultPublicKey = getInsuranceFundVaultPublicKey;\nfunction getInsuranceFundStakeAccountPublicKey(programId, authority, marketIndex) {\n    return web3_js_1.PublicKey.findProgramAddressSync([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"insurance_fund_stake\")),\n        authority.toBuffer(),\n        new anchor.BN(marketIndex).toArrayLike(Buffer, \"le\", 2)\n    ], programId)[0];\n}\nexports.getInsuranceFundStakeAccountPublicKey = getInsuranceFundStakeAccountPublicKey;\nfunction getDriftSignerPublicKey(programId) {\n    return web3_js_1.PublicKey.findProgramAddressSync([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"drift_signer\"))\n    ], programId)[0];\n}\nexports.getDriftSignerPublicKey = getDriftSignerPublicKey;\nfunction getSerumOpenOrdersPublicKey(programId, market) {\n    return web3_js_1.PublicKey.findProgramAddressSync([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"serum_open_orders\")),\n        market.toBuffer()\n    ], programId)[0];\n}\nexports.getSerumOpenOrdersPublicKey = getSerumOpenOrdersPublicKey;\nfunction getSerumSignerPublicKey(programId, market, nonce) {\n    return anchor.web3.PublicKey.createProgramAddressSync([\n        market.toBuffer(),\n        nonce.toArrayLike(Buffer, \"le\", 8)\n    ], programId);\n}\nexports.getSerumSignerPublicKey = getSerumSignerPublicKey;\nfunction getSerumFulfillmentConfigPublicKey(programId, market) {\n    return web3_js_1.PublicKey.findProgramAddressSync([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"serum_fulfillment_config\")),\n        market.toBuffer()\n    ], programId)[0];\n}\nexports.getSerumFulfillmentConfigPublicKey = getSerumFulfillmentConfigPublicKey;\nfunction getPhoenixFulfillmentConfigPublicKey(programId, market) {\n    return web3_js_1.PublicKey.findProgramAddressSync([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"phoenix_fulfillment_config\")),\n        market.toBuffer()\n    ], programId)[0];\n}\nexports.getPhoenixFulfillmentConfigPublicKey = getPhoenixFulfillmentConfigPublicKey;\nfunction getReferrerNamePublicKeySync(programId, nameBuffer) {\n    return web3_js_1.PublicKey.findProgramAddressSync([\n        Buffer.from(anchor.utils.bytes.utf8.encode(\"referrer_name\")),\n        Buffer.from(nameBuffer)\n    ], programId)[0];\n}\nexports.getReferrerNamePublicKeySync = getReferrerNamePublicKeySync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/addresses/pda.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/adminClient.js":
/*!*********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/adminClient.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AdminClient = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst userName_1 = __webpack_require__(/*! ./userName */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/userName.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst anchor = __importStar(__webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\"));\nconst pda_1 = __webpack_require__(/*! ./addresses/pda */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/addresses/pda.js\");\nconst utils_1 = __webpack_require__(/*! ./math/utils */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/utils.js\");\nconst spl_token_1 = __webpack_require__(/*! @solana/spl-token */ \"(ssr)/./node_modules/@solana/spl-token/lib/cjs/index.js\");\nconst driftClient_1 = __webpack_require__(/*! ./driftClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/driftClient.js\");\nconst numericConstants_1 = __webpack_require__(/*! ./constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst trade_1 = __webpack_require__(/*! ./math/trade */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/trade.js\");\nconst amm_1 = __webpack_require__(/*! ./math/amm */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/amm.js\");\nconst phoenix_sdk_1 = __webpack_require__(/*! @ellipsis-labs/phoenix-sdk */ \"(ssr)/./node_modules/@ellipsis-labs/phoenix-sdk/dist/index.js\");\nclass AdminClient extends driftClient_1.DriftClient {\n    async initialize(usdcMint, _adminControlsPrices) {\n        const stateAccountRPCResponse = await this.connection.getParsedAccountInfo(await this.getStatePublicKey());\n        if (stateAccountRPCResponse.value !== null) {\n            throw new Error(\"Clearing house already initialized\");\n        }\n        const [driftStatePublicKey] = await (0, pda_1.getDriftStateAccountPublicKeyAndNonce)(this.program.programId);\n        const initializeTx = await this.program.transaction.initialize({\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: driftStatePublicKey,\n                quoteAssetMint: usdcMint,\n                rent: web3_js_1.SYSVAR_RENT_PUBKEY,\n                driftSigner: this.getSignerPublicKey(),\n                systemProgram: anchor.web3.SystemProgram.programId,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            }\n        });\n        const { txSig: initializeTxSig } = await super.sendTransaction(initializeTx, [], this.opts);\n        return [\n            initializeTxSig\n        ];\n    }\n    async initializeSpotMarket(mint, optimalUtilization, optimalRate, maxRate, oracle, oracleSource, initialAssetWeight, maintenanceAssetWeight, initialLiabilityWeight, maintenanceLiabilityWeight, imfFactor = 0, liquidatorFee = 0, activeStatus = true, name = userName_1.DEFAULT_MARKET_NAME) {\n        const spotMarketIndex = this.getStateAccount().numberOfSpotMarkets;\n        const spotMarket = await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex);\n        const spotMarketVault = await (0, pda_1.getSpotMarketVaultPublicKey)(this.program.programId, spotMarketIndex);\n        const insuranceFundVault = await (0, pda_1.getInsuranceFundVaultPublicKey)(this.program.programId, spotMarketIndex);\n        const nameBuffer = (0, userName_1.encodeName)(name);\n        const initializeTx = await this.program.transaction.initializeSpotMarket(optimalUtilization, optimalRate, maxRate, oracleSource, initialAssetWeight, maintenanceAssetWeight, initialLiabilityWeight, maintenanceLiabilityWeight, imfFactor, liquidatorFee, activeStatus, nameBuffer, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket,\n                spotMarketVault,\n                insuranceFundVault,\n                driftSigner: this.getSignerPublicKey(),\n                spotMarketMint: mint,\n                oracle,\n                rent: web3_js_1.SYSVAR_RENT_PUBKEY,\n                systemProgram: anchor.web3.SystemProgram.programId,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            }\n        });\n        const { txSig } = await this.sendTransaction(initializeTx, [], this.opts);\n        await this.accountSubscriber.addSpotMarket(spotMarketIndex);\n        await this.accountSubscriber.addOracle({\n            source: oracleSource,\n            publicKey: oracle\n        });\n        return txSig;\n    }\n    async initializeSerumFulfillmentConfig(marketIndex, serumMarket, serumProgram) {\n        const serumOpenOrders = (0, pda_1.getSerumOpenOrdersPublicKey)(this.program.programId, serumMarket);\n        const serumFulfillmentConfig = (0, pda_1.getSerumFulfillmentConfigPublicKey)(this.program.programId, serumMarket);\n        const tx = await this.program.transaction.initializeSerumFulfillmentConfig(marketIndex, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                baseSpotMarket: this.getSpotMarketAccount(marketIndex).pubkey,\n                quoteSpotMarket: this.getQuoteSpotMarketAccount().pubkey,\n                driftSigner: this.getSignerPublicKey(),\n                serumProgram,\n                serumMarket,\n                serumOpenOrders,\n                rent: web3_js_1.SYSVAR_RENT_PUBKEY,\n                systemProgram: anchor.web3.SystemProgram.programId,\n                serumFulfillmentConfig\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async initializePhoenixFulfillmentConfig(marketIndex, phoenixMarket) {\n        const phoenixFulfillmentConfig = (0, pda_1.getPhoenixFulfillmentConfigPublicKey)(this.program.programId, phoenixMarket);\n        const tx = await this.program.transaction.initializePhoenixFulfillmentConfig(marketIndex, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                baseSpotMarket: this.getSpotMarketAccount(marketIndex).pubkey,\n                quoteSpotMarket: this.getQuoteSpotMarketAccount().pubkey,\n                driftSigner: this.getSignerPublicKey(),\n                phoenixMarket: phoenixMarket,\n                phoenixProgram: phoenix_sdk_1.PROGRAM_ID,\n                rent: web3_js_1.SYSVAR_RENT_PUBKEY,\n                systemProgram: anchor.web3.SystemProgram.programId,\n                phoenixFulfillmentConfig\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async initializePerpMarket(marketIndex, priceOracle, baseAssetReserve, quoteAssetReserve, periodicity, pegMultiplier = numericConstants_1.PEG_PRECISION, oracleSource = types_1.OracleSource.PYTH, marginRatioInitial = 2000, marginRatioMaintenance = 500, liquidatorFee = 0, activeStatus = true, name = userName_1.DEFAULT_MARKET_NAME) {\n        const currentPerpMarketIndex = this.getStateAccount().numberOfMarkets;\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, currentPerpMarketIndex);\n        const nameBuffer = (0, userName_1.encodeName)(name);\n        const initializeMarketTx = await this.program.transaction.initializePerpMarket(marketIndex, baseAssetReserve, quoteAssetReserve, periodicity, pegMultiplier, oracleSource, marginRatioInitial, marginRatioMaintenance, liquidatorFee, activeStatus, nameBuffer, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                admin: this.wallet.publicKey,\n                oracle: priceOracle,\n                perpMarket: perpMarketPublicKey,\n                rent: web3_js_1.SYSVAR_RENT_PUBKEY,\n                systemProgram: anchor.web3.SystemProgram.programId\n            }\n        });\n        const { txSig } = await this.sendTransaction(initializeMarketTx, [], this.opts);\n        while(this.getStateAccount().numberOfMarkets <= currentPerpMarketIndex){\n            await this.fetchAccounts();\n        }\n        await this.accountSubscriber.addPerpMarket(currentPerpMarketIndex);\n        await this.accountSubscriber.addOracle({\n            source: oracleSource,\n            publicKey: priceOracle\n        });\n        return txSig;\n    }\n    async deleteInitializedPerpMarket(marketIndex) {\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, marketIndex);\n        const deleteInitializeMarketTx = await this.program.transaction.deleteInitializedPerpMarket(marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                admin: this.wallet.publicKey,\n                perpMarket: perpMarketPublicKey\n            }\n        });\n        const { txSig } = await this.sendTransaction(deleteInitializeMarketTx, [], this.opts);\n        return txSig;\n    }\n    async moveAmmPrice(perpMarketIndex, baseAssetReserve, quoteAssetReserve, sqrtK) {\n        const marketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex);\n        if (sqrtK == undefined) {\n            sqrtK = (0, utils_1.squareRootBN)(baseAssetReserve.mul(quoteAssetReserve));\n        }\n        const tx = await this.program.transaction.moveAmmPrice(baseAssetReserve, quoteAssetReserve, sqrtK, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                admin: this.wallet.publicKey,\n                perpMarket: marketPublicKey\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateK(perpMarketIndex, sqrtK) {\n        const tx = await this.program.transaction.updateK(sqrtK, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                admin: this.wallet.publicKey,\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex),\n                oracle: this.getPerpMarketAccount(perpMarketIndex).amm.oracle\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updatePerpMarketConcentrationScale(perpMarketIndex, concentrationScale) {\n        return await this.program.rpc.updatePerpMarketConcentrationCoef(concentrationScale, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                admin: this.wallet.publicKey,\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n    }\n    async moveAmmToPrice(perpMarketIndex, targetPrice) {\n        const perpMarket = this.getPerpMarketAccount(perpMarketIndex);\n        const [direction, tradeSize, _] = (0, trade_1.calculateTargetPriceTrade)(perpMarket, targetPrice, new anchor_1.BN(1000), \"quote\", undefined //todo\n        );\n        const [newQuoteAssetAmount, newBaseAssetAmount] = (0, amm_1.calculateAmmReservesAfterSwap)(perpMarket.amm, \"quote\", tradeSize, (0, amm_1.getSwapDirection)(\"quote\", direction));\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex);\n        const tx = await this.program.transaction.moveAmmPrice(newBaseAssetAmount, newQuoteAssetAmount, perpMarket.amm.sqrtK, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                admin: this.wallet.publicKey,\n                perpMarket: perpMarketPublicKey\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async repegAmmCurve(newPeg, perpMarketIndex) {\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex);\n        const ammData = this.getPerpMarketAccount(perpMarketIndex).amm;\n        const tx = await this.program.transaction.repegAmmCurve(newPeg, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                admin: this.wallet.publicKey,\n                oracle: ammData.oracle,\n                perpMarket: perpMarketPublicKey\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updatePerpMarketAmmOracleTwap(perpMarketIndex) {\n        const ammData = this.getPerpMarketAccount(perpMarketIndex).amm;\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex);\n        return await this.program.rpc.updatePerpMarketAmmOracleTwap({\n            accounts: {\n                state: await this.getStatePublicKey(),\n                admin: this.wallet.publicKey,\n                oracle: ammData.oracle,\n                perpMarket: perpMarketPublicKey\n            }\n        });\n    }\n    async resetPerpMarketAmmOracleTwap(perpMarketIndex) {\n        const ammData = this.getPerpMarketAccount(perpMarketIndex).amm;\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex);\n        return await this.program.rpc.resetPerpMarketAmmOracleTwap({\n            accounts: {\n                state: await this.getStatePublicKey(),\n                admin: this.wallet.publicKey,\n                oracle: ammData.oracle,\n                perpMarket: perpMarketPublicKey\n            }\n        });\n    }\n    async depositIntoPerpMarketFeePool(perpMarketIndex, amount, sourceVault) {\n        const spotMarket = this.getQuoteSpotMarketAccount();\n        const tx = await this.program.transaction.depositIntoPerpMarketFeePool(amount, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex),\n                sourceVault,\n                driftSigner: this.getSignerPublicKey(),\n                quoteSpotMarket: spotMarket.pubkey,\n                spotMarketVault: spotMarket.vault,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateAdmin(admin) {\n        const tx = await this.program.transaction.updateAdmin(admin, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updatePerpMarketCurveUpdateIntensity(perpMarketIndex, curveUpdateIntensity) {\n        // assert(curveUpdateIntensity >= 0 && curveUpdateIntensity <= 100);\n        // assert(Number.isInteger(curveUpdateIntensity));\n        return await this.program.rpc.updatePerpMarketCurveUpdateIntensity(curveUpdateIntensity, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n    }\n    async updatePerpMarketTargetBaseAssetAmountPerLp(perpMarketIndex, targetBaseAssetAmountPerLP) {\n        return await this.program.rpc.updatePerpMarketTargetBaseAssetAmountPerLp(targetBaseAssetAmountPerLP, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n    }\n    async updatePerpMarketMarginRatio(perpMarketIndex, marginRatioInitial, marginRatioMaintenance) {\n        const tx = await this.program.transaction.updatePerpMarketMarginRatio(marginRatioInitial, marginRatioMaintenance, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updatePerpMarketImfFactor(perpMarketIndex, imfFactor, unrealizedPnlImfFactor) {\n        return await this.program.rpc.updatePerpMarketImfFactor(imfFactor, unrealizedPnlImfFactor, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n    }\n    async updatePerpMarketBaseSpread(perpMarketIndex, baseSpread) {\n        const tx = await this.program.transaction.updatePerpMarketBaseSpread(baseSpread, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateAmmJitIntensity(perpMarketIndex, ammJitIntensity) {\n        const tx = await this.program.transaction.updateAmmJitIntensity(ammJitIntensity, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updatePerpMarketName(perpMarketIndex, name) {\n        const nameBuffer = (0, userName_1.encodeName)(name);\n        const tx = await this.program.transaction.updatePerpMarketName(nameBuffer, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateSpotMarketName(spotMarketIndex, name) {\n        const nameBuffer = (0, userName_1.encodeName)(name);\n        return await this.program.rpc.updateSpotMarketName(nameBuffer, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n    }\n    async updatePerpMarketPerLpBase(perpMarketIndex, perLpBase) {\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex);\n        return await this.program.rpc.updatePerpMarketPerLpBase(perLpBase, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: perpMarketPublicKey\n            }\n        });\n    }\n    async updatePerpMarketMaxSpread(perpMarketIndex, maxSpread) {\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex);\n        return await this.program.rpc.updatePerpMarketMaxSpread(maxSpread, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: perpMarketPublicKey\n            }\n        });\n    }\n    async updatePerpFeeStructure(feeStructure) {\n        const tx = this.program.transaction.updatePerpFeeStructure(feeStructure, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateSpotFeeStructure(feeStructure) {\n        const tx = await this.program.transaction.updateSpotFeeStructure(feeStructure, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateInitialPctToLiquidate(initialPctToLiquidate) {\n        return await this.program.rpc.updateInitialPctToLiquidate(initialPctToLiquidate, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n    }\n    async updateLiquidationDuration(liquidationDuration) {\n        return await this.program.rpc.updateLiquidationDuration(liquidationDuration, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n    }\n    async updateOracleGuardRails(oracleGuardRails) {\n        const tx = await this.program.transaction.updateOracleGuardRails(oracleGuardRails, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateStateSettlementDuration(settlementDuration) {\n        return await this.program.rpc.updateStateSettlementDuration(settlementDuration, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n    }\n    async updateWithdrawGuardThreshold(spotMarketIndex, withdrawGuardThreshold) {\n        const tx = await this.program.transaction.updateWithdrawGuardThreshold(withdrawGuardThreshold, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateSpotMarketIfFactor(spotMarketIndex, userIfFactor, totalIfFactor) {\n        const tx = await this.program.transaction.updateSpotMarketIfFactor(spotMarketIndex, userIfFactor, totalIfFactor, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateSpotMarketRevenueSettlePeriod(spotMarketIndex, revenueSettlePeriod) {\n        const tx = await this.program.transaction.updateSpotMarketRevenueSettlePeriod(revenueSettlePeriod, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateSpotMarketMaxTokenDeposits(spotMarketIndex, maxTokenDeposits) {\n        const tx = this.program.transaction.updateSpotMarketMaxTokenDeposits(maxTokenDeposits, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateInsuranceFundUnstakingPeriod(spotMarketIndex, insuranceWithdrawEscrowPeriod) {\n        const tx = await this.program.transaction.updateInsuranceFundUnstakingPeriod(insuranceWithdrawEscrowPeriod, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateLpCooldownTime(cooldownTime) {\n        const tx = await this.program.transaction.updateLpCooldownTime(cooldownTime, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updatePerpMarketOracle(perpMarketIndex, oracle, oracleSource) {\n        const tx = await this.program.transaction.updatePerpMarketOracle(oracle, oracleSource, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex),\n                oracle: oracle\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updatePerpMarketStepSizeAndTickSize(perpMarketIndex, stepSize, tickSize) {\n        const tx = await this.program.transaction.updatePerpMarketStepSizeAndTickSize(stepSize, tickSize, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updatePerpMarketMinOrderSize(perpMarketIndex, orderSize) {\n        return await this.program.rpc.updatePerpMarketMinOrderSize(orderSize, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n    }\n    async updateSpotMarketStepSizeAndTickSize(spotMarketIndex, stepSize, tickSize) {\n        return await this.program.rpc.updateSpotMarketStepSizeAndTickSize(stepSize, tickSize, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n    }\n    async updateSpotMarketMinOrderSize(spotMarketIndex, orderSize) {\n        return await this.program.rpc.updateSpotMarketMinOrderSize(orderSize, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n    }\n    async updatePerpMarketExpiry(perpMarketIndex, expiryTs) {\n        return await this.program.rpc.updatePerpMarketExpiry(expiryTs, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n    }\n    async updateSpotMarketOracle(spotMarketIndex, oracle, oracleSource) {\n        return await this.program.rpc.updateSpotMarketOracle(oracle, oracleSource, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex),\n                oracle: oracle\n            }\n        });\n    }\n    async updateSpotMarketOrdersEnabled(spotMarketIndex, ordersEnabled) {\n        return await this.program.rpc.updateSpotMarketOrdersEnabled(ordersEnabled, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n    }\n    async updateSerumFulfillmentConfigStatus(serumFulfillmentConfig, status) {\n        return await this.program.rpc.updateSerumFulfillmentConfigStatus(status, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                serumFulfillmentConfig\n            }\n        });\n    }\n    async updateSpotMarketExpiry(spotMarketIndex, expiryTs) {\n        return await this.program.rpc.updateSpotMarketExpiry(expiryTs, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n    }\n    async updateWhitelistMint(whitelistMint) {\n        const tx = await this.program.transaction.updateWhitelistMint(whitelistMint, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateDiscountMint(discountMint) {\n        const tx = await this.program.transaction.updateDiscountMint(discountMint, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateSpotMarketMarginWeights(spotMarketIndex, initialAssetWeight, maintenanceAssetWeight, initialLiabilityWeight, maintenanceLiabilityWeight, imfFactor = 0) {\n        return await this.program.rpc.updateSpotMarketMarginWeights(initialAssetWeight, maintenanceAssetWeight, initialLiabilityWeight, maintenanceLiabilityWeight, imfFactor, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n    }\n    async updateSpotMarketBorrowRate(spotMarketIndex, optimalUtilization, optimalBorrowRate, optimalMaxRate) {\n        return await this.program.rpc.updateSpotMarketBorrowRate(optimalUtilization, optimalBorrowRate, optimalMaxRate, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n    }\n    async updateSpotMarketAssetTier(spotMarketIndex, assetTier) {\n        const tx = await this.program.transaction.updateSpotMarketAssetTier(assetTier, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx);\n        return txSig;\n    }\n    async updateSpotMarketStatus(spotMarketIndex, marketStatus) {\n        const tx = await this.program.transaction.updateSpotMarketStatus(marketStatus, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updatePerpMarketStatus(perpMarketIndex, marketStatus) {\n        const tx = await this.program.transaction.updatePerpMarketStatus(marketStatus, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updatePerpMarketContractTier(perpMarketIndex, contractTier) {\n        const tx = await this.program.transaction.updatePerpMarketContractTier(contractTier, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateExchangeStatus(exchangeStatus) {\n        const tx = await this.program.transaction.updateExchangeStatus(exchangeStatus, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updatePerpAuctionDuration(minDuration) {\n        return await this.program.rpc.updatePerpAuctionDuration(typeof minDuration === \"number\" ? minDuration : minDuration.toNumber(), {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n    }\n    async updateSpotAuctionDuration(defaultAuctionDuration) {\n        return await this.program.rpc.updateSpotAuctionDuration(defaultAuctionDuration, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n    }\n    async updatePerpMarketMaxFillReserveFraction(perpMarketIndex, maxBaseAssetAmountRatio) {\n        return await this.program.rpc.updatePerpMarketMaxFillReserveFraction(maxBaseAssetAmountRatio, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n    }\n    async updateMaxSlippageRatio(perpMarketIndex, maxSlippageRatio) {\n        return await this.program.rpc.updateMaxSlippageRatio(maxSlippageRatio, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: this.getPerpMarketAccount(perpMarketIndex).pubkey\n            }\n        });\n    }\n    async updatePerpMarketUnrealizedAssetWeight(perpMarketIndex, unrealizedInitialAssetWeight, unrealizedMaintenanceAssetWeight) {\n        return await this.program.rpc.updatePerpMarketUnrealizedAssetWeight(unrealizedInitialAssetWeight, unrealizedMaintenanceAssetWeight, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n    }\n    async updatePerpMarketMaxImbalances(perpMarketIndex, unrealizedMaxImbalance, maxRevenueWithdrawPerPeriod, quoteMaxInsurance) {\n        return await this.program.rpc.updatePerpMarketMaxImbalances(unrealizedMaxImbalance, maxRevenueWithdrawPerPeriod, quoteMaxInsurance, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n    }\n    async updatePerpMarketMaxOpenInterest(perpMarketIndex, maxOpenInterest) {\n        return await this.program.rpc.updatePerpMarketMaxOpenInterest(maxOpenInterest, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n    }\n    async updateSerumVault(srmVault) {\n        return await this.program.rpc.updateSerumVault({\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                srmVault: srmVault\n            }\n        });\n    }\n    async updatePerpMarketLiquidationFee(perpMarketIndex, liquidatorFee, ifLiquidationFee) {\n        return await this.program.rpc.updatePerpMarketLiquidationFee(liquidatorFee, ifLiquidationFee, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                perpMarket: await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex)\n            }\n        });\n    }\n    async updateSpotMarketLiquidationFee(spotMarketIndex, liquidatorFee, ifLiquidationFee) {\n        return await this.program.rpc.updateSpotMarketLiquidationFee(liquidatorFee, ifLiquidationFee, {\n            accounts: {\n                admin: this.wallet.publicKey,\n                state: await this.getStatePublicKey(),\n                spotMarket: await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, spotMarketIndex)\n            }\n        });\n    }\n}\nexports.AdminClient = AdminClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/adminClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/assert/assert.js":
/*!***********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/assert/assert.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.assert = void 0;\nfunction assert(condition, error) {\n    if (!condition) {\n        throw new Error(error || \"Unspecified AssertionError\");\n    }\n}\nexports.assert = assert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hc3NlcnQvYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0QixTQUFTRSxPQUFPQyxTQUFTLEVBQUVDLEtBQUs7SUFDNUIsSUFBSSxDQUFDRCxXQUFXO1FBQ1osTUFBTSxJQUFJRSxNQUFNRCxTQUFTO0lBQzdCO0FBQ0o7QUFDQUosY0FBYyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hc3NlcnQvYXNzZXJ0LmpzPzM0YjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzc2VydCA9IHZvaWQgMDtcbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIGVycm9yKSB7XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yIHx8ICdVbnNwZWNpZmllZCBBc3NlcnRpb25FcnJvcicpO1xuICAgIH1cbn1cbmV4cG9ydHMuYXNzZXJ0ID0gYXNzZXJ0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwiZXJyb3IiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/assert/assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/auctionSubscriber/auctionSubscriber.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/auctionSubscriber/auctionSubscriber.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AuctionSubscriber = void 0;\nconst memcmp_1 = __webpack_require__(/*! ../memcmp */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/memcmp.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nclass AuctionSubscriber {\n    constructor({ driftClient, opts }){\n        this.driftClient = driftClient;\n        this.opts = opts || this.driftClient.opts;\n        this.eventEmitter = new events_1.EventEmitter();\n    }\n    async subscribe() {\n        this.websocketId = this.driftClient.connection.onProgramAccountChange(this.driftClient.program.programId, (keyAccountInfo, context)=>{\n            const userAccount = this.driftClient.program.account.user.coder.accounts.decode(\"User\", keyAccountInfo.accountInfo.data);\n            this.eventEmitter.emit(\"onAccountUpdate\", userAccount, keyAccountInfo.accountId, context.slot);\n        }, this.driftClient.opts.commitment, [\n            (0, memcmp_1.getUserFilter)(),\n            (0, memcmp_1.getUserWithAuctionFilter)()\n        ]);\n    }\n    async unsubscribe() {\n        if (this.websocketId) {\n            await this.driftClient.connection.removeProgramAccountChangeListener(this.websocketId);\n        }\n    }\n}\nexports.AuctionSubscriber = AuctionSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hdWN0aW9uU3Vic2NyaWJlci9hdWN0aW9uU3Vic2NyaWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQseUJBQXlCLEdBQUcsS0FBSztBQUNqQyxNQUFNRyxXQUFXQyxtQkFBT0EsQ0FBQyxxRUFBVztBQUNwQyxNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNRjtJQUNGSSxZQUFZLEVBQUVDLFdBQVcsRUFBRUMsSUFBSSxFQUFFLENBQUU7UUFDL0IsSUFBSSxDQUFDRCxXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ0MsSUFBSSxHQUFHQSxRQUFRLElBQUksQ0FBQ0QsV0FBVyxDQUFDQyxJQUFJO1FBQ3pDLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUlKLFNBQVNLLFlBQVk7SUFDakQ7SUFDQSxNQUFNQyxZQUFZO1FBQ2QsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSSxDQUFDTCxXQUFXLENBQUNNLFVBQVUsQ0FBQ0Msc0JBQXNCLENBQUMsSUFBSSxDQUFDUCxXQUFXLENBQUNRLE9BQU8sQ0FBQ0MsU0FBUyxFQUFFLENBQUNDLGdCQUFnQkM7WUFDdkgsTUFBTUMsY0FBYyxJQUFJLENBQUNaLFdBQVcsQ0FBQ1EsT0FBTyxDQUFDSyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxRQUFRLENBQUNDLE1BQU0sQ0FBQyxRQUFRUCxlQUFlUSxXQUFXLENBQUNDLElBQUk7WUFDdkgsSUFBSSxDQUFDakIsWUFBWSxDQUFDa0IsSUFBSSxDQUFDLG1CQUFtQlIsYUFBYUYsZUFBZVcsU0FBUyxFQUFFVixRQUFRVyxJQUFJO1FBQ2pHLEdBQUcsSUFBSSxDQUFDdEIsV0FBVyxDQUFDQyxJQUFJLENBQUNzQixVQUFVLEVBQUU7WUFBRSxJQUFHM0IsU0FBUzRCLGFBQWE7WUFBTSxJQUFHNUIsU0FBUzZCLHdCQUF3QjtTQUFJO0lBQ2xIO0lBQ0EsTUFBTUMsY0FBYztRQUNoQixJQUFJLElBQUksQ0FBQ3JCLFdBQVcsRUFBRTtZQUNsQixNQUFNLElBQUksQ0FBQ0wsV0FBVyxDQUFDTSxVQUFVLENBQUNxQixrQ0FBa0MsQ0FBQyxJQUFJLENBQUN0QixXQUFXO1FBQ3pGO0lBQ0o7QUFDSjtBQUNBWix5QkFBeUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvYXVjdGlvblN1YnNjcmliZXIvYXVjdGlvblN1YnNjcmliZXIuanM/NzAyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXVjdGlvblN1YnNjcmliZXIgPSB2b2lkIDA7XG5jb25zdCBtZW1jbXBfMSA9IHJlcXVpcmUoXCIuLi9tZW1jbXBcIik7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5jbGFzcyBBdWN0aW9uU3Vic2NyaWJlciB7XG4gICAgY29uc3RydWN0b3IoeyBkcmlmdENsaWVudCwgb3B0cyB9KSB7XG4gICAgICAgIHRoaXMuZHJpZnRDbGllbnQgPSBkcmlmdENsaWVudDtcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cyB8fCB0aGlzLmRyaWZ0Q2xpZW50Lm9wdHM7XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyID0gbmV3IGV2ZW50c18xLkV2ZW50RW1pdHRlcigpO1xuICAgIH1cbiAgICBhc3luYyBzdWJzY3JpYmUoKSB7XG4gICAgICAgIHRoaXMud2Vic29ja2V0SWQgPSB0aGlzLmRyaWZ0Q2xpZW50LmNvbm5lY3Rpb24ub25Qcm9ncmFtQWNjb3VudENoYW5nZSh0aGlzLmRyaWZ0Q2xpZW50LnByb2dyYW0ucHJvZ3JhbUlkLCAoa2V5QWNjb3VudEluZm8sIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJBY2NvdW50ID0gdGhpcy5kcmlmdENsaWVudC5wcm9ncmFtLmFjY291bnQudXNlci5jb2Rlci5hY2NvdW50cy5kZWNvZGUoJ1VzZXInLCBrZXlBY2NvdW50SW5mby5hY2NvdW50SW5mby5kYXRhKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoJ29uQWNjb3VudFVwZGF0ZScsIHVzZXJBY2NvdW50LCBrZXlBY2NvdW50SW5mby5hY2NvdW50SWQsIGNvbnRleHQuc2xvdCk7XG4gICAgICAgIH0sIHRoaXMuZHJpZnRDbGllbnQub3B0cy5jb21taXRtZW50LCBbKDAsIG1lbWNtcF8xLmdldFVzZXJGaWx0ZXIpKCksICgwLCBtZW1jbXBfMS5nZXRVc2VyV2l0aEF1Y3Rpb25GaWx0ZXIpKCldKTtcbiAgICB9XG4gICAgYXN5bmMgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICh0aGlzLndlYnNvY2tldElkKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRyaWZ0Q2xpZW50LmNvbm5lY3Rpb24ucmVtb3ZlUHJvZ3JhbUFjY291bnRDaGFuZ2VMaXN0ZW5lcih0aGlzLndlYnNvY2tldElkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQXVjdGlvblN1YnNjcmliZXIgPSBBdWN0aW9uU3Vic2NyaWJlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkF1Y3Rpb25TdWJzY3JpYmVyIiwibWVtY21wXzEiLCJyZXF1aXJlIiwiZXZlbnRzXzEiLCJjb25zdHJ1Y3RvciIsImRyaWZ0Q2xpZW50Iiwib3B0cyIsImV2ZW50RW1pdHRlciIsIkV2ZW50RW1pdHRlciIsInN1YnNjcmliZSIsIndlYnNvY2tldElkIiwiY29ubmVjdGlvbiIsIm9uUHJvZ3JhbUFjY291bnRDaGFuZ2UiLCJwcm9ncmFtIiwicHJvZ3JhbUlkIiwia2V5QWNjb3VudEluZm8iLCJjb250ZXh0IiwidXNlckFjY291bnQiLCJhY2NvdW50IiwidXNlciIsImNvZGVyIiwiYWNjb3VudHMiLCJkZWNvZGUiLCJhY2NvdW50SW5mbyIsImRhdGEiLCJlbWl0IiwiYWNjb3VudElkIiwic2xvdCIsImNvbW1pdG1lbnQiLCJnZXRVc2VyRmlsdGVyIiwiZ2V0VXNlcldpdGhBdWN0aW9uRmlsdGVyIiwidW5zdWJzY3JpYmUiLCJyZW1vdmVQcm9ncmFtQWNjb3VudENoYW5nZUxpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/auctionSubscriber/auctionSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/auctionSubscriber/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/auctionSubscriber/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/auctionSubscriber/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./auctionSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/auctionSubscriber/auctionSubscriber.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hdWN0aW9uU3Vic2NyaWJlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0IsSUFBSUcsT0FBT1AsT0FBT1Esd0JBQXdCLENBQUNMLEdBQUdDO0lBQzlDLElBQUksQ0FBQ0csUUFBUyxVQUFTQSxPQUFPLENBQUNKLEVBQUVNLFVBQVUsR0FBR0YsS0FBS0csUUFBUSxJQUFJSCxLQUFLSSxZQUFZLEdBQUc7UUFDakZKLE9BQU87WUFBRUssWUFBWTtZQUFNQyxLQUFLO2dCQUFhLE9BQU9WLENBQUMsQ0FBQ0MsRUFBRTtZQUFFO1FBQUU7SUFDOUQ7SUFDQUosT0FBT2MsY0FBYyxDQUFDWixHQUFHRyxJQUFJRTtBQUNqQyxJQUFNLFNBQVNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlXLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1osQ0FBQyxFQUFFYSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS2QsRUFBRyxJQUFJYyxNQUFNLGFBQWEsQ0FBQ2pCLE9BQU9rQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixVQUFTQyxJQUFJbEIsZ0JBQWdCaUIsVUFBU2IsR0FBR2M7QUFDM0g7QUFDQWpCLDhDQUE2QztJQUFFcUIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RE4sYUFBYU8sbUJBQU9BLENBQUMsb0ZBQVMsR0FBR047QUFDakNELGFBQWFPLG1CQUFPQSxDQUFDLDRHQUFxQixHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hdWN0aW9uU3Vic2NyaWJlci9pbmRleC5qcz9kM2RhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2F1Y3Rpb25TdWJzY3JpYmVyXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/auctionSubscriber/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/auctionSubscriber/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/auctionSubscriber/types.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hdWN0aW9uU3Vic2NyaWJlci90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9hdWN0aW9uU3Vic2NyaWJlci90eXBlcy5qcz82ZjFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/auctionSubscriber/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/config.js":
/*!****************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/config.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.findAllMarketAndOracles = exports.getMarketsAndOraclesForSubscription = exports.initialize = exports.getConfig = exports.configs = exports.DRIFT_PROGRAM_ID = void 0;\nconst perpMarkets_1 = __webpack_require__(/*! ./constants/perpMarkets */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/perpMarkets.js\");\nconst spotMarkets_1 = __webpack_require__(/*! ./constants/spotMarkets */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/spotMarkets.js\");\nexports.DRIFT_PROGRAM_ID = \"dRiftyHA39MWEi3m9aunc5MzRF1JYuBsbn6VPcn33UH\";\nexports.configs = {\n    devnet: {\n        ENV: \"devnet\",\n        PYTH_ORACLE_MAPPING_ADDRESS: \"BmA9Z6FjioHJPpjT39QazZyhDRUdZy2ezwx4GiDdE2u2\",\n        DRIFT_PROGRAM_ID: exports.DRIFT_PROGRAM_ID,\n        USDC_MINT_ADDRESS: \"8zGuJQqwhZafTah7Uc7Z4tXRnguqkn5KLFAP8oV6PHe2\",\n        SERUM_V3: \"DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY\",\n        PHOENIX: \"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\",\n        V2_ALPHA_TICKET_MINT_ADDRESS: \"DeEiGWfCMP9psnLGkxGrBBMEAW5Jv8bBGMN8DCtFRCyB\",\n        PERP_MARKETS: perpMarkets_1.DevnetPerpMarkets,\n        SPOT_MARKETS: spotMarkets_1.DevnetSpotMarkets,\n        MARKET_LOOKUP_TABLE: \"FaMS3U4uBojvGn5FSDEPimddcXsCfwkKsFgMVVnDdxGb\"\n    },\n    \"mainnet-beta\": {\n        ENV: \"mainnet-beta\",\n        PYTH_ORACLE_MAPPING_ADDRESS: \"AHtgzX45WTKfkPG53L6WYhGEXwQkN1BVknET3sVsLL8J\",\n        DRIFT_PROGRAM_ID: exports.DRIFT_PROGRAM_ID,\n        USDC_MINT_ADDRESS: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n        SERUM_V3: \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\",\n        PHOENIX: \"PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY\",\n        V2_ALPHA_TICKET_MINT_ADDRESS: \"Cmvhycb6LQvvzaShGw4iDHRLzeSSryioAsU98DSSkMNa\",\n        PERP_MARKETS: perpMarkets_1.MainnetPerpMarkets,\n        SPOT_MARKETS: spotMarkets_1.MainnetSpotMarkets,\n        MARKET_LOOKUP_TABLE: \"D9cnvzswDikQDf53k4HpQ3KJ9y1Fv3HGGDFYMXnK5T6c\"\n    }\n};\nlet currentConfig = exports.configs.devnet;\nconst getConfig = ()=>currentConfig;\nexports.getConfig = getConfig;\n/**\n * Allows customization of the SDK's environment and endpoints. You can pass individual settings to override the settings with your own presets.\n *\n * Defaults to master environment if you don't use this function.\n * @param props\n * @returns\n */ const initialize = (props)=>{\n    var _a, _b;\n    //@ts-ignore\n    if (props.env === \"master\") return {\n        ...exports.configs[\"devnet\"],\n        ...(_a = props.overrideEnv) !== null && _a !== void 0 ? _a : {}\n    };\n    currentConfig = {\n        ...exports.configs[props.env],\n        ...(_b = props.overrideEnv) !== null && _b !== void 0 ? _b : {}\n    };\n    return currentConfig;\n};\nexports.initialize = initialize;\nfunction getMarketsAndOraclesForSubscription(env) {\n    const perpMarketIndexes = [];\n    const spotMarketIndexes = [];\n    const oracleInfos = new Map();\n    for (const market of perpMarkets_1.PerpMarkets[env]){\n        perpMarketIndexes.push(market.marketIndex);\n        oracleInfos.set(market.oracle.toString(), {\n            publicKey: market.oracle,\n            source: market.oracleSource\n        });\n    }\n    for (const spotMarket of spotMarkets_1.SpotMarkets[env]){\n        spotMarketIndexes.push(spotMarket.marketIndex);\n        oracleInfos.set(spotMarket.oracle.toString(), {\n            publicKey: spotMarket.oracle,\n            source: spotMarket.oracleSource\n        });\n    }\n    return {\n        perpMarketIndexes: perpMarketIndexes,\n        spotMarketIndexes: spotMarketIndexes,\n        oracleInfos: Array.from(oracleInfos.values())\n    };\n}\nexports.getMarketsAndOraclesForSubscription = getMarketsAndOraclesForSubscription;\nasync function findAllMarketAndOracles(program) {\n    const perpMarketIndexes = [];\n    const spotMarketIndexes = [];\n    const oracleInfos = new Map();\n    const perpMarketProgramAccounts = await program.account.perpMarket.all();\n    const spotMarketProgramAccounts = await program.account.spotMarket.all();\n    for (const perpMarketProgramAccount of perpMarketProgramAccounts){\n        const perpMarket = perpMarketProgramAccount.account;\n        perpMarketIndexes.push(perpMarket.marketIndex);\n        oracleInfos.set(perpMarket.amm.oracle.toString(), {\n            publicKey: perpMarket.amm.oracle,\n            source: perpMarket.amm.oracleSource\n        });\n    }\n    for (const spotMarketProgramAccount of spotMarketProgramAccounts){\n        const spotMarket = spotMarketProgramAccount.account;\n        spotMarketIndexes.push(spotMarket.marketIndex);\n        oracleInfos.set(spotMarket.oracle.toString(), {\n            publicKey: spotMarket.oracle,\n            source: spotMarket.oracleSource\n        });\n    }\n    return {\n        perpMarketIndexes,\n        spotMarketIndexes,\n        oracleInfos: Array.from(oracleInfos.values())\n    };\n}\nexports.findAllMarketAndOracles = findAllMarketAndOracles;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js":
/*!************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MARGIN_PRECISION = exports.AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO = exports.PRICE_TO_QUOTE_PRECISION = exports.PRICE_DIV_PEG = exports.AMM_TO_QUOTE_PRECISION_RATIO = exports.BASE_PRECISION_EXP = exports.BASE_PRECISION = exports.AMM_RESERVE_PRECISION = exports.PEG_PRECISION = exports.FUNDING_RATE_BUFFER_PRECISION = exports.FUNDING_RATE_PRECISION = exports.PRICE_PRECISION = exports.QUOTE_PRECISION = exports.LIQUIDATION_FEE_PRECISION = exports.SPOT_MARKET_IMF_PRECISION = exports.SPOT_MARKET_IMF_PRECISION_EXP = exports.SPOT_MARKET_BALANCE_PRECISION = exports.SPOT_MARKET_BALANCE_PRECISION_EXP = exports.SPOT_MARKET_WEIGHT_PRECISION = exports.SPOT_MARKET_UTILIZATION_PRECISION = exports.SPOT_MARKET_UTILIZATION_PRECISION_EXP = exports.SPOT_MARKET_CUMULATIVE_INTEREST_PRECISION = exports.SPOT_MARKET_CUMULATIVE_INTEREST_PRECISION_EXP = exports.SPOT_MARKET_RATE_PRECISION = exports.SPOT_MARKET_RATE_PRECISION_EXP = exports.AMM_RESERVE_PRECISION_EXP = exports.PEG_PRECISION_EXP = exports.FUNDING_RATE_PRECISION_EXP = exports.PRICE_PRECISION_EXP = exports.FUNDING_RATE_BUFFER_PRECISION_EXP = exports.QUOTE_PRECISION_EXP = exports.CONCENTRATION_PRECISION = exports.PERCENTAGE_PRECISION = exports.PERCENTAGE_PRECISION_EXP = exports.MAX_LEVERAGE_ORDER_SIZE = exports.MAX_LEVERAGE = exports.TEN_MILLION = exports.BN_MAX = exports.TEN_THOUSAND = exports.TEN = exports.NINE = exports.EIGHT = exports.SEVEN = exports.SIX = exports.FIVE = exports.FOUR = exports.THREE = exports.TWO = exports.ONE = exports.ZERO = void 0;\nexports.DEFAULT_REVENUE_SINCE_LAST_FUNDING_SPREAD_RETREAT = exports.OPEN_ORDER_MARGIN_REQUIREMENT = exports.LAMPORTS_EXP = exports.LAMPORTS_PRECISION = exports.QUOTE_SPOT_MARKET_INDEX = exports.ONE_YEAR = exports.ONE_HOUR = exports.FIVE_MINUTE = exports.LIQUIDATION_PCT_PRECISION = exports.BID_ASK_SPREAD_PRECISION = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst __1 = __webpack_require__(/*! ../ */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nexports.ZERO = new __1.BN(0);\nexports.ONE = new __1.BN(1);\nexports.TWO = new __1.BN(2);\nexports.THREE = new __1.BN(3);\nexports.FOUR = new __1.BN(4);\nexports.FIVE = new __1.BN(5);\nexports.SIX = new __1.BN(6);\nexports.SEVEN = new __1.BN(7);\nexports.EIGHT = new __1.BN(8);\nexports.NINE = new __1.BN(9);\nexports.TEN = new __1.BN(10);\nexports.TEN_THOUSAND = new __1.BN(10000);\nexports.BN_MAX = new __1.BN(Number.MAX_SAFE_INTEGER);\nexports.TEN_MILLION = exports.TEN_THOUSAND.mul(exports.TEN_THOUSAND);\nexports.MAX_LEVERAGE = new __1.BN(5);\nexports.MAX_LEVERAGE_ORDER_SIZE = new __1.BN(\"18446744073709551615\");\nexports.PERCENTAGE_PRECISION_EXP = new __1.BN(6);\nexports.PERCENTAGE_PRECISION = new __1.BN(10).pow(exports.PERCENTAGE_PRECISION_EXP);\nexports.CONCENTRATION_PRECISION = exports.PERCENTAGE_PRECISION;\nexports.QUOTE_PRECISION_EXP = new __1.BN(6);\nexports.FUNDING_RATE_BUFFER_PRECISION_EXP = new __1.BN(3);\nexports.PRICE_PRECISION_EXP = new __1.BN(6);\nexports.FUNDING_RATE_PRECISION_EXP = exports.PRICE_PRECISION_EXP.add(exports.FUNDING_RATE_BUFFER_PRECISION_EXP);\nexports.PEG_PRECISION_EXP = new __1.BN(6);\nexports.AMM_RESERVE_PRECISION_EXP = new __1.BN(9);\nexports.SPOT_MARKET_RATE_PRECISION_EXP = new __1.BN(6);\nexports.SPOT_MARKET_RATE_PRECISION = new __1.BN(10).pow(exports.SPOT_MARKET_RATE_PRECISION_EXP);\nexports.SPOT_MARKET_CUMULATIVE_INTEREST_PRECISION_EXP = new __1.BN(10);\nexports.SPOT_MARKET_CUMULATIVE_INTEREST_PRECISION = new __1.BN(10).pow(exports.SPOT_MARKET_CUMULATIVE_INTEREST_PRECISION_EXP);\nexports.SPOT_MARKET_UTILIZATION_PRECISION_EXP = new __1.BN(6);\nexports.SPOT_MARKET_UTILIZATION_PRECISION = new __1.BN(10).pow(exports.SPOT_MARKET_UTILIZATION_PRECISION_EXP);\nexports.SPOT_MARKET_WEIGHT_PRECISION = new __1.BN(10000);\nexports.SPOT_MARKET_BALANCE_PRECISION_EXP = new __1.BN(9);\nexports.SPOT_MARKET_BALANCE_PRECISION = new __1.BN(10).pow(exports.SPOT_MARKET_BALANCE_PRECISION_EXP);\nexports.SPOT_MARKET_IMF_PRECISION_EXP = new __1.BN(6);\nexports.SPOT_MARKET_IMF_PRECISION = new __1.BN(10).pow(exports.SPOT_MARKET_IMF_PRECISION_EXP);\nexports.LIQUIDATION_FEE_PRECISION = new __1.BN(1000000);\nexports.QUOTE_PRECISION = new __1.BN(10).pow(exports.QUOTE_PRECISION_EXP);\nexports.PRICE_PRECISION = new __1.BN(10).pow(exports.PRICE_PRECISION_EXP);\nexports.FUNDING_RATE_PRECISION = new __1.BN(10).pow(exports.FUNDING_RATE_PRECISION_EXP);\nexports.FUNDING_RATE_BUFFER_PRECISION = new __1.BN(10).pow(exports.FUNDING_RATE_BUFFER_PRECISION_EXP);\nexports.PEG_PRECISION = new __1.BN(10).pow(exports.PEG_PRECISION_EXP);\nexports.AMM_RESERVE_PRECISION = new __1.BN(10).pow(exports.AMM_RESERVE_PRECISION_EXP);\nexports.BASE_PRECISION = exports.AMM_RESERVE_PRECISION;\nexports.BASE_PRECISION_EXP = exports.AMM_RESERVE_PRECISION_EXP;\nexports.AMM_TO_QUOTE_PRECISION_RATIO = exports.AMM_RESERVE_PRECISION.div(exports.QUOTE_PRECISION); // 10^3\nexports.PRICE_DIV_PEG = exports.PRICE_PRECISION.div(exports.PEG_PRECISION); //10^1\nexports.PRICE_TO_QUOTE_PRECISION = exports.PRICE_PRECISION.div(exports.QUOTE_PRECISION); // 10^1\nexports.AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO = exports.AMM_RESERVE_PRECISION.mul(exports.PEG_PRECISION).div(exports.QUOTE_PRECISION); // 10^9\nexports.MARGIN_PRECISION = exports.TEN_THOUSAND;\nexports.BID_ASK_SPREAD_PRECISION = new __1.BN(1000000); // 10^6\nexports.LIQUIDATION_PCT_PRECISION = exports.TEN_THOUSAND;\nexports.FIVE_MINUTE = new __1.BN(60 * 5);\nexports.ONE_HOUR = new __1.BN(60 * 60);\nexports.ONE_YEAR = new __1.BN(31536000);\nexports.QUOTE_SPOT_MARKET_INDEX = 0;\nexports.LAMPORTS_PRECISION = new __1.BN(web3_js_1.LAMPORTS_PER_SOL);\nexports.LAMPORTS_EXP = new __1.BN(Math.log10(web3_js_1.LAMPORTS_PER_SOL));\nexports.OPEN_ORDER_MARGIN_REQUIREMENT = exports.QUOTE_PRECISION.div(new __1.BN(100));\nexports.DEFAULT_REVENUE_SINCE_LAST_FUNDING_SPREAD_RETREAT = new __1.BN(-25).mul(exports.QUOTE_PRECISION);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/constants/perpMarkets.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/constants/perpMarkets.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PerpMarkets = exports.MainnetPerpMarkets = exports.DevnetPerpMarkets = void 0;\nconst __1 = __webpack_require__(/*! ../ */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nexports.DevnetPerpMarkets = [\n    {\n        fullName: \"Solana\",\n        category: [\n            \"L1\",\n            \"Infra\"\n        ],\n        symbol: \"SOL-PERP\",\n        baseAssetSymbol: \"SOL\",\n        marketIndex: 0,\n        oracle: new web3_js_1.PublicKey(\"J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix\"),\n        launchTs: 1655751353000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Bitcoin\",\n        category: [\n            \"L1\",\n            \"Payment\"\n        ],\n        symbol: \"BTC-PERP\",\n        baseAssetSymbol: \"BTC\",\n        marketIndex: 1,\n        oracle: new web3_js_1.PublicKey(\"HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J\"),\n        launchTs: 1655751353000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Ethereum\",\n        category: [\n            \"L1\",\n            \"Infra\"\n        ],\n        symbol: \"ETH-PERP\",\n        baseAssetSymbol: \"ETH\",\n        marketIndex: 2,\n        oracle: new web3_js_1.PublicKey(\"EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw\"),\n        launchTs: 1637691133472,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Aptos\",\n        category: [\n            \"L1\",\n            \"Infra\"\n        ],\n        symbol: \"APT-PERP\",\n        baseAssetSymbol: \"APT\",\n        marketIndex: 3,\n        oracle: new web3_js_1.PublicKey(\"5d2QJ6u2NveZufmJ4noHja5EHs3Bv1DUMPLG5xfasSVs\"),\n        launchTs: 1675610186000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Bonk\",\n        category: [\n            \"Meme\",\n            \"Dog\"\n        ],\n        symbol: \"1MBONK-PERP\",\n        baseAssetSymbol: \"1MBONK\",\n        marketIndex: 4,\n        oracle: new web3_js_1.PublicKey(\"6bquU99ktV1VRiHDr8gMhDFt3kMfhCQo5nfNrg2Urvsn\"),\n        launchTs: 1677068931000,\n        oracleSource: __1.OracleSource.PYTH_1M\n    },\n    {\n        fullName: \"Polygon\",\n        category: [\n            \"L2\",\n            \"Infra\"\n        ],\n        symbol: \"MATIC-PERP\",\n        baseAssetSymbol: \"MATIC\",\n        marketIndex: 5,\n        oracle: new web3_js_1.PublicKey(\"FBirwuDFuRAu4iSGc7RGxN5koHB7EJM1wbCmyPuQoGur\"),\n        launchTs: 1677690149000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Arbitrum\",\n        category: [\n            \"L2\",\n            \"Infra\"\n        ],\n        symbol: \"ARB-PERP\",\n        baseAssetSymbol: \"ARB\",\n        marketIndex: 6,\n        oracle: new web3_js_1.PublicKey(\"4mRGHzjGerQNWKXyQAmr9kWqb9saPPHKqo1xziXGQ5Dh\"),\n        launchTs: 1679501812000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Doge\",\n        category: [\n            \"Meme\",\n            \"Dog\"\n        ],\n        symbol: \"DOGE-PERP\",\n        baseAssetSymbol: \"DOGE\",\n        marketIndex: 7,\n        oracle: new web3_js_1.PublicKey(\"4L6YhY8VvUgmqG5MvJkUJATtzB2rFqdrJwQCmFLv4Jzy\"),\n        launchTs: 1680808053000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Binance Coin\",\n        category: [\n            \"Exchange\"\n        ],\n        symbol: \"BNB-PERP\",\n        baseAssetSymbol: \"BNB\",\n        marketIndex: 8,\n        oracle: new web3_js_1.PublicKey(\"GwzBgrXb4PG59zjce24SF2b9JXbLEjJJTBkmytuEZj1b\"),\n        launchTs: 1680808053000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Sui\",\n        category: [\n            \"L1\"\n        ],\n        symbol: \"SUI-PERP\",\n        baseAssetSymbol: \"SUI\",\n        marketIndex: 9,\n        oracle: new web3_js_1.PublicKey(\"6SK9vS8eMSSj3LUX2dPku93CrNv8xLCp9ng39F39h7A5\"),\n        launchTs: 1683125906000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Pepe\",\n        category: [\n            \"Meme\"\n        ],\n        symbol: \"1MPEPE-PERP\",\n        baseAssetSymbol: \"1MPEPE\",\n        marketIndex: 10,\n        oracle: new web3_js_1.PublicKey(\"Gz9RfgDeAFSsH7BHDGyNTgCik74rjNwsodJpsCizzmkj\"),\n        launchTs: 1683781239000,\n        oracleSource: __1.OracleSource.PYTH_1M\n    },\n    {\n        fullName: \"OP\",\n        category: [\n            \"L2\",\n            \"Infra\"\n        ],\n        symbol: \"OP-PERP\",\n        baseAssetSymbol: \"OP\",\n        marketIndex: 11,\n        oracle: new web3_js_1.PublicKey(\"8ctSiDhA7eJoii4TkKV8Rx4KFdz3ycsA1FXy9wq56quG\"),\n        launchTs: 1686091480000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"RNDR\",\n        category: [\n            \"Infra\"\n        ],\n        symbol: \"RNDR-PERP\",\n        baseAssetSymbol: \"RNDR\",\n        marketIndex: 12,\n        oracle: new web3_js_1.PublicKey(\"C2QvUPBiU3fViSyqA4nZgGyYqLgYf9PRpd8B8oLoo48w\"),\n        launchTs: 1687201081000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"XRP\",\n        category: [\n            \"Payments\"\n        ],\n        symbol: \"XRP-PERP\",\n        baseAssetSymbol: \"XRP\",\n        marketIndex: 13,\n        oracle: new web3_js_1.PublicKey(\"DuG45Td6dgJBe64Ebymb1WjBys16L1VTQdoAURdsviqN\"),\n        launchTs: 1689270550000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"HNT\",\n        category: [\n            \"IoT\"\n        ],\n        symbol: \"HNT-PERP\",\n        baseAssetSymbol: \"HNT\",\n        marketIndex: 14,\n        oracle: new web3_js_1.PublicKey(\"6Eg8YdfFJQF2HHonzPUBSCCmyUEhrStg9VBLK957sBe6\"),\n        launchTs: 16922949550000,\n        oracleSource: __1.OracleSource.PYTH\n    }\n];\nexports.MainnetPerpMarkets = [\n    {\n        fullName: \"Solana\",\n        category: [\n            \"L1\",\n            \"Infra\"\n        ],\n        symbol: \"SOL-PERP\",\n        baseAssetSymbol: \"SOL\",\n        marketIndex: 0,\n        oracle: new web3_js_1.PublicKey(\"H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG\"),\n        launchTs: 1667560505000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Bitcoin\",\n        category: [\n            \"L1\",\n            \"Payment\"\n        ],\n        symbol: \"BTC-PERP\",\n        baseAssetSymbol: \"BTC\",\n        marketIndex: 1,\n        oracle: new web3_js_1.PublicKey(\"GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU\"),\n        launchTs: 1670347281000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Ethereum\",\n        category: [\n            \"L1\",\n            \"Infra\"\n        ],\n        symbol: \"ETH-PERP\",\n        baseAssetSymbol: \"ETH\",\n        marketIndex: 2,\n        oracle: new web3_js_1.PublicKey(\"JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB\"),\n        launchTs: 1670347281000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Aptos\",\n        category: [\n            \"L1\",\n            \"Infra\"\n        ],\n        symbol: \"APT-PERP\",\n        baseAssetSymbol: \"APT\",\n        marketIndex: 3,\n        oracle: new web3_js_1.PublicKey(\"FNNvb1AFDnDVPkocEri8mWbJ1952HQZtFLuwPiUjSJQ\"),\n        launchTs: 1675802661000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Bonk\",\n        category: [\n            \"Meme\"\n        ],\n        symbol: \"1MBONK-PERP\",\n        baseAssetSymbol: \"1MBONK\",\n        marketIndex: 4,\n        oracle: new web3_js_1.PublicKey(\"8ihFLu5FimgTQ1Unh4dVyEHUGodJ5gJQCrQf4KUVB9bN\"),\n        launchTs: 1677690149000,\n        oracleSource: __1.OracleSource.PYTH_1M\n    },\n    {\n        fullName: \"Polygon\",\n        category: [\n            \"L2\",\n            \"Infra\"\n        ],\n        symbol: \"MATIC-PERP\",\n        baseAssetSymbol: \"MATIC\",\n        marketIndex: 5,\n        oracle: new web3_js_1.PublicKey(\"7KVswB9vkCgeM3SHP7aGDijvdRAHK8P5wi9JXViCrtYh\"),\n        launchTs: 1677690149000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Arbitrum\",\n        category: [\n            \"L2\",\n            \"Infra\"\n        ],\n        symbol: \"ARB-PERP\",\n        baseAssetSymbol: \"ARB\",\n        marketIndex: 6,\n        oracle: new web3_js_1.PublicKey(\"5HRrdmghsnU3i2u5StaKaydS7eq3vnKVKwXMzCNKsc4C\"),\n        launchTs: 1679501812000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Doge\",\n        category: [\n            \"Meme\",\n            \"Dog\"\n        ],\n        symbol: \"DOGE-PERP\",\n        baseAssetSymbol: \"DOGE\",\n        marketIndex: 7,\n        oracle: new web3_js_1.PublicKey(\"FsSM3s38PX9K7Dn6eGzuE29S2Dsk1Sss1baytTQdCaQj\"),\n        launchTs: 1680808053000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Binance Coin\",\n        category: [\n            \"Exchange\"\n        ],\n        symbol: \"BNB-PERP\",\n        baseAssetSymbol: \"BNB\",\n        marketIndex: 8,\n        oracle: new web3_js_1.PublicKey(\"4CkQJBxhU8EZ2UjhigbtdaPbpTe6mqf811fipYBFbSYN\"),\n        launchTs: 1680808053000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Sui\",\n        category: [\n            \"L1\"\n        ],\n        symbol: \"SUI-PERP\",\n        baseAssetSymbol: \"SUI\",\n        marketIndex: 9,\n        oracle: new web3_js_1.PublicKey(\"3Qub3HaAJaa2xNY7SUqPKd3vVwTqDfDDkEUMPjXD2c1q\"),\n        launchTs: 1683125906000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"Pepe\",\n        category: [\n            \"Meme\"\n        ],\n        symbol: \"1MPEPE-PERP\",\n        baseAssetSymbol: \"1MPEPE\",\n        marketIndex: 10,\n        oracle: new web3_js_1.PublicKey(\"FSfxunDmjjbDV2QxpyxFCAPKmYJHSLnLuvQXDLkMzLBm\"),\n        launchTs: 1683781239000,\n        oracleSource: __1.OracleSource.PYTH_1M\n    },\n    {\n        fullName: \"OP\",\n        category: [\n            \"L2\",\n            \"Infra\"\n        ],\n        symbol: \"OP-PERP\",\n        baseAssetSymbol: \"OP\",\n        marketIndex: 11,\n        oracle: new web3_js_1.PublicKey(\"4o4CUwzFwLqCvmA5x1G4VzoZkAhAcbiuiYyjWX1CVbY2\"),\n        launchTs: 1686091480000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"RNDR\",\n        category: [\n            \"Infra\"\n        ],\n        symbol: \"RNDR-PERP\",\n        baseAssetSymbol: \"RNDR\",\n        marketIndex: 12,\n        oracle: new web3_js_1.PublicKey(\"CYGfrBJB9HgLf9iZyN4aH5HvUAi2htQ4MjPxeXMf4Egn\"),\n        launchTs: 1687201081000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"XRP\",\n        category: [\n            \"Payments\"\n        ],\n        symbol: \"XRP-PERP\",\n        baseAssetSymbol: \"XRP\",\n        marketIndex: 13,\n        oracle: new web3_js_1.PublicKey(\"Guffb8DAAxNH6kdoawYjPXTbwUhjmveh8R4LM6uEqRV1\"),\n        launchTs: 1689270550000,\n        oracleSource: __1.OracleSource.PYTH\n    },\n    {\n        fullName: \"HNT\",\n        category: [\n            \"IoT\"\n        ],\n        symbol: \"HNT-PERP\",\n        baseAssetSymbol: \"HNT\",\n        marketIndex: 14,\n        oracle: new web3_js_1.PublicKey(\"7moA1i5vQUpfDwSpK6Pw9s56ahB7WFGidtbL2ujWrVvm\"),\n        launchTs: 16922949550000,\n        oracleSource: __1.OracleSource.PYTH\n    }\n];\nexports.PerpMarkets = {\n    devnet: exports.DevnetPerpMarkets,\n    \"mainnet-beta\": exports.MainnetPerpMarkets\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/constants/perpMarkets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/constants/spotMarkets.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/constants/spotMarkets.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SpotMarkets = exports.MainnetSpotMarkets = exports.DevnetSpotMarkets = exports.WRAPPED_SOL_MINT = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst __1 = __webpack_require__(/*! ../ */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nconst numericConstants_1 = __webpack_require__(/*! ./numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nexports.WRAPPED_SOL_MINT = new web3_js_1.PublicKey(\"So11111111111111111111111111111111111111112\");\nexports.DevnetSpotMarkets = [\n    {\n        symbol: \"USDC\",\n        marketIndex: 0,\n        oracle: new web3_js_1.PublicKey(\"5SSkXsEKQepHHAewytPVwdej4epN1nxgLVM84L4KXgy7\"),\n        oracleSource: __1.OracleSource.PYTH_STABLE_COIN,\n        mint: new web3_js_1.PublicKey(\"8zGuJQqwhZafTah7Uc7Z4tXRnguqkn5KLFAP8oV6PHe2\"),\n        precision: new __1.BN(10).pow(numericConstants_1.SIX),\n        precisionExp: numericConstants_1.SIX\n    },\n    {\n        symbol: \"SOL\",\n        marketIndex: 1,\n        oracle: new web3_js_1.PublicKey(\"J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix\"),\n        oracleSource: __1.OracleSource.PYTH,\n        mint: new web3_js_1.PublicKey(exports.WRAPPED_SOL_MINT),\n        precision: numericConstants_1.LAMPORTS_PRECISION,\n        precisionExp: numericConstants_1.LAMPORTS_EXP,\n        serumMarket: new web3_js_1.PublicKey(\"8N37SsnTu8RYxtjrV9SStjkkwVhmU8aCWhLvwduAPEKW\"),\n        phoenixMarket: new web3_js_1.PublicKey(\"78ehDnHgbkFxqXZwdFxa8HK7saX58GymeX2wNGdkqYLp\")\n    },\n    {\n        symbol: \"BTC\",\n        marketIndex: 2,\n        oracle: new web3_js_1.PublicKey(\"HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J\"),\n        oracleSource: __1.OracleSource.PYTH,\n        mint: new web3_js_1.PublicKey(\"3BZPwbcqB5kKScF3TEXxwNfx5ipV13kbRVDvfVp5c6fv\"),\n        precision: new __1.BN(10).pow(numericConstants_1.SIX),\n        precisionExp: numericConstants_1.SIX,\n        serumMarket: new web3_js_1.PublicKey(\"AGsmbVu3MS9u68GEYABWosQQCZwmLcBHu4pWEuBYH7Za\")\n    }\n];\nexports.MainnetSpotMarkets = [\n    {\n        symbol: \"USDC\",\n        marketIndex: 0,\n        oracle: new web3_js_1.PublicKey(\"Gnt27xtC473ZT2Mw5u8wZ68Z3gULkSTb5DuxJy7eJotD\"),\n        oracleSource: __1.OracleSource.PYTH_STABLE_COIN,\n        mint: new web3_js_1.PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"),\n        precision: numericConstants_1.QUOTE_PRECISION,\n        precisionExp: numericConstants_1.QUOTE_PRECISION_EXP\n    },\n    {\n        symbol: \"SOL\",\n        marketIndex: 1,\n        oracle: new web3_js_1.PublicKey(\"H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG\"),\n        oracleSource: __1.OracleSource.PYTH,\n        mint: new web3_js_1.PublicKey(exports.WRAPPED_SOL_MINT),\n        precision: numericConstants_1.LAMPORTS_PRECISION,\n        precisionExp: numericConstants_1.LAMPORTS_EXP,\n        serumMarket: new web3_js_1.PublicKey(\"8BnEgHoWFysVcuFFX7QztDmzuH8r5ZFvyP3sYwn1XTh6\"),\n        phoenixMarket: new web3_js_1.PublicKey(\"4DoNfFBfF7UokCC2FQzriy7yHK6DY6NVdYpuekQ5pRgg\")\n    },\n    {\n        symbol: \"mSOL\",\n        marketIndex: 2,\n        oracle: new web3_js_1.PublicKey(\"E4v1BBgoso9s64TQvmyownAVJbhbEPGyzA3qn4n46qj9\"),\n        oracleSource: __1.OracleSource.PYTH,\n        mint: new web3_js_1.PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\"),\n        precision: new __1.BN(10).pow(numericConstants_1.NINE),\n        precisionExp: numericConstants_1.NINE,\n        serumMarket: new web3_js_1.PublicKey(\"9Lyhks5bQQxb9EyyX55NtgKQzpM4WK7JCmeaWuQ5MoXD\")\n    },\n    {\n        symbol: \"wBTC\",\n        marketIndex: 3,\n        oracle: new web3_js_1.PublicKey(\"GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU\"),\n        oracleSource: __1.OracleSource.PYTH,\n        mint: new web3_js_1.PublicKey(\"3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh\"),\n        precision: new __1.BN(10).pow(numericConstants_1.EIGHT),\n        precisionExp: numericConstants_1.EIGHT,\n        serumMarket: new web3_js_1.PublicKey(\"3BAKsQd3RuhZKES2DGysMhjBdwjZYKYmxRqnSMtZ4KSN\")\n    },\n    {\n        symbol: \"wETH\",\n        marketIndex: 4,\n        oracle: new web3_js_1.PublicKey(\"JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB\"),\n        oracleSource: __1.OracleSource.PYTH,\n        mint: new web3_js_1.PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\"),\n        precision: new __1.BN(10).pow(numericConstants_1.EIGHT),\n        precisionExp: numericConstants_1.EIGHT,\n        serumMarket: new web3_js_1.PublicKey(\"BbJgE7HZMaDp5NTYvRh5jZSkQPVDTU8ubPFtpogUkEj4\")\n    },\n    {\n        symbol: \"USDT\",\n        marketIndex: 5,\n        oracle: new web3_js_1.PublicKey(\"3vxLXJqLqF3JG5TCbYycbKWRBbCJQLxQmBGCkyqEEefL\"),\n        oracleSource: __1.OracleSource.PYTH_STABLE_COIN,\n        mint: new web3_js_1.PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"),\n        precision: numericConstants_1.QUOTE_PRECISION,\n        precisionExp: numericConstants_1.QUOTE_PRECISION_EXP,\n        serumMarket: new web3_js_1.PublicKey(\"B2na8Awyd7cpC59iEU43FagJAPLigr3AP3s38KM982bu\")\n    }\n];\nexports.SpotMarkets = {\n    devnet: exports.DevnetSpotMarkets,\n    \"mainnet-beta\": exports.MainnetSpotMarkets\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/constants/spotMarkets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOB.js":
/*!*******************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/dlob/DLOB.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DLOB = void 0;\nconst NodeList_1 = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/NodeList.js\");\nconst __1 = __webpack_require__(/*! .. */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nconst exchangeStatus_1 = __webpack_require__(/*! ../math/exchangeStatus */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/exchangeStatus.js\");\nconst orderBookLevels_1 = __webpack_require__(/*! ./orderBookLevels */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/orderBookLevels.js\");\nconst SUPPORTED_ORDER_TYPES = [\n    \"market\",\n    \"limit\",\n    \"triggerMarket\",\n    \"triggerLimit\",\n    \"oracle\"\n];\nclass DLOB {\n    constructor(){\n        this.openOrders = new Map();\n        this.orderLists = new Map();\n        this.maxSlotForRestingLimitOrders = 0;\n        this.initialized = false;\n        this.init();\n    }\n    init() {\n        this.openOrders.set(\"perp\", new Set());\n        this.openOrders.set(\"spot\", new Set());\n        this.orderLists.set(\"perp\", new Map());\n        this.orderLists.set(\"spot\", new Map());\n    }\n    clear() {\n        for (const marketType of this.openOrders.keys()){\n            this.openOrders.get(marketType).clear();\n        }\n        this.openOrders.clear();\n        for (const marketType of this.orderLists.keys()){\n            for (const marketIndex of this.orderLists.get(marketType).keys()){\n                const marketNodeLists = this.orderLists.get(marketType).get(marketIndex);\n                for (const side of Object.keys(marketNodeLists)){\n                    for (const orderType of Object.keys(marketNodeLists[side])){\n                        marketNodeLists[side][orderType].clear();\n                    }\n                }\n            }\n        }\n        this.orderLists.clear();\n        this.maxSlotForRestingLimitOrders = 0;\n        this.init();\n    }\n    /**\n     * initializes a new DLOB instance\n     *\n     * @returns a promise that resolves when the DLOB is initialized\n     */ async initFromUserMap(userMap, slot) {\n        if (this.initialized) {\n            return false;\n        }\n        // initialize the dlob with the user map\n        for (const user of userMap.values()){\n            const userAccount = user.getUserAccount();\n            const userAccountPubkey = user.getUserAccountPublicKey();\n            for (const order of userAccount.orders){\n                this.insertOrder(order, userAccountPubkey, slot);\n            }\n        }\n        this.initialized = true;\n        return true;\n    }\n    initFromOrders(dlobOrders, slot) {\n        if (this.initialized) {\n            return false;\n        }\n        for (const { user, order } of dlobOrders){\n            this.insertOrder(order, user, slot);\n        }\n        this.initialized = true;\n        return true;\n    }\n    handleOrderRecord(record, slot) {\n        this.insertOrder(record.order, record.user, slot);\n    }\n    handleOrderActionRecord(record, slot) {\n        if ((0, __1.isOneOfVariant)(record.action, [\n            \"place\",\n            \"expire\"\n        ])) {\n            return;\n        }\n        if ((0, __1.isVariant)(record.action, \"trigger\")) {\n            if (record.taker !== null) {\n                const takerOrder = this.getOrder(record.takerOrderId, record.taker);\n                if (takerOrder) {\n                    this.trigger(takerOrder, record.taker, slot);\n                }\n            }\n            if (record.maker !== null) {\n                const makerOrder = this.getOrder(record.makerOrderId, record.maker);\n                if (makerOrder) {\n                    this.trigger(makerOrder, record.maker, slot);\n                }\n            }\n        } else if ((0, __1.isVariant)(record.action, \"fill\")) {\n            if (record.taker !== null) {\n                const takerOrder = this.getOrder(record.takerOrderId, record.taker);\n                if (takerOrder) {\n                    this.updateOrder(takerOrder, record.taker, slot, record.takerOrderCumulativeBaseAssetAmountFilled);\n                }\n            }\n            if (record.maker !== null) {\n                const makerOrder = this.getOrder(record.makerOrderId, record.maker);\n                if (makerOrder) {\n                    this.updateOrder(makerOrder, record.maker, slot, record.makerOrderCumulativeBaseAssetAmountFilled);\n                }\n            }\n        } else if ((0, __1.isVariant)(record.action, \"cancel\")) {\n            if (record.taker !== null) {\n                const takerOrder = this.getOrder(record.takerOrderId, record.taker);\n                if (takerOrder) {\n                    this.delete(takerOrder, record.taker, slot);\n                }\n            }\n            if (record.maker !== null) {\n                const makerOrder = this.getOrder(record.makerOrderId, record.maker);\n                if (makerOrder) {\n                    this.delete(makerOrder, record.maker, slot);\n                }\n            }\n        }\n    }\n    insertOrder(order, userAccount, slot, onInsert) {\n        var _a;\n        if ((0, __1.isVariant)(order.status, \"init\")) {\n            return;\n        }\n        if (!(0, __1.isOneOfVariant)(order.orderType, SUPPORTED_ORDER_TYPES)) {\n            return;\n        }\n        const marketType = (0, __1.getVariant)(order.marketType);\n        if (!this.orderLists.get(marketType).has(order.marketIndex)) {\n            this.addOrderList(marketType, order.marketIndex);\n        }\n        if ((0, __1.isVariant)(order.status, \"open\")) {\n            this.openOrders.get(marketType).add((0, NodeList_1.getOrderSignature)(order.orderId, userAccount));\n        }\n        (_a = this.getListForOrder(order, slot)) === null || _a === void 0 ? void 0 : _a.insert(order, marketType, userAccount);\n        if (onInsert) {\n            onInsert();\n        }\n    }\n    addOrderList(marketType, marketIndex) {\n        this.orderLists.get(marketType).set(marketIndex, {\n            restingLimit: {\n                ask: new NodeList_1.NodeList(\"restingLimit\", \"asc\"),\n                bid: new NodeList_1.NodeList(\"restingLimit\", \"desc\")\n            },\n            floatingLimit: {\n                ask: new NodeList_1.NodeList(\"floatingLimit\", \"asc\"),\n                bid: new NodeList_1.NodeList(\"floatingLimit\", \"desc\")\n            },\n            takingLimit: {\n                ask: new NodeList_1.NodeList(\"takingLimit\", \"asc\"),\n                bid: new NodeList_1.NodeList(\"takingLimit\", \"asc\")\n            },\n            market: {\n                ask: new NodeList_1.NodeList(\"market\", \"asc\"),\n                bid: new NodeList_1.NodeList(\"market\", \"asc\")\n            },\n            trigger: {\n                above: new NodeList_1.NodeList(\"trigger\", \"asc\"),\n                below: new NodeList_1.NodeList(\"trigger\", \"desc\")\n            }\n        });\n    }\n    updateOrder(order, userAccount, slot, cumulativeBaseAssetAmountFilled, onUpdate) {\n        var _a;\n        this.updateRestingLimitOrders(slot);\n        if (order.baseAssetAmount.eq(cumulativeBaseAssetAmountFilled)) {\n            this.delete(order, userAccount, slot);\n            return;\n        }\n        if (order.baseAssetAmountFilled.eq(cumulativeBaseAssetAmountFilled)) {\n            return;\n        }\n        const newOrder = {\n            ...order\n        };\n        newOrder.baseAssetAmountFilled = cumulativeBaseAssetAmountFilled;\n        (_a = this.getListForOrder(order, slot)) === null || _a === void 0 ? void 0 : _a.update(newOrder, userAccount);\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    trigger(order, userAccount, slot, onTrigger) {\n        var _a;\n        if ((0, __1.isVariant)(order.status, \"init\")) {\n            return;\n        }\n        this.updateRestingLimitOrders(slot);\n        if ((0, __1.isTriggered)(order)) {\n            return;\n        }\n        const marketType = (0, __1.getVariant)(order.marketType);\n        const triggerList = this.orderLists.get(marketType).get(order.marketIndex).trigger[(0, __1.isVariant)(order.triggerCondition, \"above\") ? \"above\" : \"below\"];\n        triggerList.remove(order, userAccount);\n        (_a = this.getListForOrder(order, slot)) === null || _a === void 0 ? void 0 : _a.insert(order, marketType, userAccount);\n        if (onTrigger) {\n            onTrigger();\n        }\n    }\n    delete(order, userAccount, slot, onDelete) {\n        var _a;\n        if ((0, __1.isVariant)(order.status, \"init\")) {\n            return;\n        }\n        this.updateRestingLimitOrders(slot);\n        (_a = this.getListForOrder(order, slot)) === null || _a === void 0 ? void 0 : _a.remove(order, userAccount);\n        if (onDelete) {\n            onDelete();\n        }\n    }\n    getListForOrder(order, slot) {\n        const isInactiveTriggerOrder = (0, __1.mustBeTriggered)(order) && !(0, __1.isTriggered)(order);\n        let type;\n        if (isInactiveTriggerOrder) {\n            type = \"trigger\";\n        } else if ((0, __1.isOneOfVariant)(order.orderType, [\n            \"market\",\n            \"triggerMarket\",\n            \"oracle\"\n        ])) {\n            type = \"market\";\n        } else if (order.oraclePriceOffset !== 0) {\n            type = \"floatingLimit\";\n        } else {\n            const isResting = (0, __1.isRestingLimitOrder)(order, slot);\n            type = isResting ? \"restingLimit\" : \"takingLimit\";\n        }\n        let subType;\n        if (isInactiveTriggerOrder) {\n            subType = (0, __1.isVariant)(order.triggerCondition, \"above\") ? \"above\" : \"below\";\n        } else {\n            subType = (0, __1.isVariant)(order.direction, \"long\") ? \"bid\" : \"ask\";\n        }\n        const marketType = (0, __1.getVariant)(order.marketType);\n        if (!this.orderLists.has(marketType)) {\n            return undefined;\n        }\n        return this.orderLists.get(marketType).get(order.marketIndex)[type][subType];\n    }\n    updateRestingLimitOrders(slot) {\n        if (slot <= this.maxSlotForRestingLimitOrders) {\n            return;\n        }\n        this.maxSlotForRestingLimitOrders = slot;\n        this.updateRestingLimitOrdersForMarketType(slot, \"perp\");\n        this.updateRestingLimitOrdersForMarketType(slot, \"spot\");\n    }\n    updateRestingLimitOrdersForMarketType(slot, marketTypeStr) {\n        for (const [_, nodeLists] of this.orderLists.get(marketTypeStr)){\n            const nodesToUpdate = [];\n            for (const node of nodeLists.takingLimit.ask.getGenerator()){\n                if (!(0, __1.isRestingLimitOrder)(node.order, slot)) {\n                    continue;\n                }\n                nodesToUpdate.push({\n                    side: \"ask\",\n                    node\n                });\n            }\n            for (const node of nodeLists.takingLimit.bid.getGenerator()){\n                if (!(0, __1.isRestingLimitOrder)(node.order, slot)) {\n                    continue;\n                }\n                nodesToUpdate.push({\n                    side: \"bid\",\n                    node\n                });\n            }\n            for (const nodeToUpdate of nodesToUpdate){\n                const { side, node } = nodeToUpdate;\n                nodeLists.takingLimit[side].remove(node.order, node.userAccount);\n                nodeLists.restingLimit[side].insert(node.order, marketTypeStr, node.userAccount);\n            }\n        }\n    }\n    getOrder(orderId, userAccount) {\n        const orderSignature = (0, NodeList_1.getOrderSignature)(orderId, userAccount);\n        for (const nodeList of this.getNodeLists()){\n            const node = nodeList.get(orderSignature);\n            if (node) {\n                return node.order;\n            }\n        }\n        return undefined;\n    }\n    findNodesToFill(marketIndex, fallbackBid, fallbackAsk, slot, ts, marketType, oraclePriceData, stateAccount, marketAccount) {\n        if ((0, exchangeStatus_1.fillPaused)(stateAccount, marketAccount)) {\n            return [];\n        }\n        const isAmmPaused = (0, exchangeStatus_1.ammPaused)(stateAccount, marketAccount);\n        const minAuctionDuration = (0, __1.isVariant)(marketType, \"perp\") ? stateAccount.minPerpAuctionDuration : 0;\n        const restingLimitOrderNodesToFill = this.findRestingLimitOrderNodesToFill(marketIndex, slot, marketType, oraclePriceData, isAmmPaused, minAuctionDuration, fallbackAsk, fallbackBid);\n        const takingOrderNodesToFill = this.findTakingNodesToFill(marketIndex, slot, marketType, oraclePriceData, isAmmPaused, minAuctionDuration, fallbackAsk, fallbackBid);\n        // get expired market nodes\n        const expiredNodesToFill = this.findExpiredNodesToFill(marketIndex, ts, marketType);\n        // for spot, multiple makers isn't supported, so don't merge\n        if ((0, __1.isVariant)(marketType, \"spot\")) {\n            return restingLimitOrderNodesToFill.concat(takingOrderNodesToFill, expiredNodesToFill);\n        }\n        return this.mergeNodesToFill(restingLimitOrderNodesToFill, takingOrderNodesToFill).concat(expiredNodesToFill);\n    }\n    mergeNodesToFill(restingLimitOrderNodesToFill, takingOrderNodesToFill) {\n        const mergedNodesToFill = new Map();\n        const mergeNodesToFillHelper = (nodesToFillArray)=>{\n            nodesToFillArray.forEach((nodeToFill)=>{\n                const nodeSignature = (0, NodeList_1.getOrderSignature)(nodeToFill.node.order.orderId, nodeToFill.node.userAccount);\n                if (!mergedNodesToFill.has(nodeSignature)) {\n                    mergedNodesToFill.set(nodeSignature, {\n                        node: nodeToFill.node,\n                        makerNodes: []\n                    });\n                }\n                if (nodeToFill.makerNodes) {\n                    mergedNodesToFill.get(nodeSignature).makerNodes.push(...nodeToFill.makerNodes);\n                }\n            });\n        };\n        mergeNodesToFillHelper(restingLimitOrderNodesToFill);\n        mergeNodesToFillHelper(takingOrderNodesToFill);\n        return Array.from(mergedNodesToFill.values());\n    }\n    findRestingLimitOrderNodesToFill(marketIndex, slot, marketType, oraclePriceData, isAmmPaused, minAuctionDuration, fallbackAsk, fallbackBid) {\n        const nodesToFill = new Array();\n        const crossingNodes = this.findCrossingRestingLimitOrders(marketIndex, slot, marketType, oraclePriceData);\n        for (const crossingNode of crossingNodes){\n            nodesToFill.push(crossingNode);\n        }\n        if (fallbackBid && !isAmmPaused) {\n            const askGenerator = this.getRestingLimitAsks(marketIndex, slot, marketType, oraclePriceData);\n            const asksCrossingFallback = this.findNodesCrossingFallbackLiquidity(marketType, slot, oraclePriceData, askGenerator, fallbackBid, (askPrice, fallbackPrice)=>{\n                return askPrice.lte(fallbackPrice);\n            }, minAuctionDuration);\n            for (const askCrossingFallback of asksCrossingFallback){\n                nodesToFill.push(askCrossingFallback);\n            }\n        }\n        if (fallbackAsk && !isAmmPaused) {\n            const bidGenerator = this.getRestingLimitBids(marketIndex, slot, marketType, oraclePriceData);\n            const bidsCrossingFallback = this.findNodesCrossingFallbackLiquidity(marketType, slot, oraclePriceData, bidGenerator, fallbackAsk, (bidPrice, fallbackPrice)=>{\n                return bidPrice.gte(fallbackPrice);\n            }, minAuctionDuration);\n            for (const bidCrossingFallback of bidsCrossingFallback){\n                nodesToFill.push(bidCrossingFallback);\n            }\n        }\n        return nodesToFill;\n    }\n    findTakingNodesToFill(marketIndex, slot, marketType, oraclePriceData, isAmmPaused, minAuctionDuration, fallbackAsk, fallbackBid) {\n        const nodesToFill = new Array();\n        let takingOrderGenerator = this.getTakingAsks(marketIndex, marketType, slot, oraclePriceData);\n        const takingAsksCrossingBids = this.findTakingNodesCrossingMakerNodes(marketIndex, slot, marketType, oraclePriceData, takingOrderGenerator, this.getMakerLimitBids.bind(this), (takerPrice, makerPrice)=>{\n            if ((0, __1.isVariant)(marketType, \"spot\")) {\n                if (takerPrice === undefined) {\n                    return false;\n                }\n                if (fallbackBid && makerPrice.lt(fallbackBid)) {\n                    return false;\n                }\n            }\n            return takerPrice === undefined || takerPrice.lte(makerPrice);\n        }, fallbackAsk);\n        for (const takingAskCrossingBid of takingAsksCrossingBids){\n            nodesToFill.push(takingAskCrossingBid);\n        }\n        if (fallbackBid && !isAmmPaused) {\n            takingOrderGenerator = this.getTakingAsks(marketIndex, marketType, slot, oraclePriceData);\n            const takingAsksCrossingFallback = this.findNodesCrossingFallbackLiquidity(marketType, slot, oraclePriceData, takingOrderGenerator, fallbackBid, (takerPrice, fallbackPrice)=>{\n                return takerPrice === undefined || takerPrice.lte(fallbackPrice);\n            }, minAuctionDuration);\n            for (const takingAskCrossingFallback of takingAsksCrossingFallback){\n                nodesToFill.push(takingAskCrossingFallback);\n            }\n        }\n        takingOrderGenerator = this.getTakingBids(marketIndex, marketType, slot, oraclePriceData);\n        const takingBidsToFill = this.findTakingNodesCrossingMakerNodes(marketIndex, slot, marketType, oraclePriceData, takingOrderGenerator, this.getMakerLimitAsks.bind(this), (takerPrice, makerPrice)=>{\n            if ((0, __1.isVariant)(marketType, \"spot\")) {\n                if (takerPrice === undefined) {\n                    return false;\n                }\n                if (fallbackAsk && makerPrice.gt(fallbackAsk)) {\n                    return false;\n                }\n            }\n            return takerPrice === undefined || takerPrice.gte(makerPrice);\n        }, fallbackBid);\n        for (const takingBidToFill of takingBidsToFill){\n            nodesToFill.push(takingBidToFill);\n        }\n        if (fallbackAsk && !isAmmPaused) {\n            takingOrderGenerator = this.getTakingBids(marketIndex, marketType, slot, oraclePriceData);\n            const takingBidsCrossingFallback = this.findNodesCrossingFallbackLiquidity(marketType, slot, oraclePriceData, takingOrderGenerator, fallbackAsk, (takerPrice, fallbackPrice)=>{\n                return takerPrice === undefined || takerPrice.gte(fallbackPrice);\n            }, minAuctionDuration);\n            for (const marketBidCrossingFallback of takingBidsCrossingFallback){\n                nodesToFill.push(marketBidCrossingFallback);\n            }\n        }\n        return nodesToFill;\n    }\n    findTakingNodesCrossingMakerNodes(marketIndex, slot, marketType, oraclePriceData, takerNodeGenerator, makerNodeGeneratorFn, doesCross, fallbackPrice) {\n        const nodesToFill = new Array();\n        for (const takerNode of takerNodeGenerator){\n            const makerNodeGenerator = makerNodeGeneratorFn(marketIndex, slot, marketType, oraclePriceData, fallbackPrice);\n            for (const makerNode of makerNodeGenerator){\n                // Can't match orders from the same user\n                const sameUser = takerNode.userAccount.equals(makerNode.userAccount);\n                if (sameUser) {\n                    continue;\n                }\n                const makerPrice = makerNode.getPrice(oraclePriceData, slot);\n                const takerPrice = takerNode.getPrice(oraclePriceData, slot);\n                const ordersCross = doesCross(takerPrice, makerPrice);\n                if (!ordersCross) {\n                    break;\n                }\n                nodesToFill.push({\n                    node: takerNode,\n                    makerNodes: [\n                        makerNode\n                    ]\n                });\n                const makerOrder = makerNode.order;\n                const takerOrder = takerNode.order;\n                const makerBaseRemaining = makerOrder.baseAssetAmount.sub(makerOrder.baseAssetAmountFilled);\n                const takerBaseRemaining = takerOrder.baseAssetAmount.sub(takerOrder.baseAssetAmountFilled);\n                const baseFilled = __1.BN.min(makerBaseRemaining, takerBaseRemaining);\n                const newMakerOrder = {\n                    ...makerOrder\n                };\n                newMakerOrder.baseAssetAmountFilled = makerOrder.baseAssetAmountFilled.add(baseFilled);\n                this.getListForOrder(newMakerOrder, slot).update(newMakerOrder, makerNode.userAccount);\n                const newTakerOrder = {\n                    ...takerOrder\n                };\n                newTakerOrder.baseAssetAmountFilled = takerOrder.baseAssetAmountFilled.add(baseFilled);\n                this.getListForOrder(newTakerOrder, slot).update(newTakerOrder, takerNode.userAccount);\n                if (newTakerOrder.baseAssetAmountFilled.eq(takerOrder.baseAssetAmount)) {\n                    break;\n                }\n            }\n        }\n        return nodesToFill;\n    }\n    findNodesCrossingFallbackLiquidity(marketType, slot, oraclePriceData, nodeGenerator, fallbackPrice, doesCross, minAuctionDuration) {\n        var _a;\n        const nodesToFill = new Array();\n        let nextNode = nodeGenerator.next();\n        while(!nextNode.done){\n            const node = nextNode.value;\n            if ((0, __1.isVariant)(marketType, \"spot\") && ((_a = node.order) === null || _a === void 0 ? void 0 : _a.postOnly)) {\n                nextNode = nodeGenerator.next();\n                continue;\n            }\n            const nodePrice = (0, __1.getLimitPrice)(node.order, oraclePriceData, slot);\n            // order crosses if there is no limit price or it crosses fallback price\n            const crosses = doesCross(nodePrice, fallbackPrice);\n            // fallback is available if auction is complete or it's a spot order\n            const fallbackAvailable = (0, __1.isVariant)(marketType, \"spot\") || (0, __1.isFallbackAvailableLiquiditySource)(node.order, minAuctionDuration, slot);\n            if (crosses && fallbackAvailable) {\n                nodesToFill.push({\n                    node: node,\n                    makerNodes: []\n                });\n            }\n            nextNode = nodeGenerator.next();\n        }\n        return nodesToFill;\n    }\n    findExpiredNodesToFill(marketIndex, ts, marketType) {\n        const nodesToFill = new Array();\n        const marketTypeStr = (0, __1.getVariant)(marketType);\n        const nodeLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n        if (!nodeLists) {\n            return nodesToFill;\n        }\n        // All bids/asks that can expire\n        // dont try to expire limit orders with tif as its inefficient use of blockspace\n        const bidGenerators = [\n            nodeLists.takingLimit.bid.getGenerator(),\n            nodeLists.restingLimit.bid.getGenerator(),\n            nodeLists.floatingLimit.bid.getGenerator(),\n            nodeLists.market.bid.getGenerator()\n        ];\n        const askGenerators = [\n            nodeLists.takingLimit.ask.getGenerator(),\n            nodeLists.restingLimit.ask.getGenerator(),\n            nodeLists.floatingLimit.ask.getGenerator(),\n            nodeLists.market.ask.getGenerator()\n        ];\n        for (const bidGenerator of bidGenerators){\n            for (const bid of bidGenerator){\n                if ((0, __1.isOrderExpired)(bid.order, ts, true)) {\n                    nodesToFill.push({\n                        node: bid,\n                        makerNodes: []\n                    });\n                }\n            }\n        }\n        for (const askGenerator of askGenerators){\n            for (const ask of askGenerator){\n                if ((0, __1.isOrderExpired)(ask.order, ts, true)) {\n                    nodesToFill.push({\n                        node: ask,\n                        makerNodes: []\n                    });\n                }\n            }\n        }\n        return nodesToFill;\n    }\n    findJitAuctionNodesToFill(marketIndex, slot, oraclePriceData, marketType) {\n        const nodesToFill = new Array();\n        // Then see if there are orders still in JIT auction\n        for (const marketBid of this.getTakingBids(marketIndex, marketType, slot, oraclePriceData)){\n            nodesToFill.push({\n                node: marketBid,\n                makerNodes: []\n            });\n        }\n        for (const marketAsk of this.getTakingAsks(marketIndex, marketType, slot, oraclePriceData)){\n            nodesToFill.push({\n                node: marketAsk,\n                makerNodes: []\n            });\n        }\n        return nodesToFill;\n    }\n    *getTakingBids(marketIndex, marketType, slot, oraclePriceData) {\n        const marketTypeStr = (0, __1.getVariant)(marketType);\n        const orderLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n        if (!orderLists) {\n            return;\n        }\n        this.updateRestingLimitOrders(slot);\n        const generatorList = [\n            orderLists.market.bid.getGenerator(),\n            orderLists.takingLimit.bid.getGenerator()\n        ];\n        yield* this.getBestNode(generatorList, oraclePriceData, slot, (bestNode, currentNode)=>{\n            return bestNode.order.slot.lt(currentNode.order.slot);\n        });\n    }\n    *getTakingAsks(marketIndex, marketType, slot, oraclePriceData) {\n        const marketTypeStr = (0, __1.getVariant)(marketType);\n        const orderLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n        if (!orderLists) {\n            return;\n        }\n        this.updateRestingLimitOrders(slot);\n        const generatorList = [\n            orderLists.market.ask.getGenerator(),\n            orderLists.takingLimit.ask.getGenerator()\n        ];\n        yield* this.getBestNode(generatorList, oraclePriceData, slot, (bestNode, currentNode)=>{\n            return bestNode.order.slot.lt(currentNode.order.slot);\n        });\n    }\n    *getBestNode(generatorList, oraclePriceData, slot, compareFcn) {\n        const generators = generatorList.map((generator)=>{\n            return {\n                next: generator.next(),\n                generator\n            };\n        });\n        let sideExhausted = false;\n        while(!sideExhausted){\n            const bestGenerator = generators.reduce((bestGenerator, currentGenerator)=>{\n                if (currentGenerator.next.done) {\n                    return bestGenerator;\n                }\n                if (bestGenerator.next.done) {\n                    return currentGenerator;\n                }\n                const bestValue = bestGenerator.next.value;\n                const currentValue = currentGenerator.next.value;\n                return compareFcn(bestValue, currentValue, slot, oraclePriceData) ? bestGenerator : currentGenerator;\n            });\n            if (!bestGenerator.next.done) {\n                // skip this node if it's already completely filled\n                if (bestGenerator.next.value.isBaseFilled()) {\n                    bestGenerator.next = bestGenerator.generator.next();\n                    continue;\n                }\n                yield bestGenerator.next.value;\n                bestGenerator.next = bestGenerator.generator.next();\n            } else {\n                sideExhausted = true;\n            }\n        }\n    }\n    *getRestingLimitAsks(marketIndex, slot, marketType, oraclePriceData) {\n        if ((0, __1.isVariant)(marketType, \"spot\") && !oraclePriceData) {\n            throw new Error(\"Must provide OraclePriceData to get spot asks\");\n        }\n        this.updateRestingLimitOrders(slot);\n        const marketTypeStr = (0, __1.getVariant)(marketType);\n        const nodeLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n        if (!nodeLists) {\n            return;\n        }\n        const generatorList = [\n            nodeLists.restingLimit.ask.getGenerator(),\n            nodeLists.floatingLimit.ask.getGenerator()\n        ];\n        yield* this.getBestNode(generatorList, oraclePriceData, slot, (bestNode, currentNode, slot, oraclePriceData)=>{\n            return bestNode.getPrice(oraclePriceData, slot).lt(currentNode.getPrice(oraclePriceData, slot));\n        });\n    }\n    /**\n     * Filters the limit asks that are resting and do not cross fallback bid\n     * Taking orders can only fill against orders that meet this criteria\n     *\n     * @returns\n     */ *getMakerLimitAsks(marketIndex, slot, marketType, oraclePriceData, fallbackBid) {\n        const isPerpMarket = (0, __1.isVariant)(marketType, \"perp\");\n        for (const node of this.getRestingLimitAsks(marketIndex, slot, marketType, oraclePriceData)){\n            if (isPerpMarket && fallbackBid && node.getPrice(oraclePriceData, slot).lte(fallbackBid)) {\n                continue;\n            }\n            yield node;\n        }\n    }\n    *getRestingLimitBids(marketIndex, slot, marketType, oraclePriceData) {\n        if ((0, __1.isVariant)(marketType, \"spot\") && !oraclePriceData) {\n            throw new Error(\"Must provide OraclePriceData to get spot bids\");\n        }\n        this.updateRestingLimitOrders(slot);\n        const marketTypeStr = (0, __1.getVariant)(marketType);\n        const nodeLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n        if (!nodeLists) {\n            return;\n        }\n        const generatorList = [\n            nodeLists.restingLimit.bid.getGenerator(),\n            nodeLists.floatingLimit.bid.getGenerator()\n        ];\n        yield* this.getBestNode(generatorList, oraclePriceData, slot, (bestNode, currentNode, slot, oraclePriceData)=>{\n            return bestNode.getPrice(oraclePriceData, slot).gt(currentNode.getPrice(oraclePriceData, slot));\n        });\n    }\n    /**\n     * Filters the limit bids that are post only, have been place for sufficiently long or are below the fallback ask\n     * Market orders can only fill against orders that meet this criteria\n     *\n     * @returns\n     */ *getMakerLimitBids(marketIndex, slot, marketType, oraclePriceData, fallbackAsk) {\n        const isPerpMarket = (0, __1.isVariant)(marketType, \"perp\");\n        for (const node of this.getRestingLimitBids(marketIndex, slot, marketType, oraclePriceData)){\n            if (isPerpMarket && fallbackAsk && node.getPrice(oraclePriceData, slot).gte(fallbackAsk)) {\n                continue;\n            }\n            yield node;\n        }\n    }\n    *getAsks(marketIndex, fallbackAsk, slot, marketType, oraclePriceData) {\n        if ((0, __1.isVariant)(marketType, \"spot\") && !oraclePriceData) {\n            throw new Error(\"Must provide OraclePriceData to get spot asks\");\n        }\n        const generatorList = [\n            this.getTakingAsks(marketIndex, marketType, slot, oraclePriceData),\n            this.getRestingLimitAsks(marketIndex, slot, marketType, oraclePriceData)\n        ];\n        const marketTypeStr = (0, __1.getVariant)(marketType);\n        if (marketTypeStr === \"perp\" && fallbackAsk) {\n            generatorList.push((0, NodeList_1.getVammNodeGenerator)(fallbackAsk));\n        }\n        yield* this.getBestNode(generatorList, oraclePriceData, slot, (bestNode, currentNode, slot, oraclePriceData)=>{\n            const bestNodeTaking = bestNode.order ? (0, __1.isTakingOrder)(bestNode.order, slot) : false;\n            const currentNodeTaking = currentNode.order ? (0, __1.isTakingOrder)(currentNode.order, slot) : false;\n            if (bestNodeTaking && currentNodeTaking) {\n                return bestNode.order.slot.lt(currentNode.order.slot);\n            }\n            if (bestNodeTaking) {\n                return true;\n            }\n            if (currentNodeTaking) {\n                return false;\n            }\n            return bestNode.getPrice(oraclePriceData, slot).lt(currentNode.getPrice(oraclePriceData, slot));\n        });\n    }\n    *getBids(marketIndex, fallbackBid, slot, marketType, oraclePriceData) {\n        if ((0, __1.isVariant)(marketType, \"spot\") && !oraclePriceData) {\n            throw new Error(\"Must provide OraclePriceData to get spot bids\");\n        }\n        const generatorList = [\n            this.getTakingBids(marketIndex, marketType, slot, oraclePriceData),\n            this.getRestingLimitBids(marketIndex, slot, marketType, oraclePriceData)\n        ];\n        const marketTypeStr = (0, __1.getVariant)(marketType);\n        if (marketTypeStr === \"perp\" && fallbackBid) {\n            generatorList.push((0, NodeList_1.getVammNodeGenerator)(fallbackBid));\n        }\n        yield* this.getBestNode(generatorList, oraclePriceData, slot, (bestNode, currentNode, slot, oraclePriceData)=>{\n            const bestNodeTaking = bestNode.order ? (0, __1.isTakingOrder)(bestNode.order, slot) : false;\n            const currentNodeTaking = currentNode.order ? (0, __1.isTakingOrder)(currentNode.order, slot) : false;\n            if (bestNodeTaking && currentNodeTaking) {\n                return bestNode.order.slot.lt(currentNode.order.slot);\n            }\n            if (bestNodeTaking) {\n                return true;\n            }\n            if (currentNodeTaking) {\n                return false;\n            }\n            return bestNode.getPrice(oraclePriceData, slot).gt(currentNode.getPrice(oraclePriceData, slot));\n        });\n    }\n    findCrossingRestingLimitOrders(marketIndex, slot, marketType, oraclePriceData) {\n        const nodesToFill = new Array();\n        for (const askNode of this.getRestingLimitAsks(marketIndex, slot, marketType, oraclePriceData)){\n            const bidGenerator = this.getRestingLimitBids(marketIndex, slot, marketType, oraclePriceData);\n            for (const bidNode of bidGenerator){\n                const bidPrice = bidNode.getPrice(oraclePriceData, slot);\n                const askPrice = askNode.getPrice(oraclePriceData, slot);\n                // orders don't cross\n                if (bidPrice.lt(askPrice)) {\n                    break;\n                }\n                const bidOrder = bidNode.order;\n                const askOrder = askNode.order;\n                // Can't match orders from the same user\n                const sameUser = bidNode.userAccount.equals(askNode.userAccount);\n                if (sameUser) {\n                    continue;\n                }\n                const makerAndTaker = this.determineMakerAndTaker(askNode, bidNode);\n                // unable to match maker and taker due to post only or slot\n                if (!makerAndTaker) {\n                    continue;\n                }\n                const { takerNode, makerNode } = makerAndTaker;\n                const bidBaseRemaining = bidOrder.baseAssetAmount.sub(bidOrder.baseAssetAmountFilled);\n                const askBaseRemaining = askOrder.baseAssetAmount.sub(askOrder.baseAssetAmountFilled);\n                const baseFilled = __1.BN.min(bidBaseRemaining, askBaseRemaining);\n                const newBidOrder = {\n                    ...bidOrder\n                };\n                newBidOrder.baseAssetAmountFilled = bidOrder.baseAssetAmountFilled.add(baseFilled);\n                this.getListForOrder(newBidOrder, slot).update(newBidOrder, bidNode.userAccount);\n                // ask completely filled\n                const newAskOrder = {\n                    ...askOrder\n                };\n                newAskOrder.baseAssetAmountFilled = askOrder.baseAssetAmountFilled.add(baseFilled);\n                this.getListForOrder(newAskOrder, slot).update(newAskOrder, askNode.userAccount);\n                nodesToFill.push({\n                    node: takerNode,\n                    makerNodes: [\n                        makerNode\n                    ]\n                });\n                if (newAskOrder.baseAssetAmount.eq(newAskOrder.baseAssetAmountFilled)) {\n                    break;\n                }\n            }\n        }\n        return nodesToFill;\n    }\n    determineMakerAndTaker(askNode, bidNode) {\n        const askSlot = askNode.order.slot.add(new __1.BN(askNode.order.auctionDuration));\n        const bidSlot = bidNode.order.slot.add(new __1.BN(bidNode.order.auctionDuration));\n        if (bidNode.order.postOnly && askNode.order.postOnly) {\n            return undefined;\n        } else if (bidNode.order.postOnly) {\n            return {\n                takerNode: askNode,\n                makerNode: bidNode\n            };\n        } else if (askNode.order.postOnly) {\n            return {\n                takerNode: bidNode,\n                makerNode: askNode\n            };\n        } else if (askSlot.lte(bidSlot)) {\n            return {\n                takerNode: bidNode,\n                makerNode: askNode\n            };\n        } else {\n            return {\n                takerNode: askNode,\n                makerNode: bidNode\n            };\n        }\n    }\n    getBestAsk(marketIndex, fallbackAsk, slot, marketType, oraclePriceData) {\n        return this.getAsks(marketIndex, fallbackAsk, slot, marketType, oraclePriceData).next().value.getPrice(oraclePriceData, slot);\n    }\n    getBestBid(marketIndex, fallbackBid, slot, marketType, oraclePriceData) {\n        return this.getBids(marketIndex, fallbackBid, slot, marketType, oraclePriceData).next().value.getPrice(oraclePriceData, slot);\n    }\n    findNodesToTrigger(marketIndex, slot, oraclePrice, marketType, stateAccount) {\n        if ((0, exchangeStatus_1.exchangePaused)(stateAccount)) {\n            return [];\n        }\n        const nodesToTrigger = [];\n        const marketTypeStr = (0, __1.getVariant)(marketType);\n        const marketNodeLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n        const triggerAboveList = marketNodeLists ? marketNodeLists.trigger.above : undefined;\n        if (triggerAboveList) {\n            for (const node of triggerAboveList.getGenerator()){\n                if (oraclePrice.gt(node.order.triggerPrice)) {\n                    nodesToTrigger.push({\n                        node: node\n                    });\n                } else {\n                    break;\n                }\n            }\n        }\n        const triggerBelowList = marketNodeLists ? marketNodeLists.trigger.below : undefined;\n        if (triggerBelowList) {\n            for (const node of triggerBelowList.getGenerator()){\n                if (oraclePrice.lt(node.order.triggerPrice)) {\n                    nodesToTrigger.push({\n                        node: node\n                    });\n                } else {\n                    break;\n                }\n            }\n        }\n        return nodesToTrigger;\n    }\n    printTopOfOrderLists(sdkConfig, driftClient, slotSubscriber, marketIndex, marketType) {\n        if ((0, __1.isVariant)(marketType, \"perp\")) {\n            const market = driftClient.getPerpMarketAccount(marketIndex);\n            const slot = slotSubscriber.getSlot();\n            const oraclePriceData = driftClient.getOracleDataForPerpMarket(marketIndex);\n            const fallbackAsk = (0, __1.calculateAskPrice)(market, oraclePriceData);\n            const fallbackBid = (0, __1.calculateBidPrice)(market, oraclePriceData);\n            const bestAsk = this.getBestAsk(marketIndex, fallbackAsk, slot, marketType, oraclePriceData);\n            const bestBid = this.getBestBid(marketIndex, fallbackBid, slot, marketType, oraclePriceData);\n            const mid = bestAsk.add(bestBid).div(new __1.BN(2));\n            const bidSpread = ((0, __1.convertToNumber)(bestBid, __1.PRICE_PRECISION) / (0, __1.convertToNumber)(oraclePriceData.price, __1.PRICE_PRECISION) - 1) * 100.0;\n            const askSpread = ((0, __1.convertToNumber)(bestAsk, __1.PRICE_PRECISION) / (0, __1.convertToNumber)(oraclePriceData.price, __1.PRICE_PRECISION) - 1) * 100.0;\n            console.log(`Market ${sdkConfig.MARKETS[marketIndex].symbol} Orders`);\n            console.log(`  Ask`, (0, __1.convertToNumber)(bestAsk, __1.PRICE_PRECISION).toFixed(3), `(${askSpread.toFixed(4)}%)`);\n            console.log(`  Mid`, (0, __1.convertToNumber)(mid, __1.PRICE_PRECISION).toFixed(3));\n            console.log(`  Bid`, (0, __1.convertToNumber)(bestBid, __1.PRICE_PRECISION).toFixed(3), `(${bidSpread.toFixed(4)}%)`);\n        } else if ((0, __1.isVariant)(marketType, \"spot\")) {\n            const slot = slotSubscriber.getSlot();\n            const oraclePriceData = driftClient.getOracleDataForPerpMarket(marketIndex);\n            const bestAsk = this.getBestAsk(marketIndex, undefined, slot, marketType, oraclePriceData);\n            const bestBid = this.getBestBid(marketIndex, undefined, slot, marketType, oraclePriceData);\n            const mid = bestAsk.add(bestBid).div(new __1.BN(2));\n            const bidSpread = ((0, __1.convertToNumber)(bestBid, __1.PRICE_PRECISION) / (0, __1.convertToNumber)(oraclePriceData.price, __1.PRICE_PRECISION) - 1) * 100.0;\n            const askSpread = ((0, __1.convertToNumber)(bestAsk, __1.PRICE_PRECISION) / (0, __1.convertToNumber)(oraclePriceData.price, __1.PRICE_PRECISION) - 1) * 100.0;\n            console.log(`Market ${sdkConfig.MARKETS[marketIndex].symbol} Orders`);\n            console.log(`  Ask`, (0, __1.convertToNumber)(bestAsk, __1.PRICE_PRECISION).toFixed(3), `(${askSpread.toFixed(4)}%)`);\n            console.log(`  Mid`, (0, __1.convertToNumber)(mid, __1.PRICE_PRECISION).toFixed(3));\n            console.log(`  Bid`, (0, __1.convertToNumber)(bestBid, __1.PRICE_PRECISION).toFixed(3), `(${bidSpread.toFixed(4)}%)`);\n        }\n    }\n    getDLOBOrders() {\n        const dlobOrders = [];\n        for (const nodeList of this.getNodeLists()){\n            for (const node of nodeList.getGenerator()){\n                dlobOrders.push({\n                    user: node.userAccount,\n                    order: node.order\n                });\n            }\n        }\n        return dlobOrders;\n    }\n    *getNodeLists() {\n        for (const [_, nodeLists] of this.orderLists.get(\"perp\")){\n            yield nodeLists.restingLimit.bid;\n            yield nodeLists.restingLimit.ask;\n            yield nodeLists.takingLimit.bid;\n            yield nodeLists.takingLimit.ask;\n            yield nodeLists.market.bid;\n            yield nodeLists.market.ask;\n            yield nodeLists.floatingLimit.bid;\n            yield nodeLists.floatingLimit.ask;\n            yield nodeLists.trigger.above;\n            yield nodeLists.trigger.below;\n        }\n        for (const [_, nodeLists] of this.orderLists.get(\"spot\")){\n            yield nodeLists.restingLimit.bid;\n            yield nodeLists.restingLimit.ask;\n            yield nodeLists.takingLimit.bid;\n            yield nodeLists.takingLimit.ask;\n            yield nodeLists.market.bid;\n            yield nodeLists.market.ask;\n            yield nodeLists.floatingLimit.bid;\n            yield nodeLists.floatingLimit.ask;\n            yield nodeLists.trigger.above;\n            yield nodeLists.trigger.below;\n        }\n    }\n    /**\n     * Get an L2 view of the order book for a given market.\n     *\n     * @param marketIndex\n     * @param marketType\n     * @param slot\n     * @param oraclePriceData\n     * @param depth how many levels of the order book to return\n     * @param fallbackAsk best ask for fallback liquidity, only relevant for perps\n     * @param fallbackBid best bid for fallback liquidity, only relevant for perps\n     * @param fallbackL2Generators L2 generators for fallback liquidity e.g. vAMM {@link getVammL2Generator}, openbook {@link SerumSubscriber}\n     */ getL2({ marketIndex, marketType, slot, oraclePriceData, depth, fallbackAsk, fallbackBid, fallbackL2Generators = [] }) {\n        const makerAskL2LevelGenerator = (0, orderBookLevels_1.getL2GeneratorFromDLOBNodes)(this.getMakerLimitAsks(marketIndex, slot, marketType, oraclePriceData, fallbackBid), oraclePriceData, slot);\n        const fallbackAskGenerators = fallbackL2Generators.map((fallbackL2Generator)=>{\n            return fallbackL2Generator.getL2Asks();\n        });\n        const askL2LevelGenerator = (0, orderBookLevels_1.mergeL2LevelGenerators)([\n            makerAskL2LevelGenerator,\n            ...fallbackAskGenerators\n        ], (a, b)=>{\n            return a.price.lt(b.price);\n        });\n        const asks = (0, orderBookLevels_1.createL2Levels)(askL2LevelGenerator, depth);\n        const makerBidGenerator = (0, orderBookLevels_1.getL2GeneratorFromDLOBNodes)(this.getMakerLimitBids(marketIndex, slot, marketType, oraclePriceData, fallbackAsk), oraclePriceData, slot);\n        const fallbackBidGenerators = fallbackL2Generators.map((fallbackOrders)=>{\n            return fallbackOrders.getL2Bids();\n        });\n        const bidL2LevelGenerator = (0, orderBookLevels_1.mergeL2LevelGenerators)([\n            makerBidGenerator,\n            ...fallbackBidGenerators\n        ], (a, b)=>{\n            return a.price.gt(b.price);\n        });\n        const bids = (0, orderBookLevels_1.createL2Levels)(bidL2LevelGenerator, depth);\n        return {\n            bids,\n            asks\n        };\n    }\n    /**\n     * Get an L3 view of the order book for a given market. Does not include fallback liquidity sources\n     *\n     * @param marketIndex\n     * @param marketType\n     * @param slot\n     * @param oraclePriceData\n     */ getL3({ marketIndex, marketType, slot, oraclePriceData }) {\n        const bids = [];\n        const asks = [];\n        const restingAsks = this.getRestingLimitAsks(marketIndex, slot, marketType, oraclePriceData);\n        for (const ask of restingAsks){\n            asks.push({\n                price: ask.getPrice(oraclePriceData, slot),\n                size: ask.order.baseAssetAmount.sub(ask.order.baseAssetAmountFilled),\n                maker: ask.userAccount,\n                orderId: ask.order.orderId\n            });\n        }\n        const restingBids = this.getRestingLimitBids(marketIndex, slot, marketType, oraclePriceData);\n        for (const bid of restingBids){\n            bids.push({\n                price: bid.getPrice(oraclePriceData, slot),\n                size: bid.order.baseAssetAmount.sub(bid.order.baseAssetAmountFilled),\n                maker: bid.userAccount,\n                orderId: bid.order.orderId\n            });\n        }\n        return {\n            bids,\n            asks\n        };\n    }\n    estimateFillExactBaseAmountInForSide(baseAmountIn, oraclePriceData, slot, dlobSide) {\n        let runningSumQuote = __1.ZERO;\n        let runningSumBase = __1.ZERO;\n        for (const side of dlobSide){\n            const price = side.getPrice(oraclePriceData, slot); //side.order.quoteAssetAmount.div(side.order.baseAssetAmount);\n            const baseAmountRemaining = side.order.baseAssetAmount.sub(side.order.baseAssetAmountFilled);\n            if (runningSumBase.add(baseAmountRemaining).gt(baseAmountIn)) {\n                const remainingBase = baseAmountIn.sub(runningSumBase);\n                runningSumBase = runningSumBase.add(remainingBase);\n                runningSumQuote = runningSumQuote.add(remainingBase.mul(price));\n                break;\n            } else {\n                runningSumBase = runningSumBase.add(baseAmountRemaining);\n                runningSumQuote = runningSumQuote.add(baseAmountRemaining.mul(price));\n            }\n        }\n        return runningSumQuote.mul(__1.QUOTE_PRECISION).div(__1.BASE_PRECISION.mul(__1.PRICE_PRECISION));\n    }\n    /**\n     *\n     * @param param.marketIndex the index of the market\n     * @param param.marketType the type of the market\n     * @param param.baseAmount the base amount in to estimate\n     * @param param.orderDirection the direction of the trade\n     * @param param.slot current slot for estimating dlob node price\n     * @param param.oraclePriceData the oracle price data\n     * @returns the estimated quote amount filled: QUOTE_PRECISION\n     */ estimateFillWithExactBaseAmount({ marketIndex, marketType, baseAmount, orderDirection, slot, oraclePriceData }) {\n        if ((0, __1.isVariant)(orderDirection, \"long\")) {\n            return this.estimateFillExactBaseAmountInForSide(baseAmount, oraclePriceData, slot, this.getRestingLimitAsks(marketIndex, slot, marketType, oraclePriceData));\n        } else if ((0, __1.isVariant)(orderDirection, \"short\")) {\n            return this.estimateFillExactBaseAmountInForSide(baseAmount, oraclePriceData, slot, this.getRestingLimitBids(marketIndex, slot, marketType, oraclePriceData));\n        }\n    }\n    getBestMakers({ marketIndex, marketType, direction, slot, oraclePriceData, numMakers }) {\n        const makers = new Map();\n        const generator = (0, __1.isVariant)(direction, \"long\") ? this.getRestingLimitBids(marketIndex, slot, marketType, oraclePriceData) : this.getRestingLimitAsks(marketIndex, slot, marketType, oraclePriceData);\n        for (const node of generator){\n            if (!makers.has(node.userAccount.toString())) {\n                makers.set(node.userAccount.toString(), node.userAccount);\n            }\n            if (makers.size === numMakers) {\n                break;\n            }\n        }\n        return Array.from(makers.values());\n    }\n}\nexports.DLOB = DLOB;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOB.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBApiClient.js":
/*!****************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/dlob/DLOBApiClient.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DLOBApiClient = void 0;\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\"));\nconst DLOBOrders_1 = __webpack_require__(/*! ./DLOBOrders */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBOrders.js\");\nconst DLOB_1 = __webpack_require__(/*! ./DLOB */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOB.js\");\nclass DLOBApiClient {\n    constructor(config){\n        this.dlobCoder = DLOBOrders_1.DLOBOrdersCoder.create();\n        this.lastSeenSlot = 0;\n        this.url = config.url;\n    }\n    async getDLOB(slot) {\n        const r = await (0, node_fetch_1.default)(this.url);\n        if (!r.ok) {\n            throw new Error(`Failed to fetch DLOB from ${this.url}. Status: ${r.status}, ${r.statusText}`);\n        }\n        const resp = await r.json();\n        const responseSlot = resp[\"slot\"];\n        if (responseSlot > this.lastSeenSlot) {\n            const dlobOrdersBuffer = Buffer.from(resp[\"data\"], \"base64\");\n            const dlobOrders = this.dlobCoder.decode(Buffer.from(dlobOrdersBuffer));\n            const dlob = new DLOB_1.DLOB();\n            dlob.initFromOrders(dlobOrders, slot);\n            this.lastSeenDLOB = dlob;\n            this.lastSeenSlot = responseSlot;\n        }\n        return this.lastSeenDLOB;\n    }\n}\nexports.DLOBApiClient = DLOBApiClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9kbG9iL0RMT0JBcGlDbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHLEtBQUs7QUFDN0IsTUFBTUcsZUFBZVIsZ0JBQWdCUyxtQkFBT0EsQ0FBQyxpRUFBWTtBQUN6RCxNQUFNQyxlQUFlRCxtQkFBT0EsQ0FBQyxpRkFBYztBQUMzQyxNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQyxxRUFBUTtBQUMvQixNQUFNRjtJQUNGSyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsSUFBSSxDQUFDQyxTQUFTLEdBQUdKLGFBQWFLLGVBQWUsQ0FBQ0MsTUFBTTtRQUNwRCxJQUFJLENBQUNDLFlBQVksR0FBRztRQUNwQixJQUFJLENBQUNDLEdBQUcsR0FBR0wsT0FBT0ssR0FBRztJQUN6QjtJQUNBLE1BQU1DLFFBQVFDLElBQUksRUFBRTtRQUNoQixNQUFNQyxJQUFJLE1BQU0sQ0FBQyxHQUFHYixhQUFhYyxPQUFPLEVBQUUsSUFBSSxDQUFDSixHQUFHO1FBQ2xELElBQUksQ0FBQ0csRUFBRUUsRUFBRSxFQUFFO1lBQ1AsTUFBTSxJQUFJQyxNQUFNLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDTixHQUFHLENBQUMsVUFBVSxFQUFFRyxFQUFFSSxNQUFNLENBQUMsRUFBRSxFQUFFSixFQUFFSyxVQUFVLENBQUMsQ0FBQztRQUNqRztRQUNBLE1BQU1DLE9BQU8sTUFBTU4sRUFBRU8sSUFBSTtRQUN6QixNQUFNQyxlQUFlRixJQUFJLENBQUMsT0FBTztRQUNqQyxJQUFJRSxlQUFlLElBQUksQ0FBQ1osWUFBWSxFQUFFO1lBQ2xDLE1BQU1hLG1CQUFtQkMsT0FBT0MsSUFBSSxDQUFDTCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ25ELE1BQU1NLGFBQWEsSUFBSSxDQUFDbkIsU0FBUyxDQUFDb0IsTUFBTSxDQUFDSCxPQUFPQyxJQUFJLENBQUNGO1lBQ3JELE1BQU1LLE9BQU8sSUFBSXhCLE9BQU95QixJQUFJO1lBQzVCRCxLQUFLRSxjQUFjLENBQUNKLFlBQVliO1lBQ2hDLElBQUksQ0FBQ2tCLFlBQVksR0FBR0g7WUFDcEIsSUFBSSxDQUFDbEIsWUFBWSxHQUFHWTtRQUN4QjtRQUNBLE9BQU8sSUFBSSxDQUFDUyxZQUFZO0lBQzVCO0FBQ0o7QUFDQWpDLHFCQUFxQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9kbG9iL0RMT0JBcGlDbGllbnQuanM/YThlNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRExPQkFwaUNsaWVudCA9IHZvaWQgMDtcbmNvbnN0IG5vZGVfZmV0Y2hfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibm9kZS1mZXRjaFwiKSk7XG5jb25zdCBETE9CT3JkZXJzXzEgPSByZXF1aXJlKFwiLi9ETE9CT3JkZXJzXCIpO1xuY29uc3QgRExPQl8xID0gcmVxdWlyZShcIi4vRExPQlwiKTtcbmNsYXNzIERMT0JBcGlDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLmRsb2JDb2RlciA9IERMT0JPcmRlcnNfMS5ETE9CT3JkZXJzQ29kZXIuY3JlYXRlKCk7XG4gICAgICAgIHRoaXMubGFzdFNlZW5TbG90ID0gMDtcbiAgICAgICAgdGhpcy51cmwgPSBjb25maWcudXJsO1xuICAgIH1cbiAgICBhc3luYyBnZXRETE9CKHNsb3QpIHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0ICgwLCBub2RlX2ZldGNoXzEuZGVmYXVsdCkodGhpcy51cmwpO1xuICAgICAgICBpZiAoIXIub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIERMT0IgZnJvbSAke3RoaXMudXJsfS4gU3RhdHVzOiAke3Iuc3RhdHVzfSwgJHtyLnN0YXR1c1RleHR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHIuanNvbigpO1xuICAgICAgICBjb25zdCByZXNwb25zZVNsb3QgPSByZXNwWydzbG90J107XG4gICAgICAgIGlmIChyZXNwb25zZVNsb3QgPiB0aGlzLmxhc3RTZWVuU2xvdCkge1xuICAgICAgICAgICAgY29uc3QgZGxvYk9yZGVyc0J1ZmZlciA9IEJ1ZmZlci5mcm9tKHJlc3BbJ2RhdGEnXSwgJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgY29uc3QgZGxvYk9yZGVycyA9IHRoaXMuZGxvYkNvZGVyLmRlY29kZShCdWZmZXIuZnJvbShkbG9iT3JkZXJzQnVmZmVyKSk7XG4gICAgICAgICAgICBjb25zdCBkbG9iID0gbmV3IERMT0JfMS5ETE9CKCk7XG4gICAgICAgICAgICBkbG9iLmluaXRGcm9tT3JkZXJzKGRsb2JPcmRlcnMsIHNsb3QpO1xuICAgICAgICAgICAgdGhpcy5sYXN0U2VlbkRMT0IgPSBkbG9iO1xuICAgICAgICAgICAgdGhpcy5sYXN0U2VlblNsb3QgPSByZXNwb25zZVNsb3Q7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubGFzdFNlZW5ETE9CO1xuICAgIH1cbn1cbmV4cG9ydHMuRExPQkFwaUNsaWVudCA9IERMT0JBcGlDbGllbnQ7XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRExPQkFwaUNsaWVudCIsIm5vZGVfZmV0Y2hfMSIsInJlcXVpcmUiLCJETE9CT3JkZXJzXzEiLCJETE9CXzEiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImRsb2JDb2RlciIsIkRMT0JPcmRlcnNDb2RlciIsImNyZWF0ZSIsImxhc3RTZWVuU2xvdCIsInVybCIsImdldERMT0IiLCJzbG90IiwiciIsImRlZmF1bHQiLCJvayIsIkVycm9yIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInJlc3AiLCJqc29uIiwicmVzcG9uc2VTbG90IiwiZGxvYk9yZGVyc0J1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJkbG9iT3JkZXJzIiwiZGVjb2RlIiwiZGxvYiIsIkRMT0IiLCJpbml0RnJvbU9yZGVycyIsImxhc3RTZWVuRExPQiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBApiClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBNode.js":
/*!***********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/dlob/DLOBNode.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createNode = exports.TriggerOrderNode = exports.MarketOrderNode = exports.FloatingLimitOrderNode = exports.RestingLimitOrderNode = exports.TakingLimitOrderNode = exports.OrderNode = void 0;\nconst __1 = __webpack_require__(/*! .. */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nconst NodeList_1 = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/NodeList.js\");\nclass OrderNode {\n    constructor(order, userAccount){\n        this.haveFilled = false;\n        this.haveTrigger = false;\n        // Copy the order over to the node\n        this.order = {\n            ...order\n        };\n        this.userAccount = userAccount;\n        this.sortValue = this.getSortValue(order);\n    }\n    getLabel() {\n        let msg = `Order ${(0, NodeList_1.getOrderSignature)(this.order.orderId, this.userAccount)}`;\n        msg += ` ${(0, __1.isVariant)(this.order.direction, \"long\") ? \"LONG\" : \"SHORT\"} `;\n        msg += `${(0, __1.convertToNumber)(this.order.baseAssetAmount, __1.AMM_RESERVE_PRECISION).toFixed(3)}`;\n        if (this.order.price.gt(__1.ZERO)) {\n            msg += ` @ ${(0, __1.convertToNumber)(this.order.price, __1.PRICE_PRECISION).toFixed(3)}`;\n        }\n        if (this.order.triggerPrice.gt(__1.ZERO)) {\n            msg += ` ${(0, __1.isVariant)(this.order.triggerCondition, \"below\") ? \"BELOW\" : \"ABOVE\"}`;\n            msg += ` ${(0, __1.convertToNumber)(this.order.triggerPrice, __1.PRICE_PRECISION).toFixed(3)}`;\n        }\n        return msg;\n    }\n    getPrice(oraclePriceData, slot) {\n        return (0, __1.getLimitPrice)(this.order, oraclePriceData, slot);\n    }\n    isBaseFilled() {\n        return this.order.baseAssetAmountFilled.eq(this.order.baseAssetAmount);\n    }\n    isVammNode() {\n        return false;\n    }\n}\nexports.OrderNode = OrderNode;\nclass TakingLimitOrderNode extends OrderNode {\n    getSortValue(order) {\n        return order.slot;\n    }\n}\nexports.TakingLimitOrderNode = TakingLimitOrderNode;\nclass RestingLimitOrderNode extends OrderNode {\n    getSortValue(order) {\n        return order.price;\n    }\n}\nexports.RestingLimitOrderNode = RestingLimitOrderNode;\nclass FloatingLimitOrderNode extends OrderNode {\n    getSortValue(order) {\n        return new __1.BN(order.oraclePriceOffset);\n    }\n}\nexports.FloatingLimitOrderNode = FloatingLimitOrderNode;\nclass MarketOrderNode extends OrderNode {\n    getSortValue(order) {\n        return order.slot;\n    }\n}\nexports.MarketOrderNode = MarketOrderNode;\nclass TriggerOrderNode extends OrderNode {\n    getSortValue(order) {\n        return order.triggerPrice;\n    }\n}\nexports.TriggerOrderNode = TriggerOrderNode;\nfunction createNode(nodeType, order, userAccount) {\n    switch(nodeType){\n        case \"floatingLimit\":\n            return new FloatingLimitOrderNode(order, userAccount);\n        case \"restingLimit\":\n            return new RestingLimitOrderNode(order, userAccount);\n        case \"takingLimit\":\n            return new TakingLimitOrderNode(order, userAccount);\n        case \"market\":\n            return new MarketOrderNode(order, userAccount);\n        case \"trigger\":\n            return new TriggerOrderNode(order, userAccount);\n        default:\n            throw Error(`Unknown DLOBNode type ${nodeType}`);\n    }\n}\nexports.createNode = createNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBOrders.js":
/*!*************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/dlob/DLOBOrders.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DLOBOrdersCoder = void 0;\nconst idl_1 = __webpack_require__(/*! @coral-xyz/anchor/dist/cjs/coder/borsh/idl */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/cjs/coder/borsh/idl.js\");\nconst dlobIdl_json_1 = __importDefault(__webpack_require__(/*! ./dlobIdl.json */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/dlobIdl.json\"));\nclass DLOBOrdersCoder {\n    constructor(idl){\n        this.idl = idl;\n    }\n    static create() {\n        return new DLOBOrdersCoder(dlobIdl_json_1.default);\n    }\n    encode(dlobOrders) {\n        const layout = idl_1.IdlCoder.fieldLayout({\n            type: {\n                vec: {\n                    defined: \"DLOBOrder\"\n                }\n            }\n        }, this.idl.types);\n        const size = 150 * dlobOrders.length;\n        const buffer = Buffer.alloc(size);\n        const len = layout.encode(dlobOrders, buffer);\n        return buffer.slice(0, len);\n    }\n    decode(buffer) {\n        const layout = idl_1.IdlCoder.fieldLayout({\n            type: {\n                vec: {\n                    defined: \"DLOBOrder\"\n                }\n            }\n        }, this.idl.types);\n        return layout.decode(buffer);\n    }\n}\nexports.DLOBOrdersCoder = DLOBOrdersCoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9kbG9iL0RMT0JPcmRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHLEtBQUs7QUFDL0IsTUFBTUcsUUFBUUMsbUJBQU9BLENBQUMsc0hBQTRDO0FBQ2xFLE1BQU1DLGlCQUFpQlYsZ0JBQWdCUyxtQkFBT0EsQ0FBQyxrRkFBZ0I7QUFDL0QsTUFBTUY7SUFDRkksWUFBWUMsR0FBRyxDQUFFO1FBQ2IsSUFBSSxDQUFDQSxHQUFHLEdBQUdBO0lBQ2Y7SUFDQSxPQUFPQyxTQUFTO1FBQ1osT0FBTyxJQUFJTixnQkFBZ0JHLGVBQWVJLE9BQU87SUFDckQ7SUFDQUMsT0FBT0MsVUFBVSxFQUFFO1FBQ2YsTUFBTUMsU0FBU1QsTUFBTVUsUUFBUSxDQUFDQyxXQUFXLENBQUM7WUFDdENDLE1BQU07Z0JBQ0ZDLEtBQUs7b0JBQ0RDLFNBQVM7Z0JBQ2I7WUFDSjtRQUNKLEdBQUcsSUFBSSxDQUFDVixHQUFHLENBQUNXLEtBQUs7UUFDakIsTUFBTUMsT0FBTyxNQUFNUixXQUFXUyxNQUFNO1FBQ3BDLE1BQU1DLFNBQVNDLE9BQU9DLEtBQUssQ0FBQ0o7UUFDNUIsTUFBTUssTUFBTVosT0FBT0YsTUFBTSxDQUFDQyxZQUFZVTtRQUN0QyxPQUFPQSxPQUFPSSxLQUFLLENBQUMsR0FBR0Q7SUFDM0I7SUFDQUUsT0FBT0wsTUFBTSxFQUFFO1FBQ1gsTUFBTVQsU0FBU1QsTUFBTVUsUUFBUSxDQUFDQyxXQUFXLENBQUM7WUFDdENDLE1BQU07Z0JBQ0ZDLEtBQUs7b0JBQ0RDLFNBQVM7Z0JBQ2I7WUFDSjtRQUNKLEdBQUcsSUFBSSxDQUFDVixHQUFHLENBQUNXLEtBQUs7UUFDakIsT0FBT04sT0FBT2MsTUFBTSxDQUFDTDtJQUN6QjtBQUNKO0FBQ0FyQix1QkFBdUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvZGxvYi9ETE9CT3JkZXJzLmpzP2E3ZjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRMT0JPcmRlcnNDb2RlciA9IHZvaWQgMDtcbmNvbnN0IGlkbF8xID0gcmVxdWlyZShcIkBjb3JhbC14eXovYW5jaG9yL2Rpc3QvY2pzL2NvZGVyL2JvcnNoL2lkbFwiKTtcbmNvbnN0IGRsb2JJZGxfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2Rsb2JJZGwuanNvblwiKSk7XG5jbGFzcyBETE9CT3JkZXJzQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGlkbCkge1xuICAgICAgICB0aGlzLmlkbCA9IGlkbDtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBETE9CT3JkZXJzQ29kZXIoZGxvYklkbF9qc29uXzEuZGVmYXVsdCk7XG4gICAgfVxuICAgIGVuY29kZShkbG9iT3JkZXJzKSB7XG4gICAgICAgIGNvbnN0IGxheW91dCA9IGlkbF8xLklkbENvZGVyLmZpZWxkTGF5b3V0KHtcbiAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICB2ZWM6IHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lZDogJ0RMT0JPcmRlcicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIHRoaXMuaWRsLnR5cGVzKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IDE1MCAqIGRsb2JPcmRlcnMubGVuZ3RoO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2Moc2l6ZSk7XG4gICAgICAgIGNvbnN0IGxlbiA9IGxheW91dC5lbmNvZGUoZGxvYk9yZGVycywgYnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgwLCBsZW4pO1xuICAgIH1cbiAgICBkZWNvZGUoYnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IGxheW91dCA9IGlkbF8xLklkbENvZGVyLmZpZWxkTGF5b3V0KHtcbiAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICB2ZWM6IHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lZDogJ0RMT0JPcmRlcicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIHRoaXMuaWRsLnR5cGVzKTtcbiAgICAgICAgcmV0dXJuIGxheW91dC5kZWNvZGUoYnVmZmVyKTtcbiAgICB9XG59XG5leHBvcnRzLkRMT0JPcmRlcnNDb2RlciA9IERMT0JPcmRlcnNDb2RlcjtcbiJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJETE9CT3JkZXJzQ29kZXIiLCJpZGxfMSIsInJlcXVpcmUiLCJkbG9iSWRsX2pzb25fMSIsImNvbnN0cnVjdG9yIiwiaWRsIiwiY3JlYXRlIiwiZGVmYXVsdCIsImVuY29kZSIsImRsb2JPcmRlcnMiLCJsYXlvdXQiLCJJZGxDb2RlciIsImZpZWxkTGF5b3V0IiwidHlwZSIsInZlYyIsImRlZmluZWQiLCJ0eXBlcyIsInNpemUiLCJsZW5ndGgiLCJidWZmZXIiLCJCdWZmZXIiLCJhbGxvYyIsImxlbiIsInNsaWNlIiwiZGVjb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBOrders.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBSubscriber.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/dlob/DLOBSubscriber.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DLOBSubscriber = void 0;\nconst DLOB_1 = __webpack_require__(/*! ./DLOB */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOB.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst orderBookLevels_1 = __webpack_require__(/*! ./orderBookLevels */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/orderBookLevels.js\");\nconst market_1 = __webpack_require__(/*! ../math/market */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/market.js\");\nclass DLOBSubscriber {\n    constructor(config){\n        this.dlob = new DLOB_1.DLOB();\n        this.driftClient = config.driftClient;\n        this.dlobSource = config.dlobSource;\n        this.slotSource = config.slotSource;\n        this.updateFrequency = config.updateFrequency;\n        this.eventEmitter = new events_1.EventEmitter();\n    }\n    async subscribe() {\n        if (this.intervalId) {\n            return;\n        }\n        await this.updateDLOB();\n        this.intervalId = setInterval(async ()=>{\n            try {\n                await this.updateDLOB();\n                this.eventEmitter.emit(\"update\", this.dlob);\n            } catch (e) {\n                this.eventEmitter.emit(\"error\", e);\n            }\n        }, this.updateFrequency);\n    }\n    async updateDLOB() {\n        this.dlob = await this.dlobSource.getDLOB(this.slotSource.getSlot());\n    }\n    getDLOB() {\n        return this.dlob;\n    }\n    /**\n     * Get the L2 order book for a given market.\n     *\n     * @param marketName e.g. \"SOL-PERP\" or \"SOL\". If not provided, marketIndex and marketType must be provided.\n     * @param marketIndex\n     * @param marketType\n     * @param depth Number of orders to include in the order book. Defaults to 10.\n     * @param includeVamm Whether to include the VAMM orders in the order book. Defaults to false. If true, creates vAMM generator {@link getVammL2Generator} and adds it to fallbackL2Generators.\n     * @param fallbackL2Generators L2 generators for fallback liquidity e.g. vAMM {@link getVammL2Generator}, openbook {@link SerumSubscriber}\n     */ getL2({ marketName, marketIndex, marketType, depth = 10, includeVamm = false, numVammOrders, fallbackL2Generators = [] }) {\n        if (marketName) {\n            const derivedMarketInfo = this.driftClient.getMarketIndexAndType(marketName);\n            if (!derivedMarketInfo) {\n                throw new Error(`Market ${marketName} not found`);\n            }\n            marketIndex = derivedMarketInfo.marketIndex;\n            marketType = derivedMarketInfo.marketType;\n        } else {\n            if (marketIndex === undefined || marketType === undefined) {\n                throw new Error(\"Either marketName or marketIndex and marketType must be provided\");\n            }\n        }\n        let oraclePriceData;\n        let fallbackBid;\n        let fallbackAsk;\n        const isPerp = (0, types_1.isVariant)(marketType, \"perp\");\n        if (isPerp) {\n            const perpMarketAccount = this.driftClient.getPerpMarketAccount(marketIndex);\n            oraclePriceData = this.driftClient.getOracleDataForPerpMarket(perpMarketAccount.marketIndex);\n            fallbackBid = (0, market_1.calculateBidPrice)(perpMarketAccount, oraclePriceData);\n            fallbackAsk = (0, market_1.calculateAskPrice)(perpMarketAccount, oraclePriceData);\n        } else {\n            oraclePriceData = this.driftClient.getOracleDataForSpotMarket(marketIndex);\n        }\n        if (isPerp && includeVamm) {\n            fallbackL2Generators = [\n                (0, orderBookLevels_1.getVammL2Generator)({\n                    marketAccount: this.driftClient.getPerpMarketAccount(marketIndex),\n                    oraclePriceData,\n                    numOrders: numVammOrders !== null && numVammOrders !== void 0 ? numVammOrders : depth\n                })\n            ];\n        }\n        return this.dlob.getL2({\n            marketIndex,\n            marketType,\n            depth,\n            oraclePriceData,\n            slot: this.slotSource.getSlot(),\n            fallbackBid,\n            fallbackAsk,\n            fallbackL2Generators: fallbackL2Generators\n        });\n    }\n    /**\n     * Get the L3 order book for a given market.\n     *\n     * @param marketName e.g. \"SOL-PERP\" or \"SOL\". If not provided, marketIndex and marketType must be provided.\n     * @param marketIndex\n     * @param marketType\n     */ getL3({ marketName, marketIndex, marketType }) {\n        if (marketName) {\n            const derivedMarketInfo = this.driftClient.getMarketIndexAndType(marketName);\n            if (!derivedMarketInfo) {\n                throw new Error(`Market ${marketName} not found`);\n            }\n            marketIndex = derivedMarketInfo.marketIndex;\n            marketType = derivedMarketInfo.marketType;\n        } else {\n            if (marketIndex === undefined || marketType === undefined) {\n                throw new Error(\"Either marketName or marketIndex and marketType must be provided\");\n            }\n        }\n        let oraclePriceData;\n        const isPerp = (0, types_1.isVariant)(marketType, \"perp\");\n        if (isPerp) {\n            oraclePriceData = this.driftClient.getOracleDataForPerpMarket(marketIndex);\n        } else {\n            oraclePriceData = this.driftClient.getOracleDataForSpotMarket(marketIndex);\n        }\n        return this.dlob.getL3({\n            marketIndex,\n            marketType,\n            oraclePriceData,\n            slot: this.slotSource.getSlot()\n        });\n    }\n    async unsubscribe() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        }\n    }\n}\nexports.DLOBSubscriber = DLOBSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/NodeList.js":
/*!***********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/dlob/NodeList.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getVammNodeGenerator = exports.NodeList = exports.getOrderSignature = void 0;\nconst __1 = __webpack_require__(/*! .. */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nconst DLOBNode_1 = __webpack_require__(/*! ./DLOBNode */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBNode.js\");\nfunction getOrderSignature(orderId, userAccount) {\n    return `${userAccount.toString()}-${orderId.toString()}`;\n}\nexports.getOrderSignature = getOrderSignature;\nclass NodeList {\n    constructor(nodeType, sortDirection){\n        this.nodeType = nodeType;\n        this.sortDirection = sortDirection;\n        this.length = 0;\n        this.nodeMap = new Map();\n    }\n    clear() {\n        this.head = undefined;\n        this.length = 0;\n        this.nodeMap.clear();\n    }\n    insert(order, marketType, userAccount) {\n        if ((0, __1.isVariant)(order.status, \"init\")) {\n            return;\n        }\n        const newNode = (0, DLOBNode_1.createNode)(this.nodeType, order, userAccount);\n        const orderSignature = getOrderSignature(order.orderId, userAccount);\n        if (this.nodeMap.has(orderSignature)) {\n            return;\n        }\n        this.nodeMap.set(orderSignature, newNode);\n        this.length += 1;\n        if (this.head === undefined) {\n            this.head = newNode;\n            return;\n        }\n        if (this.prependNode(this.head, newNode)) {\n            this.head.previous = newNode;\n            newNode.next = this.head;\n            this.head = newNode;\n            return;\n        }\n        let currentNode = this.head;\n        while(currentNode.next !== undefined && !this.prependNode(currentNode.next, newNode)){\n            currentNode = currentNode.next;\n        }\n        newNode.next = currentNode.next;\n        if (currentNode.next !== undefined) {\n            newNode.next.previous = newNode;\n        }\n        currentNode.next = newNode;\n        newNode.previous = currentNode;\n    }\n    prependNode(currentNode, newNode) {\n        const currentOrder = currentNode.order;\n        const newOrder = newNode.order;\n        const currentOrderSortPrice = currentNode.sortValue;\n        const newOrderSortPrice = newNode.sortValue;\n        if (newOrderSortPrice.eq(currentOrderSortPrice)) {\n            return newOrder.slot.lt(currentOrder.slot);\n        }\n        if (this.sortDirection === \"asc\") {\n            return newOrderSortPrice.lt(currentOrderSortPrice);\n        } else {\n            return newOrderSortPrice.gt(currentOrderSortPrice);\n        }\n    }\n    update(order, userAccount) {\n        const orderId = getOrderSignature(order.orderId, userAccount);\n        if (this.nodeMap.has(orderId)) {\n            const node = this.nodeMap.get(orderId);\n            Object.assign(node.order, order);\n            node.haveFilled = false;\n        }\n    }\n    remove(order, userAccount) {\n        const orderId = getOrderSignature(order.orderId, userAccount);\n        if (this.nodeMap.has(orderId)) {\n            const node = this.nodeMap.get(orderId);\n            if (node.next) {\n                node.next.previous = node.previous;\n            }\n            if (node.previous) {\n                node.previous.next = node.next;\n            }\n            if (this.head && node.order.orderId === this.head.order.orderId) {\n                this.head = node.next;\n            }\n            node.previous = undefined;\n            node.next = undefined;\n            this.nodeMap.delete(orderId);\n            this.length--;\n        }\n    }\n    *getGenerator() {\n        let node = this.head;\n        while(node !== undefined){\n            yield node;\n            node = node.next;\n        }\n    }\n    has(order, userAccount) {\n        return this.nodeMap.has(getOrderSignature(order.orderId, userAccount));\n    }\n    get(orderSignature) {\n        return this.nodeMap.get(orderSignature);\n    }\n    print() {\n        let currentNode = this.head;\n        while(currentNode !== undefined){\n            console.log(currentNode.getLabel());\n            currentNode = currentNode.next;\n        }\n    }\n    printTop() {\n        if (this.head) {\n            console.log(this.sortDirection.toUpperCase(), this.head.getLabel());\n        } else {\n            console.log(\"---\");\n        }\n    }\n}\nexports.NodeList = NodeList;\nfunction* getVammNodeGenerator(price) {\n    if (!price) {\n        return;\n    }\n    yield {\n        getPrice: ()=>price,\n        isVammNode: ()=>true,\n        order: undefined,\n        userAccount: undefined,\n        isBaseFilled: ()=>false,\n        haveFilled: false\n    };\n}\nexports.getVammNodeGenerator = getVammNodeGenerator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/NodeList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/orderBookLevels.js":
/*!******************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/dlob/orderBookLevels.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.groupL2 = exports.getVammL2Generator = exports.createL2Levels = exports.mergeL2LevelGenerators = exports.getL2GeneratorFromDLOBNodes = void 0;\nconst __1 = __webpack_require__(/*! .. */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\n/**\n * Get an {@link Generator<L2Level>} generator from a {@link Generator<DLOBNode>}\n * @param dlobNodes e.g. {@link DLOB#getMakerLimitAsks} or {@link DLOB#getMakerLimitBids}\n * @param oraclePriceData\n * @param slot\n */ function* getL2GeneratorFromDLOBNodes(dlobNodes, oraclePriceData, slot) {\n    for (const dlobNode of dlobNodes){\n        const size = dlobNode.order.baseAssetAmount.sub(dlobNode.order.baseAssetAmountFilled);\n        yield {\n            size,\n            price: dlobNode.getPrice(oraclePriceData, slot),\n            sources: {\n                dlob: size\n            }\n        };\n    }\n}\nexports.getL2GeneratorFromDLOBNodes = getL2GeneratorFromDLOBNodes;\nfunction* mergeL2LevelGenerators(l2LevelGenerators, compare) {\n    const generators = l2LevelGenerators.map((generator)=>{\n        return {\n            generator,\n            next: generator.next()\n        };\n    });\n    let next;\n    do {\n        next = generators.reduce((best, next)=>{\n            if (next.next.done) {\n                return best;\n            }\n            if (!best) {\n                return next;\n            }\n            if (compare(next.next.value, best.next.value)) {\n                return next;\n            } else {\n                return best;\n            }\n        }, undefined);\n        if (next) {\n            yield next.next.value;\n            next.next = next.generator.next();\n        }\n    }while (next !== undefined);\n}\nexports.mergeL2LevelGenerators = mergeL2LevelGenerators;\nfunction createL2Levels(generator, depth) {\n    const levels = [];\n    for (const level of generator){\n        const price = level.price;\n        const size = level.size;\n        if (levels.length > 0 && levels[levels.length - 1].price.eq(price)) {\n            const currentLevel = levels[levels.length - 1];\n            currentLevel.size = currentLevel.size.add(size);\n            for (const [source, size] of Object.entries(level.sources)){\n                if (currentLevel.sources[source]) {\n                    currentLevel.sources[source] = currentLevel.sources[source].add(size);\n                } else {\n                    currentLevel.sources[source] = size;\n                }\n            }\n        } else if (levels.length === depth) {\n            break;\n        } else {\n            levels.push(level);\n        }\n    }\n    return levels;\n}\nexports.createL2Levels = createL2Levels;\nfunction getVammL2Generator({ marketAccount, oraclePriceData, numOrders, now }) {\n    const updatedAmm = (0, __1.calculateUpdatedAMM)(marketAccount.amm, oraclePriceData);\n    const [openBids, openAsks] = (0, __1.calculateMarketOpenBidAsk)(updatedAmm.baseAssetReserve, updatedAmm.minBaseAssetReserve, updatedAmm.maxBaseAssetReserve, updatedAmm.orderStepSize);\n    now = now !== null && now !== void 0 ? now : new __1.BN(Date.now() / 1000);\n    const [bidReserves, askReserves] = (0, __1.calculateSpreadReserves)(updatedAmm, oraclePriceData, now);\n    let numBids = 0;\n    const baseSize = openBids.div(new __1.BN(numOrders));\n    const bidAmm = {\n        baseAssetReserve: bidReserves.baseAssetReserve,\n        quoteAssetReserve: bidReserves.quoteAssetReserve,\n        sqrtK: updatedAmm.sqrtK,\n        pegMultiplier: updatedAmm.pegMultiplier\n    };\n    const getL2Bids = function*() {\n        while(numBids < numOrders && baseSize.gt(__1.ZERO)){\n            const [afterSwapQuoteReserves, afterSwapBaseReserves] = (0, __1.calculateAmmReservesAfterSwap)(bidAmm, \"base\", baseSize, __1.SwapDirection.ADD);\n            const quoteSwapped = (0, __1.calculateQuoteAssetAmountSwapped)(bidAmm.quoteAssetReserve.sub(afterSwapQuoteReserves).abs(), bidAmm.pegMultiplier, __1.SwapDirection.ADD);\n            const price = quoteSwapped.mul(__1.BASE_PRECISION).div(baseSize);\n            bidAmm.baseAssetReserve = afterSwapBaseReserves;\n            bidAmm.quoteAssetReserve = afterSwapQuoteReserves;\n            yield {\n                price,\n                size: baseSize,\n                sources: {\n                    vamm: baseSize\n                }\n            };\n            numBids++;\n        }\n    };\n    let numAsks = 0;\n    const askSize = openAsks.abs().div(new __1.BN(numOrders));\n    const askAmm = {\n        baseAssetReserve: askReserves.baseAssetReserve,\n        quoteAssetReserve: askReserves.quoteAssetReserve,\n        sqrtK: updatedAmm.sqrtK,\n        pegMultiplier: updatedAmm.pegMultiplier\n    };\n    const getL2Asks = function*() {\n        while(numAsks < numOrders && askSize.gt(__1.ZERO)){\n            const [afterSwapQuoteReserves, afterSwapBaseReserves] = (0, __1.calculateAmmReservesAfterSwap)(askAmm, \"base\", askSize, __1.SwapDirection.REMOVE);\n            const quoteSwapped = (0, __1.calculateQuoteAssetAmountSwapped)(askAmm.quoteAssetReserve.sub(afterSwapQuoteReserves).abs(), askAmm.pegMultiplier, __1.SwapDirection.REMOVE);\n            const price = quoteSwapped.mul(__1.BASE_PRECISION).div(askSize);\n            askAmm.baseAssetReserve = afterSwapBaseReserves;\n            askAmm.quoteAssetReserve = afterSwapQuoteReserves;\n            yield {\n                price,\n                size: askSize,\n                sources: {\n                    vamm: baseSize\n                }\n            };\n            numAsks++;\n        }\n    };\n    return {\n        getL2Bids,\n        getL2Asks\n    };\n}\nexports.getVammL2Generator = getVammL2Generator;\nfunction groupL2(l2, grouping, depth) {\n    return {\n        bids: groupL2Levels(l2.bids, grouping, __1.PositionDirection.LONG, depth),\n        asks: groupL2Levels(l2.asks, grouping, __1.PositionDirection.SHORT, depth)\n    };\n}\nexports.groupL2 = groupL2;\nfunction groupL2Levels(levels, grouping, direction, depth) {\n    const groupedLevels = [];\n    for (const level of levels){\n        const price = (0, __1.standardizePrice)(level.price, grouping, direction);\n        const size = level.size;\n        if (groupedLevels.length > 0 && groupedLevels[groupedLevels.length - 1].price.eq(price)) {\n            const currentLevel = groupedLevels[groupedLevels.length - 1];\n            currentLevel.size = currentLevel.size.add(size);\n            for (const [source, size] of Object.entries(level.sources)){\n                if (currentLevel.sources[source]) {\n                    currentLevel.sources[source] = currentLevel.sources[source].add(size);\n                } else {\n                    currentLevel.sources[source] = size;\n                }\n            }\n        } else {\n            const groupedLevel = {\n                price: price,\n                size,\n                sources: level.sources\n            };\n            groupedLevels.push(groupedLevel);\n        }\n        if (groupedLevels.length === depth) {\n            break;\n        }\n    }\n    return groupedLevels;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/orderBookLevels.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/types.js":
/*!********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/dlob/types.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9kbG9iL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL2Rsb2IvdHlwZXMuanM/MzhiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/driftClient.js":
/*!*********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/driftClient.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DriftClient = void 0;\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst bs58_1 = __importDefault(__webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/index.js\"));\nconst spl_token_1 = __webpack_require__(/*! @solana/spl-token */ \"(ssr)/./node_modules/@solana/spl-token/lib/cjs/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst anchor = __importStar(__webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\"));\nconst drift_json_1 = __importDefault(__webpack_require__(/*! ./idl/drift.json */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/idl/drift.json\"));\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst pda_1 = __webpack_require__(/*! ./addresses/pda */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/addresses/pda.js\");\nconst utils_1 = __webpack_require__(/*! ./tx/utils */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/tx/utils.js\");\nconst numericConstants_1 = __webpack_require__(/*! ./constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst position_1 = __webpack_require__(/*! ./math/position */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/position.js\");\nconst spotBalance_1 = __webpack_require__(/*! ./math/spotBalance */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotBalance.js\");\nconst userName_1 = __webpack_require__(/*! ./userName */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/userName.js\");\nconst pollingDriftClientAccountSubscriber_1 = __webpack_require__(/*! ./accounts/pollingDriftClientAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingDriftClientAccountSubscriber.js\");\nconst webSocketDriftClientAccountSubscriber_1 = __webpack_require__(/*! ./accounts/webSocketDriftClientAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketDriftClientAccountSubscriber.js\");\nconst retryTxSender_1 = __webpack_require__(/*! ./tx/retryTxSender */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/tx/retryTxSender.js\");\nconst user_1 = __webpack_require__(/*! ./user */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/user.js\");\nconst config_1 = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/config.js\");\nconst spotMarkets_1 = __webpack_require__(/*! ./constants/spotMarkets */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/spotMarkets.js\");\nconst userStats_1 = __webpack_require__(/*! ./userStats */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/userStats.js\");\nconst spotPosition_1 = __webpack_require__(/*! ./math/spotPosition */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotPosition.js\");\nconst market_1 = __webpack_require__(/*! ./math/market */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/market.js\");\nconst fetch_1 = __webpack_require__(/*! ./accounts/fetch */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/fetch.js\");\nconst spotMarket_1 = __webpack_require__(/*! ./math/spotMarket */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotMarket.js\");\nconst memcmp_1 = __webpack_require__(/*! ./memcmp */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/memcmp.js\");\nconst marinade_1 = __webpack_require__(/*! ./marinade */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/marinade/index.js\");\nconst orderParams_1 = __webpack_require__(/*! ./orderParams */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/orderParams.js\");\n/**\n * # DriftClient\n * This class is the main way to interact with Drift Protocol. It allows you to subscribe to the various accounts where the Market's state is stored, as well as: opening positions, liquidating, settling funding, depositing & withdrawing, and more.\n */ class DriftClient {\n    get isSubscribed() {\n        return this._isSubscribed && this.accountSubscriber.isSubscribed;\n    }\n    set isSubscribed(val) {\n        this._isSubscribed = val;\n    }\n    constructor(config){\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;\n        this.users = new Map();\n        this._isSubscribed = false;\n        this.perpMarketLastSlotCache = new Map();\n        this.spotMarketLastSlotCache = new Map();\n        this.mustIncludePerpMarketIndexes = new Set();\n        this.mustIncludeSpotMarketIndexes = new Set();\n        this.connection = config.connection;\n        this.wallet = config.wallet;\n        this.opts = config.opts || anchor_1.AnchorProvider.defaultOptions();\n        this.provider = new anchor_1.AnchorProvider(config.connection, config.wallet, this.opts);\n        this.program = new anchor_1.Program(drift_json_1.default, (_a = config.programID) !== null && _a !== void 0 ? _a : new web3_js_1.PublicKey(config_1.DRIFT_PROGRAM_ID), this.provider);\n        this.authority = (_b = config.authority) !== null && _b !== void 0 ? _b : this.wallet.publicKey;\n        this.activeSubAccountId = (_c = config.activeSubAccountId) !== null && _c !== void 0 ? _c : 0;\n        this.skipLoadUsers = (_d = config.skipLoadUsers) !== null && _d !== void 0 ? _d : false;\n        this.txVersion = (_e = config.txVersion) !== null && _e !== void 0 ? _e : \"legacy\";\n        this.txParams = {\n            computeUnits: (_g = (_f = config.txParams) === null || _f === void 0 ? void 0 : _f.computeUnits) !== null && _g !== void 0 ? _g : 600000,\n            computeUnitsPrice: (_j = (_h = config.txParams) === null || _h === void 0 ? void 0 : _h.computeUnitsPrice) !== null && _j !== void 0 ? _j : 0\n        };\n        if (config.includeDelegates && config.subAccountIds) {\n            throw new Error(\"Can only pass one of includeDelegates or subAccountIds. If you want to specify subaccount ids for multiple authorities, pass authoritySubaccountMap instead\");\n        }\n        if (config.authoritySubAccountMap && config.subAccountIds) {\n            throw new Error(\"Can only pass one of authoritySubaccountMap or subAccountIds\");\n        }\n        if (config.authoritySubAccountMap && config.includeDelegates) {\n            throw new Error(\"Can only pass one of authoritySubaccountMap or includeDelegates\");\n        }\n        this.authoritySubAccountMap = config.authoritySubAccountMap ? config.authoritySubAccountMap : config.subAccountIds ? new Map([\n            [\n                this.authority.toString(),\n                config.subAccountIds\n            ]\n        ]) : new Map();\n        this.includeDelegates = (_k = config.includeDelegates) !== null && _k !== void 0 ? _k : false;\n        if (((_l = config.accountSubscription) === null || _l === void 0 ? void 0 : _l.type) === \"polling\") {\n            this.userAccountSubscriptionConfig = {\n                type: \"polling\",\n                accountLoader: config.accountSubscription.accountLoader\n            };\n            this.userStatsAccountSubscriptionConfig = {\n                type: \"polling\",\n                accountLoader: config.accountSubscription.accountLoader\n            };\n        } else {\n            this.userAccountSubscriptionConfig = {\n                type: \"websocket\"\n            };\n            this.userStatsAccountSubscriptionConfig = {\n                type: \"websocket\"\n            };\n        }\n        if (config.userStats) {\n            this.userStats = new userStats_1.UserStats({\n                driftClient: this,\n                userStatsAccountPublicKey: (0, pda_1.getUserStatsAccountPublicKey)(this.program.programId, this.authority),\n                accountSubscription: this.userAccountSubscriptionConfig\n            });\n        }\n        this.marketLookupTable = config.marketLookupTable;\n        if (config.env && !this.marketLookupTable) {\n            this.marketLookupTable = new web3_js_1.PublicKey(config_1.configs[config.env].MARKET_LOOKUP_TABLE);\n        }\n        const noMarketsAndOraclesSpecified = config.perpMarketIndexes === undefined && config.spotMarketIndexes === undefined && config.oracleInfos === undefined;\n        if (((_m = config.accountSubscription) === null || _m === void 0 ? void 0 : _m.type) === \"polling\") {\n            this.accountSubscriber = new pollingDriftClientAccountSubscriber_1.PollingDriftClientAccountSubscriber(this.program, config.accountSubscription.accountLoader, (_o = config.perpMarketIndexes) !== null && _o !== void 0 ? _o : [], (_p = config.spotMarketIndexes) !== null && _p !== void 0 ? _p : [], (_q = config.oracleInfos) !== null && _q !== void 0 ? _q : [], noMarketsAndOraclesSpecified);\n        } else {\n            this.accountSubscriber = new webSocketDriftClientAccountSubscriber_1.WebSocketDriftClientAccountSubscriber(this.program, (_r = config.perpMarketIndexes) !== null && _r !== void 0 ? _r : [], (_s = config.spotMarketIndexes) !== null && _s !== void 0 ? _s : [], (_t = config.oracleInfos) !== null && _t !== void 0 ? _t : [], noMarketsAndOraclesSpecified);\n        }\n        this.eventEmitter = this.accountSubscriber.eventEmitter;\n        this.txSender = (_u = config.txSender) !== null && _u !== void 0 ? _u : new retryTxSender_1.RetryTxSender({\n            connection: this.connection,\n            wallet: this.wallet,\n            opts: this.opts\n        });\n    }\n    getUserMapKey(subAccountId, authority) {\n        return `${subAccountId}_${authority.toString()}`;\n    }\n    createUser(subAccountId, accountSubscriptionConfig, authority) {\n        const userAccountPublicKey = (0, pda_1.getUserAccountPublicKeySync)(this.program.programId, authority !== null && authority !== void 0 ? authority : this.authority, subAccountId);\n        return new user_1.User({\n            driftClient: this,\n            userAccountPublicKey,\n            accountSubscription: accountSubscriptionConfig\n        });\n    }\n    async subscribe() {\n        let subscribePromises = [\n            this.addAndSubscribeToUsers()\n        ].concat(this.accountSubscriber.subscribe());\n        if (this.userStats !== undefined) {\n            subscribePromises = subscribePromises.concat(this.userStats.subscribe());\n        }\n        this.isSubscribed = (await Promise.all(subscribePromises)).reduce((success, prevSuccess)=>success && prevSuccess);\n        return this.isSubscribed;\n    }\n    subscribeUsers() {\n        return [\n            ...this.users.values()\n        ].map((user)=>user.subscribe());\n    }\n    /**\n     *\tForces the accountSubscriber to fetch account updates from rpc\n     */ async fetchAccounts() {\n        let promises = [\n            ...this.users.values()\n        ].map((user)=>user.fetchAccounts()).concat(this.accountSubscriber.fetch());\n        if (this.userStats) {\n            promises = promises.concat(this.userStats.fetchAccounts());\n        }\n        await Promise.all(promises);\n    }\n    async unsubscribe() {\n        let unsubscribePromises = this.unsubscribeUsers().concat(this.accountSubscriber.unsubscribe());\n        if (this.userStats !== undefined) {\n            unsubscribePromises = unsubscribePromises.concat(this.userStats.unsubscribe());\n        }\n        await Promise.all(unsubscribePromises);\n        this.isSubscribed = false;\n    }\n    unsubscribeUsers() {\n        return [\n            ...this.users.values()\n        ].map((user)=>user.unsubscribe());\n    }\n    async getStatePublicKey() {\n        if (this.statePublicKey) {\n            return this.statePublicKey;\n        }\n        this.statePublicKey = await (0, pda_1.getDriftStateAccountPublicKey)(this.program.programId);\n        return this.statePublicKey;\n    }\n    getSignerPublicKey() {\n        if (this.signerPublicKey) {\n            return this.signerPublicKey;\n        }\n        this.signerPublicKey = (0, pda_1.getDriftSignerPublicKey)(this.program.programId);\n        return this.signerPublicKey;\n    }\n    getStateAccount() {\n        return this.accountSubscriber.getStateAccountAndSlot().data;\n    }\n    /**\n     * Forces a fetch to rpc before returning accounts. Useful for anchor tests.\n     */ async forceGetStateAccount() {\n        await this.accountSubscriber.fetch();\n        return this.accountSubscriber.getStateAccountAndSlot().data;\n    }\n    getPerpMarketAccount(marketIndex) {\n        var _a;\n        return (_a = this.accountSubscriber.getMarketAccountAndSlot(marketIndex)) === null || _a === void 0 ? void 0 : _a.data;\n    }\n    /**\n     * Forces a fetch to rpc before returning accounts. Useful for anchor tests.\n     * @param marketIndex\n     */ async forceGetPerpMarketAccount(marketIndex) {\n        var _a, _b;\n        await this.accountSubscriber.fetch();\n        let data = (_a = this.accountSubscriber.getMarketAccountAndSlot(marketIndex)) === null || _a === void 0 ? void 0 : _a.data;\n        let i = 0;\n        while(data === undefined && i < 10){\n            await this.accountSubscriber.fetch();\n            data = (_b = this.accountSubscriber.getMarketAccountAndSlot(marketIndex)) === null || _b === void 0 ? void 0 : _b.data;\n            i++;\n        }\n        return data;\n    }\n    getPerpMarketAccounts() {\n        return this.accountSubscriber.getMarketAccountsAndSlots().filter((value)=>value !== undefined).map((value)=>value.data);\n    }\n    getSpotMarketAccount(marketIndex) {\n        return this.accountSubscriber.getSpotMarketAccountAndSlot(marketIndex).data;\n    }\n    /**\n     * Forces a fetch to rpc before returning accounts. Useful for anchor tests.\n     * @param marketIndex\n     */ async forceGetSpotMarketAccount(marketIndex) {\n        await this.accountSubscriber.fetch();\n        return this.accountSubscriber.getSpotMarketAccountAndSlot(marketIndex).data;\n    }\n    getSpotMarketAccounts() {\n        return this.accountSubscriber.getSpotMarketAccountsAndSlots().filter((value)=>value !== undefined).map((value)=>value.data);\n    }\n    getQuoteSpotMarketAccount() {\n        return this.accountSubscriber.getSpotMarketAccountAndSlot(numericConstants_1.QUOTE_SPOT_MARKET_INDEX).data;\n    }\n    getOraclePriceDataAndSlot(oraclePublicKey) {\n        return this.accountSubscriber.getOraclePriceDataAndSlot(oraclePublicKey);\n    }\n    async getSerumV3FulfillmentConfig(serumMarket) {\n        const address = await (0, pda_1.getSerumFulfillmentConfigPublicKey)(this.program.programId, serumMarket);\n        return await this.program.account.serumV3FulfillmentConfig.fetch(address);\n    }\n    async getPhoenixV1FulfillmentConfig(phoenixMarket) {\n        const address = await (0, pda_1.getPhoenixFulfillmentConfigPublicKey)(this.program.programId, phoenixMarket);\n        return await this.program.account.phoenixV1FulfillmentConfig.fetch(address);\n    }\n    async fetchMarketLookupTableAccount() {\n        if (this.lookupTableAccount) return this.lookupTableAccount;\n        if (!this.marketLookupTable) {\n            console.log(\"Market lookup table address not set\");\n            return;\n        }\n        const lookupTableAccount = (await this.connection.getAddressLookupTable(this.marketLookupTable)).value;\n        this.lookupTableAccount = lookupTableAccount;\n        return lookupTableAccount;\n    }\n    /**\n     * Update the wallet to use for drift transactions and linked user account\n     * @param newWallet\n     * @param subAccountIds\n     * @param activeSubAccountId\n     * @param includeDelegates\n     */ async updateWallet(newWallet, subAccountIds, activeSubAccountId, includeDelegates, authoritySubaccountMap) {\n        const newProvider = new anchor_1.AnchorProvider(this.connection, newWallet, this.opts);\n        const newProgram = new anchor_1.Program(drift_json_1.default, this.program.programId, newProvider);\n        this.skipLoadUsers = false;\n        // Update provider for txSender with new wallet details\n        this.txSender.wallet = newWallet;\n        this.wallet = newWallet;\n        this.provider = newProvider;\n        this.program = newProgram;\n        this.authority = newWallet.publicKey;\n        this.activeSubAccountId = activeSubAccountId;\n        this.userStatsAccountPublicKey = undefined;\n        this.includeDelegates = includeDelegates !== null && includeDelegates !== void 0 ? includeDelegates : false;\n        if (includeDelegates && subAccountIds) {\n            throw new Error(\"Can only pass one of includeDelegates or subAccountIds. If you want to specify subaccount ids for multiple authorities, pass authoritySubaccountMap instead\");\n        }\n        if (authoritySubaccountMap && subAccountIds) {\n            throw new Error(\"Can only pass one of authoritySubaccountMap or subAccountIds\");\n        }\n        if (authoritySubaccountMap && includeDelegates) {\n            throw new Error(\"Can only pass one of authoritySubaccountMap or includeDelegates\");\n        }\n        this.authoritySubAccountMap = authoritySubaccountMap ? authoritySubaccountMap : subAccountIds ? new Map([\n            [\n                this.authority.toString(),\n                subAccountIds\n            ]\n        ]) : new Map();\n        let success = true;\n        if (this.isSubscribed) {\n            await Promise.all(this.unsubscribeUsers());\n            if (this.userStats) {\n                await this.userStats.unsubscribe();\n                this.userStats = new userStats_1.UserStats({\n                    driftClient: this,\n                    userStatsAccountPublicKey: this.getUserStatsAccountPublicKey(),\n                    accountSubscription: this.userStatsAccountSubscriptionConfig\n                });\n                await this.userStats.subscribe();\n            }\n            this.users.clear();\n            success = await this.addAndSubscribeToUsers();\n        }\n        return success;\n    }\n    switchActiveUser(subAccountId, authority) {\n        this.activeSubAccountId = subAccountId;\n        this.authority = authority !== null && authority !== void 0 ? authority : this.authority;\n        this.userStatsAccountPublicKey = (0, pda_1.getUserStatsAccountPublicKey)(this.program.programId, this.authority);\n    }\n    async addUser(subAccountId, authority, userAccount) {\n        authority = authority !== null && authority !== void 0 ? authority : this.authority;\n        const userKey = this.getUserMapKey(subAccountId, authority);\n        if (this.users.has(userKey) && this.users.get(userKey).isSubscribed) {\n            return true;\n        }\n        const user = this.createUser(subAccountId, this.userAccountSubscriptionConfig, authority);\n        const result = await user.subscribe(userAccount);\n        if (result) {\n            this.users.set(userKey, user);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Adds and subscribes to users based on params set by the constructor or by updateWallet.\n     */ async addAndSubscribeToUsers() {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        // save the rpc calls if driftclient is initialized without a real wallet\n        if (this.skipLoadUsers) return true;\n        let result = true;\n        if (this.authoritySubAccountMap && this.authoritySubAccountMap.size > 0) {\n            this.authoritySubAccountMap.forEach(async (value, key)=>{\n                for (const subAccountId of value){\n                    result = result && await this.addUser(subAccountId, new web3_js_1.PublicKey(key));\n                }\n            });\n            if (this.activeSubAccountId == undefined) {\n                this.switchActiveUser((_a = [\n                    ...this.authoritySubAccountMap.values()\n                ][0][0]) !== null && _a !== void 0 ? _a : 0, new web3_js_1.PublicKey((_b = [\n                    ...this.authoritySubAccountMap.keys()\n                ][0]) !== null && _b !== void 0 ? _b : this.authority.toString()));\n            }\n        } else {\n            const userAccounts = (_c = await this.getUserAccountsForAuthority(this.wallet.publicKey)) !== null && _c !== void 0 ? _c : [];\n            let delegatedAccounts = [];\n            if (this.includeDelegates) {\n                delegatedAccounts = (_d = await this.getUserAccountsForDelegate(this.wallet.publicKey)) !== null && _d !== void 0 ? _d : [];\n            }\n            for (const account of userAccounts.concat(delegatedAccounts)){\n                result = result && await this.addUser(account.subAccountId, account.authority, account);\n            }\n            if (this.activeSubAccountId == undefined) {\n                this.switchActiveUser((_f = (_e = userAccounts.concat(delegatedAccounts)[0]) === null || _e === void 0 ? void 0 : _e.subAccountId) !== null && _f !== void 0 ? _f : 0, (_h = (_g = userAccounts.concat(delegatedAccounts)[0]) === null || _g === void 0 ? void 0 : _g.authority) !== null && _h !== void 0 ? _h : this.authority);\n            }\n        }\n        return result;\n    }\n    async initializeUserAccount(subAccountId = 0, name = userName_1.DEFAULT_USER_NAME, referrerInfo) {\n        const [userAccountPublicKey, initializeUserAccountIx] = await this.getInitializeUserInstructions(subAccountId, name, referrerInfo);\n        const tx = new web3_js_1.Transaction();\n        if (subAccountId === 0) {\n            if (!await this.checkIfAccountExists(this.getUserStatsAccountPublicKey())) {\n                tx.add(await this.getInitializeUserStatsIx());\n            }\n        }\n        tx.add(initializeUserAccountIx);\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        await this.addUser(subAccountId);\n        return [\n            txSig,\n            userAccountPublicKey\n        ];\n    }\n    async getInitializeUserInstructions(subAccountId = 0, name = userName_1.DEFAULT_USER_NAME, referrerInfo) {\n        const userAccountPublicKey = await (0, pda_1.getUserAccountPublicKey)(this.program.programId, this.wallet.publicKey, subAccountId);\n        const remainingAccounts = new Array();\n        if (referrerInfo !== undefined) {\n            remainingAccounts.push({\n                pubkey: referrerInfo.referrer,\n                isWritable: true,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: referrerInfo.referrerStats,\n                isWritable: true,\n                isSigner: false\n            });\n        }\n        const state = this.getStateAccount();\n        if (!state.whitelistMint.equals(web3_js_1.PublicKey.default)) {\n            const associatedTokenPublicKey = await (0, spl_token_1.getAssociatedTokenAddress)(state.whitelistMint, this.wallet.publicKey);\n            remainingAccounts.push({\n                pubkey: associatedTokenPublicKey,\n                isWritable: false,\n                isSigner: false\n            });\n        }\n        const nameBuffer = (0, userName_1.encodeName)(name);\n        const initializeUserAccountIx = await this.program.instruction.initializeUser(subAccountId, nameBuffer, {\n            accounts: {\n                user: userAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey,\n                payer: this.wallet.publicKey,\n                rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n                systemProgram: anchor.web3.SystemProgram.programId,\n                state: await this.getStatePublicKey()\n            },\n            remainingAccounts\n        });\n        return [\n            userAccountPublicKey,\n            initializeUserAccountIx\n        ];\n    }\n    async getInitializeUserStatsIx() {\n        return await this.program.instruction.initializeUserStats({\n            accounts: {\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey,\n                payer: this.wallet.publicKey,\n                rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n                systemProgram: anchor.web3.SystemProgram.programId,\n                state: await this.getStatePublicKey()\n            }\n        });\n    }\n    async getNextSubAccountId() {\n        const userStats = this.getUserStats();\n        let userStatsAccount;\n        if (!userStats) {\n            userStatsAccount = await (0, fetch_1.fetchUserStatsAccount)(this.connection, this.program, this.wallet.publicKey);\n        } else {\n            userStatsAccount = userStats.getAccount();\n        }\n        return userStatsAccount.numberOfSubAccountsCreated;\n    }\n    async initializeReferrerName(name) {\n        const userAccountPublicKey = (0, pda_1.getUserAccountPublicKeySync)(this.program.programId, this.wallet.publicKey, 0);\n        const nameBuffer = (0, userName_1.encodeName)(name);\n        const referrerNameAccountPublicKey = (0, pda_1.getReferrerNamePublicKeySync)(this.program.programId, nameBuffer);\n        const tx = await this.program.transaction.initializeReferrerName(nameBuffer, {\n            accounts: {\n                referrerName: referrerNameAccountPublicKey,\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                payer: this.wallet.publicKey,\n                rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n                systemProgram: anchor.web3.SystemProgram.programId\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateUserName(name, subAccountId = 0) {\n        const userAccountPublicKey = (0, pda_1.getUserAccountPublicKeySync)(this.program.programId, this.wallet.publicKey, subAccountId);\n        const nameBuffer = (0, userName_1.encodeName)(name);\n        const tx = await this.program.transaction.updateUserName(subAccountId, nameBuffer, {\n            accounts: {\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateUserCustomMarginRatio(marginRatio, subAccountId = 0) {\n        const tx = await this.program.transaction.updateUserCustomMarginRatio(subAccountId, marginRatio, {\n            accounts: {\n                user: await this.getUserAccountPublicKey(),\n                authority: this.wallet.publicKey\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async getUpdateUserMarginTradingEnabledIx(marginTradingEnabled, subAccountId = 0, userAccountPublicKey) {\n        const userAccountPublicKeyToUse = userAccountPublicKey || (0, pda_1.getUserAccountPublicKeySync)(this.program.programId, this.wallet.publicKey, subAccountId);\n        await this.addUser(subAccountId, this.wallet.publicKey);\n        let remainingAccounts;\n        try {\n            remainingAccounts = this.getRemainingAccounts({\n                userAccounts: [\n                    this.getUserAccount(subAccountId)\n                ]\n            });\n        } catch (err) {\n            remainingAccounts = [];\n        }\n        return await this.program.instruction.updateUserMarginTradingEnabled(subAccountId, marginTradingEnabled, {\n            accounts: {\n                user: userAccountPublicKeyToUse,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async updateUserMarginTradingEnabled(marginTradingEnabled, subAccountId = 0) {\n        const userAccountPublicKey = (0, pda_1.getUserAccountPublicKeySync)(this.program.programId, this.wallet.publicKey, subAccountId);\n        await this.addUser(subAccountId, this.wallet.publicKey);\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount(subAccountId)\n            ]\n        });\n        const tx = await this.program.transaction.updateUserMarginTradingEnabled(subAccountId, marginTradingEnabled, {\n            accounts: {\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async updateUserDelegate(delegate, subAccountId = 0) {\n        const tx = await this.program.transaction.updateUserDelegate(subAccountId, delegate, {\n            accounts: {\n                user: await this.getUserAccountPublicKey(),\n                authority: this.wallet.publicKey\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async fetchAllUserAccounts(includeIdle = true) {\n        let filters = undefined;\n        if (!includeIdle) {\n            filters = [\n                (0, memcmp_1.getNonIdleUserFilter)()\n            ];\n        }\n        return await this.program.account.user.all(filters);\n    }\n    async getUserAccountsForDelegate(delegate) {\n        const programAccounts = await this.program.account.user.all([\n            {\n                memcmp: {\n                    offset: 40,\n                    /** data to match, as base-58 encoded string and limited to less than 129 bytes */ bytes: bs58_1.default.encode(delegate.toBuffer())\n                }\n            }\n        ]);\n        return programAccounts.map((programAccount)=>programAccount.account).sort((a, b)=>a.subAccountId - b.subAccountId);\n    }\n    async getUserAccountsAndAddressesForAuthority(authority) {\n        const programAccounts = await this.program.account.user.all([\n            {\n                memcmp: {\n                    offset: 8,\n                    /** data to match, as base-58 encoded string and limited to less than 129 bytes */ bytes: bs58_1.default.encode(authority.toBuffer())\n                }\n            }\n        ]);\n        return programAccounts.map((programAccount)=>programAccount);\n    }\n    async getUserAccountsForAuthority(authority) {\n        const programAccounts = await this.program.account.user.all([\n            {\n                memcmp: {\n                    offset: 8,\n                    /** data to match, as base-58 encoded string and limited to less than 129 bytes */ bytes: bs58_1.default.encode(authority.toBuffer())\n                }\n            }\n        ]);\n        return programAccounts.map((programAccount)=>programAccount.account).sort((a, b)=>a.subAccountId - b.subAccountId);\n    }\n    async getReferredUserStatsAccountsByReferrer(referrer) {\n        const programAccounts = await this.program.account.userStats.all([\n            {\n                memcmp: {\n                    offset: 40,\n                    /** data to match, as base-58 encoded string and limited to less than 129 bytes */ bytes: bs58_1.default.encode(referrer.toBuffer())\n                }\n            }\n        ]);\n        return programAccounts.map((programAccount)=>programAccount.account);\n    }\n    async getReferrerNameAccountsForAuthority(authority) {\n        const programAccounts = await this.program.account.referrerName.all([\n            {\n                memcmp: {\n                    offset: 8,\n                    /** data to match, as base-58 encoded string and limited to less than 129 bytes */ bytes: bs58_1.default.encode(authority.toBuffer())\n                }\n            }\n        ]);\n        return programAccounts.map((programAccount)=>programAccount.account);\n    }\n    async deleteUser(subAccountId = 0, txParams) {\n        var _a;\n        const userAccountPublicKey = (0, pda_1.getUserAccountPublicKeySync)(this.program.programId, this.wallet.publicKey, subAccountId);\n        const ix = await this.program.instruction.deleteUser({\n            accounts: {\n                user: userAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey,\n                state: await this.getStatePublicKey()\n            }\n        });\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(ix, txParams), [], this.opts);\n        const userMapKey = this.getUserMapKey(subAccountId, this.wallet.publicKey);\n        await ((_a = this.users.get(userMapKey)) === null || _a === void 0 ? void 0 : _a.unsubscribe());\n        this.users.delete(userMapKey);\n        return txSig;\n    }\n    getUser(subAccountId, authority) {\n        subAccountId = subAccountId !== null && subAccountId !== void 0 ? subAccountId : this.activeSubAccountId;\n        authority = authority !== null && authority !== void 0 ? authority : this.authority;\n        const userMapKey = this.getUserMapKey(subAccountId, authority);\n        if (!this.users.has(userMapKey)) {\n            throw new Error(`DriftClient has no user for user id ${userMapKey}`);\n        }\n        return this.users.get(userMapKey);\n    }\n    hasUser(subAccountId, authority) {\n        subAccountId = subAccountId !== null && subAccountId !== void 0 ? subAccountId : this.activeSubAccountId;\n        authority = authority !== null && authority !== void 0 ? authority : this.authority;\n        const userMapKey = this.getUserMapKey(subAccountId, authority);\n        return this.users.has(userMapKey);\n    }\n    getUsers() {\n        // delegate users get added to the end\n        return [\n            ...this.users.values()\n        ].filter((acct)=>acct.getUserAccount().authority.equals(this.wallet.publicKey)).concat([\n            ...this.users.values()\n        ].filter((acct)=>!acct.getUserAccount().authority.equals(this.wallet.publicKey)));\n    }\n    getUserStats() {\n        return this.userStats;\n    }\n    async fetchReferrerNameAccount(name) {\n        const nameBuffer = (0, userName_1.encodeName)(name);\n        const referrerNameAccountPublicKey = (0, pda_1.getReferrerNamePublicKeySync)(this.program.programId, nameBuffer);\n        return await this.program.account.referrerName.fetch(referrerNameAccountPublicKey);\n    }\n    getUserStatsAccountPublicKey() {\n        if (this.userStatsAccountPublicKey) {\n            return this.userStatsAccountPublicKey;\n        }\n        this.userStatsAccountPublicKey = (0, pda_1.getUserStatsAccountPublicKey)(this.program.programId, this.authority);\n        return this.userStatsAccountPublicKey;\n    }\n    async getUserAccountPublicKey(subAccountId, authority) {\n        return this.getUser(subAccountId, authority).userAccountPublicKey;\n    }\n    getUserAccount(subAccountId, authority) {\n        return this.getUser(subAccountId, authority).getUserAccount();\n    }\n    /**\n     * Forces a fetch to rpc before returning accounts. Useful for anchor tests.\n     * @param subAccountId\n     */ async forceGetUserAccount(subAccountId) {\n        await this.getUser(subAccountId).fetchAccounts();\n        return this.getUser(subAccountId).getUserAccount();\n    }\n    getUserAccountAndSlot(subAccountId) {\n        return this.getUser(subAccountId).getUserAccountAndSlot();\n    }\n    getSpotPosition(marketIndex) {\n        return this.getUserAccount().spotPositions.find((spotPosition)=>spotPosition.marketIndex === marketIndex);\n    }\n    getQuoteAssetTokenAmount() {\n        return this.getTokenAmount(numericConstants_1.QUOTE_SPOT_MARKET_INDEX);\n    }\n    /**\n     * Returns the token amount for a given market. The spot market precision is based on the token mint decimals.\n     * Positive if it is a deposit, negative if it is a borrow.\n     * @param marketIndex\n     */ getTokenAmount(marketIndex) {\n        const spotPosition = this.getSpotPosition(marketIndex);\n        if (spotPosition === undefined) {\n            return numericConstants_1.ZERO;\n        }\n        const spotMarket = this.getSpotMarketAccount(marketIndex);\n        return (0, spotBalance_1.getSignedTokenAmount)((0, spotBalance_1.getTokenAmount)(spotPosition.scaledBalance, spotMarket, spotPosition.balanceType), spotPosition.balanceType);\n    }\n    /**\n     * Converts an amount to the spot precision for a given market. The spot market precision is based on the token mint decimals.\n     * @param marketIndex\n     * @param amount\n     */ convertToSpotPrecision(marketIndex, amount) {\n        const spotMarket = this.getSpotMarketAccount(marketIndex);\n        return (0, spotMarket_1.castNumberToSpotPrecision)(amount, spotMarket);\n    }\n    /**\n     * Converts an amount to the perp precision. The perp market precision is {@link BASE_PRECISION} (1e9).\n     * @param amount\n     */ convertToPerpPrecision(amount) {\n        amount = typeof amount === \"number\" ? new anchor_1.BN(amount) : amount;\n        return amount.mul(numericConstants_1.BASE_PRECISION);\n    }\n    /**\n     * Converts an amount to the price precision. The perp market precision is {@link PRICE_PRECISION} (1e6).\n     * @param amount\n     */ convertToPricePrecision(amount) {\n        amount = typeof amount === \"number\" ? new anchor_1.BN(amount) : amount;\n        return amount.mul(numericConstants_1.PRICE_PRECISION);\n    }\n    /**\n     * Each drift instruction must include perp and sport market accounts in the ix remaining accounts.\n     * Use this function to force a subset of markets to be included in the remaining accounts for every ix\n     *\n     * @param perpMarketIndexes\n     * @param spotMarketIndexes\n     */ mustIncludeMarketsInIx({ perpMarketIndexes, spotMarketIndexes }) {\n        perpMarketIndexes.forEach((perpMarketIndex)=>{\n            this.mustIncludePerpMarketIndexes.add(perpMarketIndex);\n        });\n        spotMarketIndexes.forEach((spotMarketIndex)=>{\n            this.mustIncludeSpotMarketIndexes.add(spotMarketIndex);\n        });\n    }\n    getRemainingAccounts(params) {\n        var _a;\n        const { oracleAccountMap, spotMarketAccountMap, perpMarketAccountMap } = this.getRemainingAccountMapsForUsers(params.userAccounts);\n        if (params.useMarketLastSlotCache) {\n            const lastUserSlot = (_a = this.getUserAccountAndSlot()) === null || _a === void 0 ? void 0 : _a.slot;\n            for (const [marketIndex, slot] of this.perpMarketLastSlotCache.entries()){\n                // if cache has more recent slot than user positions account slot, add market to remaining accounts\n                // otherwise remove from slot\n                if (slot > lastUserSlot) {\n                    this.addPerpMarketToRemainingAccountMaps(marketIndex, false, oracleAccountMap, spotMarketAccountMap, perpMarketAccountMap);\n                } else {\n                    this.perpMarketLastSlotCache.delete(marketIndex);\n                }\n            }\n            for (const [marketIndex, slot] of this.spotMarketLastSlotCache.entries()){\n                // if cache has more recent slot than user positions account slot, add market to remaining accounts\n                // otherwise remove from slot\n                if (slot > lastUserSlot) {\n                    this.addSpotMarketToRemainingAccountMaps(marketIndex, false, oracleAccountMap, spotMarketAccountMap);\n                } else {\n                    this.spotMarketLastSlotCache.delete(marketIndex);\n                }\n            }\n        }\n        if (params.readablePerpMarketIndex !== undefined) {\n            const readablePerpMarketIndexes = Array.isArray(params.readablePerpMarketIndex) ? params.readablePerpMarketIndex : [\n                params.readablePerpMarketIndex\n            ];\n            for (const marketIndex of readablePerpMarketIndexes){\n                this.addPerpMarketToRemainingAccountMaps(marketIndex, false, oracleAccountMap, spotMarketAccountMap, perpMarketAccountMap);\n            }\n        }\n        for (const perpMarketIndex of this.mustIncludePerpMarketIndexes.values()){\n            this.addPerpMarketToRemainingAccountMaps(perpMarketIndex, false, oracleAccountMap, spotMarketAccountMap, perpMarketAccountMap);\n        }\n        if (params.readableSpotMarketIndexes !== undefined) {\n            for (const readableSpotMarketIndex of params.readableSpotMarketIndexes){\n                this.addSpotMarketToRemainingAccountMaps(readableSpotMarketIndex, false, oracleAccountMap, spotMarketAccountMap);\n            }\n        }\n        for (const spotMarketIndex of this.mustIncludeSpotMarketIndexes.values()){\n            this.addSpotMarketToRemainingAccountMaps(spotMarketIndex, false, oracleAccountMap, spotMarketAccountMap);\n        }\n        if (params.writablePerpMarketIndexes !== undefined) {\n            for (const writablePerpMarketIndex of params.writablePerpMarketIndexes){\n                this.addPerpMarketToRemainingAccountMaps(writablePerpMarketIndex, true, oracleAccountMap, spotMarketAccountMap, perpMarketAccountMap);\n            }\n        }\n        if (params.writableSpotMarketIndexes !== undefined) {\n            for (const writableSpotMarketIndex of params.writableSpotMarketIndexes){\n                this.addSpotMarketToRemainingAccountMaps(writableSpotMarketIndex, true, oracleAccountMap, spotMarketAccountMap);\n            }\n        }\n        return [\n            ...oracleAccountMap.values(),\n            ...spotMarketAccountMap.values(),\n            ...perpMarketAccountMap.values()\n        ];\n    }\n    addPerpMarketToRemainingAccountMaps(marketIndex, writable, oracleAccountMap, spotMarketAccountMap, perpMarketAccountMap) {\n        const perpMarketAccount = this.getPerpMarketAccount(marketIndex);\n        perpMarketAccountMap.set(marketIndex, {\n            pubkey: perpMarketAccount.pubkey,\n            isSigner: false,\n            isWritable: writable\n        });\n        oracleAccountMap.set(perpMarketAccount.amm.oracle.toString(), {\n            pubkey: perpMarketAccount.amm.oracle,\n            isSigner: false,\n            isWritable: false\n        });\n        this.addSpotMarketToRemainingAccountMaps(perpMarketAccount.quoteSpotMarketIndex, false, oracleAccountMap, spotMarketAccountMap);\n    }\n    addSpotMarketToRemainingAccountMaps(marketIndex, writable, oracleAccountMap, spotMarketAccountMap) {\n        const spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n        spotMarketAccountMap.set(spotMarketAccount.marketIndex, {\n            pubkey: spotMarketAccount.pubkey,\n            isSigner: false,\n            isWritable: writable\n        });\n        if (!spotMarketAccount.oracle.equals(web3_js_1.PublicKey.default)) {\n            oracleAccountMap.set(spotMarketAccount.oracle.toString(), {\n                pubkey: spotMarketAccount.oracle,\n                isSigner: false,\n                isWritable: false\n            });\n        }\n    }\n    getRemainingAccountMapsForUsers(userAccounts) {\n        const oracleAccountMap = new Map();\n        const spotMarketAccountMap = new Map();\n        const perpMarketAccountMap = new Map();\n        for (const userAccount of userAccounts){\n            for (const spotPosition of userAccount.spotPositions){\n                if (!(0, spotPosition_1.isSpotPositionAvailable)(spotPosition)) {\n                    this.addSpotMarketToRemainingAccountMaps(spotPosition.marketIndex, false, oracleAccountMap, spotMarketAccountMap);\n                    if (!spotPosition.openAsks.eq(numericConstants_1.ZERO) || !spotPosition.openBids.eq(numericConstants_1.ZERO)) {\n                        this.addSpotMarketToRemainingAccountMaps(numericConstants_1.QUOTE_SPOT_MARKET_INDEX, false, oracleAccountMap, spotMarketAccountMap);\n                    }\n                }\n            }\n            for (const position of userAccount.perpPositions){\n                if (!(0, position_1.positionIsAvailable)(position)) {\n                    this.addPerpMarketToRemainingAccountMaps(position.marketIndex, false, oracleAccountMap, spotMarketAccountMap, perpMarketAccountMap);\n                }\n            }\n        }\n        return {\n            oracleAccountMap,\n            spotMarketAccountMap,\n            perpMarketAccountMap\n        };\n    }\n    getOrder(orderId) {\n        var _a;\n        return (_a = this.getUserAccount()) === null || _a === void 0 ? void 0 : _a.orders.find((order)=>order.orderId === orderId);\n    }\n    getOrderByUserId(userOrderId) {\n        var _a;\n        return (_a = this.getUserAccount()) === null || _a === void 0 ? void 0 : _a.orders.find((order)=>order.userOrderId === userOrderId);\n    }\n    /**\n     * Get the associated token address for the given spot market\n     * @param marketIndex\n     * @param useNative\n     */ async getAssociatedTokenAccount(marketIndex, useNative = true) {\n        const spotMarket = this.getSpotMarketAccount(marketIndex);\n        if (useNative && spotMarket.mint.equals(spotMarkets_1.WRAPPED_SOL_MINT)) {\n            return this.wallet.publicKey;\n        }\n        const mint = spotMarket.mint;\n        return await (0, spl_token_1.getAssociatedTokenAddress)(mint, this.wallet.publicKey);\n    }\n    createAssociatedTokenAccountIdempotentInstruction(account, payer, owner, mint) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: payer,\n                    isSigner: true,\n                    isWritable: true\n                },\n                {\n                    pubkey: account,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: owner,\n                    isSigner: false,\n                    isWritable: false\n                },\n                {\n                    pubkey: mint,\n                    isSigner: false,\n                    isWritable: false\n                },\n                {\n                    pubkey: anchor.web3.SystemProgram.programId,\n                    isSigner: false,\n                    isWritable: false\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false\n                }\n            ],\n            programId: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,\n            data: Buffer.from([\n                0x1\n            ])\n        });\n    }\n    /**\n     * Deposit funds into the given spot market\n     *\n     * @param amount\n     * @param marketIndex\n     * @param associatedTokenAccount can be the wallet public key if using native sol\n     * @param subAccountId\n     * @param reduceOnly\n     */ async deposit(amount, marketIndex, associatedTokenAccount, subAccountId, reduceOnly = false) {\n        const tx = new web3_js_1.Transaction();\n        tx.add(web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({\n            units: 600000\n        }));\n        const additionalSigners = [];\n        const spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n        const isSolMarket = spotMarketAccount.mint.equals(spotMarkets_1.WRAPPED_SOL_MINT);\n        const signerAuthority = this.wallet.publicKey;\n        const createWSOLTokenAccount = isSolMarket && associatedTokenAccount.equals(signerAuthority);\n        if (createWSOLTokenAccount) {\n            const { ixs, pubkey } = await this.getWrappedSolAccountCreationIxs(amount, true);\n            associatedTokenAccount = pubkey;\n            ixs.forEach((ix)=>{\n                tx.add(ix);\n            });\n        }\n        const depositCollateralIx = await this.getDepositInstruction(amount, marketIndex, associatedTokenAccount, subAccountId, reduceOnly, true);\n        tx.add(depositCollateralIx);\n        // Close the wrapped sol account at the end of the transaction\n        if (createWSOLTokenAccount) {\n            tx.add((0, spl_token_1.createCloseAccountInstruction)(associatedTokenAccount, signerAuthority, signerAuthority, []));\n        }\n        const { txSig, slot } = await this.sendTransaction(tx, additionalSigners, this.opts);\n        this.spotMarketLastSlotCache.set(marketIndex, slot);\n        return txSig;\n    }\n    async getDepositInstruction(amount, marketIndex, userTokenAccount, subAccountId, reduceOnly = false, userInitialized = true) {\n        const userAccountPublicKey = await (0, pda_1.getUserAccountPublicKey)(this.program.programId, this.authority, subAccountId !== null && subAccountId !== void 0 ? subAccountId : this.activeSubAccountId);\n        let remainingAccounts = [];\n        if (userInitialized) {\n            remainingAccounts = this.getRemainingAccounts({\n                userAccounts: [\n                    await this.forceGetUserAccount()\n                ],\n                useMarketLastSlotCache: true,\n                writableSpotMarketIndexes: [\n                    marketIndex\n                ]\n            });\n        } else {\n            remainingAccounts = this.getRemainingAccounts({\n                userAccounts: [],\n                writableSpotMarketIndexes: [\n                    marketIndex\n                ]\n            });\n        }\n        const spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n        return await this.program.instruction.deposit(marketIndex, amount, reduceOnly, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                spotMarket: spotMarketAccount.pubkey,\n                spotMarketVault: spotMarketAccount.vault,\n                user: userAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                userTokenAccount: userTokenAccount,\n                authority: this.wallet.publicKey,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            },\n            remainingAccounts\n        });\n    }\n    async checkIfAccountExists(account) {\n        try {\n            const accountInfo = await this.connection.getAccountInfo(account);\n            return accountInfo != null;\n        } catch (e) {\n            // Doesn't already exist\n            return false;\n        }\n    }\n    async getWrappedSolAccountCreationIxs(amount, includeRent) {\n        const authority = this.wallet.publicKey;\n        // Generate a random seed for wrappedSolAccount.\n        const seed = web3_js_1.Keypair.generate().publicKey.toBase58().slice(0, 32);\n        // Calculate a publicKey that will be controlled by the authority.\n        const wrappedSolAccount = await web3_js_1.PublicKey.createWithSeed(authority, seed, spl_token_1.TOKEN_PROGRAM_ID);\n        const result = {\n            ixs: [],\n            signers: [],\n            pubkey: wrappedSolAccount\n        };\n        const rentSpaceLamports = new anchor_1.BN(web3_js_1.LAMPORTS_PER_SOL / 100);\n        const lamports = includeRent ? amount.add(rentSpaceLamports) : rentSpaceLamports;\n        result.ixs.push(web3_js_1.SystemProgram.createAccountWithSeed({\n            fromPubkey: authority,\n            basePubkey: authority,\n            seed,\n            newAccountPubkey: wrappedSolAccount,\n            lamports: lamports.toNumber(),\n            space: 165,\n            programId: spl_token_1.TOKEN_PROGRAM_ID\n        }));\n        result.ixs.push((0, spl_token_1.createInitializeAccountInstruction)(wrappedSolAccount, spotMarkets_1.WRAPPED_SOL_MINT, authority));\n        return result;\n    }\n    getAssociatedTokenAccountCreationIx(tokenMintAddress, associatedTokenAddress) {\n        return (0, spl_token_1.createAssociatedTokenAccountInstruction)(this.wallet.publicKey, associatedTokenAddress, this.wallet.publicKey, tokenMintAddress);\n    }\n    /**\n     * Creates the User account for a user, and deposits some initial collateral\n     * @param amount\n     * @param userTokenAccount\n     * @param marketIndex\n     * @param subAccountId\n     * @param name\n     * @param fromSubAccountId\n     * @returns\n     */ async initializeUserAccountAndDepositCollateral(amount, userTokenAccount, marketIndex = 0, subAccountId = 0, name = userName_1.DEFAULT_USER_NAME, fromSubAccountId, referrerInfo, txParams) {\n        var _a;\n        const [userAccountPublicKey, initializeUserAccountIx] = await this.getInitializeUserInstructions(subAccountId, name, referrerInfo);\n        const additionalSigners = [];\n        const spotMarket = this.getSpotMarketAccount(marketIndex);\n        const isSolMarket = spotMarket.mint.equals(spotMarkets_1.WRAPPED_SOL_MINT);\n        const tx = new web3_js_1.Transaction();\n        tx.add(web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({\n            units: (_a = txParams === null || txParams === void 0 ? void 0 : txParams.computeUnits) !== null && _a !== void 0 ? _a : 600000\n        }));\n        if (txParams === null || txParams === void 0 ? void 0 : txParams.computeUnitsPrice) {\n            tx.add(web3_js_1.ComputeBudgetProgram.setComputeUnitPrice({\n                microLamports: txParams.computeUnitsPrice\n            }));\n        }\n        const authority = this.wallet.publicKey;\n        const isFromSubaccount = fromSubAccountId !== null && fromSubAccountId !== undefined && !isNaN(fromSubAccountId);\n        const createWSOLTokenAccount = isSolMarket && userTokenAccount.equals(authority) && !isFromSubaccount;\n        if (createWSOLTokenAccount) {\n            const { ixs: startIxs, pubkey } = await this.getWrappedSolAccountCreationIxs(amount, true);\n            userTokenAccount = pubkey;\n            startIxs.forEach((ix)=>{\n                tx.add(ix);\n            });\n        }\n        const depositCollateralIx = isFromSubaccount ? await this.getTransferDepositIx(amount, marketIndex, fromSubAccountId, subAccountId) : await this.getDepositInstruction(amount, marketIndex, userTokenAccount, subAccountId, false, false);\n        if (subAccountId === 0) {\n            if (!await this.checkIfAccountExists(this.getUserStatsAccountPublicKey())) {\n                tx.add(await this.getInitializeUserStatsIx());\n            }\n        }\n        tx.add(initializeUserAccountIx).add(depositCollateralIx);\n        // Close the wrapped sol account at the end of the transaction\n        if (createWSOLTokenAccount) {\n            tx.add((0, spl_token_1.createCloseAccountInstruction)(userTokenAccount, authority, authority, []));\n        }\n        const { txSig, slot } = await this.sendTransaction(tx, additionalSigners, this.opts);\n        this.spotMarketLastSlotCache.set(marketIndex, slot);\n        await this.addUser(subAccountId);\n        return [\n            txSig,\n            userAccountPublicKey\n        ];\n    }\n    async initializeUserAccountForDevnet(subAccountId = 0, name = userName_1.DEFAULT_USER_NAME, marketIndex, tokenFaucet, amount, referrerInfo) {\n        const [associateTokenPublicKey, createAssociatedAccountIx, mintToIx] = await tokenFaucet.createAssociatedTokenAccountAndMintToInstructions(this.wallet.publicKey, amount);\n        const [userAccountPublicKey, initializeUserAccountIx] = await this.getInitializeUserInstructions(subAccountId, name, referrerInfo);\n        const depositCollateralIx = await this.getDepositInstruction(amount, marketIndex, associateTokenPublicKey, subAccountId, false, false);\n        const tx = new web3_js_1.Transaction().add(createAssociatedAccountIx).add(mintToIx);\n        if (subAccountId === 0) {\n            if (!await this.checkIfAccountExists(this.getUserStatsAccountPublicKey())) {\n                tx.add(await this.getInitializeUserStatsIx());\n            }\n        }\n        tx.add(initializeUserAccountIx).add(depositCollateralIx);\n        const txSig = await this.program.provider.sendAndConfirm(tx, []);\n        await this.addUser(subAccountId);\n        return [\n            txSig,\n            userAccountPublicKey\n        ];\n    }\n    /**\n     * Withdraws from a user account. If deposit doesn't already exist, creates a borrow\n     * @param amount\n     * @param marketIndex\n     * @param associatedTokenAddress - the token account to withdraw to. can be the wallet public key if using native sol\n     * @param reduceOnly\n     */ async withdraw(amount, marketIndex, associatedTokenAddress, reduceOnly = false) {\n        const tx = new web3_js_1.Transaction();\n        tx.add(web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({\n            units: 600000\n        }));\n        const additionalSigners = [];\n        const spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n        const isSolMarket = spotMarketAccount.mint.equals(spotMarkets_1.WRAPPED_SOL_MINT);\n        const authority = this.wallet.publicKey;\n        const createWSOLTokenAccount = isSolMarket && associatedTokenAddress.equals(authority);\n        if (createWSOLTokenAccount) {\n            const { ixs, pubkey } = await this.getWrappedSolAccountCreationIxs(amount, false);\n            associatedTokenAddress = pubkey;\n            ixs.forEach((ix)=>{\n                tx.add(ix);\n            });\n        } else {\n            const accountExists = await this.checkIfAccountExists(associatedTokenAddress);\n            if (!accountExists) {\n                const createAssociatedTokenAccountIx = this.getAssociatedTokenAccountCreationIx(spotMarketAccount.mint, associatedTokenAddress);\n                tx.add(createAssociatedTokenAccountIx);\n            }\n        }\n        const withdrawCollateral = await this.getWithdrawIx(amount, spotMarketAccount.marketIndex, associatedTokenAddress, reduceOnly);\n        tx.add(withdrawCollateral);\n        // Close the wrapped sol account at the end of the transaction\n        if (createWSOLTokenAccount) {\n            tx.add((0, spl_token_1.createCloseAccountInstruction)(associatedTokenAddress, authority, authority, []));\n        }\n        const { txSig, slot } = await this.sendTransaction(tx, additionalSigners, this.opts);\n        this.spotMarketLastSlotCache.set(marketIndex, slot);\n        return txSig;\n    }\n    async getWithdrawIx(amount, marketIndex, userTokenAccount, reduceOnly = false) {\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true,\n            writableSpotMarketIndexes: [\n                marketIndex\n            ],\n            readableSpotMarketIndexes: [\n                numericConstants_1.QUOTE_SPOT_MARKET_INDEX\n            ]\n        });\n        const spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n        return await this.program.instruction.withdraw(marketIndex, amount, reduceOnly, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                spotMarket: spotMarketAccount.pubkey,\n                spotMarketVault: spotMarketAccount.vault,\n                driftSigner: this.getSignerPublicKey(),\n                user: userAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                userTokenAccount: userTokenAccount,\n                authority: this.wallet.publicKey,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            },\n            remainingAccounts\n        });\n    }\n    /**\n     * Withdraws from the fromSubAccount and deposits into the toSubAccount\n     * @param amount\n     * @param marketIndex\n     * @param fromSubAccountId\n     * @param toSubAccountId\n     * @param txParams\n     */ async transferDeposit(amount, marketIndex, fromSubAccountId, toSubAccountId, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getTransferDepositIx(amount, marketIndex, fromSubAccountId, toSubAccountId), txParams), [], this.opts);\n        if (fromSubAccountId === this.activeSubAccountId || toSubAccountId === this.activeSubAccountId) {\n            this.spotMarketLastSlotCache.set(marketIndex, slot);\n        }\n        return txSig;\n    }\n    async getTransferDepositIx(amount, marketIndex, fromSubAccountId, toSubAccountId) {\n        const fromUser = await (0, pda_1.getUserAccountPublicKey)(this.program.programId, this.wallet.publicKey, fromSubAccountId);\n        const toUser = await (0, pda_1.getUserAccountPublicKey)(this.program.programId, this.wallet.publicKey, toSubAccountId);\n        let remainingAccounts;\n        const userMapKey = this.getUserMapKey(fromSubAccountId, this.wallet.publicKey);\n        if (this.users.has(userMapKey)) {\n            remainingAccounts = this.getRemainingAccounts({\n                userAccounts: [\n                    this.users.get(userMapKey).getUserAccount()\n                ],\n                useMarketLastSlotCache: true,\n                writableSpotMarketIndexes: [\n                    marketIndex\n                ]\n            });\n        } else {\n            const userAccountPublicKey = (0, pda_1.getUserAccountPublicKeySync)(this.program.programId, this.authority, fromSubAccountId);\n            const fromUserAccount = await this.program.account.user.fetch(userAccountPublicKey);\n            remainingAccounts = this.getRemainingAccounts({\n                userAccounts: [\n                    fromUserAccount\n                ],\n                useMarketLastSlotCache: true,\n                writableSpotMarketIndexes: [\n                    marketIndex\n                ]\n            });\n        }\n        return await this.program.instruction.transferDeposit(marketIndex, amount, {\n            accounts: {\n                authority: this.wallet.publicKey,\n                fromUser,\n                toUser,\n                userStats: this.getUserStatsAccountPublicKey(),\n                state: await this.getStatePublicKey(),\n                spotMarketVault: this.getSpotMarketAccount(marketIndex).vault\n            },\n            remainingAccounts\n        });\n    }\n    async updateSpotMarketCumulativeInterest(marketIndex, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.updateSpotMarketCumulativeInterestIx(marketIndex), txParams), [], this.opts);\n        return txSig;\n    }\n    async updateSpotMarketCumulativeInterestIx(marketIndex) {\n        const spotMarket = this.getSpotMarketAccount(marketIndex);\n        return await this.program.instruction.updateSpotMarketCumulativeInterest({\n            accounts: {\n                state: await this.getStatePublicKey(),\n                spotMarket: spotMarket.pubkey,\n                spotMarketVault: spotMarket.vault,\n                oracle: spotMarket.oracle\n            }\n        });\n    }\n    async settleLP(settleeUserAccountPublicKey, marketIndex, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.settleLPIx(settleeUserAccountPublicKey, marketIndex), txParams), [], this.opts);\n        return txSig;\n    }\n    async settleLPIx(settleeUserAccountPublicKey, marketIndex) {\n        const settleeUserAccount = await this.program.account.user.fetch(settleeUserAccountPublicKey);\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                settleeUserAccount\n            ],\n            writablePerpMarketIndexes: [\n                marketIndex\n            ]\n        });\n        return this.program.instruction.settleLp(marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: settleeUserAccountPublicKey\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    async removePerpLpShares(marketIndex, sharesToBurn, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getRemovePerpLpSharesIx(marketIndex, sharesToBurn), txParams), [], this.opts);\n        return txSig;\n    }\n    async removePerpLpSharesInExpiringMarket(marketIndex, userAccountPublicKey, sharesToBurn, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getRemovePerpLpSharesInExpiringMarket(marketIndex, userAccountPublicKey, sharesToBurn), txParams), [], this.opts);\n        return txSig;\n    }\n    async getRemovePerpLpSharesInExpiringMarket(marketIndex, userAccountPublicKey, sharesToBurn) {\n        const userAccount = await this.program.account.user.fetch(userAccountPublicKey);\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                userAccount\n            ],\n            useMarketLastSlotCache: true,\n            writablePerpMarketIndexes: [\n                marketIndex\n            ]\n        });\n        if (sharesToBurn == undefined) {\n            const perpPosition = userAccount.perpPositions.filter((position)=>position.marketIndex === marketIndex)[0];\n            sharesToBurn = perpPosition.lpShares;\n            console.log(\"burning lp shares:\", sharesToBurn.toString());\n        }\n        return this.program.instruction.removePerpLpSharesInExpiringMarket(sharesToBurn, marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    async getRemovePerpLpSharesIx(marketIndex, sharesToBurn) {\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true,\n            writablePerpMarketIndexes: [\n                marketIndex\n            ]\n        });\n        if (sharesToBurn == undefined) {\n            const userAccount = this.getUserAccount();\n            const perpPosition = userAccount.perpPositions.filter((position)=>position.marketIndex === marketIndex)[0];\n            sharesToBurn = perpPosition.lpShares;\n            console.log(\"burning lp shares:\", sharesToBurn.toString());\n        }\n        return this.program.instruction.removePerpLpShares(sharesToBurn, marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    async addPerpLpShares(amount, marketIndex, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getAddPerpLpSharesIx(amount, marketIndex), txParams), [], this.opts);\n        this.perpMarketLastSlotCache.set(marketIndex, slot);\n        return txSig;\n    }\n    async getAddPerpLpSharesIx(amount, marketIndex) {\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true,\n            writablePerpMarketIndexes: [\n                marketIndex\n            ]\n        });\n        return this.program.instruction.addPerpLpShares(amount, marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    getQuoteValuePerLpShare(marketIndex) {\n        const perpMarketAccount = this.getPerpMarketAccount(marketIndex);\n        const openBids = anchor_1.BN.max(perpMarketAccount.amm.baseAssetReserve.sub(perpMarketAccount.amm.minBaseAssetReserve), numericConstants_1.ZERO);\n        const openAsks = anchor_1.BN.max(perpMarketAccount.amm.maxBaseAssetReserve.sub(perpMarketAccount.amm.baseAssetReserve), numericConstants_1.ZERO);\n        const oraclePriceData = this.getOracleDataForPerpMarket(marketIndex);\n        const maxOpenBidsAsks = anchor_1.BN.max(openBids, openAsks);\n        const quoteValuePerLpShare = maxOpenBidsAsks.mul(oraclePriceData.price).mul(numericConstants_1.QUOTE_PRECISION).div(numericConstants_1.PRICE_PRECISION).div(perpMarketAccount.amm.sqrtK);\n        return quoteValuePerLpShare;\n    }\n    /**\n     * @deprecated use {@link placePerpOrder} or {@link placeAndTakePerpOrder} instead\n     */ async openPosition(direction, amount, marketIndex, limitPrice) {\n        return await this.placeAndTakePerpOrder({\n            orderType: types_1.OrderType.MARKET,\n            marketIndex,\n            direction,\n            baseAssetAmount: amount,\n            price: limitPrice\n        });\n    }\n    async sendSignedTx(tx) {\n        const { txSig } = await this.sendTransaction(tx, undefined, this.opts, true);\n        return txSig;\n    }\n    /**\n     * Sends a market order and returns a signed tx which can fill the order against the vamm, which the caller can use to fill their own order if required.\n     * @param orderParams\n     * @param userAccountPublicKey\n     * @param userAccount\n     * @param makerInfo\n     * @param txParams\n     * @param bracketOrdersParams\n     * @returns\n     */ async sendMarketOrderAndGetSignedFillTx(orderParams, userAccountPublicKey, userAccount, makerInfo, txParams, bracketOrdersParams = new Array(), referrerInfo, useVersionedTx = true) {\n        var _a, _b;\n        const marketIndex = orderParams.marketIndex;\n        const orderId = userAccount.nextOrderId;\n        const bracketOrderIxs = [];\n        const placePerpOrderIx = await this.getPlacePerpOrderIx(orderParams);\n        for (const bracketOrderParams of bracketOrdersParams){\n            const placeBracketOrderIx = await this.getPlacePerpOrderIx(bracketOrderParams);\n            bracketOrderIxs.push(placeBracketOrderIx);\n        }\n        const fillPerpOrderIx = await this.getFillPerpOrderIx(userAccountPublicKey, userAccount, {\n            orderId,\n            marketIndex\n        }, makerInfo, referrerInfo);\n        const walletSupportsVersionedTxns = //@ts-ignore\n        (_b = (_a = this.wallet.supportedTransactionVersions) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0 > 1;\n        // use versioned transactions if there is a lookup table account and wallet is compatible\n        if (walletSupportsVersionedTxns && useVersionedTx) {\n            const versionedMarketOrderTx = await this.buildTransaction([\n                placePerpOrderIx\n            ].concat(bracketOrderIxs), txParams, 0);\n            const versionedFillTx = await this.buildTransaction([\n                fillPerpOrderIx\n            ], txParams, 0);\n            const [signedVersionedMarketOrderTx, signedVersionedFillTx] = await this.provider.wallet.signAllTransactions([\n                //@ts-ignore\n                versionedMarketOrderTx,\n                //@ts-ignore\n                versionedFillTx\n            ]);\n            const { txSig, slot } = await this.txSender.sendRawTransaction(signedVersionedMarketOrderTx.serialize(), this.opts);\n            this.perpMarketLastSlotCache.set(orderParams.marketIndex, slot);\n            return {\n                txSig,\n                signedFillTx: signedVersionedFillTx\n            };\n        } else {\n            const marketOrderTx = (0, utils_1.wrapInTx)(placePerpOrderIx, txParams === null || txParams === void 0 ? void 0 : txParams.computeUnits, txParams === null || txParams === void 0 ? void 0 : txParams.computeUnitsPrice);\n            if (bracketOrderIxs.length > 0) {\n                marketOrderTx.add(...bracketOrderIxs);\n            }\n            const fillTx = (0, utils_1.wrapInTx)(fillPerpOrderIx, txParams === null || txParams === void 0 ? void 0 : txParams.computeUnits, txParams === null || txParams === void 0 ? void 0 : txParams.computeUnitsPrice);\n            // Apply the latest blockhash to the txs so that we can sign before sending them\n            const currentBlockHash = (await this.connection.getLatestBlockhash(\"finalized\")).blockhash;\n            marketOrderTx.recentBlockhash = currentBlockHash;\n            fillTx.recentBlockhash = currentBlockHash;\n            marketOrderTx.feePayer = userAccount.authority;\n            fillTx.feePayer = userAccount.authority;\n            const [signedMarketOrderTx, signedFillTx] = await this.provider.wallet.signAllTransactions([\n                marketOrderTx,\n                fillTx\n            ]);\n            const { txSig, slot } = await this.sendTransaction(signedMarketOrderTx, [], this.opts, true);\n            this.perpMarketLastSlotCache.set(orderParams.marketIndex, slot);\n            return {\n                txSig,\n                signedFillTx\n            };\n        }\n    }\n    async placePerpOrder(orderParams, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getPlacePerpOrderIx(orderParams), txParams), [], this.opts);\n        this.perpMarketLastSlotCache.set(orderParams.marketIndex, slot);\n        return txSig;\n    }\n    async getPlacePerpOrderIx(orderParams) {\n        orderParams = (0, orderParams_1.getOrderParams)(orderParams, {\n            marketType: types_1.MarketType.PERP\n        });\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true,\n            readablePerpMarketIndex: orderParams.marketIndex\n        });\n        return await this.program.instruction.placePerpOrder(orderParams, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async updateAMMs(marketIndexes, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getUpdateAMMsIx(marketIndexes), txParams), [], this.opts);\n        return txSig;\n    }\n    async getUpdateAMMsIx(marketIndexes) {\n        for(let i = marketIndexes.length; i < 5; i++){\n            marketIndexes.push(100);\n        }\n        const marketAccountInfos = [];\n        const oracleAccountInfos = [];\n        for (const marketIndex of marketIndexes){\n            if (marketIndex !== 100) {\n                const market = this.getPerpMarketAccount(marketIndex);\n                marketAccountInfos.push({\n                    pubkey: market.pubkey,\n                    isWritable: true,\n                    isSigner: false\n                });\n                oracleAccountInfos.push({\n                    pubkey: market.amm.oracle,\n                    isWritable: false,\n                    isSigner: false\n                });\n            }\n        }\n        const remainingAccounts = oracleAccountInfos.concat(marketAccountInfos);\n        return await this.program.instruction.updateAmms(marketIndexes, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async settleExpiredMarket(marketIndex, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getSettleExpiredMarketIx(marketIndex), txParams), [], this.opts);\n        return txSig;\n    }\n    async getSettleExpiredMarketIx(marketIndex) {\n        const marketAccountInfos = [];\n        const oracleAccountInfos = [];\n        const spotMarketAccountInfos = [];\n        const market = this.getPerpMarketAccount(marketIndex);\n        marketAccountInfos.push({\n            pubkey: market.pubkey,\n            isWritable: true,\n            isSigner: false\n        });\n        oracleAccountInfos.push({\n            pubkey: market.amm.oracle,\n            isWritable: false,\n            isSigner: false\n        });\n        spotMarketAccountInfos.push({\n            pubkey: this.getSpotMarketAccount(numericConstants_1.QUOTE_SPOT_MARKET_INDEX).pubkey,\n            isSigner: false,\n            isWritable: true\n        });\n        const remainingAccounts = oracleAccountInfos.concat(spotMarketAccountInfos).concat(marketAccountInfos);\n        return await this.program.instruction.settleExpiredMarket(marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async settleExpiredMarketPoolsToRevenuePool(perpMarketIndex, txParams) {\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex);\n        const spotMarketPublicKey = await (0, pda_1.getSpotMarketPublicKey)(this.program.programId, numericConstants_1.QUOTE_SPOT_MARKET_INDEX);\n        const ix = await this.program.instruction.settleExpiredMarketPoolsToRevenuePool({\n            accounts: {\n                state: await this.getStatePublicKey(),\n                admin: this.wallet.publicKey,\n                spotMarket: spotMarketPublicKey,\n                perpMarket: perpMarketPublicKey\n            }\n        });\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(ix, txParams), [], this.opts);\n        return txSig;\n    }\n    async cancelOrder(orderId, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getCancelOrderIx(orderId), txParams), [], this.opts);\n        return txSig;\n    }\n    async getCancelOrderIx(orderId) {\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true\n        });\n        return await this.program.instruction.cancelOrder(orderId !== null && orderId !== void 0 ? orderId : null, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async cancelOrderByUserId(userOrderId, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getCancelOrderByUserIdIx(userOrderId), txParams), [], this.opts);\n        return txSig;\n    }\n    async getCancelOrderByUserIdIx(userOrderId) {\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const order = this.getOrderByUserId(userOrderId);\n        const oracle = this.getPerpMarketAccount(order.marketIndex).amm.oracle;\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true\n        });\n        return await this.program.instruction.cancelOrderByUserId(userOrderId, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey,\n                oracle\n            },\n            remainingAccounts\n        });\n    }\n    async cancelOrdersByIds(orderIds, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getCancelOrdersByIdsIx(orderIds), txParams), [], this.opts);\n        return txSig;\n    }\n    async getCancelOrdersByIdsIx(orderIds) {\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true\n        });\n        return await this.program.instruction.cancelOrdersByIds(orderIds, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async cancelOrders(marketType, marketIndex, direction, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getCancelOrdersIx(marketType, marketIndex, direction), txParams), [], this.opts);\n        return txSig;\n    }\n    async getCancelOrdersIx(marketType, marketIndex, direction) {\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        let readablePerpMarketIndex = undefined;\n        let readableSpotMarketIndexes = undefined;\n        if (marketIndex) {\n            if (marketType && (0, types_1.isVariant)(marketType, \"perp\")) {\n                readablePerpMarketIndex = marketIndex;\n            } else if (marketType && (0, types_1.isVariant)(marketType, \"spot\")) {\n                readableSpotMarketIndexes = [\n                    marketIndex\n                ];\n            }\n        }\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            readablePerpMarketIndex,\n            readableSpotMarketIndexes,\n            useMarketLastSlotCache: true\n        });\n        return await this.program.instruction.cancelOrders(marketType !== null && marketType !== void 0 ? marketType : null, marketIndex !== null && marketIndex !== void 0 ? marketIndex : null, direction !== null && direction !== void 0 ? direction : null, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async cancelAndPlaceOrders(cancelOrderParams, placeOrderParams, txParams) {\n        const ixs = [\n            await this.getCancelOrdersIx(cancelOrderParams.marketType, cancelOrderParams.marketIndex, cancelOrderParams.direction),\n            await this.getPlaceOrdersIx(placeOrderParams)\n        ];\n        const tx = await this.buildTransaction(ixs, txParams);\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async placeOrders(params, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getPlaceOrdersIx(params), txParams), [], this.opts);\n        return txSig;\n    }\n    async getPlaceOrdersIx(params) {\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const readablePerpMarketIndex = [];\n        const readableSpotMarketIndexes = [];\n        for (const param of params){\n            if (!param.marketType) {\n                throw new Error(\"must set param.marketType\");\n            }\n            if ((0, types_1.isVariant)(param.marketType, \"perp\")) {\n                readablePerpMarketIndex.push(param.marketIndex);\n            } else {\n                readableSpotMarketIndexes.push(param.marketIndex);\n            }\n        }\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            readablePerpMarketIndex,\n            readableSpotMarketIndexes,\n            useMarketLastSlotCache: true\n        });\n        return await this.program.instruction.placeOrders(params, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async fillPerpOrder(userAccountPublicKey, user, order, makerInfo, referrerInfo, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getFillPerpOrderIx(userAccountPublicKey, user, order, makerInfo, referrerInfo), txParams), [], this.opts);\n        return txSig;\n    }\n    async getFillPerpOrderIx(userAccountPublicKey, userAccount, order, makerInfo, referrerInfo) {\n        const userStatsPublicKey = (0, pda_1.getUserStatsAccountPublicKey)(this.program.programId, userAccount.authority);\n        const fillerPublicKey = await this.getUserAccountPublicKey();\n        const fillerStatsPublicKey = this.getUserStatsAccountPublicKey();\n        const marketIndex = order ? order.marketIndex : userAccount.orders.find((order)=>order.orderId === userAccount.nextOrderId - 1).marketIndex;\n        makerInfo = Array.isArray(makerInfo) ? makerInfo : makerInfo ? [\n            makerInfo\n        ] : [];\n        const userAccounts = [\n            userAccount\n        ];\n        for (const maker of makerInfo){\n            userAccounts.push(maker.makerUserAccount);\n        }\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts,\n            writablePerpMarketIndexes: [\n                marketIndex\n            ]\n        });\n        for (const maker of makerInfo){\n            remainingAccounts.push({\n                pubkey: maker.maker,\n                isWritable: true,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: maker.makerStats,\n                isWritable: true,\n                isSigner: false\n            });\n        }\n        if (referrerInfo) {\n            const referrerIsMaker = makerInfo.find((maker)=>maker.maker.equals(referrerInfo.referrer)) !== undefined;\n            if (!referrerIsMaker) {\n                remainingAccounts.push({\n                    pubkey: referrerInfo.referrer,\n                    isWritable: true,\n                    isSigner: false\n                });\n                remainingAccounts.push({\n                    pubkey: referrerInfo.referrerStats,\n                    isWritable: true,\n                    isSigner: false\n                });\n            }\n        }\n        const orderId = order.orderId;\n        return await this.program.instruction.fillPerpOrder(orderId, null, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                filler: fillerPublicKey,\n                fillerStats: fillerStatsPublicKey,\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async getRevertFillIx() {\n        const fillerPublicKey = await this.getUserAccountPublicKey();\n        const fillerStatsPublicKey = this.getUserStatsAccountPublicKey();\n        return this.program.instruction.revertFill({\n            accounts: {\n                state: await this.getStatePublicKey(),\n                filler: fillerPublicKey,\n                fillerStats: fillerStatsPublicKey,\n                authority: this.wallet.publicKey\n            }\n        });\n    }\n    async placeSpotOrder(orderParams, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getPlaceSpotOrderIx(orderParams), txParams), [], this.opts);\n        this.spotMarketLastSlotCache.set(orderParams.marketIndex, slot);\n        this.spotMarketLastSlotCache.set(numericConstants_1.QUOTE_SPOT_MARKET_INDEX, slot);\n        return txSig;\n    }\n    async getPlaceSpotOrderIx(orderParams) {\n        orderParams = (0, orderParams_1.getOrderParams)(orderParams, {\n            marketType: types_1.MarketType.SPOT\n        });\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true,\n            readableSpotMarketIndexes: [\n                orderParams.marketIndex,\n                numericConstants_1.QUOTE_SPOT_MARKET_INDEX\n            ]\n        });\n        return await this.program.instruction.placeSpotOrder(orderParams, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async fillSpotOrder(userAccountPublicKey, user, order, fulfillmentConfig, makerInfo, referrerInfo, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getFillSpotOrderIx(userAccountPublicKey, user, order, fulfillmentConfig, makerInfo, referrerInfo), txParams), [], this.opts);\n        return txSig;\n    }\n    async getFillSpotOrderIx(userAccountPublicKey, userAccount, order, fulfillmentConfig, makerInfo, referrerInfo) {\n        const userStatsPublicKey = (0, pda_1.getUserStatsAccountPublicKey)(this.program.programId, userAccount.authority);\n        const fillerPublicKey = await this.getUserAccountPublicKey();\n        const fillerStatsPublicKey = this.getUserStatsAccountPublicKey();\n        const marketIndex = order ? order.marketIndex : userAccount.orders.find((order)=>order.orderId === userAccount.nextOrderId - 1).marketIndex;\n        const userAccounts = [\n            userAccount\n        ];\n        if (makerInfo !== undefined) {\n            userAccounts.push(makerInfo.makerUserAccount);\n        }\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts,\n            writableSpotMarketIndexes: [\n                marketIndex,\n                numericConstants_1.QUOTE_SPOT_MARKET_INDEX\n            ]\n        });\n        if (makerInfo) {\n            remainingAccounts.push({\n                pubkey: makerInfo.maker,\n                isWritable: true,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: makerInfo.makerStats,\n                isWritable: true,\n                isSigner: false\n            });\n        }\n        if (referrerInfo) {\n            remainingAccounts.push({\n                pubkey: referrerInfo.referrer,\n                isWritable: true,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: referrerInfo.referrerStats,\n                isWritable: true,\n                isSigner: false\n            });\n        }\n        const orderId = order.orderId;\n        const makerOrderId = makerInfo ? makerInfo.order.orderId : null;\n        this.addSpotFulfillmentAccounts(marketIndex, remainingAccounts, fulfillmentConfig);\n        return await this.program.instruction.fillSpotOrder(orderId, fulfillmentConfig ? fulfillmentConfig.fulfillmentType : null, makerOrderId, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                filler: fillerPublicKey,\n                fillerStats: fillerStatsPublicKey,\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    addSpotFulfillmentAccounts(marketIndex, remainingAccounts, fulfillmentConfig) {\n        if (fulfillmentConfig) {\n            if (\"serumProgramId\" in fulfillmentConfig) {\n                this.addSerumRemainingAccounts(marketIndex, remainingAccounts, fulfillmentConfig);\n            } else if (\"phoenixProgramId\" in fulfillmentConfig) {\n                this.addPhoenixRemainingAccounts(marketIndex, remainingAccounts, fulfillmentConfig);\n            } else {\n                throw Error(\"Invalid fulfillment config type\");\n            }\n        } else {\n            remainingAccounts.push({\n                pubkey: this.getSpotMarketAccount(marketIndex).vault,\n                isWritable: false,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: this.getQuoteSpotMarketAccount().vault,\n                isWritable: false,\n                isSigner: false\n            });\n        }\n    }\n    addSerumRemainingAccounts(marketIndex, remainingAccounts, fulfillmentConfig) {\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.pubkey,\n            isWritable: false,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.serumProgramId,\n            isWritable: false,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.serumMarket,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.serumRequestQueue,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.serumEventQueue,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.serumBids,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.serumAsks,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.serumBaseVault,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.serumQuoteVault,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.serumOpenOrders,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: (0, pda_1.getSerumSignerPublicKey)(fulfillmentConfig.serumProgramId, fulfillmentConfig.serumMarket, fulfillmentConfig.serumSignerNonce),\n            isWritable: false,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: this.getSignerPublicKey(),\n            isWritable: false,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n            isWritable: false,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: this.getSpotMarketAccount(marketIndex).vault,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: this.getQuoteSpotMarketAccount().vault,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: this.getStateAccount().srmVault,\n            isWritable: false,\n            isSigner: false\n        });\n    }\n    addPhoenixRemainingAccounts(marketIndex, remainingAccounts, fulfillmentConfig) {\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.pubkey,\n            isWritable: false,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.phoenixProgramId,\n            isWritable: false,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.phoenixLogAuthority,\n            isWritable: false,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.phoenixMarket,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: this.getSignerPublicKey(),\n            isWritable: false,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.phoenixBaseVault,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: fulfillmentConfig.phoenixQuoteVault,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: this.getSpotMarketAccount(marketIndex).vault,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: this.getQuoteSpotMarketAccount().vault,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n            isWritable: false,\n            isSigner: false\n        });\n    }\n    /**\n     * Swap tokens in drift account using jupiter\n     * @param jupiterClient jupiter client to find routes and jupiter instructions\n     * @param outMarketIndex the market index of the token you're buying\n     * @param inMarketIndex the market index of the token you're selling\n     * @param outAssociatedTokenAccount the token account to receive the token being sold on jupiter\n     * @param inAssociatedTokenAccount the token account to\n     * @param amount the amount of TokenIn, regardless of swapMode\n     * @param slippageBps the max slippage passed to jupiter api\n     * @param swapMode jupiter swapMode (ExactIn or ExactOut), default is ExactIn\n     * @param route the jupiter route to use for the swap\n     * @param reduceOnly specify if In or Out token on the drift account must reduceOnly, checked at end of swap\n     * @param txParams\n     */ async swap({ jupiterClient, outMarketIndex, inMarketIndex, outAssociatedTokenAccount, inAssociatedTokenAccount, amount, slippageBps, swapMode, route, reduceOnly, txParams }) {\n        const { ixs, lookupTables } = await this.getJupiterSwapIx({\n            jupiterClient,\n            outMarketIndex,\n            inMarketIndex,\n            outAssociatedTokenAccount,\n            inAssociatedTokenAccount,\n            amount,\n            slippageBps,\n            swapMode,\n            route,\n            reduceOnly\n        });\n        const tx = await this.buildTransaction(ixs, txParams, 0, lookupTables);\n        const { txSig, slot } = await this.sendTransaction(tx);\n        this.spotMarketLastSlotCache.set(outMarketIndex, slot);\n        this.spotMarketLastSlotCache.set(inMarketIndex, slot);\n        return txSig;\n    }\n    async getJupiterSwapIx({ jupiterClient, outMarketIndex, inMarketIndex, outAssociatedTokenAccount, inAssociatedTokenAccount, amount, slippageBps, swapMode, onlyDirectRoutes, route, reduceOnly, userAccountPublicKey }) {\n        const outMarket = this.getSpotMarketAccount(outMarketIndex);\n        const inMarket = this.getSpotMarketAccount(inMarketIndex);\n        if (!route) {\n            const routes = await jupiterClient.getRoutes({\n                inputMint: inMarket.mint,\n                outputMint: outMarket.mint,\n                amount,\n                slippageBps,\n                swapMode,\n                onlyDirectRoutes\n            });\n            if (!routes || routes.length === 0) {\n                throw new Error(\"No jupiter routes found\");\n            }\n            route = routes[0];\n        }\n        const transaction = await jupiterClient.getSwapTransaction({\n            route,\n            userPublicKey: this.provider.wallet.publicKey,\n            slippageBps\n        });\n        const { transactionMessage, lookupTables } = await jupiterClient.getTransactionMessageAndLookupTables({\n            transaction\n        });\n        const jupiterInstructions = jupiterClient.getJupiterInstructions({\n            transactionMessage,\n            inputMint: inMarket.mint,\n            outputMint: outMarket.mint\n        });\n        const preInstructions = [];\n        if (!outAssociatedTokenAccount) {\n            outAssociatedTokenAccount = await this.getAssociatedTokenAccount(outMarket.marketIndex, false);\n            const accountInfo = await this.connection.getAccountInfo(outAssociatedTokenAccount);\n            if (!accountInfo) {\n                preInstructions.push(this.createAssociatedTokenAccountIdempotentInstruction(outAssociatedTokenAccount, this.provider.wallet.publicKey, this.provider.wallet.publicKey, outMarket.mint));\n            }\n        }\n        if (!inAssociatedTokenAccount) {\n            inAssociatedTokenAccount = await this.getAssociatedTokenAccount(inMarket.marketIndex, false);\n            const accountInfo = await this.connection.getAccountInfo(inAssociatedTokenAccount);\n            if (!accountInfo) {\n                preInstructions.push(this.createAssociatedTokenAccountIdempotentInstruction(inAssociatedTokenAccount, this.provider.wallet.publicKey, this.provider.wallet.publicKey, inMarket.mint));\n            }\n        }\n        const { beginSwapIx, endSwapIx } = await this.getSwapIx({\n            outMarketIndex,\n            inMarketIndex,\n            amountIn: amount,\n            inTokenAccount: inAssociatedTokenAccount,\n            outTokenAccount: outAssociatedTokenAccount,\n            reduceOnly,\n            userAccountPublicKey\n        });\n        const ixs = [\n            ...preInstructions,\n            beginSwapIx,\n            ...jupiterInstructions,\n            endSwapIx\n        ];\n        return {\n            ixs,\n            lookupTables\n        };\n    }\n    /**\n     * Get the drift begin_swap and end_swap instructions\n     *\n     * @param outMarketIndex the market index of the token you're buying\n     * @param inMarketIndex the market index of the token you're selling\n     * @param amountIn the amount of the token to sell\n     * @param inTokenAccount the token account to move the tokens being sold\n     * @param outTokenAccount the token account to receive the tokens being bought\n     * @param limitPrice the limit price of the swap\n     * @param reduceOnly\n     * @param userAccountPublicKey optional, specify a custom userAccountPublicKey to use instead of getting the current user account; can be helpful if the account is being created within the current tx\n     */ async getSwapIx({ outMarketIndex, inMarketIndex, amountIn, inTokenAccount, outTokenAccount, limitPrice, reduceOnly, userAccountPublicKey }) {\n        const userAccountPublicKeyToUse = userAccountPublicKey || await this.getUserAccountPublicKey();\n        const userAccounts = [];\n        if (this.hasUser() && this.getUser().getUserAccountAndSlot()) {\n            userAccounts.push(this.getUser().getUserAccountAndSlot().data);\n        }\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts,\n            writableSpotMarketIndexes: [\n                outMarketIndex,\n                inMarketIndex\n            ]\n        });\n        const outSpotMarket = this.getSpotMarketAccount(outMarketIndex);\n        const inSpotMarket = this.getSpotMarketAccount(inMarketIndex);\n        const beginSwapIx = await this.program.instruction.beginSwap(inMarketIndex, outMarketIndex, amountIn, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKeyToUse,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey,\n                outSpotMarketVault: outSpotMarket.vault,\n                inSpotMarketVault: inSpotMarket.vault,\n                inTokenAccount,\n                outTokenAccount,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,\n                driftSigner: this.getStateAccount().signer,\n                instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY\n            },\n            remainingAccounts\n        });\n        const endSwapIx = await this.program.instruction.endSwap(inMarketIndex, outMarketIndex, limitPrice !== null && limitPrice !== void 0 ? limitPrice : null, reduceOnly !== null && reduceOnly !== void 0 ? reduceOnly : null, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKeyToUse,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey,\n                outSpotMarketVault: outSpotMarket.vault,\n                inSpotMarketVault: inSpotMarket.vault,\n                inTokenAccount,\n                outTokenAccount,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,\n                driftSigner: this.getStateAccount().signer,\n                instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY\n            },\n            remainingAccounts\n        });\n        return {\n            beginSwapIx,\n            endSwapIx\n        };\n    }\n    async stakeForMSOL({ amount }) {\n        const ixs = await this.getStakeForMSOLIx({\n            amount\n        });\n        const tx = await this.buildTransaction(ixs);\n        return this.sendTransaction(tx);\n    }\n    async getStakeForMSOLIx({ amount, userAccountPublicKey }) {\n        const wSOLMint = this.getSpotMarketAccount(1).mint;\n        const mSOLAccount = await this.getAssociatedTokenAccount(2);\n        const wSOLAccount = await this.getAssociatedTokenAccount(1, false);\n        const wSOLAccountExists = await this.checkIfAccountExists(wSOLAccount);\n        const closeWSOLIx = (0, spl_token_1.createCloseAccountInstruction)(wSOLAccount, this.wallet.publicKey, this.wallet.publicKey);\n        const createWSOLIx = await this.createAssociatedTokenAccountIdempotentInstruction(wSOLAccount, this.wallet.publicKey, this.wallet.publicKey, wSOLMint);\n        const { beginSwapIx, endSwapIx } = await this.getSwapIx({\n            inMarketIndex: 1,\n            outMarketIndex: 2,\n            amountIn: amount,\n            inTokenAccount: wSOLAccount,\n            outTokenAccount: mSOLAccount,\n            userAccountPublicKey\n        });\n        const program = (0, marinade_1.getMarinadeFinanceProgram)(this.provider);\n        const depositIx = await (0, marinade_1.getMarinadeDepositIx)({\n            program,\n            mSOLAccount: mSOLAccount,\n            transferFrom: this.wallet.publicKey,\n            amount\n        });\n        const ixs = [];\n        if (!wSOLAccountExists) {\n            ixs.push(createWSOLIx);\n        }\n        ixs.push(beginSwapIx, closeWSOLIx, depositIx, createWSOLIx, endSwapIx);\n        return ixs;\n    }\n    async triggerOrder(userAccountPublicKey, user, order, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getTriggerOrderIx(userAccountPublicKey, user, order), txParams), [], this.opts);\n        return txSig;\n    }\n    async getTriggerOrderIx(userAccountPublicKey, userAccount, order) {\n        const fillerPublicKey = await this.getUserAccountPublicKey();\n        let remainingAccountsParams;\n        if ((0, types_1.isVariant)(order.marketType, \"perp\")) {\n            remainingAccountsParams = {\n                userAccounts: [\n                    userAccount\n                ],\n                writablePerpMarketIndexes: [\n                    order.marketIndex\n                ]\n            };\n        } else {\n            remainingAccountsParams = {\n                userAccounts: [\n                    userAccount\n                ],\n                writableSpotMarketIndexes: [\n                    order.marketIndex,\n                    numericConstants_1.QUOTE_SPOT_MARKET_INDEX\n                ]\n            };\n        }\n        const remainingAccounts = this.getRemainingAccounts(remainingAccountsParams);\n        const orderId = order.orderId;\n        return await this.program.instruction.triggerOrder(orderId, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                filler: fillerPublicKey,\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async forceCancelOrders(userAccountPublicKey, user, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getForceCancelOrdersIx(userAccountPublicKey, user), txParams), [], this.opts);\n        return txSig;\n    }\n    async getForceCancelOrdersIx(userAccountPublicKey, userAccount) {\n        const fillerPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                userAccount\n            ],\n            writableSpotMarketIndexes: [\n                numericConstants_1.QUOTE_SPOT_MARKET_INDEX\n            ]\n        });\n        return await this.program.instruction.forceCancelOrders({\n            accounts: {\n                state: await this.getStatePublicKey(),\n                filler: fillerPublicKey,\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async updateUserIdle(userAccountPublicKey, user, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getUpdateUserIdleIx(userAccountPublicKey, user), txParams), [], this.opts);\n        return txSig;\n    }\n    async getUpdateUserIdleIx(userAccountPublicKey, userAccount) {\n        const fillerPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                userAccount\n            ]\n        });\n        return await this.program.instruction.updateUserIdle({\n            accounts: {\n                state: await this.getStatePublicKey(),\n                filler: fillerPublicKey,\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async updateUserOpenOrdersCount(userAccountPublicKey, user, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getUpdateUserOpenOrdersCountIx(userAccountPublicKey, user), txParams), [], this.opts);\n        return txSig;\n    }\n    async getUpdateUserOpenOrdersCountIx(userAccountPublicKey, userAccount) {\n        const fillerPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                userAccount\n            ]\n        });\n        return await this.program.instruction.updateUserOpenOrdersCount({\n            accounts: {\n                state: await this.getStatePublicKey(),\n                filler: fillerPublicKey,\n                user: userAccountPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async placeAndTakePerpOrder(orderParams, makerInfo, referrerInfo, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getPlaceAndTakePerpOrderIx(orderParams, makerInfo, referrerInfo), txParams), [], this.opts);\n        this.perpMarketLastSlotCache.set(orderParams.marketIndex, slot);\n        return txSig;\n    }\n    async getPlaceAndTakePerpOrderIx(orderParams, makerInfo, referrerInfo) {\n        orderParams = (0, orderParams_1.getOrderParams)(orderParams, {\n            marketType: types_1.MarketType.PERP\n        });\n        const userStatsPublicKey = await this.getUserStatsAccountPublicKey();\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        makerInfo = Array.isArray(makerInfo) ? makerInfo : makerInfo ? [\n            makerInfo\n        ] : [];\n        const userAccounts = [\n            this.getUserAccount()\n        ];\n        for (const maker of makerInfo){\n            userAccounts.push(maker.makerUserAccount);\n        }\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts,\n            useMarketLastSlotCache: true,\n            writablePerpMarketIndexes: [\n                orderParams.marketIndex\n            ]\n        });\n        for (const maker of makerInfo){\n            remainingAccounts.push({\n                pubkey: maker.maker,\n                isWritable: true,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: maker.makerStats,\n                isWritable: true,\n                isSigner: false\n            });\n        }\n        if (referrerInfo) {\n            const referrerIsMaker = makerInfo.find((maker)=>maker.maker.equals(referrerInfo.referrer)) !== undefined;\n            if (!referrerIsMaker) {\n                remainingAccounts.push({\n                    pubkey: referrerInfo.referrer,\n                    isWritable: true,\n                    isSigner: false\n                });\n                remainingAccounts.push({\n                    pubkey: referrerInfo.referrerStats,\n                    isWritable: true,\n                    isSigner: false\n                });\n            }\n        }\n        return await this.program.instruction.placeAndTakePerpOrder(orderParams, null, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async placeAndMakePerpOrder(orderParams, takerInfo, referrerInfo, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getPlaceAndMakePerpOrderIx(orderParams, takerInfo, referrerInfo), txParams), [], this.opts);\n        this.perpMarketLastSlotCache.set(orderParams.marketIndex, slot);\n        return txSig;\n    }\n    async getPlaceAndMakePerpOrderIx(orderParams, takerInfo, referrerInfo) {\n        orderParams = (0, orderParams_1.getOrderParams)(orderParams, {\n            marketType: types_1.MarketType.PERP\n        });\n        const userStatsPublicKey = this.getUserStatsAccountPublicKey();\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount(),\n                takerInfo.takerUserAccount\n            ],\n            useMarketLastSlotCache: true,\n            writablePerpMarketIndexes: [\n                orderParams.marketIndex\n            ]\n        });\n        if (referrerInfo) {\n            remainingAccounts.push({\n                pubkey: referrerInfo.referrer,\n                isWritable: true,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: referrerInfo.referrerStats,\n                isWritable: true,\n                isSigner: false\n            });\n        }\n        const takerOrderId = takerInfo.order.orderId;\n        return await this.program.instruction.placeAndMakePerpOrder(orderParams, takerOrderId, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                taker: takerInfo.taker,\n                takerStats: takerInfo.takerStats,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async placeAndTakeSpotOrder(orderParams, fulfillmentConfig, makerInfo, referrerInfo, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getPlaceAndTakeSpotOrderIx(orderParams, fulfillmentConfig, makerInfo, referrerInfo), txParams), [], this.opts);\n        this.spotMarketLastSlotCache.set(orderParams.marketIndex, slot);\n        this.spotMarketLastSlotCache.set(numericConstants_1.QUOTE_SPOT_MARKET_INDEX, slot);\n        return txSig;\n    }\n    async getPlaceAndTakeSpotOrderIx(orderParams, fulfillmentConfig, makerInfo, referrerInfo) {\n        orderParams = (0, orderParams_1.getOrderParams)(orderParams, {\n            marketType: types_1.MarketType.SPOT\n        });\n        const userStatsPublicKey = await this.getUserStatsAccountPublicKey();\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const userAccounts = [\n            this.getUserAccount()\n        ];\n        if (makerInfo !== undefined) {\n            userAccounts.push(makerInfo.makerUserAccount);\n        }\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts,\n            useMarketLastSlotCache: true,\n            writableSpotMarketIndexes: [\n                orderParams.marketIndex,\n                numericConstants_1.QUOTE_SPOT_MARKET_INDEX\n            ]\n        });\n        let makerOrderId = null;\n        if (makerInfo) {\n            makerOrderId = makerInfo.order.orderId;\n            remainingAccounts.push({\n                pubkey: makerInfo.maker,\n                isSigner: false,\n                isWritable: true\n            });\n            remainingAccounts.push({\n                pubkey: makerInfo.makerStats,\n                isSigner: false,\n                isWritable: true\n            });\n        }\n        if (referrerInfo) {\n            remainingAccounts.push({\n                pubkey: referrerInfo.referrer,\n                isWritable: true,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: referrerInfo.referrerStats,\n                isWritable: true,\n                isSigner: false\n            });\n        }\n        this.addSpotFulfillmentAccounts(orderParams.marketIndex, remainingAccounts, fulfillmentConfig);\n        return await this.program.instruction.placeAndTakeSpotOrder(orderParams, fulfillmentConfig ? fulfillmentConfig.fulfillmentType : null, makerOrderId, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async placeAndMakeSpotOrder(orderParams, takerInfo, fulfillmentConfig, referrerInfo, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getPlaceAndMakeSpotOrderIx(orderParams, takerInfo, fulfillmentConfig, referrerInfo), txParams), [], this.opts);\n        this.spotMarketLastSlotCache.set(orderParams.marketIndex, slot);\n        this.spotMarketLastSlotCache.set(numericConstants_1.QUOTE_SPOT_MARKET_INDEX, slot);\n        return txSig;\n    }\n    async getPlaceAndMakeSpotOrderIx(orderParams, takerInfo, fulfillmentConfig, referrerInfo) {\n        orderParams = (0, orderParams_1.getOrderParams)(orderParams, {\n            marketType: types_1.MarketType.SPOT\n        });\n        const userStatsPublicKey = this.getUserStatsAccountPublicKey();\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount(),\n                takerInfo.takerUserAccount\n            ],\n            useMarketLastSlotCache: true,\n            writableSpotMarketIndexes: [\n                orderParams.marketIndex,\n                numericConstants_1.QUOTE_SPOT_MARKET_INDEX\n            ]\n        });\n        if (referrerInfo) {\n            remainingAccounts.push({\n                pubkey: referrerInfo.referrer,\n                isWritable: true,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: referrerInfo.referrerStats,\n                isWritable: true,\n                isSigner: false\n            });\n        }\n        this.addSpotFulfillmentAccounts(orderParams.marketIndex, remainingAccounts, fulfillmentConfig);\n        const takerOrderId = takerInfo.order.orderId;\n        return await this.program.instruction.placeAndMakeSpotOrder(orderParams, takerOrderId, fulfillmentConfig ? fulfillmentConfig.fulfillmentType : null, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                taker: takerInfo.taker,\n                takerStats: takerInfo.takerStats,\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    /**\n     * @deprecated use {@link placePerpOrder} or {@link placeAndTakePerpOrder} instead\n     */ async closePosition(marketIndex, limitPrice) {\n        const userPosition = this.getUser().getPerpPosition(marketIndex);\n        if (!userPosition) {\n            throw Error(`No position in market ${marketIndex.toString()}`);\n        }\n        return await this.placeAndTakePerpOrder({\n            orderType: types_1.OrderType.MARKET,\n            marketIndex,\n            direction: (0, position_1.findDirectionToClose)(userPosition),\n            baseAssetAmount: userPosition.baseAssetAmount.abs(),\n            reduceOnly: true,\n            price: limitPrice\n        });\n    }\n    /**\n     * Modifies an open order by closing it and replacing it with a new order.\n     * @deprecated use modifyOrder instead\n     * @param orderId: The open order to modify\n     * @param newBaseAmount: The new base amount for the order. One of [newBaseAmount|newLimitPrice|newOraclePriceOffset] must be provided.\n     * @param newLimitPice: The new limit price for the order. One of [newBaseAmount|newLimitPrice|newOraclePriceOffset] must be provided.\n     * @param newOraclePriceOffset: The new oracle price offset for the order. One of [newBaseAmount|newLimitPrice|newOraclePriceOffset] must be provided.\n     * @returns\n     */ async modifyPerpOrder(orderId, newBaseAmount, newLimitPrice, newOraclePriceOffset) {\n        return this.modifyOrder({\n            orderId,\n            newBaseAmount,\n            newLimitPrice,\n            newOraclePriceOffset\n        });\n    }\n    /**\n     * Modifies an open order by closing it and replacing it with a new order.\n     * @deprecated use modifyOrderByUserOrderId instead\n     * @param userOrderId: The open order to modify\n     * @param newBaseAmount: The new base amount for the order. One of [newBaseAmount|newLimitPrice|newOraclePriceOffset] must be provided.\n     * @param newLimitPice: The new limit price for the order. One of [newBaseAmount|newLimitPrice|newOraclePriceOffset] must be provided.\n     * @param newOraclePriceOffset: The new oracle price offset for the order. One of [newBaseAmount|newLimitPrice|newOraclePriceOffset] must be provided.\n     * @returns\n     */ async modifyPerpOrderByUserOrderId(userOrderId, newBaseAmount, newLimitPrice, newOraclePriceOffset) {\n        return this.modifyOrderByUserOrderId({\n            userOrderId,\n            newBaseAmount,\n            newLimitPrice,\n            newOraclePriceOffset\n        });\n    }\n    /**\n     * Modifies an open order (spot or perp) by closing it and replacing it with a new order.\n     * @param orderParams.orderId: The open order to modify\n     * @param orderParams.newDirection: The new direction for the order\n     * @param orderParams.newBaseAmount: The new base amount for the order\n     * @param orderParams.newLimitPice: The new limit price for the order\n     * @param orderParams.newOraclePriceOffset: The new oracle price offset for the order\n     * @param orderParams.newTriggerPrice: Optional - Thew new trigger price for the order.\n     * @param orderParams.auctionDuration:\n     * @param orderParams.auctionStartPrice:\n     * @param orderParams.auctionEndPrice:\n     * @param orderParams.reduceOnly:\n     * @param orderParams.postOnly:\n     * @param orderParams.immediateOrCancel:\n     * @param orderParams.policy:\n     * @param orderParams.maxTs:\n     * @returns\n     */ async modifyOrder(orderParams, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getModifyOrderIx(orderParams), txParams), [], this.opts);\n        return txSig;\n    }\n    async getModifyOrderIx({ orderId, newDirection, newBaseAmount, newLimitPrice, newOraclePriceOffset, newTriggerPrice, newTriggerCondition, auctionDuration, auctionStartPrice, auctionEndPrice, reduceOnly, postOnly, immediateOrCancel, maxTs, policy }) {\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true\n        });\n        const orderParams = {\n            baseAssetAmount: newBaseAmount || null,\n            direction: newDirection || null,\n            price: newLimitPrice || null,\n            oraclePriceOffset: newOraclePriceOffset || null,\n            triggerPrice: newTriggerPrice || null,\n            triggerCondition: newTriggerCondition || null,\n            auctionDuration: auctionDuration || null,\n            auctionStartPrice: auctionStartPrice || null,\n            auctionEndPrice: auctionEndPrice || null,\n            reduceOnly: reduceOnly || null,\n            postOnly: postOnly || null,\n            immediateOrCancel: immediateOrCancel || null,\n            policy: policy || null,\n            maxTs: maxTs || null\n        };\n        return await this.program.instruction.modifyOrder(orderId, orderParams, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    /**\n     * Modifies an open order by closing it and replacing it with a new order.\n     * @param orderParams.userOrderId: The open order to modify\n     * @param orderParams.newDirection: The new direction for the order\n     * @param orderParams.newBaseAmount: The new base amount for the order\n     * @param orderParams.newLimitPice: The new limit price for the order\n     * @param orderParams.newOraclePriceOffset: The new oracle price offset for the order\n     * @param orderParams.newTriggerPrice: Optional - Thew new trigger price for the order.\n     * @param orderParams.auctionDuration: Only required if order type changed to market from something else\n     * @param orderParams.auctionStartPrice: Only required if order type changed to market from something else\n     * @param orderParams.auctionEndPrice: Only required if order type changed to market from something else\n     * @param orderParams.reduceOnly:\n     * @param orderParams.postOnly:\n     * @param orderParams.immediateOrCancel:\n     * @param orderParams.policy:\n     * @param orderParams.maxTs:\n     * @returns\n     */ async modifyOrderByUserOrderId(orderParams, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getModifyOrderByUserIdIx(orderParams), txParams), [], this.opts);\n        return txSig;\n    }\n    async getModifyOrderByUserIdIx({ userOrderId, newDirection, newBaseAmount, newLimitPrice, newOraclePriceOffset, newTriggerPrice, newTriggerCondition, auctionDuration, auctionStartPrice, auctionEndPrice, reduceOnly, postOnly, immediateOrCancel, maxTs, policy }) {\n        const userAccountPublicKey = await this.getUserAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true\n        });\n        const orderParams = {\n            baseAssetAmount: newBaseAmount || null,\n            direction: newDirection || null,\n            price: newLimitPrice || null,\n            oraclePriceOffset: newOraclePriceOffset || null,\n            triggerPrice: newTriggerPrice || null,\n            triggerCondition: newTriggerCondition || null,\n            auctionDuration: auctionDuration || null,\n            auctionStartPrice: auctionStartPrice || null,\n            auctionEndPrice: auctionEndPrice || null,\n            reduceOnly: reduceOnly || null,\n            postOnly: postOnly || null,\n            immediateOrCancel: immediateOrCancel || null,\n            policy: policy || null,\n            maxTs: maxTs || null\n        };\n        return await this.program.instruction.modifyOrderByUserId(userOrderId, orderParams, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey\n            },\n            remainingAccounts\n        });\n    }\n    async settlePNLs(users, marketIndexes) {\n        const ixs = await this.getSettlePNLsIxs(users, marketIndexes);\n        const tx = new web3_js_1.Transaction().add(web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({\n            units: 1000000\n        })).add(...ixs);\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async getSettlePNLsIxs(users, marketIndexes) {\n        const ixs = [];\n        for (const { settleeUserAccountPublicKey, settleeUserAccount } of users){\n            for (const marketIndex of marketIndexes){\n                ixs.push(await this.settlePNLIx(settleeUserAccountPublicKey, settleeUserAccount, marketIndex));\n            }\n        }\n        return ixs;\n    }\n    async settlePNL(settleeUserAccountPublicKey, settleeUserAccount, marketIndex, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.settlePNLIx(settleeUserAccountPublicKey, settleeUserAccount, marketIndex), txParams), [], this.opts);\n        return txSig;\n    }\n    async settlePNLIx(settleeUserAccountPublicKey, settleeUserAccount, marketIndex) {\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                settleeUserAccount\n            ],\n            writablePerpMarketIndexes: [\n                marketIndex\n            ],\n            writableSpotMarketIndexes: [\n                numericConstants_1.QUOTE_SPOT_MARKET_INDEX\n            ]\n        });\n        return await this.program.instruction.settlePnl(marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                authority: this.wallet.publicKey,\n                user: settleeUserAccountPublicKey,\n                spotMarketVault: this.getQuoteSpotMarketAccount().vault\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    async liquidatePerp(userAccountPublicKey, userAccount, marketIndex, maxBaseAssetAmount, limitPrice, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getLiquidatePerpIx(userAccountPublicKey, userAccount, marketIndex, maxBaseAssetAmount, limitPrice), txParams), [], this.opts);\n        this.perpMarketLastSlotCache.set(marketIndex, slot);\n        return txSig;\n    }\n    async getLiquidatePerpIx(userAccountPublicKey, userAccount, marketIndex, maxBaseAssetAmount, limitPrice) {\n        const userStatsPublicKey = (0, pda_1.getUserStatsAccountPublicKey)(this.program.programId, userAccount.authority);\n        const liquidatorPublicKey = await this.getUserAccountPublicKey();\n        const liquidatorStatsPublicKey = this.getUserStatsAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount(),\n                userAccount\n            ],\n            useMarketLastSlotCache: true,\n            writablePerpMarketIndexes: [\n                marketIndex\n            ]\n        });\n        return await this.program.instruction.liquidatePerp(marketIndex, maxBaseAssetAmount, limitPrice !== null && limitPrice !== void 0 ? limitPrice : null, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                authority: this.wallet.publicKey,\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                liquidator: liquidatorPublicKey,\n                liquidatorStats: liquidatorStatsPublicKey\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    async liquidateSpot(userAccountPublicKey, userAccount, assetMarketIndex, liabilityMarketIndex, maxLiabilityTransfer, limitPrice, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getLiquidateSpotIx(userAccountPublicKey, userAccount, assetMarketIndex, liabilityMarketIndex, maxLiabilityTransfer, limitPrice), txParams), [], this.opts);\n        this.spotMarketLastSlotCache.set(assetMarketIndex, slot);\n        this.spotMarketLastSlotCache.set(liabilityMarketIndex, slot);\n        return txSig;\n    }\n    async getLiquidateSpotIx(userAccountPublicKey, userAccount, assetMarketIndex, liabilityMarketIndex, maxLiabilityTransfer, limitPrice) {\n        const userStatsPublicKey = (0, pda_1.getUserStatsAccountPublicKey)(this.program.programId, userAccount.authority);\n        const liquidatorPublicKey = await this.getUserAccountPublicKey();\n        const liquidatorStatsPublicKey = await this.getUserStatsAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount(),\n                userAccount\n            ],\n            useMarketLastSlotCache: true,\n            writableSpotMarketIndexes: [\n                liabilityMarketIndex,\n                assetMarketIndex\n            ]\n        });\n        return await this.program.instruction.liquidateSpot(assetMarketIndex, liabilityMarketIndex, maxLiabilityTransfer, limitPrice || null, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                authority: this.wallet.publicKey,\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                liquidator: liquidatorPublicKey,\n                liquidatorStats: liquidatorStatsPublicKey\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    async liquidateBorrowForPerpPnl(userAccountPublicKey, userAccount, perpMarketIndex, liabilityMarketIndex, maxLiabilityTransfer, limitPrice, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getLiquidateBorrowForPerpPnlIx(userAccountPublicKey, userAccount, perpMarketIndex, liabilityMarketIndex, maxLiabilityTransfer, limitPrice), txParams), [], this.opts);\n        this.perpMarketLastSlotCache.set(perpMarketIndex, slot);\n        this.spotMarketLastSlotCache.set(liabilityMarketIndex, slot);\n        return txSig;\n    }\n    async getLiquidateBorrowForPerpPnlIx(userAccountPublicKey, userAccount, perpMarketIndex, liabilityMarketIndex, maxLiabilityTransfer, limitPrice) {\n        const userStatsPublicKey = (0, pda_1.getUserStatsAccountPublicKey)(this.program.programId, userAccount.authority);\n        const liquidatorPublicKey = await this.getUserAccountPublicKey();\n        const liquidatorStatsPublicKey = await this.getUserStatsAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount(),\n                userAccount\n            ],\n            writablePerpMarketIndexes: [\n                perpMarketIndex\n            ],\n            writableSpotMarketIndexes: [\n                liabilityMarketIndex\n            ]\n        });\n        return await this.program.instruction.liquidateBorrowForPerpPnl(perpMarketIndex, liabilityMarketIndex, maxLiabilityTransfer, limitPrice || null, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                authority: this.wallet.publicKey,\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                liquidator: liquidatorPublicKey,\n                liquidatorStats: liquidatorStatsPublicKey\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    async liquidatePerpPnlForDeposit(userAccountPublicKey, userAccount, perpMarketIndex, assetMarketIndex, maxPnlTransfer, limitPrice, txParams) {\n        const { txSig, slot } = await this.sendTransaction(await this.buildTransaction(await this.getLiquidatePerpPnlForDepositIx(userAccountPublicKey, userAccount, perpMarketIndex, assetMarketIndex, maxPnlTransfer, limitPrice), txParams), [], this.opts);\n        this.perpMarketLastSlotCache.set(perpMarketIndex, slot);\n        this.spotMarketLastSlotCache.set(assetMarketIndex, slot);\n        return txSig;\n    }\n    async getLiquidatePerpPnlForDepositIx(userAccountPublicKey, userAccount, perpMarketIndex, assetMarketIndex, maxPnlTransfer, limitPrice) {\n        const userStatsPublicKey = (0, pda_1.getUserStatsAccountPublicKey)(this.program.programId, userAccount.authority);\n        const liquidatorPublicKey = await this.getUserAccountPublicKey();\n        const liquidatorStatsPublicKey = await this.getUserStatsAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount(),\n                userAccount\n            ],\n            writablePerpMarketIndexes: [\n                perpMarketIndex\n            ],\n            writableSpotMarketIndexes: [\n                assetMarketIndex\n            ]\n        });\n        return await this.program.instruction.liquidatePerpPnlForDeposit(perpMarketIndex, assetMarketIndex, maxPnlTransfer, limitPrice || null, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                authority: this.wallet.publicKey,\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                liquidator: liquidatorPublicKey,\n                liquidatorStats: liquidatorStatsPublicKey\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    async resolvePerpBankruptcy(userAccountPublicKey, userAccount, marketIndex, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getResolvePerpBankruptcyIx(userAccountPublicKey, userAccount, marketIndex), txParams), [], this.opts);\n        return txSig;\n    }\n    async getResolvePerpBankruptcyIx(userAccountPublicKey, userAccount, marketIndex) {\n        const userStatsPublicKey = (0, pda_1.getUserStatsAccountPublicKey)(this.program.programId, userAccount.authority);\n        const liquidatorPublicKey = await this.getUserAccountPublicKey();\n        const liquidatorStatsPublicKey = await this.getUserStatsAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount(),\n                userAccount\n            ],\n            writablePerpMarketIndexes: [\n                marketIndex\n            ],\n            writableSpotMarketIndexes: [\n                numericConstants_1.QUOTE_SPOT_MARKET_INDEX\n            ]\n        });\n        const spotMarket = this.getQuoteSpotMarketAccount();\n        return await this.program.instruction.resolvePerpBankruptcy(numericConstants_1.QUOTE_SPOT_MARKET_INDEX, marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                authority: this.wallet.publicKey,\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                liquidator: liquidatorPublicKey,\n                liquidatorStats: liquidatorStatsPublicKey,\n                spotMarketVault: spotMarket.vault,\n                insuranceFundVault: spotMarket.insuranceFund.vault,\n                driftSigner: this.getSignerPublicKey(),\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    async resolveSpotBankruptcy(userAccountPublicKey, userAccount, marketIndex, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getResolveSpotBankruptcyIx(userAccountPublicKey, userAccount, marketIndex), txParams), [], this.opts);\n        return txSig;\n    }\n    async getResolveSpotBankruptcyIx(userAccountPublicKey, userAccount, marketIndex) {\n        const userStatsPublicKey = (0, pda_1.getUserStatsAccountPublicKey)(this.program.programId, userAccount.authority);\n        const liquidatorPublicKey = await this.getUserAccountPublicKey();\n        const liquidatorStatsPublicKey = await this.getUserStatsAccountPublicKey();\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount(),\n                userAccount\n            ],\n            writableSpotMarketIndexes: [\n                marketIndex\n            ]\n        });\n        const spotMarket = this.getSpotMarketAccount(marketIndex);\n        return await this.program.instruction.resolveSpotBankruptcy(marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                authority: this.wallet.publicKey,\n                user: userAccountPublicKey,\n                userStats: userStatsPublicKey,\n                liquidatorStats: liquidatorStatsPublicKey,\n                liquidator: liquidatorPublicKey,\n                spotMarketVault: spotMarket.vault,\n                insuranceFundVault: spotMarket.insuranceFund.vault,\n                driftSigner: this.getSignerPublicKey(),\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    async updateFundingRate(perpMarketIndex, oracle, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getUpdateFundingRateIx(perpMarketIndex, oracle), txParams), [], this.opts);\n        return txSig;\n    }\n    async getUpdateFundingRateIx(perpMarketIndex, oracle) {\n        const perpMarketPublicKey = await (0, pda_1.getPerpMarketPublicKey)(this.program.programId, perpMarketIndex);\n        return await this.program.instruction.updateFundingRate(perpMarketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                perpMarket: perpMarketPublicKey,\n                oracle: oracle\n            }\n        });\n    }\n    async updatePerpBidAskTwap(perpMarketIndex, makers, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getUpdatePerpBidAskTwapIx(perpMarketIndex, makers), txParams), [], this.opts);\n        return txSig;\n    }\n    async getUpdatePerpBidAskTwapIx(perpMarketIndex, makers) {\n        const perpMarket = this.getPerpMarketAccount(perpMarketIndex);\n        const remainingAccounts = [];\n        for (const [maker, makerStats] of makers){\n            remainingAccounts.push({\n                pubkey: maker,\n                isWritable: false,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: makerStats,\n                isWritable: false,\n                isSigner: false\n            });\n        }\n        return await this.program.instruction.updatePerpBidAskTwap({\n            accounts: {\n                state: await this.getStatePublicKey(),\n                perpMarket: perpMarket.pubkey,\n                oracle: perpMarket.amm.oracle,\n                authority: this.wallet.publicKey,\n                keeperStats: this.getUserStatsAccountPublicKey()\n            },\n            remainingAccounts\n        });\n    }\n    async settleFundingPayment(userAccountPublicKey, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getSettleFundingPaymentIx(userAccountPublicKey), txParams), [], this.opts);\n        return txSig;\n    }\n    async getSettleFundingPaymentIx(userAccountPublicKey) {\n        const userAccount = await this.program.account.user.fetch(userAccountPublicKey);\n        const writablePerpMarketIndexes = [];\n        for (const position of userAccount.perpPositions){\n            if (!(0, position_1.positionIsAvailable)(position)) {\n                writablePerpMarketIndexes.push(position.marketIndex);\n            }\n        }\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                userAccount\n            ],\n            writablePerpMarketIndexes\n        });\n        return await this.program.instruction.settleFundingPayment({\n            accounts: {\n                state: await this.getStatePublicKey(),\n                user: userAccountPublicKey\n            },\n            remainingAccounts\n        });\n    }\n    triggerEvent(eventName, data) {\n        this.eventEmitter.emit(eventName, data);\n    }\n    getOracleDataForPerpMarket(marketIndex) {\n        const oracleKey = this.getPerpMarketAccount(marketIndex).amm.oracle;\n        const oracleData = this.getOraclePriceDataAndSlot(oracleKey).data;\n        return oracleData;\n    }\n    getOracleDataForSpotMarket(marketIndex) {\n        const oracleKey = this.getSpotMarketAccount(marketIndex).oracle;\n        const oracleData = this.getOraclePriceDataAndSlot(oracleKey).data;\n        return oracleData;\n    }\n    async initializeInsuranceFundStake(marketIndex, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getInitializeInsuranceFundStakeIx(marketIndex), txParams), [], this.opts);\n        return txSig;\n    }\n    async getInitializeInsuranceFundStakeIx(marketIndex) {\n        const ifStakeAccountPublicKey = (0, pda_1.getInsuranceFundStakeAccountPublicKey)(this.program.programId, this.wallet.publicKey, marketIndex);\n        return await this.program.instruction.initializeInsuranceFundStake(marketIndex, {\n            accounts: {\n                insuranceFundStake: ifStakeAccountPublicKey,\n                spotMarket: this.getSpotMarketAccount(marketIndex).pubkey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey,\n                payer: this.wallet.publicKey,\n                rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n                systemProgram: anchor.web3.SystemProgram.programId,\n                state: await this.getStatePublicKey()\n            }\n        });\n    }\n    async getAddInsuranceFundStakeIx(marketIndex, amount, collateralAccountPublicKey) {\n        const spotMarket = this.getSpotMarketAccount(marketIndex);\n        const ifStakeAccountPublicKey = (0, pda_1.getInsuranceFundStakeAccountPublicKey)(this.program.programId, this.wallet.publicKey, marketIndex);\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true,\n            writableSpotMarketIndexes: [\n                marketIndex\n            ]\n        });\n        const ix = this.program.instruction.addInsuranceFundStake(marketIndex, amount, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                spotMarket: spotMarket.pubkey,\n                insuranceFundStake: ifStakeAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey,\n                spotMarketVault: spotMarket.vault,\n                insuranceFundVault: spotMarket.insuranceFund.vault,\n                driftSigner: this.getSignerPublicKey(),\n                userTokenAccount: collateralAccountPublicKey,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            },\n            remainingAccounts\n        });\n        return ix;\n    }\n    /**\n     * Add to an insurance fund stake and optionally initialize the account\n     */ async addInsuranceFundStake({ marketIndex, amount, collateralAccountPublicKey, initializeStakeAccount, fromSubaccount }) {\n        const tx = new web3_js_1.Transaction();\n        const additionalSigners = [];\n        const spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n        const isSolMarket = spotMarketAccount.mint.equals(spotMarkets_1.WRAPPED_SOL_MINT);\n        const createWSOLTokenAccount = isSolMarket && collateralAccountPublicKey.equals(this.wallet.publicKey);\n        let tokenAccount;\n        if (createWSOLTokenAccount) {\n            const { ixs, pubkey } = await this.getWrappedSolAccountCreationIxs(amount, true);\n            tokenAccount = pubkey;\n            ixs.forEach((ix)=>{\n                tx.add(ix);\n            });\n        } else {\n            tokenAccount = collateralAccountPublicKey;\n        }\n        if (fromSubaccount) {\n            const withdrawIx = await this.getWithdrawIx(amount, marketIndex, tokenAccount);\n            tx.add(withdrawIx);\n        }\n        if (initializeStakeAccount) {\n            const initializeIx = await this.getInitializeInsuranceFundStakeIx(marketIndex);\n            tx.add(initializeIx);\n        }\n        const addFundsIx = await this.getAddInsuranceFundStakeIx(marketIndex, amount, tokenAccount);\n        tx.add(addFundsIx);\n        if (createWSOLTokenAccount) {\n            tx.add((0, spl_token_1.createCloseAccountInstruction)(tokenAccount, this.wallet.publicKey, this.wallet.publicKey, []));\n        }\n        const { txSig } = await this.sendTransaction(tx, additionalSigners, this.opts);\n        return txSig;\n    }\n    async requestRemoveInsuranceFundStake(marketIndex, amount) {\n        const spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n        const ifStakeAccountPublicKey = (0, pda_1.getInsuranceFundStakeAccountPublicKey)(this.program.programId, this.wallet.publicKey, marketIndex);\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true,\n            writableSpotMarketIndexes: [\n                marketIndex\n            ]\n        });\n        const tx = await this.program.transaction.requestRemoveInsuranceFundStake(marketIndex, amount, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                spotMarket: spotMarketAccount.pubkey,\n                insuranceFundStake: ifStakeAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey,\n                insuranceFundVault: spotMarketAccount.insuranceFund.vault\n            },\n            remainingAccounts\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async cancelRequestRemoveInsuranceFundStake(marketIndex) {\n        const spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n        const ifStakeAccountPublicKey = (0, pda_1.getInsuranceFundStakeAccountPublicKey)(this.program.programId, this.wallet.publicKey, marketIndex);\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true,\n            writableSpotMarketIndexes: [\n                marketIndex\n            ]\n        });\n        const tx = await this.program.transaction.cancelRequestRemoveInsuranceFundStake(marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                spotMarket: spotMarketAccount.pubkey,\n                insuranceFundStake: ifStakeAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey,\n                insuranceFundVault: spotMarketAccount.insuranceFund.vault\n            },\n            remainingAccounts\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async removeInsuranceFundStake(marketIndex, collateralAccountPublicKey) {\n        const tx = new web3_js_1.Transaction();\n        const spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n        const ifStakeAccountPublicKey = (0, pda_1.getInsuranceFundStakeAccountPublicKey)(this.program.programId, this.wallet.publicKey, marketIndex);\n        const additionalSigners = [];\n        const isSolMarket = spotMarketAccount.mint.equals(spotMarkets_1.WRAPPED_SOL_MINT);\n        const createWSOLTokenAccount = isSolMarket && collateralAccountPublicKey.equals(this.wallet.publicKey);\n        let tokenAccount;\n        if (createWSOLTokenAccount) {\n            const { ixs, pubkey } = await this.getWrappedSolAccountCreationIxs(numericConstants_1.ZERO, true);\n            tokenAccount = pubkey;\n            ixs.forEach((ix)=>{\n                tx.add(ix);\n            });\n        } else {\n            tokenAccount = collateralAccountPublicKey;\n        }\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true,\n            writableSpotMarketIndexes: [\n                marketIndex\n            ]\n        });\n        const removeStakeIx = await this.program.instruction.removeInsuranceFundStake(marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                spotMarket: spotMarketAccount.pubkey,\n                insuranceFundStake: ifStakeAccountPublicKey,\n                userStats: this.getUserStatsAccountPublicKey(),\n                authority: this.wallet.publicKey,\n                insuranceFundVault: spotMarketAccount.insuranceFund.vault,\n                driftSigner: this.getSignerPublicKey(),\n                userTokenAccount: tokenAccount,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            },\n            remainingAccounts\n        });\n        tx.add(removeStakeIx);\n        // Close the wrapped sol account at the end of the transaction\n        if (createWSOLTokenAccount) {\n            tx.add((0, spl_token_1.createCloseAccountInstruction)(tokenAccount, this.wallet.publicKey, this.wallet.publicKey, []));\n        }\n        const { txSig } = await this.sendTransaction(tx, additionalSigners, this.opts);\n        return txSig;\n    }\n    async settleRevenueToInsuranceFund(marketIndex) {\n        const spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true,\n            writableSpotMarketIndexes: [\n                marketIndex\n            ]\n        });\n        const tx = await this.program.transaction.settleRevenueToInsuranceFund(marketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                spotMarket: spotMarketAccount.pubkey,\n                spotMarketVault: spotMarketAccount.vault,\n                driftSigner: this.getSignerPublicKey(),\n                insuranceFundVault: spotMarketAccount.insuranceFund.vault,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            },\n            remainingAccounts\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    async resolvePerpPnlDeficit(spotMarketIndex, perpMarketIndex, txParams) {\n        const { txSig } = await this.sendTransaction(await this.buildTransaction(await this.getResolvePerpPnlDeficitIx(spotMarketIndex, perpMarketIndex), txParams), [], this.opts);\n        return txSig;\n    }\n    async getResolvePerpPnlDeficitIx(spotMarketIndex, perpMarketIndex) {\n        const remainingAccounts = this.getRemainingAccounts({\n            userAccounts: [\n                this.getUserAccount()\n            ],\n            useMarketLastSlotCache: true,\n            writablePerpMarketIndexes: [\n                perpMarketIndex\n            ],\n            writableSpotMarketIndexes: [\n                spotMarketIndex\n            ]\n        });\n        const spotMarket = this.getSpotMarketAccount(spotMarketIndex);\n        return await this.program.instruction.resolvePerpPnlDeficit(spotMarketIndex, perpMarketIndex, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                authority: this.wallet.publicKey,\n                spotMarketVault: spotMarket.vault,\n                insuranceFundVault: spotMarket.insuranceFund.vault,\n                driftSigner: this.getSignerPublicKey(),\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            },\n            remainingAccounts: remainingAccounts\n        });\n    }\n    async depositIntoSpotMarketRevenuePool(marketIndex, amount, userTokenAccountPublicKey) {\n        const spotMarket = await this.getSpotMarketAccount(marketIndex);\n        const tx = await this.program.transaction.depositIntoSpotMarketRevenuePool(amount, {\n            accounts: {\n                state: await this.getStatePublicKey(),\n                spotMarket: spotMarket.pubkey,\n                authority: this.wallet.publicKey,\n                spotMarketVault: spotMarket.vault,\n                userTokenAccount: userTokenAccountPublicKey,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            }\n        });\n        const { txSig } = await this.sendTransaction(tx, [], this.opts);\n        return txSig;\n    }\n    getPerpMarketExtendedInfo(marketIndex) {\n        var _a, _b;\n        const marketAccount = this.getPerpMarketAccount(marketIndex);\n        const quoteAccount = this.getSpotMarketAccount(numericConstants_1.QUOTE_SPOT_MARKET_INDEX);\n        const extendedInfo = {\n            marketIndex,\n            minOrderSize: (_a = marketAccount.amm) === null || _a === void 0 ? void 0 : _a.minOrderSize,\n            marginMaintenance: marketAccount.marginRatioMaintenance,\n            pnlPoolValue: (0, spotBalance_1.getTokenAmount)((_b = marketAccount.pnlPool) === null || _b === void 0 ? void 0 : _b.scaledBalance, quoteAccount, types_1.SpotBalanceType.DEPOSIT),\n            contractTier: marketAccount.contractTier,\n            availableInsurance: (0, market_1.calculateMarketMaxAvailableInsurance)(marketAccount, quoteAccount)\n        };\n        return extendedInfo;\n    }\n    /**\n     * Returns the market index and type for a given market name\n     * E.g. \"SOL-PERP\" -> { marketIndex: 0, marketType: MarketType.PERP }\n     *\n     * @param name\n     */ getMarketIndexAndType(name) {\n        name = name.toUpperCase();\n        for (const perpMarketAccount of this.getPerpMarketAccounts()){\n            if ((0, userName_1.decodeName)(perpMarketAccount.name).toUpperCase() === name) {\n                return {\n                    marketIndex: perpMarketAccount.marketIndex,\n                    marketType: types_1.MarketType.PERP\n                };\n            }\n        }\n        for (const spotMarketAccount of this.getSpotMarketAccounts()){\n            if ((0, userName_1.decodeName)(spotMarketAccount.name).toUpperCase() === name) {\n                return {\n                    marketIndex: spotMarketAccount.marketIndex,\n                    marketType: types_1.MarketType.SPOT\n                };\n            }\n        }\n        return undefined;\n    }\n    sendTransaction(tx, additionalSigners, opts, preSigned) {\n        // @ts-ignore\n        if (!tx.message) {\n            return this.txSender.send(tx, additionalSigners, opts, preSigned);\n        } else {\n            return this.txSender.sendVersionedTransaction(tx, additionalSigners, opts, preSigned);\n        }\n    }\n    async buildTransaction(instructions, txParams, txVersion, lookupTables) {\n        var _a, _b;\n        const allIx = [];\n        const computeUnits = (_a = txParams === null || txParams === void 0 ? void 0 : txParams.computeUnits) !== null && _a !== void 0 ? _a : this.txParams.computeUnits;\n        if (computeUnits !== 200000) {\n            allIx.push(web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({\n                units: computeUnits\n            }));\n        }\n        const computeUnitsPrice = (_b = txParams === null || txParams === void 0 ? void 0 : txParams.computeUnitsPrice) !== null && _b !== void 0 ? _b : this.txParams.computeUnitsPrice;\n        if (computeUnitsPrice !== 0) {\n            allIx.push(web3_js_1.ComputeBudgetProgram.setComputeUnitPrice({\n                microLamports: computeUnitsPrice\n            }));\n        }\n        if (Array.isArray(instructions)) {\n            allIx.push(...instructions);\n        } else {\n            allIx.push(instructions);\n        }\n        txVersion = txVersion !== null && txVersion !== void 0 ? txVersion : this.txVersion;\n        if (txVersion === \"legacy\") {\n            return new web3_js_1.Transaction().add(...allIx);\n        } else {\n            const marketLookupTable = await this.fetchMarketLookupTableAccount();\n            lookupTables = lookupTables ? [\n                ...lookupTables,\n                marketLookupTable\n            ] : [\n                marketLookupTable\n            ];\n            const message = new web3_js_1.TransactionMessage({\n                payerKey: this.provider.wallet.publicKey,\n                recentBlockhash: (await this.provider.connection.getRecentBlockhash(this.opts.preflightCommitment)).blockhash,\n                instructions: allIx\n            }).compileToV0Message(lookupTables);\n            return new web3_js_1.VersionedTransaction(message);\n        }\n    }\n}\nexports.DriftClient = DriftClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/driftClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/driftClientConfig.js":
/*!***************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/driftClientConfig.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9kcmlmdENsaWVudENvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9kcmlmdENsaWVudENvbmZpZy5qcz83MjUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/driftClientConfig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/events/eventList.js":
/*!**************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/events/eventList.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EventList = void 0;\nclass Node {\n    constructor(event, next, prev){\n        this.event = event;\n        this.next = next;\n        this.prev = prev;\n    }\n}\nclass EventList {\n    constructor(eventType, maxSize, sortFn, orderDirection){\n        this.eventType = eventType;\n        this.maxSize = maxSize;\n        this.sortFn = sortFn;\n        this.orderDirection = orderDirection;\n        this.size = 0;\n    }\n    insert(event) {\n        this.size++;\n        const newNode = new Node(event);\n        if (this.head === undefined) {\n            this.head = this.tail = newNode;\n            return;\n        }\n        if (this.sortFn(this.head.event, newNode.event) === (this.orderDirection === \"asc\" ? \"less than\" : \"greater than\")) {\n            this.head.prev = newNode;\n            newNode.next = this.head;\n            this.head = newNode;\n        } else {\n            let currentNode = this.head;\n            while(currentNode.next !== undefined && this.sortFn(currentNode.next.event, newNode.event) !== (this.orderDirection === \"asc\" ? \"less than\" : \"greater than\")){\n                currentNode = currentNode.next;\n            }\n            newNode.next = currentNode.next;\n            if (currentNode.next !== undefined) {\n                newNode.next.prev = newNode;\n            } else {\n                this.tail = newNode;\n            }\n            currentNode.next = newNode;\n            newNode.prev = currentNode;\n        }\n        if (this.size > this.maxSize) {\n            this.detach();\n        }\n    }\n    detach() {\n        const node = this.tail;\n        if (node.prev !== undefined) {\n            node.prev.next = node.next;\n        } else {\n            this.head = node.next;\n        }\n        if (node.next !== undefined) {\n            node.next.prev = node.prev;\n        } else {\n            this.tail = node.prev;\n        }\n        this.size--;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    *[Symbol.iterator]() {\n        let node = this.head;\n        while(node){\n            yield node.event;\n            node = node.next;\n        }\n    }\n}\nexports.EventList = EventList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9ldmVudHMvZXZlbnRMaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pCLE1BQU1HO0lBQ0ZDLFlBQVlDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxJQUFJLENBQUU7UUFDM0IsSUFBSSxDQUFDRixLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQyxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUdBO0lBQ2hCO0FBQ0o7QUFDQSxNQUFNTDtJQUNGRSxZQUFZSSxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxjQUFjLENBQUU7UUFDcEQsSUFBSSxDQUFDSCxTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsY0FBYyxHQUFHQTtRQUN0QixJQUFJLENBQUNDLElBQUksR0FBRztJQUNoQjtJQUNBQyxPQUFPUixLQUFLLEVBQUU7UUFDVixJQUFJLENBQUNPLElBQUk7UUFDVCxNQUFNRSxVQUFVLElBQUlYLEtBQUtFO1FBQ3pCLElBQUksSUFBSSxDQUFDVSxJQUFJLEtBQUtDLFdBQVc7WUFDekIsSUFBSSxDQUFDRCxJQUFJLEdBQUcsSUFBSSxDQUFDRSxJQUFJLEdBQUdIO1lBQ3hCO1FBQ0o7UUFDQSxJQUFJLElBQUksQ0FBQ0osTUFBTSxDQUFDLElBQUksQ0FBQ0ssSUFBSSxDQUFDVixLQUFLLEVBQUVTLFFBQVFULEtBQUssTUFDekMsS0FBSSxDQUFDTSxjQUFjLEtBQUssUUFBUSxjQUFjLGNBQWEsR0FBSTtZQUNoRSxJQUFJLENBQUNJLElBQUksQ0FBQ1IsSUFBSSxHQUFHTztZQUNqQkEsUUFBUVIsSUFBSSxHQUFHLElBQUksQ0FBQ1MsSUFBSTtZQUN4QixJQUFJLENBQUNBLElBQUksR0FBR0Q7UUFDaEIsT0FDSztZQUNELElBQUlJLGNBQWMsSUFBSSxDQUFDSCxJQUFJO1lBQzNCLE1BQU9HLFlBQVlaLElBQUksS0FBS1UsYUFDeEIsSUFBSSxDQUFDTixNQUFNLENBQUNRLFlBQVlaLElBQUksQ0FBQ0QsS0FBSyxFQUFFUyxRQUFRVCxLQUFLLE1BQzVDLEtBQUksQ0FBQ00sY0FBYyxLQUFLLFFBQVEsY0FBYyxjQUFhLEVBQUk7Z0JBQ3BFTyxjQUFjQSxZQUFZWixJQUFJO1lBQ2xDO1lBQ0FRLFFBQVFSLElBQUksR0FBR1ksWUFBWVosSUFBSTtZQUMvQixJQUFJWSxZQUFZWixJQUFJLEtBQUtVLFdBQVc7Z0JBQ2hDRixRQUFRUixJQUFJLENBQUNDLElBQUksR0FBR087WUFDeEIsT0FDSztnQkFDRCxJQUFJLENBQUNHLElBQUksR0FBR0g7WUFDaEI7WUFDQUksWUFBWVosSUFBSSxHQUFHUTtZQUNuQkEsUUFBUVAsSUFBSSxHQUFHVztRQUNuQjtRQUNBLElBQUksSUFBSSxDQUFDTixJQUFJLEdBQUcsSUFBSSxDQUFDSCxPQUFPLEVBQUU7WUFDMUIsSUFBSSxDQUFDVSxNQUFNO1FBQ2Y7SUFDSjtJQUNBQSxTQUFTO1FBQ0wsTUFBTUMsT0FBTyxJQUFJLENBQUNILElBQUk7UUFDdEIsSUFBSUcsS0FBS2IsSUFBSSxLQUFLUyxXQUFXO1lBQ3pCSSxLQUFLYixJQUFJLENBQUNELElBQUksR0FBR2MsS0FBS2QsSUFBSTtRQUM5QixPQUNLO1lBQ0QsSUFBSSxDQUFDUyxJQUFJLEdBQUdLLEtBQUtkLElBQUk7UUFDekI7UUFDQSxJQUFJYyxLQUFLZCxJQUFJLEtBQUtVLFdBQVc7WUFDekJJLEtBQUtkLElBQUksQ0FBQ0MsSUFBSSxHQUFHYSxLQUFLYixJQUFJO1FBQzlCLE9BQ0s7WUFDRCxJQUFJLENBQUNVLElBQUksR0FBR0csS0FBS2IsSUFBSTtRQUN6QjtRQUNBLElBQUksQ0FBQ0ssSUFBSTtJQUNiO0lBQ0FTLFVBQVU7UUFDTixPQUFPQyxNQUFNQyxJQUFJLENBQUMsSUFBSTtJQUMxQjtJQUNBLENBQUMsQ0FBQ0MsT0FBT0MsUUFBUSxDQUFDLEdBQUc7UUFDakIsSUFBSUwsT0FBTyxJQUFJLENBQUNMLElBQUk7UUFDcEIsTUFBT0ssS0FBTTtZQUNULE1BQU1BLEtBQUtmLEtBQUs7WUFDaEJlLE9BQU9BLEtBQUtkLElBQUk7UUFDcEI7SUFDSjtBQUNKO0FBQ0FOLGlCQUFpQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9ldmVudHMvZXZlbnRMaXN0LmpzPzY2YmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV2ZW50TGlzdCA9IHZvaWQgMDtcbmNsYXNzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGV2ZW50LCBuZXh0LCBwcmV2KSB7XG4gICAgICAgIHRoaXMuZXZlbnQgPSBldmVudDtcbiAgICAgICAgdGhpcy5uZXh0ID0gbmV4dDtcbiAgICAgICAgdGhpcy5wcmV2ID0gcHJldjtcbiAgICB9XG59XG5jbGFzcyBFdmVudExpc3Qge1xuICAgIGNvbnN0cnVjdG9yKGV2ZW50VHlwZSwgbWF4U2l6ZSwgc29ydEZuLCBvcmRlckRpcmVjdGlvbikge1xuICAgICAgICB0aGlzLmV2ZW50VHlwZSA9IGV2ZW50VHlwZTtcbiAgICAgICAgdGhpcy5tYXhTaXplID0gbWF4U2l6ZTtcbiAgICAgICAgdGhpcy5zb3J0Rm4gPSBzb3J0Rm47XG4gICAgICAgIHRoaXMub3JkZXJEaXJlY3Rpb24gPSBvcmRlckRpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG4gICAgaW5zZXJ0KGV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2l6ZSsrO1xuICAgICAgICBjb25zdCBuZXdOb2RlID0gbmV3IE5vZGUoZXZlbnQpO1xuICAgICAgICBpZiAodGhpcy5oZWFkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5ld05vZGU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc29ydEZuKHRoaXMuaGVhZC5ldmVudCwgbmV3Tm9kZS5ldmVudCkgPT09XG4gICAgICAgICAgICAodGhpcy5vcmRlckRpcmVjdGlvbiA9PT0gJ2FzYycgPyAnbGVzcyB0aGFuJyA6ICdncmVhdGVyIHRoYW4nKSkge1xuICAgICAgICAgICAgdGhpcy5oZWFkLnByZXYgPSBuZXdOb2RlO1xuICAgICAgICAgICAgbmV3Tm9kZS5uZXh0ID0gdGhpcy5oZWFkO1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gbmV3Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50Tm9kZSA9IHRoaXMuaGVhZDtcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50Tm9kZS5uZXh0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRGbihjdXJyZW50Tm9kZS5uZXh0LmV2ZW50LCBuZXdOb2RlLmV2ZW50KSAhPT1cbiAgICAgICAgICAgICAgICAgICAgKHRoaXMub3JkZXJEaXJlY3Rpb24gPT09ICdhc2MnID8gJ2xlc3MgdGhhbicgOiAnZ3JlYXRlciB0aGFuJykpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdOb2RlLm5leHQgPSBjdXJyZW50Tm9kZS5uZXh0O1xuICAgICAgICAgICAgaWYgKGN1cnJlbnROb2RlLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG5ld05vZGUubmV4dC5wcmV2ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudGFpbCA9IG5ld05vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5uZXh0ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIG5ld05vZGUucHJldiA9IGN1cnJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNpemUgPiB0aGlzLm1heFNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuZGV0YWNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGV0YWNoKCkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy50YWlsO1xuICAgICAgICBpZiAobm9kZS5wcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gbm9kZS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRhaWwgPSBub2RlLnByZXY7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaXplLS07XG4gICAgfVxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMpO1xuICAgIH1cbiAgICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIGxldCBub2RlID0gdGhpcy5oZWFkO1xuICAgICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICAgICAgeWllbGQgbm9kZS5ldmVudDtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkV2ZW50TGlzdCA9IEV2ZW50TGlzdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkV2ZW50TGlzdCIsIk5vZGUiLCJjb25zdHJ1Y3RvciIsImV2ZW50IiwibmV4dCIsInByZXYiLCJldmVudFR5cGUiLCJtYXhTaXplIiwic29ydEZuIiwib3JkZXJEaXJlY3Rpb24iLCJzaXplIiwiaW5zZXJ0IiwibmV3Tm9kZSIsImhlYWQiLCJ1bmRlZmluZWQiLCJ0YWlsIiwiY3VycmVudE5vZGUiLCJkZXRhY2giLCJub2RlIiwidG9BcnJheSIsIkFycmF5IiwiZnJvbSIsIlN5bWJvbCIsIml0ZXJhdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/events/eventList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/events/eventSubscriber.js":
/*!********************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/events/eventSubscriber.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EventSubscriber = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/types.js\");\nconst txEventCache_1 = __webpack_require__(/*! ./txEventCache */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/txEventCache.js\");\nconst eventList_1 = __webpack_require__(/*! ./eventList */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/eventList.js\");\nconst pollingLogProvider_1 = __webpack_require__(/*! ./pollingLogProvider */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/pollingLogProvider.js\");\nconst fetchLogs_1 = __webpack_require__(/*! ./fetchLogs */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/fetchLogs.js\");\nconst webSocketLogProvider_1 = __webpack_require__(/*! ./webSocketLogProvider */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/webSocketLogProvider.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst sort_1 = __webpack_require__(/*! ./sort */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/sort.js\");\nconst parse_1 = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/parse.js\");\nclass EventSubscriber {\n    constructor(connection, program, options = types_1.DefaultEventSubscriptionOptions){\n        var _a;\n        this.connection = connection;\n        this.program = program;\n        this.options = options;\n        this.awaitTxPromises = new Map();\n        this.awaitTxResolver = new Map();\n        this.options = Object.assign({}, types_1.DefaultEventSubscriptionOptions, options);\n        this.address = (_a = this.options.address) !== null && _a !== void 0 ? _a : program.programId;\n        this.txEventCache = new txEventCache_1.TxEventCache(this.options.maxTx);\n        this.eventListMap = new Map();\n        for (const eventType of this.options.eventTypes){\n            this.eventListMap.set(eventType, new eventList_1.EventList(eventType, this.options.maxEventsPerType, (0, sort_1.getSortFn)(this.options.orderBy, this.options.orderDir, eventType), this.options.orderDir));\n        }\n        this.eventEmitter = new events_1.EventEmitter();\n        if (this.options.logProviderConfig.type === \"websocket\") {\n            this.logProvider = new webSocketLogProvider_1.WebSocketLogProvider(this.connection, this.address, this.options.commitment);\n        } else {\n            this.logProvider = new pollingLogProvider_1.PollingLogProvider(this.connection, this.address, options.commitment, this.options.logProviderConfig.frequency, this.options.logProviderConfig.batchSize);\n        }\n    }\n    async subscribe() {\n        try {\n            if (this.logProvider.isSubscribed()) {\n                return true;\n            }\n            this.logProvider.subscribe((txSig, slot, logs, mostRecentBlockTime)=>{\n                this.handleTxLogs(txSig, slot, logs, mostRecentBlockTime);\n            }, true);\n            return true;\n        } catch (e) {\n            console.error(\"Error fetching previous txs in event subscriber\");\n            console.error(e);\n            return false;\n        }\n    }\n    handleTxLogs(txSig, slot, logs, mostRecentBlockTime) {\n        if (this.txEventCache.has(txSig)) {\n            return;\n        }\n        const wrappedEvents = this.parseEventsFromLogs(txSig, slot, logs);\n        for (const wrappedEvent of wrappedEvents){\n            this.eventListMap.get(wrappedEvent.eventType).insert(wrappedEvent);\n        }\n        // dont emit event till we've added all the events to the eventListMap\n        for (const wrappedEvent of wrappedEvents){\n            this.eventEmitter.emit(\"newEvent\", wrappedEvent);\n        }\n        if (this.awaitTxPromises.has(txSig)) {\n            this.awaitTxPromises.delete(txSig);\n            this.awaitTxResolver.get(txSig)();\n            this.awaitTxResolver.delete(txSig);\n        }\n        if (!this.lastSeenSlot || slot > this.lastSeenSlot) {\n            this.lastSeenTxSig = txSig;\n        }\n        if (this.lastSeenBlockTime === undefined || mostRecentBlockTime > this.lastSeenBlockTime) {\n            this.lastSeenBlockTime = mostRecentBlockTime;\n        }\n        this.txEventCache.add(txSig, wrappedEvents);\n    }\n    async fetchPreviousTx(fetchMax) {\n        if (!this.options.untilTx && !fetchMax) {\n            return;\n        }\n        let txFetched = 0;\n        let beforeTx = undefined;\n        const untilTx = this.options.untilTx;\n        while(txFetched < this.options.maxTx){\n            const response = await (0, fetchLogs_1.fetchLogs)(this.connection, this.address, this.options.commitment === \"finalized\" ? \"finalized\" : \"confirmed\", beforeTx, untilTx);\n            if (response === undefined) {\n                break;\n            }\n            txFetched += response.transactionLogs.length;\n            beforeTx = response.earliestTx;\n            for (const { txSig, slot, logs } of response.transactionLogs){\n                this.handleTxLogs(txSig, slot, logs, response.mostRecentBlockTime);\n            }\n        }\n    }\n    async unsubscribe() {\n        return await this.logProvider.unsubscribe();\n    }\n    parseEventsFromLogs(txSig, slot, logs) {\n        const records = [];\n        // @ts-ignore\n        const events = (0, parse_1.parseLogs)(this.program, slot, logs);\n        let runningEventIndex = 0;\n        for (const event of events){\n            // @ts-ignore\n            const expectRecordType = this.eventListMap.has(event.name);\n            if (expectRecordType) {\n                event.data.txSig = txSig;\n                event.data.slot = slot;\n                event.data.eventType = event.name;\n                event.data.txSigIndex = runningEventIndex;\n                records.push(event.data);\n            }\n            runningEventIndex++;\n        }\n        return records;\n    }\n    awaitTx(txSig) {\n        if (this.awaitTxPromises.has(txSig)) {\n            return this.awaitTxPromises.get(txSig);\n        }\n        if (this.txEventCache.has(txSig)) {\n            return Promise.resolve();\n        }\n        const promise = new Promise((resolve)=>{\n            this.awaitTxResolver.set(txSig, resolve);\n        });\n        this.awaitTxPromises.set(txSig, promise);\n        return promise;\n    }\n    getEventList(eventType) {\n        return this.eventListMap.get(eventType);\n    }\n    /**\n     * This requires the EventList be cast to an array, which requires reallocation of memory.\n     * Would bias to using getEventList over getEvents\n     *\n     * @param eventType\n     */ getEventsArray(eventType) {\n        return this.eventListMap.get(eventType).toArray();\n    }\n    getEventsByTx(txSig) {\n        return this.txEventCache.get(txSig);\n    }\n}\nexports.EventSubscriber = EventSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/events/eventSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/events/fetchLogs.js":
/*!**************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/events/fetchLogs.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LogParser = exports.fetchTransactionLogs = exports.fetchLogs = void 0;\nconst promiseTimeout_1 = __webpack_require__(/*! ../util/promiseTimeout */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/util/promiseTimeout.js\");\nfunction mapTransactionResponseToLog(transaction) {\n    return {\n        txSig: transaction.transaction.signatures[0],\n        slot: transaction.slot,\n        logs: transaction.meta.logMessages\n    };\n}\nasync function fetchLogs(connection, address, finality, beforeTx, untilTx, limit, batchSize = 25) {\n    const signatures = await connection.getSignaturesForAddress(address, {\n        before: beforeTx,\n        until: untilTx,\n        limit\n    }, finality);\n    const sortedSignatures = signatures.sort((a, b)=>a.slot === b.slot ? 0 : a.slot < b.slot ? -1 : 1);\n    const filteredSignatures = sortedSignatures.filter((signature)=>!signature.err);\n    if (filteredSignatures.length === 0) {\n        return undefined;\n    }\n    const chunkedSignatures = chunk(filteredSignatures, batchSize);\n    const transactionLogs = (await Promise.all(chunkedSignatures.map(async (chunk)=>{\n        return await fetchTransactionLogs(connection, chunk.map((confirmedSignature)=>confirmedSignature.signature), finality);\n    }))).flat();\n    const earliest = filteredSignatures[0];\n    const mostRecent = filteredSignatures[filteredSignatures.length - 1];\n    return {\n        transactionLogs: transactionLogs,\n        earliestTx: earliest.signature,\n        mostRecentTx: mostRecent.signature,\n        earliestSlot: earliest.slot,\n        mostRecentSlot: mostRecent.slot,\n        mostRecentBlockTime: mostRecent.blockTime\n    };\n}\nexports.fetchLogs = fetchLogs;\nasync function fetchTransactionLogs(connection, signatures, finality) {\n    const requests = new Array();\n    for (const signature of signatures){\n        const args = [\n            signature,\n            {\n                commitment: finality,\n                maxSupportedTransactionVersion: 0\n            }\n        ];\n        requests.push({\n            methodName: \"getTransaction\",\n            args\n        });\n    }\n    const rpcResponses = await (0, promiseTimeout_1.promiseTimeout)(// @ts-ignore\n    connection._rpcBatchRequest(requests), 10 * 1000 // 10 second timeout\n    );\n    if (rpcResponses === null) {\n        return Promise.reject(\"RPC request timed out fetching transactions\");\n    }\n    const logs = new Array();\n    for(const i in rpcResponses){\n        const rpcResponse = rpcResponses[i];\n        if (rpcResponse.result) {\n            logs.push(mapTransactionResponseToLog(rpcResponse.result));\n        }\n    }\n    return logs;\n}\nexports.fetchTransactionLogs = fetchTransactionLogs;\nfunction chunk(array, size) {\n    return new Array(Math.ceil(array.length / size)).fill(null).map((_, index)=>index * size).map((begin)=>array.slice(begin, begin + size));\n}\nclass LogParser {\n    constructor(program){\n        this.program = program;\n    }\n    parseEventsFromTransaction(transaction) {\n        const transactionLogObject = mapTransactionResponseToLog(transaction);\n        return this.parseEventsFromLogs(transactionLogObject);\n    }\n    parseEventsFromLogs(event) {\n        const records = [];\n        // @ts-ignore\n        const eventGenerator = this.program._events._eventParser.parseLogs(event.logs, false);\n        let runningEventIndex = 0;\n        for (const eventLog of eventGenerator){\n            eventLog.data.txSig = event.txSig;\n            eventLog.data.slot = event.slot;\n            eventLog.data.eventType = eventLog.name;\n            eventLog.data.txSigIndex = runningEventIndex;\n            records.push(eventLog.data);\n            runningEventIndex++;\n        }\n        return records;\n    }\n}\nexports.LogParser = LogParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/events/fetchLogs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/events/parse.js":
/*!**********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/events/parse.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseLogs = void 0;\nconst driftProgramId = \"dRiftyHA39MWEi3m9aunc5MzRF1JYuBsbn6VPcn33UH\";\nconst driftProgramStart = `Program ${driftProgramId} invoke`;\nconst PROGRAM_LOG = \"Program log: \";\nconst PROGRAM_DATA = \"Program data: \";\nconst PROGRAM_LOG_START_INDEX = PROGRAM_LOG.length;\nconst PROGRAM_DATA_START_INDEX = PROGRAM_DATA.length;\nfunction parseLogs(program, slot, logs) {\n    const events = [];\n    const execution = new ExecutionContext();\n    for (const log of logs){\n        const [event, newProgram, didPop] = handleLog(execution, log, program);\n        if (event) {\n            events.push(event);\n        }\n        if (newProgram) {\n            execution.push(newProgram);\n        }\n        if (didPop) {\n            execution.pop();\n        }\n    }\n    return events;\n}\nexports.parseLogs = parseLogs;\nfunction handleLog(execution, log, program) {\n    // Executing program is drift program.\n    if (execution.stack.length > 0 && execution.program() === driftProgramId) {\n        return handleProgramLog(log, program);\n    } else {\n        return [\n            null,\n            ...handleSystemLog(log)\n        ];\n    }\n}\n// Handles logs from *drift* program.\nfunction handleProgramLog(log, program) {\n    // This is a `msg!` log or a `sol_log_data` log.\n    if (log.startsWith(PROGRAM_LOG)) {\n        const logStr = log.slice(PROGRAM_LOG_START_INDEX);\n        const event = program.coder.events.decode(logStr);\n        return [\n            event,\n            null,\n            false\n        ];\n    } else if (log.startsWith(PROGRAM_DATA)) {\n        const logStr = log.slice(PROGRAM_DATA_START_INDEX);\n        const event = program.coder.events.decode(logStr);\n        return [\n            event,\n            null,\n            false\n        ];\n    } else {\n        return [\n            null,\n            ...handleSystemLog(log)\n        ];\n    }\n}\n// Handles logs when the current program being executing is *not* drift.\nfunction handleSystemLog(log) {\n    // System component.\n    const logStart = log.split(\":\")[0];\n    // Did the program finish executing?\n    if (logStart.match(/^Program (.*) success/g) !== null) {\n        return [\n            null,\n            true\n        ];\n    // Recursive call.\n    } else if (logStart.startsWith(driftProgramStart)) {\n        return [\n            driftProgramId,\n            false\n        ];\n    } else if (logStart.includes(\"invoke\")) {\n        return [\n            \"cpi\",\n            false\n        ]; // Any string will do.\n    } else {\n        return [\n            null,\n            false\n        ];\n    }\n}\n// Stack frame execution context, allowing one to track what program is\n// executing for a given log.\nclass ExecutionContext {\n    constructor(){\n        this.stack = [];\n    }\n    program() {\n        if (!this.stack.length) {\n            throw new Error(\"Expected the stack to have elements\");\n        }\n        return this.stack[this.stack.length - 1];\n    }\n    push(newProgram) {\n        this.stack.push(newProgram);\n    }\n    pop() {\n        if (!this.stack.length) {\n            throw new Error(\"Expected the stack to have elements\");\n        }\n        this.stack.pop();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9ldmVudHMvcGFyc2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsTUFBTUcsaUJBQWlCO0FBQ3ZCLE1BQU1DLG9CQUFvQixDQUFDLFFBQVEsRUFBRUQsZUFBZSxPQUFPLENBQUM7QUFDNUQsTUFBTUUsY0FBYztBQUNwQixNQUFNQyxlQUFlO0FBQ3JCLE1BQU1DLDBCQUEwQkYsWUFBWUcsTUFBTTtBQUNsRCxNQUFNQywyQkFBMkJILGFBQWFFLE1BQU07QUFDcEQsU0FBU04sVUFBVVEsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLElBQUk7SUFDbEMsTUFBTUMsU0FBUyxFQUFFO0lBQ2pCLE1BQU1DLFlBQVksSUFBSUM7SUFDdEIsS0FBSyxNQUFNQyxPQUFPSixLQUFNO1FBQ3BCLE1BQU0sQ0FBQ0ssT0FBT0MsWUFBWUMsT0FBTyxHQUFHQyxVQUFVTixXQUFXRSxLQUFLTjtRQUM5RCxJQUFJTyxPQUFPO1lBQ1BKLE9BQU9RLElBQUksQ0FBQ0o7UUFDaEI7UUFDQSxJQUFJQyxZQUFZO1lBQ1pKLFVBQVVPLElBQUksQ0FBQ0g7UUFDbkI7UUFDQSxJQUFJQyxRQUFRO1lBQ1JMLFVBQVVRLEdBQUc7UUFDakI7SUFDSjtJQUNBLE9BQU9UO0FBQ1g7QUFDQWIsaUJBQWlCLEdBQUdFO0FBQ3BCLFNBQVNrQixVQUFVTixTQUFTLEVBQUVFLEdBQUcsRUFBRU4sT0FBTztJQUN0QyxzQ0FBc0M7SUFDdEMsSUFBSUksVUFBVVMsS0FBSyxDQUFDZixNQUFNLEdBQUcsS0FBS00sVUFBVUosT0FBTyxPQUFPUCxnQkFBZ0I7UUFDdEUsT0FBT3FCLGlCQUFpQlIsS0FBS047SUFDakMsT0FFSztRQUNELE9BQU87WUFBQztlQUFTZSxnQkFBZ0JUO1NBQUs7SUFDMUM7QUFDSjtBQUNBLHFDQUFxQztBQUNyQyxTQUFTUSxpQkFBaUJSLEdBQUcsRUFBRU4sT0FBTztJQUNsQyxnREFBZ0Q7SUFDaEQsSUFBSU0sSUFBSVUsVUFBVSxDQUFDckIsY0FBYztRQUM3QixNQUFNc0IsU0FBU1gsSUFBSVksS0FBSyxDQUFDckI7UUFDekIsTUFBTVUsUUFBUVAsUUFBUW1CLEtBQUssQ0FBQ2hCLE1BQU0sQ0FBQ2lCLE1BQU0sQ0FBQ0g7UUFDMUMsT0FBTztZQUFDVjtZQUFPO1lBQU07U0FBTTtJQUMvQixPQUNLLElBQUlELElBQUlVLFVBQVUsQ0FBQ3BCLGVBQWU7UUFDbkMsTUFBTXFCLFNBQVNYLElBQUlZLEtBQUssQ0FBQ25CO1FBQ3pCLE1BQU1RLFFBQVFQLFFBQVFtQixLQUFLLENBQUNoQixNQUFNLENBQUNpQixNQUFNLENBQUNIO1FBQzFDLE9BQU87WUFBQ1Y7WUFBTztZQUFNO1NBQU07SUFDL0IsT0FDSztRQUNELE9BQU87WUFBQztlQUFTUSxnQkFBZ0JUO1NBQUs7SUFDMUM7QUFDSjtBQUNBLHdFQUF3RTtBQUN4RSxTQUFTUyxnQkFBZ0JULEdBQUc7SUFDeEIsb0JBQW9CO0lBQ3BCLE1BQU1lLFdBQVdmLElBQUlnQixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDbEMsb0NBQW9DO0lBQ3BDLElBQUlELFNBQVNFLEtBQUssQ0FBQyw4QkFBOEIsTUFBTTtRQUNuRCxPQUFPO1lBQUM7WUFBTTtTQUFLO0lBQ25CLGtCQUFrQjtJQUN0QixPQUNLLElBQUlGLFNBQVNMLFVBQVUsQ0FBQ3RCLG9CQUFvQjtRQUM3QyxPQUFPO1lBQUNEO1lBQWdCO1NBQU07SUFDbEMsT0FFSyxJQUFJNEIsU0FBU0csUUFBUSxDQUFDLFdBQVc7UUFDbEMsT0FBTztZQUFDO1lBQU87U0FBTSxFQUFFLHNCQUFzQjtJQUNqRCxPQUNLO1FBQ0QsT0FBTztZQUFDO1lBQU07U0FBTTtJQUN4QjtBQUNKO0FBQ0EsdUVBQXVFO0FBQ3ZFLDZCQUE2QjtBQUM3QixNQUFNbkI7SUFDRm9CLGFBQWM7UUFDVixJQUFJLENBQUNaLEtBQUssR0FBRyxFQUFFO0lBQ25CO0lBQ0FiLFVBQVU7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDYSxLQUFLLENBQUNmLE1BQU0sRUFBRTtZQUNwQixNQUFNLElBQUk0QixNQUFNO1FBQ3BCO1FBQ0EsT0FBTyxJQUFJLENBQUNiLEtBQUssQ0FBQyxJQUFJLENBQUNBLEtBQUssQ0FBQ2YsTUFBTSxHQUFHLEVBQUU7SUFDNUM7SUFDQWEsS0FBS0gsVUFBVSxFQUFFO1FBQ2IsSUFBSSxDQUFDSyxLQUFLLENBQUNGLElBQUksQ0FBQ0g7SUFDcEI7SUFDQUksTUFBTTtRQUNGLElBQUksQ0FBQyxJQUFJLENBQUNDLEtBQUssQ0FBQ2YsTUFBTSxFQUFFO1lBQ3BCLE1BQU0sSUFBSTRCLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNiLEtBQUssQ0FBQ0QsR0FBRztJQUNsQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL2V2ZW50cy9wYXJzZS5qcz8yMTRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUxvZ3MgPSB2b2lkIDA7XG5jb25zdCBkcmlmdFByb2dyYW1JZCA9ICdkUmlmdHlIQTM5TVdFaTNtOWF1bmM1TXpSRjFKWXVCc2JuNlZQY24zM1VIJztcbmNvbnN0IGRyaWZ0UHJvZ3JhbVN0YXJ0ID0gYFByb2dyYW0gJHtkcmlmdFByb2dyYW1JZH0gaW52b2tlYDtcbmNvbnN0IFBST0dSQU1fTE9HID0gJ1Byb2dyYW0gbG9nOiAnO1xuY29uc3QgUFJPR1JBTV9EQVRBID0gJ1Byb2dyYW0gZGF0YTogJztcbmNvbnN0IFBST0dSQU1fTE9HX1NUQVJUX0lOREVYID0gUFJPR1JBTV9MT0cubGVuZ3RoO1xuY29uc3QgUFJPR1JBTV9EQVRBX1NUQVJUX0lOREVYID0gUFJPR1JBTV9EQVRBLmxlbmd0aDtcbmZ1bmN0aW9uIHBhcnNlTG9ncyhwcm9ncmFtLCBzbG90LCBsb2dzKSB7XG4gICAgY29uc3QgZXZlbnRzID0gW107XG4gICAgY29uc3QgZXhlY3V0aW9uID0gbmV3IEV4ZWN1dGlvbkNvbnRleHQoKTtcbiAgICBmb3IgKGNvbnN0IGxvZyBvZiBsb2dzKSB7XG4gICAgICAgIGNvbnN0IFtldmVudCwgbmV3UHJvZ3JhbSwgZGlkUG9wXSA9IGhhbmRsZUxvZyhleGVjdXRpb24sIGxvZywgcHJvZ3JhbSk7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnRzLnB1c2goZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdQcm9ncmFtKSB7XG4gICAgICAgICAgICBleGVjdXRpb24ucHVzaChuZXdQcm9ncmFtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlkUG9wKSB7XG4gICAgICAgICAgICBleGVjdXRpb24ucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50cztcbn1cbmV4cG9ydHMucGFyc2VMb2dzID0gcGFyc2VMb2dzO1xuZnVuY3Rpb24gaGFuZGxlTG9nKGV4ZWN1dGlvbiwgbG9nLCBwcm9ncmFtKSB7XG4gICAgLy8gRXhlY3V0aW5nIHByb2dyYW0gaXMgZHJpZnQgcHJvZ3JhbS5cbiAgICBpZiAoZXhlY3V0aW9uLnN0YWNrLmxlbmd0aCA+IDAgJiYgZXhlY3V0aW9uLnByb2dyYW0oKSA9PT0gZHJpZnRQcm9ncmFtSWQpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVByb2dyYW1Mb2cobG9nLCBwcm9ncmFtKTtcbiAgICB9XG4gICAgLy8gRXhlY3V0aW5nIHByb2dyYW0gaXMgbm90IGRyaWZ0IHByb2dyYW0uXG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbbnVsbCwgLi4uaGFuZGxlU3lzdGVtTG9nKGxvZyldO1xuICAgIH1cbn1cbi8vIEhhbmRsZXMgbG9ncyBmcm9tICpkcmlmdCogcHJvZ3JhbS5cbmZ1bmN0aW9uIGhhbmRsZVByb2dyYW1Mb2cobG9nLCBwcm9ncmFtKSB7XG4gICAgLy8gVGhpcyBpcyBhIGBtc2chYCBsb2cgb3IgYSBgc29sX2xvZ19kYXRhYCBsb2cuXG4gICAgaWYgKGxvZy5zdGFydHNXaXRoKFBST0dSQU1fTE9HKSkge1xuICAgICAgICBjb25zdCBsb2dTdHIgPSBsb2cuc2xpY2UoUFJPR1JBTV9MT0dfU1RBUlRfSU5ERVgpO1xuICAgICAgICBjb25zdCBldmVudCA9IHByb2dyYW0uY29kZXIuZXZlbnRzLmRlY29kZShsb2dTdHIpO1xuICAgICAgICByZXR1cm4gW2V2ZW50LCBudWxsLCBmYWxzZV07XG4gICAgfVxuICAgIGVsc2UgaWYgKGxvZy5zdGFydHNXaXRoKFBST0dSQU1fREFUQSkpIHtcbiAgICAgICAgY29uc3QgbG9nU3RyID0gbG9nLnNsaWNlKFBST0dSQU1fREFUQV9TVEFSVF9JTkRFWCk7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gcHJvZ3JhbS5jb2Rlci5ldmVudHMuZGVjb2RlKGxvZ1N0cik7XG4gICAgICAgIHJldHVybiBbZXZlbnQsIG51bGwsIGZhbHNlXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbbnVsbCwgLi4uaGFuZGxlU3lzdGVtTG9nKGxvZyldO1xuICAgIH1cbn1cbi8vIEhhbmRsZXMgbG9ncyB3aGVuIHRoZSBjdXJyZW50IHByb2dyYW0gYmVpbmcgZXhlY3V0aW5nIGlzICpub3QqIGRyaWZ0LlxuZnVuY3Rpb24gaGFuZGxlU3lzdGVtTG9nKGxvZykge1xuICAgIC8vIFN5c3RlbSBjb21wb25lbnQuXG4gICAgY29uc3QgbG9nU3RhcnQgPSBsb2cuc3BsaXQoJzonKVswXTtcbiAgICAvLyBEaWQgdGhlIHByb2dyYW0gZmluaXNoIGV4ZWN1dGluZz9cbiAgICBpZiAobG9nU3RhcnQubWF0Y2goL15Qcm9ncmFtICguKikgc3VjY2Vzcy9nKSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW251bGwsIHRydWVdO1xuICAgICAgICAvLyBSZWN1cnNpdmUgY2FsbC5cbiAgICB9XG4gICAgZWxzZSBpZiAobG9nU3RhcnQuc3RhcnRzV2l0aChkcmlmdFByb2dyYW1TdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIFtkcmlmdFByb2dyYW1JZCwgZmFsc2VdO1xuICAgIH1cbiAgICAvLyBDUEkgY2FsbC5cbiAgICBlbHNlIGlmIChsb2dTdGFydC5pbmNsdWRlcygnaW52b2tlJykpIHtcbiAgICAgICAgcmV0dXJuIFsnY3BpJywgZmFsc2VdOyAvLyBBbnkgc3RyaW5nIHdpbGwgZG8uXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gW251bGwsIGZhbHNlXTtcbiAgICB9XG59XG4vLyBTdGFjayBmcmFtZSBleGVjdXRpb24gY29udGV4dCwgYWxsb3dpbmcgb25lIHRvIHRyYWNrIHdoYXQgcHJvZ3JhbSBpc1xuLy8gZXhlY3V0aW5nIGZvciBhIGdpdmVuIGxvZy5cbmNsYXNzIEV4ZWN1dGlvbkNvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN0YWNrID0gW107XG4gICAgfVxuICAgIHByb2dyYW0oKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHN0YWNrIHRvIGhhdmUgZWxlbWVudHMnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICBwdXNoKG5ld1Byb2dyYW0pIHtcbiAgICAgICAgdGhpcy5zdGFjay5wdXNoKG5ld1Byb2dyYW0pO1xuICAgIH1cbiAgICBwb3AoKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHN0YWNrIHRvIGhhdmUgZWxlbWVudHMnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInBhcnNlTG9ncyIsImRyaWZ0UHJvZ3JhbUlkIiwiZHJpZnRQcm9ncmFtU3RhcnQiLCJQUk9HUkFNX0xPRyIsIlBST0dSQU1fREFUQSIsIlBST0dSQU1fTE9HX1NUQVJUX0lOREVYIiwibGVuZ3RoIiwiUFJPR1JBTV9EQVRBX1NUQVJUX0lOREVYIiwicHJvZ3JhbSIsInNsb3QiLCJsb2dzIiwiZXZlbnRzIiwiZXhlY3V0aW9uIiwiRXhlY3V0aW9uQ29udGV4dCIsImxvZyIsImV2ZW50IiwibmV3UHJvZ3JhbSIsImRpZFBvcCIsImhhbmRsZUxvZyIsInB1c2giLCJwb3AiLCJzdGFjayIsImhhbmRsZVByb2dyYW1Mb2ciLCJoYW5kbGVTeXN0ZW1Mb2ciLCJzdGFydHNXaXRoIiwibG9nU3RyIiwic2xpY2UiLCJjb2RlciIsImRlY29kZSIsImxvZ1N0YXJ0Iiwic3BsaXQiLCJtYXRjaCIsImluY2x1ZGVzIiwiY29uc3RydWN0b3IiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/events/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/events/pollingLogProvider.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/events/pollingLogProvider.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PollingLogProvider = void 0;\nconst fetchLogs_1 = __webpack_require__(/*! ./fetchLogs */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/fetchLogs.js\");\nclass PollingLogProvider {\n    constructor(connection, address, commitment, frequency = 15 * 1000, batchSize){\n        this.connection = connection;\n        this.address = address;\n        this.frequency = frequency;\n        this.batchSize = batchSize;\n        this.firstFetch = true;\n        this.finality = commitment === \"finalized\" ? \"finalized\" : \"confirmed\";\n    }\n    subscribe(callback, skipHistory) {\n        if (this.intervalId) {\n            return true;\n        }\n        this.intervalId = setInterval(async ()=>{\n            if (this.mutex === 1) {\n                return;\n            }\n            this.mutex = 1;\n            try {\n                const response = await (0, fetchLogs_1.fetchLogs)(this.connection, this.address, this.finality, undefined, this.mostRecentSeenTx, // If skipping history, only fetch one log back, not the maximum amount available\n                skipHistory && this.firstFetch ? 1 : undefined, this.batchSize);\n                if (response === undefined) {\n                    return;\n                }\n                this.firstFetch = false;\n                const { mostRecentTx, transactionLogs } = response;\n                for (const { txSig, slot, logs } of transactionLogs){\n                    callback(txSig, slot, logs, response.mostRecentBlockTime);\n                }\n                this.mostRecentSeenTx = mostRecentTx;\n            } catch (e) {\n                console.error(\"PollingLogProvider threw an Error\");\n                console.error(e);\n            } finally{\n                this.mutex = 0;\n            }\n        }, this.frequency);\n        return true;\n    }\n    isSubscribed() {\n        return this.intervalId !== undefined;\n    }\n    async unsubscribe() {\n        if (this.intervalId !== undefined) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        }\n        return true;\n    }\n}\nexports.PollingLogProvider = PollingLogProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9ldmVudHMvcG9sbGluZ0xvZ1Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xDLE1BQU1HLGNBQWNDLG1CQUFPQSxDQUFDLGlGQUFhO0FBQ3pDLE1BQU1GO0lBQ0ZHLFlBQVlDLFVBQVUsRUFBRUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLFlBQVksS0FBSyxJQUFJLEVBQUVDLFNBQVMsQ0FBRTtRQUMzRSxJQUFJLENBQUNKLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDRSxTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLFFBQVEsR0FBR0osZUFBZSxjQUFjLGNBQWM7SUFDL0Q7SUFDQUssVUFBVUMsUUFBUSxFQUFFQyxXQUFXLEVBQUU7UUFDN0IsSUFBSSxJQUFJLENBQUNDLFVBQVUsRUFBRTtZQUNqQixPQUFPO1FBQ1g7UUFDQSxJQUFJLENBQUNBLFVBQVUsR0FBR0MsWUFBWTtZQUMxQixJQUFJLElBQUksQ0FBQ0MsS0FBSyxLQUFLLEdBQUc7Z0JBQ2xCO1lBQ0o7WUFDQSxJQUFJLENBQUNBLEtBQUssR0FBRztZQUNiLElBQUk7Z0JBQ0EsTUFBTUMsV0FBVyxNQUFNLENBQUMsR0FBR2hCLFlBQVlpQixTQUFTLEVBQUUsSUFBSSxDQUFDZCxVQUFVLEVBQUUsSUFBSSxDQUFDQyxPQUFPLEVBQUUsSUFBSSxDQUFDSyxRQUFRLEVBQUVTLFdBQVcsSUFBSSxDQUFDQyxnQkFBZ0IsRUFDaEksaUZBQWlGO2dCQUNqRlAsZUFBZSxJQUFJLENBQUNKLFVBQVUsR0FBRyxJQUFJVSxXQUFXLElBQUksQ0FBQ1gsU0FBUztnQkFDOUQsSUFBSVMsYUFBYUUsV0FBVztvQkFDeEI7Z0JBQ0o7Z0JBQ0EsSUFBSSxDQUFDVixVQUFVLEdBQUc7Z0JBQ2xCLE1BQU0sRUFBRVksWUFBWSxFQUFFQyxlQUFlLEVBQUUsR0FBR0w7Z0JBQzFDLEtBQUssTUFBTSxFQUFFTSxLQUFLLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFLElBQUlILGdCQUFpQjtvQkFDakRWLFNBQVNXLE9BQU9DLE1BQU1DLE1BQU1SLFNBQVNTLG1CQUFtQjtnQkFDNUQ7Z0JBQ0EsSUFBSSxDQUFDTixnQkFBZ0IsR0FBR0M7WUFDNUIsRUFDQSxPQUFPTSxHQUFHO2dCQUNOQyxRQUFRQyxLQUFLLENBQUM7Z0JBQ2RELFFBQVFDLEtBQUssQ0FBQ0Y7WUFDbEIsU0FDUTtnQkFDSixJQUFJLENBQUNYLEtBQUssR0FBRztZQUNqQjtRQUNKLEdBQUcsSUFBSSxDQUFDVCxTQUFTO1FBQ2pCLE9BQU87SUFDWDtJQUNBdUIsZUFBZTtRQUNYLE9BQU8sSUFBSSxDQUFDaEIsVUFBVSxLQUFLSztJQUMvQjtJQUNBLE1BQU1ZLGNBQWM7UUFDaEIsSUFBSSxJQUFJLENBQUNqQixVQUFVLEtBQUtLLFdBQVc7WUFDL0JhLGNBQWMsSUFBSSxDQUFDbEIsVUFBVTtZQUM3QixJQUFJLENBQUNBLFVBQVUsR0FBR0s7UUFDdEI7UUFDQSxPQUFPO0lBQ1g7QUFDSjtBQUNBckIsMEJBQTBCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL2V2ZW50cy9wb2xsaW5nTG9nUHJvdmlkZXIuanM/MjU5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUG9sbGluZ0xvZ1Byb3ZpZGVyID0gdm9pZCAwO1xuY29uc3QgZmV0Y2hMb2dzXzEgPSByZXF1aXJlKFwiLi9mZXRjaExvZ3NcIik7XG5jbGFzcyBQb2xsaW5nTG9nUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb24sIGFkZHJlc3MsIGNvbW1pdG1lbnQsIGZyZXF1ZW5jeSA9IDE1ICogMTAwMCwgYmF0Y2hTaXplKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gZnJlcXVlbmN5O1xuICAgICAgICB0aGlzLmJhdGNoU2l6ZSA9IGJhdGNoU2l6ZTtcbiAgICAgICAgdGhpcy5maXJzdEZldGNoID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5maW5hbGl0eSA9IGNvbW1pdG1lbnQgPT09ICdmaW5hbGl6ZWQnID8gJ2ZpbmFsaXplZCcgOiAnY29uZmlybWVkJztcbiAgICB9XG4gICAgc3Vic2NyaWJlKGNhbGxiYWNrLCBza2lwSGlzdG9yeSkge1xuICAgICAgICBpZiAodGhpcy5pbnRlcnZhbElkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmludGVydmFsSWQgPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5tdXRleCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubXV0ZXggPSAxO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBmZXRjaExvZ3NfMS5mZXRjaExvZ3MpKHRoaXMuY29ubmVjdGlvbiwgdGhpcy5hZGRyZXNzLCB0aGlzLmZpbmFsaXR5LCB1bmRlZmluZWQsIHRoaXMubW9zdFJlY2VudFNlZW5UeCwgXG4gICAgICAgICAgICAgICAgLy8gSWYgc2tpcHBpbmcgaGlzdG9yeSwgb25seSBmZXRjaCBvbmUgbG9nIGJhY2ssIG5vdCB0aGUgbWF4aW11bSBhbW91bnQgYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgc2tpcEhpc3RvcnkgJiYgdGhpcy5maXJzdEZldGNoID8gMSA6IHVuZGVmaW5lZCwgdGhpcy5iYXRjaFNpemUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdEZldGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBtb3N0UmVjZW50VHgsIHRyYW5zYWN0aW9uTG9ncyB9ID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7IHR4U2lnLCBzbG90LCBsb2dzIH0gb2YgdHJhbnNhY3Rpb25Mb2dzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHR4U2lnLCBzbG90LCBsb2dzLCByZXNwb25zZS5tb3N0UmVjZW50QmxvY2tUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5tb3N0UmVjZW50U2VlblR4ID0gbW9zdFJlY2VudFR4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdQb2xsaW5nTG9nUHJvdmlkZXIgdGhyZXcgYW4gRXJyb3InKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tdXRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMuZnJlcXVlbmN5KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJ2YWxJZCAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhc3luYyB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW50ZXJ2YWxJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxJZCk7XG4gICAgICAgICAgICB0aGlzLmludGVydmFsSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5Qb2xsaW5nTG9nUHJvdmlkZXIgPSBQb2xsaW5nTG9nUHJvdmlkZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQb2xsaW5nTG9nUHJvdmlkZXIiLCJmZXRjaExvZ3NfMSIsInJlcXVpcmUiLCJjb25zdHJ1Y3RvciIsImNvbm5lY3Rpb24iLCJhZGRyZXNzIiwiY29tbWl0bWVudCIsImZyZXF1ZW5jeSIsImJhdGNoU2l6ZSIsImZpcnN0RmV0Y2giLCJmaW5hbGl0eSIsInN1YnNjcmliZSIsImNhbGxiYWNrIiwic2tpcEhpc3RvcnkiLCJpbnRlcnZhbElkIiwic2V0SW50ZXJ2YWwiLCJtdXRleCIsInJlc3BvbnNlIiwiZmV0Y2hMb2dzIiwidW5kZWZpbmVkIiwibW9zdFJlY2VudFNlZW5UeCIsIm1vc3RSZWNlbnRUeCIsInRyYW5zYWN0aW9uTG9ncyIsInR4U2lnIiwic2xvdCIsImxvZ3MiLCJtb3N0UmVjZW50QmxvY2tUaW1lIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsImlzU3Vic2NyaWJlZCIsInVuc3Vic2NyaWJlIiwiY2xlYXJJbnRlcnZhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/events/pollingLogProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/events/sort.js":
/*!*********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/events/sort.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getSortFn = void 0;\nconst index_1 = __webpack_require__(/*! ../index */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nfunction clientSortAscFn() {\n    return \"less than\";\n}\nfunction clientSortDescFn() {\n    return \"greater than\";\n}\nfunction defaultBlockchainSortFn(currentEvent, newEvent) {\n    return currentEvent.slot <= newEvent.slot ? \"less than\" : \"greater than\";\n}\nfunction orderActionRecordSortFn(currentEvent, newEvent) {\n    var _a, _b;\n    const currentEventMarketIndex = currentEvent.marketIndex;\n    const newEventMarketIndex = newEvent.marketIndex;\n    if (currentEventMarketIndex !== newEventMarketIndex) {\n        return currentEvent.ts.lte(newEvent.ts) ? \"less than\" : \"greater than\";\n    }\n    if (((_a = currentEvent.fillRecordId) === null || _a === void 0 ? void 0 : _a.gt(index_1.ZERO)) && ((_b = newEvent.fillRecordId) === null || _b === void 0 ? void 0 : _b.gt(index_1.ZERO))) {\n        return currentEvent.fillRecordId.lte(newEvent.fillRecordId) ? \"less than\" : \"greater than\";\n    } else {\n        return currentEvent.ts.lte(newEvent.ts) ? \"less than\" : \"greater than\";\n    }\n}\nfunction getSortFn(orderBy, orderDir, eventType) {\n    if (orderBy === \"client\") {\n        return orderDir === \"asc\" ? clientSortAscFn : clientSortDescFn;\n    }\n    switch(eventType){\n        case \"OrderActionRecord\":\n            return orderActionRecordSortFn;\n        default:\n            return defaultBlockchainSortFn;\n    }\n}\nexports.getSortFn = getSortFn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9ldmVudHMvc29ydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUcsS0FBSztBQUN6QixNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQyxtRUFBVTtBQUNsQyxTQUFTQztJQUNMLE9BQU87QUFDWDtBQUNBLFNBQVNDO0lBQ0wsT0FBTztBQUNYO0FBQ0EsU0FBU0Msd0JBQXdCQyxZQUFZLEVBQUVDLFFBQVE7SUFDbkQsT0FBT0QsYUFBYUUsSUFBSSxJQUFJRCxTQUFTQyxJQUFJLEdBQUcsY0FBYztBQUM5RDtBQUNBLFNBQVNDLHdCQUF3QkgsWUFBWSxFQUFFQyxRQUFRO0lBQ25ELElBQUlHLElBQUlDO0lBQ1IsTUFBTUMsMEJBQTBCTixhQUFhTyxXQUFXO0lBQ3hELE1BQU1DLHNCQUFzQlAsU0FBU00sV0FBVztJQUNoRCxJQUFJRCw0QkFBNEJFLHFCQUFxQjtRQUNqRCxPQUFPUixhQUFhUyxFQUFFLENBQUNDLEdBQUcsQ0FBQ1QsU0FBU1EsRUFBRSxJQUFJLGNBQWM7SUFDNUQ7SUFDQSxJQUFJLENBQUMsQ0FBQ0wsS0FBS0osYUFBYVcsWUFBWSxNQUFNLFFBQVFQLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR1EsRUFBRSxDQUFDakIsUUFBUWtCLElBQUksTUFBTyxFQUFDUixLQUFLSixTQUFTVSxZQUFZLE1BQU0sUUFBUU4sT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHTyxFQUFFLENBQUNqQixRQUFRa0IsSUFBSSxJQUFJO1FBQ3hMLE9BQU9iLGFBQWFXLFlBQVksQ0FBQ0QsR0FBRyxDQUFDVCxTQUFTVSxZQUFZLElBQ3BELGNBQ0E7SUFDVixPQUNLO1FBQ0QsT0FBT1gsYUFBYVMsRUFBRSxDQUFDQyxHQUFHLENBQUNULFNBQVNRLEVBQUUsSUFBSSxjQUFjO0lBQzVEO0FBQ0o7QUFDQSxTQUFTZixVQUFVb0IsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFNBQVM7SUFDM0MsSUFBSUYsWUFBWSxVQUFVO1FBQ3RCLE9BQU9DLGFBQWEsUUFBUWxCLGtCQUFrQkM7SUFDbEQ7SUFDQSxPQUFRa0I7UUFDSixLQUFLO1lBQ0QsT0FBT2I7UUFDWDtZQUNJLE9BQU9KO0lBQ2Y7QUFDSjtBQUNBUCxpQkFBaUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvZXZlbnRzL3NvcnQuanM/MGU4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0U29ydEZuID0gdm9pZCAwO1xuY29uc3QgaW5kZXhfMSA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcbmZ1bmN0aW9uIGNsaWVudFNvcnRBc2NGbigpIHtcbiAgICByZXR1cm4gJ2xlc3MgdGhhbic7XG59XG5mdW5jdGlvbiBjbGllbnRTb3J0RGVzY0ZuKCkge1xuICAgIHJldHVybiAnZ3JlYXRlciB0aGFuJztcbn1cbmZ1bmN0aW9uIGRlZmF1bHRCbG9ja2NoYWluU29ydEZuKGN1cnJlbnRFdmVudCwgbmV3RXZlbnQpIHtcbiAgICByZXR1cm4gY3VycmVudEV2ZW50LnNsb3QgPD0gbmV3RXZlbnQuc2xvdCA/ICdsZXNzIHRoYW4nIDogJ2dyZWF0ZXIgdGhhbic7XG59XG5mdW5jdGlvbiBvcmRlckFjdGlvblJlY29yZFNvcnRGbihjdXJyZW50RXZlbnQsIG5ld0V2ZW50KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBjdXJyZW50RXZlbnRNYXJrZXRJbmRleCA9IGN1cnJlbnRFdmVudC5tYXJrZXRJbmRleDtcbiAgICBjb25zdCBuZXdFdmVudE1hcmtldEluZGV4ID0gbmV3RXZlbnQubWFya2V0SW5kZXg7XG4gICAgaWYgKGN1cnJlbnRFdmVudE1hcmtldEluZGV4ICE9PSBuZXdFdmVudE1hcmtldEluZGV4KSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50RXZlbnQudHMubHRlKG5ld0V2ZW50LnRzKSA/ICdsZXNzIHRoYW4nIDogJ2dyZWF0ZXIgdGhhbic7XG4gICAgfVxuICAgIGlmICgoKF9hID0gY3VycmVudEV2ZW50LmZpbGxSZWNvcmRJZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmd0KGluZGV4XzEuWkVSTykpICYmICgoX2IgPSBuZXdFdmVudC5maWxsUmVjb3JkSWQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5ndChpbmRleF8xLlpFUk8pKSkge1xuICAgICAgICByZXR1cm4gY3VycmVudEV2ZW50LmZpbGxSZWNvcmRJZC5sdGUobmV3RXZlbnQuZmlsbFJlY29yZElkKVxuICAgICAgICAgICAgPyAnbGVzcyB0aGFuJ1xuICAgICAgICAgICAgOiAnZ3JlYXRlciB0aGFuJztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50RXZlbnQudHMubHRlKG5ld0V2ZW50LnRzKSA/ICdsZXNzIHRoYW4nIDogJ2dyZWF0ZXIgdGhhbic7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0U29ydEZuKG9yZGVyQnksIG9yZGVyRGlyLCBldmVudFR5cGUpIHtcbiAgICBpZiAob3JkZXJCeSA9PT0gJ2NsaWVudCcpIHtcbiAgICAgICAgcmV0dXJuIG9yZGVyRGlyID09PSAnYXNjJyA/IGNsaWVudFNvcnRBc2NGbiA6IGNsaWVudFNvcnREZXNjRm47XG4gICAgfVxuICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XG4gICAgICAgIGNhc2UgJ09yZGVyQWN0aW9uUmVjb3JkJzpcbiAgICAgICAgICAgIHJldHVybiBvcmRlckFjdGlvblJlY29yZFNvcnRGbjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0QmxvY2tjaGFpblNvcnRGbjtcbiAgICB9XG59XG5leHBvcnRzLmdldFNvcnRGbiA9IGdldFNvcnRGbjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFNvcnRGbiIsImluZGV4XzEiLCJyZXF1aXJlIiwiY2xpZW50U29ydEFzY0ZuIiwiY2xpZW50U29ydERlc2NGbiIsImRlZmF1bHRCbG9ja2NoYWluU29ydEZuIiwiY3VycmVudEV2ZW50IiwibmV3RXZlbnQiLCJzbG90Iiwib3JkZXJBY3Rpb25SZWNvcmRTb3J0Rm4iLCJfYSIsIl9iIiwiY3VycmVudEV2ZW50TWFya2V0SW5kZXgiLCJtYXJrZXRJbmRleCIsIm5ld0V2ZW50TWFya2V0SW5kZXgiLCJ0cyIsImx0ZSIsImZpbGxSZWNvcmRJZCIsImd0IiwiWkVSTyIsIm9yZGVyQnkiLCJvcmRlckRpciIsImV2ZW50VHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/events/sort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/events/txEventCache.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/events/txEventCache.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TxEventCache = void 0;\nclass Node {\n    constructor(key, value, next, prev){\n        this.key = key;\n        this.value = value;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n// lru cache\nclass TxEventCache {\n    constructor(maxTx = 1024){\n        this.maxTx = maxTx;\n        this.size = 0;\n        this.cacheMap = {};\n    }\n    add(key, events) {\n        const existingNode = this.cacheMap[key];\n        if (existingNode) {\n            this.detach(existingNode);\n            this.size--;\n        } else if (this.size === this.maxTx) {\n            delete this.cacheMap[this.tail.key];\n            this.detach(this.tail);\n            this.size--;\n        }\n        // Write to head of LinkedList\n        if (!this.head) {\n            this.head = this.tail = new Node(key, events);\n        } else {\n            const node = new Node(key, events, this.head);\n            this.head.prev = node;\n            this.head = node;\n        }\n        // update cacheMap with LinkedList key and Node reference\n        this.cacheMap[key] = this.head;\n        this.size++;\n    }\n    has(key) {\n        return this.cacheMap.hasOwnProperty(key);\n    }\n    get(key) {\n        var _a;\n        return (_a = this.cacheMap[key]) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    detach(node) {\n        if (node.prev !== undefined) {\n            node.prev.next = node.next;\n        } else {\n            this.head = node.next;\n        }\n        if (node.next !== undefined) {\n            node.next.prev = node.prev;\n        } else {\n            this.tail = node.prev;\n        }\n    }\n    clear() {\n        this.head = undefined;\n        this.tail = undefined;\n        this.size = 0;\n        this.cacheMap = {};\n    }\n}\nexports.TxEventCache = TxEventCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9ldmVudHMvdHhFdmVudENhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBRyxLQUFLO0FBQzVCLE1BQU1HO0lBQ0ZDLFlBQVlDLEdBQUcsRUFBRUosS0FBSyxFQUFFSyxJQUFJLEVBQUVDLElBQUksQ0FBRTtRQUNoQyxJQUFJLENBQUNGLEdBQUcsR0FBR0E7UUFDWCxJQUFJLENBQUNKLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNLLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLElBQUksR0FBR0E7SUFDaEI7QUFDSjtBQUNBLFlBQVk7QUFDWixNQUFNTDtJQUNGRSxZQUFZSSxRQUFRLElBQUksQ0FBRTtRQUN0QixJQUFJLENBQUNBLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsUUFBUSxHQUFHLENBQUM7SUFDckI7SUFDQUMsSUFBSU4sR0FBRyxFQUFFTyxNQUFNLEVBQUU7UUFDYixNQUFNQyxlQUFlLElBQUksQ0FBQ0gsUUFBUSxDQUFDTCxJQUFJO1FBQ3ZDLElBQUlRLGNBQWM7WUFDZCxJQUFJLENBQUNDLE1BQU0sQ0FBQ0Q7WUFDWixJQUFJLENBQUNKLElBQUk7UUFDYixPQUNLLElBQUksSUFBSSxDQUFDQSxJQUFJLEtBQUssSUFBSSxDQUFDRCxLQUFLLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUNFLFFBQVEsQ0FBQyxJQUFJLENBQUNLLElBQUksQ0FBQ1YsR0FBRyxDQUFDO1lBQ25DLElBQUksQ0FBQ1MsTUFBTSxDQUFDLElBQUksQ0FBQ0MsSUFBSTtZQUNyQixJQUFJLENBQUNOLElBQUk7UUFDYjtRQUNBLDhCQUE4QjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDTyxJQUFJLEVBQUU7WUFDWixJQUFJLENBQUNBLElBQUksR0FBRyxJQUFJLENBQUNELElBQUksR0FBRyxJQUFJWixLQUFLRSxLQUFLTztRQUMxQyxPQUNLO1lBQ0QsTUFBTUssT0FBTyxJQUFJZCxLQUFLRSxLQUFLTyxRQUFRLElBQUksQ0FBQ0ksSUFBSTtZQUM1QyxJQUFJLENBQUNBLElBQUksQ0FBQ1QsSUFBSSxHQUFHVTtZQUNqQixJQUFJLENBQUNELElBQUksR0FBR0M7UUFDaEI7UUFDQSx5REFBeUQ7UUFDekQsSUFBSSxDQUFDUCxRQUFRLENBQUNMLElBQUksR0FBRyxJQUFJLENBQUNXLElBQUk7UUFDOUIsSUFBSSxDQUFDUCxJQUFJO0lBQ2I7SUFDQVMsSUFBSWIsR0FBRyxFQUFFO1FBQ0wsT0FBTyxJQUFJLENBQUNLLFFBQVEsQ0FBQ1MsY0FBYyxDQUFDZDtJQUN4QztJQUNBZSxJQUFJZixHQUFHLEVBQUU7UUFDTCxJQUFJZ0I7UUFDSixPQUFPLENBQUNBLEtBQUssSUFBSSxDQUFDWCxRQUFRLENBQUNMLElBQUksTUFBTSxRQUFRZ0IsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHcEIsS0FBSztJQUNsRjtJQUNBYSxPQUFPRyxJQUFJLEVBQUU7UUFDVCxJQUFJQSxLQUFLVixJQUFJLEtBQUtlLFdBQVc7WUFDekJMLEtBQUtWLElBQUksQ0FBQ0QsSUFBSSxHQUFHVyxLQUFLWCxJQUFJO1FBQzlCLE9BQ0s7WUFDRCxJQUFJLENBQUNVLElBQUksR0FBR0MsS0FBS1gsSUFBSTtRQUN6QjtRQUNBLElBQUlXLEtBQUtYLElBQUksS0FBS2dCLFdBQVc7WUFDekJMLEtBQUtYLElBQUksQ0FBQ0MsSUFBSSxHQUFHVSxLQUFLVixJQUFJO1FBQzlCLE9BQ0s7WUFDRCxJQUFJLENBQUNRLElBQUksR0FBR0UsS0FBS1YsSUFBSTtRQUN6QjtJQUNKO0lBQ0FnQixRQUFRO1FBQ0osSUFBSSxDQUFDUCxJQUFJLEdBQUdNO1FBQ1osSUFBSSxDQUFDUCxJQUFJLEdBQUdPO1FBQ1osSUFBSSxDQUFDYixJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLFFBQVEsR0FBRyxDQUFDO0lBQ3JCO0FBQ0o7QUFDQVYsb0JBQW9CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL2V2ZW50cy90eEV2ZW50Q2FjaGUuanM/MjM3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHhFdmVudENhY2hlID0gdm9pZCAwO1xuY2xhc3MgTm9kZSB7XG4gICAgY29uc3RydWN0b3Ioa2V5LCB2YWx1ZSwgbmV4dCwgcHJldikge1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgICAgICB0aGlzLnByZXYgPSBwcmV2O1xuICAgIH1cbn1cbi8vIGxydSBjYWNoZVxuY2xhc3MgVHhFdmVudENhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcihtYXhUeCA9IDEwMjQpIHtcbiAgICAgICAgdGhpcy5tYXhUeCA9IG1heFR4O1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgICB0aGlzLmNhY2hlTWFwID0ge307XG4gICAgfVxuICAgIGFkZChrZXksIGV2ZW50cykge1xuICAgICAgICBjb25zdCBleGlzdGluZ05vZGUgPSB0aGlzLmNhY2hlTWFwW2tleV07XG4gICAgICAgIGlmIChleGlzdGluZ05vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGV0YWNoKGV4aXN0aW5nTm9kZSk7XG4gICAgICAgICAgICB0aGlzLnNpemUtLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNpemUgPT09IHRoaXMubWF4VHgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNhY2hlTWFwW3RoaXMudGFpbC5rZXldO1xuICAgICAgICAgICAgdGhpcy5kZXRhY2godGhpcy50YWlsKTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZS0tO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdyaXRlIHRvIGhlYWQgb2YgTGlua2VkTGlzdFxuICAgICAgICBpZiAoIXRoaXMuaGVhZCkge1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbmV3IE5vZGUoa2V5LCBldmVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBOb2RlKGtleSwgZXZlbnRzLCB0aGlzLmhlYWQpO1xuICAgICAgICAgICAgdGhpcy5oZWFkLnByZXYgPSBub2RlO1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICAvLyB1cGRhdGUgY2FjaGVNYXAgd2l0aCBMaW5rZWRMaXN0IGtleSBhbmQgTm9kZSByZWZlcmVuY2VcbiAgICAgICAgdGhpcy5jYWNoZU1hcFtrZXldID0gdGhpcy5oZWFkO1xuICAgICAgICB0aGlzLnNpemUrKztcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZU1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuY2FjaGVNYXBba2V5XSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlO1xuICAgIH1cbiAgICBkZXRhY2gobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5wcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gbm9kZS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRhaWwgPSBub2RlLnByZXY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuaGVhZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50YWlsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgICB0aGlzLmNhY2hlTWFwID0ge307XG4gICAgfVxufVxuZXhwb3J0cy5UeEV2ZW50Q2FjaGUgPSBUeEV2ZW50Q2FjaGU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJUeEV2ZW50Q2FjaGUiLCJOb2RlIiwiY29uc3RydWN0b3IiLCJrZXkiLCJuZXh0IiwicHJldiIsIm1heFR4Iiwic2l6ZSIsImNhY2hlTWFwIiwiYWRkIiwiZXZlbnRzIiwiZXhpc3RpbmdOb2RlIiwiZGV0YWNoIiwidGFpbCIsImhlYWQiLCJub2RlIiwiaGFzIiwiaGFzT3duUHJvcGVydHkiLCJnZXQiLCJfYSIsInVuZGVmaW5lZCIsImNsZWFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/events/txEventCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/events/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/events/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DefaultEventSubscriptionOptions = void 0;\nexports.DefaultEventSubscriptionOptions = {\n    eventTypes: [\n        \"DepositRecord\",\n        \"FundingPaymentRecord\",\n        \"LiquidationRecord\",\n        \"OrderRecord\",\n        \"OrderActionRecord\",\n        \"FundingRateRecord\",\n        \"NewUserRecord\",\n        \"SettlePnlRecord\",\n        \"LPRecord\",\n        \"InsuranceFundRecord\",\n        \"SpotInterestRecord\",\n        \"InsuranceFundStakeRecord\",\n        \"CurveRecord\",\n        \"SwapRecord\"\n    ],\n    maxEventsPerType: 4096,\n    orderBy: \"blockchain\",\n    orderDir: \"asc\",\n    commitment: \"confirmed\",\n    maxTx: 4096,\n    logProviderConfig: {\n        type: \"websocket\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9ldmVudHMvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVDQUF1QyxHQUFHLEtBQUs7QUFDL0NBLHVDQUF1QyxHQUFHO0lBQ3RDRyxZQUFZO1FBQ1I7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNIO0lBQ0RDLGtCQUFrQjtJQUNsQkMsU0FBUztJQUNUQyxVQUFVO0lBQ1ZDLFlBQVk7SUFDWkMsT0FBTztJQUNQQyxtQkFBbUI7UUFDZkMsTUFBTTtJQUNWO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvZXZlbnRzL3R5cGVzLmpzPzU1YzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlZmF1bHRFdmVudFN1YnNjcmlwdGlvbk9wdGlvbnMgPSB2b2lkIDA7XG5leHBvcnRzLkRlZmF1bHRFdmVudFN1YnNjcmlwdGlvbk9wdGlvbnMgPSB7XG4gICAgZXZlbnRUeXBlczogW1xuICAgICAgICAnRGVwb3NpdFJlY29yZCcsXG4gICAgICAgICdGdW5kaW5nUGF5bWVudFJlY29yZCcsXG4gICAgICAgICdMaXF1aWRhdGlvblJlY29yZCcsXG4gICAgICAgICdPcmRlclJlY29yZCcsXG4gICAgICAgICdPcmRlckFjdGlvblJlY29yZCcsXG4gICAgICAgICdGdW5kaW5nUmF0ZVJlY29yZCcsXG4gICAgICAgICdOZXdVc2VyUmVjb3JkJyxcbiAgICAgICAgJ1NldHRsZVBubFJlY29yZCcsXG4gICAgICAgICdMUFJlY29yZCcsXG4gICAgICAgICdJbnN1cmFuY2VGdW5kUmVjb3JkJyxcbiAgICAgICAgJ1Nwb3RJbnRlcmVzdFJlY29yZCcsXG4gICAgICAgICdJbnN1cmFuY2VGdW5kU3Rha2VSZWNvcmQnLFxuICAgICAgICAnQ3VydmVSZWNvcmQnLFxuICAgICAgICAnU3dhcFJlY29yZCcsXG4gICAgXSxcbiAgICBtYXhFdmVudHNQZXJUeXBlOiA0MDk2LFxuICAgIG9yZGVyQnk6ICdibG9ja2NoYWluJyxcbiAgICBvcmRlckRpcjogJ2FzYycsXG4gICAgY29tbWl0bWVudDogJ2NvbmZpcm1lZCcsXG4gICAgbWF4VHg6IDQwOTYsXG4gICAgbG9nUHJvdmlkZXJDb25maWc6IHtcbiAgICAgICAgdHlwZTogJ3dlYnNvY2tldCcsXG4gICAgfSxcbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJEZWZhdWx0RXZlbnRTdWJzY3JpcHRpb25PcHRpb25zIiwiZXZlbnRUeXBlcyIsIm1heEV2ZW50c1BlclR5cGUiLCJvcmRlckJ5Iiwib3JkZXJEaXIiLCJjb21taXRtZW50IiwibWF4VHgiLCJsb2dQcm92aWRlckNvbmZpZyIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/events/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/events/webSocketLogProvider.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/events/webSocketLogProvider.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebSocketLogProvider = void 0;\nclass WebSocketLogProvider {\n    constructor(connection, address, commitment){\n        this.connection = connection;\n        this.address = address;\n        this.commitment = commitment;\n    }\n    subscribe(callback) {\n        if (this.subscriptionId) {\n            return true;\n        }\n        this.subscriptionId = this.connection.onLogs(this.address, (logs, ctx)=>{\n            callback(logs.signature, ctx.slot, logs.logs, undefined);\n        }, this.commitment);\n        return true;\n    }\n    isSubscribed() {\n        return this.subscriptionId !== undefined;\n    }\n    async unsubscribe() {\n        if (this.subscriptionId !== undefined) {\n            await this.connection.removeOnLogsListener(this.subscriptionId);\n            this.subscriptionId = undefined;\n        }\n        return true;\n    }\n}\nexports.WebSocketLogProvider = WebSocketLogProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9ldmVudHMvd2ViU29ja2V0TG9nUHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDRCQUE0QixHQUFHLEtBQUs7QUFDcEMsTUFBTUU7SUFDRkMsWUFBWUMsVUFBVSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsQ0FBRTtRQUN6QyxJQUFJLENBQUNGLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO0lBQ3RCO0lBQ0FDLFVBQVVDLFFBQVEsRUFBRTtRQUNoQixJQUFJLElBQUksQ0FBQ0MsY0FBYyxFQUFFO1lBQ3JCLE9BQU87UUFDWDtRQUNBLElBQUksQ0FBQ0EsY0FBYyxHQUFHLElBQUksQ0FBQ0wsVUFBVSxDQUFDTSxNQUFNLENBQUMsSUFBSSxDQUFDTCxPQUFPLEVBQUUsQ0FBQ00sTUFBTUM7WUFDOURKLFNBQVNHLEtBQUtFLFNBQVMsRUFBRUQsSUFBSUUsSUFBSSxFQUFFSCxLQUFLQSxJQUFJLEVBQUVJO1FBQ2xELEdBQUcsSUFBSSxDQUFDVCxVQUFVO1FBQ2xCLE9BQU87SUFDWDtJQUNBVSxlQUFlO1FBQ1gsT0FBTyxJQUFJLENBQUNQLGNBQWMsS0FBS007SUFDbkM7SUFDQSxNQUFNRSxjQUFjO1FBQ2hCLElBQUksSUFBSSxDQUFDUixjQUFjLEtBQUtNLFdBQVc7WUFDbkMsTUFBTSxJQUFJLENBQUNYLFVBQVUsQ0FBQ2Msb0JBQW9CLENBQUMsSUFBSSxDQUFDVCxjQUFjO1lBQzlELElBQUksQ0FBQ0EsY0FBYyxHQUFHTTtRQUMxQjtRQUNBLE9BQU87SUFDWDtBQUNKO0FBQ0FmLDRCQUE0QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9ldmVudHMvd2ViU29ja2V0TG9nUHJvdmlkZXIuanM/NjMxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2ViU29ja2V0TG9nUHJvdmlkZXIgPSB2b2lkIDA7XG5jbGFzcyBXZWJTb2NrZXRMb2dQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbiwgYWRkcmVzcywgY29tbWl0bWVudCkge1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgICB0aGlzLmNvbW1pdG1lbnQgPSBjb21taXRtZW50O1xuICAgIH1cbiAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uSWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uSWQgPSB0aGlzLmNvbm5lY3Rpb24ub25Mb2dzKHRoaXMuYWRkcmVzcywgKGxvZ3MsIGN0eCkgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2sobG9ncy5zaWduYXR1cmUsIGN0eC5zbG90LCBsb2dzLmxvZ3MsIHVuZGVmaW5lZCk7XG4gICAgICAgIH0sIHRoaXMuY29tbWl0bWVudCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpc1N1YnNjcmliZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmlwdGlvbklkICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGFzeW5jIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25JZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbm5lY3Rpb24ucmVtb3ZlT25Mb2dzTGlzdGVuZXIodGhpcy5zdWJzY3JpcHRpb25JZCk7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbklkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuV2ViU29ja2V0TG9nUHJvdmlkZXIgPSBXZWJTb2NrZXRMb2dQcm92aWRlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIldlYlNvY2tldExvZ1Byb3ZpZGVyIiwiY29uc3RydWN0b3IiLCJjb25uZWN0aW9uIiwiYWRkcmVzcyIsImNvbW1pdG1lbnQiLCJzdWJzY3JpYmUiLCJjYWxsYmFjayIsInN1YnNjcmlwdGlvbklkIiwib25Mb2dzIiwibG9ncyIsImN0eCIsInNpZ25hdHVyZSIsInNsb3QiLCJ1bmRlZmluZWQiLCJpc1N1YnNjcmliZWQiLCJ1bnN1YnNjcmliZSIsInJlbW92ZU9uTG9nc0xpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/events/webSocketLogProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/factory/bigNum.js":
/*!************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/factory/bigNum.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BigNum = void 0;\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst assert_1 = __webpack_require__(/*! ../assert/assert */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/assert/assert.js\");\nconst numericConstants_1 = __webpack_require__(/*! ./../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nclass BigNum {\n    static setLocale(locale) {\n        BigNum.delim = 1.1.toLocaleString(locale).slice(1, 2) || \".\";\n        BigNum.spacer = 1000..toLocaleString(locale).slice(1, 2) || \",\";\n    }\n    constructor(val, precisionVal = new anchor_1.BN(0)){\n        this.toString = (base, length)=>this.val.toString(base, length);\n        this.val = new anchor_1.BN(val);\n        this.precision = new anchor_1.BN(precisionVal);\n    }\n    bigNumFromParam(bn) {\n        return anchor_1.BN.isBN(bn) ? BigNum.from(bn) : bn;\n    }\n    add(bn) {\n        (0, assert_1.assert)(bn.precision.eq(this.precision), \"Adding unequal precisions\");\n        return BigNum.from(this.val.add(bn.val), this.precision);\n    }\n    sub(bn) {\n        (0, assert_1.assert)(bn.precision.eq(this.precision), \"Subtracting unequal precisions\");\n        return BigNum.from(this.val.sub(bn.val), this.precision);\n    }\n    mul(bn) {\n        const mulVal = this.bigNumFromParam(bn);\n        return BigNum.from(this.val.mul(mulVal.val), this.precision.add(mulVal.precision));\n    }\n    /**\n     * Multiplies by another big number then scales the result down by the big number's precision so that we're in the same precision space\n     * @param bn\n     * @returns\n     */ scalarMul(bn) {\n        if (anchor_1.BN.isBN(bn)) return BigNum.from(this.val.mul(bn), this.precision);\n        return BigNum.from(this.val.mul(bn.val), this.precision.add(bn.precision)).shift(bn.precision.neg());\n    }\n    div(bn) {\n        if (anchor_1.BN.isBN(bn)) return BigNum.from(this.val.div(bn), this.precision);\n        return BigNum.from(this.val.div(bn.val), this.precision.sub(bn.precision));\n    }\n    /**\n     * Shift precision up or down\n     * @param exponent\n     * @param skipAdjustingPrecision\n     * @returns\n     */ shift(exponent, skipAdjustingPrecision = false) {\n        const shiftVal = typeof exponent === \"number\" ? new anchor_1.BN(exponent) : exponent;\n        return BigNum.from(shiftVal.isNeg() ? this.val.div(new anchor_1.BN(10).pow(shiftVal)) : this.val.mul(new anchor_1.BN(10).pow(shiftVal)), skipAdjustingPrecision ? this.precision : this.precision.add(shiftVal));\n    }\n    /**\n     * Shift to a target precision\n     * @param targetPrecision\n     * @returns\n     */ shiftTo(targetPrecision) {\n        return this.shift(targetPrecision.sub(this.precision));\n    }\n    /**\n     * Scale the number by a fraction\n     * @param numerator\n     * @param denominator\n     * @returns\n     */ scale(numerator, denominator) {\n        return this.mul(BigNum.from(new anchor_1.BN(numerator))).div(new anchor_1.BN(denominator));\n    }\n    toPercentage(denominator, precision) {\n        return this.shift(precision).shift(2, true).div(denominator).toPrecision(precision);\n    }\n    gt(bn, ignorePrecision) {\n        const comparisonVal = this.bigNumFromParam(bn);\n        if (!ignorePrecision && !comparisonVal.eq(numericConstants_1.ZERO)) {\n            (0, assert_1.assert)(comparisonVal.precision.eq(this.precision), \"Trying to compare numbers with different precision. Yo can opt to ignore precision using the ignorePrecision parameter\");\n        }\n        return this.val.gt(comparisonVal.val);\n    }\n    lt(bn, ignorePrecision) {\n        const comparisonVal = this.bigNumFromParam(bn);\n        if (!ignorePrecision && !comparisonVal.val.eq(numericConstants_1.ZERO)) {\n            (0, assert_1.assert)(comparisonVal.precision.eq(this.precision), \"Trying to compare numbers with different precision. Yo can opt to ignore precision using the ignorePrecision parameter\");\n        }\n        return this.val.lt(comparisonVal.val);\n    }\n    gte(bn, ignorePrecision) {\n        const comparisonVal = this.bigNumFromParam(bn);\n        if (!ignorePrecision && !comparisonVal.val.eq(numericConstants_1.ZERO)) {\n            (0, assert_1.assert)(comparisonVal.precision.eq(this.precision), \"Trying to compare numbers with different precision. Yo can opt to ignore precision using the ignorePrecision parameter\");\n        }\n        return this.val.gte(comparisonVal.val);\n    }\n    lte(bn, ignorePrecision) {\n        const comparisonVal = this.bigNumFromParam(bn);\n        if (!ignorePrecision && !comparisonVal.val.eq(numericConstants_1.ZERO)) {\n            (0, assert_1.assert)(comparisonVal.precision.eq(this.precision), \"Trying to compare numbers with different precision. Yo can opt to ignore precision using the ignorePrecision parameter\");\n        }\n        return this.val.lte(comparisonVal.val);\n    }\n    eq(bn, ignorePrecision) {\n        const comparisonVal = this.bigNumFromParam(bn);\n        if (!ignorePrecision && !comparisonVal.val.eq(numericConstants_1.ZERO)) {\n            (0, assert_1.assert)(comparisonVal.precision.eq(this.precision), \"Trying to compare numbers with different precision. Yo can opt to ignore precision using the ignorePrecision parameter\");\n        }\n        return this.val.eq(comparisonVal.val);\n    }\n    eqZero() {\n        return this.val.eq(numericConstants_1.ZERO);\n    }\n    gtZero() {\n        return this.val.gt(numericConstants_1.ZERO);\n    }\n    ltZero() {\n        return this.val.lt(numericConstants_1.ZERO);\n    }\n    gteZero() {\n        return this.val.gte(numericConstants_1.ZERO);\n    }\n    lteZero() {\n        return this.val.lte(numericConstants_1.ZERO);\n    }\n    abs() {\n        return new BigNum(this.val.abs(), this.precision);\n    }\n    neg() {\n        return new BigNum(this.val.neg(), this.precision);\n    }\n    /**\n     * Pretty print the underlying value in human-readable form. Depends on precision being correct for the output string to be correct\n     * @returns\n     */ print() {\n        (0, assert_1.assert)(this.precision.gte(numericConstants_1.ZERO), \"Tried to print a BN with precision lower than zero\");\n        const isNeg = this.isNeg();\n        const plainString = this.abs().toString();\n        const precisionNum = this.precision.toNumber();\n        // make a string with at least the precisionNum number of zeroes\n        let printString = [\n            ...Array(this.precision.toNumber()).fill(0),\n            ...plainString.split(\"\")\n        ].join(\"\");\n        // inject decimal\n        printString = printString.substring(0, printString.length - precisionNum) + BigNum.delim + printString.substring(printString.length - precisionNum);\n        // remove leading zeroes\n        printString = printString.replace(/^0+/, \"\");\n        // add zero if leading delim\n        if (printString[0] === BigNum.delim) printString = `0${printString}`;\n        // Add minus if negative\n        if (isNeg) printString = `-${printString}`;\n        // remove trailing delim\n        if (printString[printString.length - 1] === BigNum.delim) printString = printString.slice(0, printString.length - 1);\n        return printString;\n    }\n    prettyPrint(useTradePrecision, precisionOverride) {\n        const [leftSide, rightSide] = this.printShort(useTradePrecision, precisionOverride).split(BigNum.delim);\n        let formattedLeftSide = leftSide;\n        const isNeg = formattedLeftSide.includes(\"-\");\n        if (isNeg) {\n            formattedLeftSide = formattedLeftSide.replace(\"-\", \"\");\n        }\n        let index = formattedLeftSide.length - 3;\n        while(index >= 1){\n            const formattedLeftSideArray = formattedLeftSide.split(\"\");\n            formattedLeftSideArray.splice(index, 0, BigNum.spacer);\n            formattedLeftSide = formattedLeftSideArray.join(\"\");\n            index -= 3;\n        }\n        return `${isNeg ? \"-\" : \"\"}${formattedLeftSide}${rightSide ? `${BigNum.delim}${rightSide}` : \"\"}`;\n    }\n    /**\n     * Print and remove unnecessary trailing zeroes\n     * @returns\n     */ printShort(useTradePrecision, precisionOverride) {\n        const printVal = precisionOverride ? this.toPrecision(precisionOverride) : useTradePrecision ? this.toTradePrecision() : this.print();\n        if (!printVal.includes(BigNum.delim)) return printVal;\n        return printVal.replace(/0+$/g, \"\").replace(/\\.$/, \"\").replace(/,$/, \"\");\n    }\n    debug() {\n        console.log(`${this.toString()} | ${this.print()} | ${this.precision.toString()}`);\n    }\n    /**\n     * Pretty print with the specified number of decimal places\n     * @param fixedPrecision\n     * @returns\n     */ toFixed(fixedPrecision, rounded = false) {\n        if (rounded) {\n            return this.toRounded(fixedPrecision).toFixed(fixedPrecision);\n        }\n        const printString = this.print();\n        const [leftSide, rightSide] = printString.split(BigNum.delim);\n        const filledRightSide = [\n            ...(rightSide !== null && rightSide !== void 0 ? rightSide : \"\").slice(0, fixedPrecision),\n            ...Array(fixedPrecision).fill(\"0\")\n        ].slice(0, fixedPrecision).join(\"\");\n        return `${leftSide}${BigNum.delim}${filledRightSide}`;\n    }\n    getZeroes(count) {\n        return new Array(Math.max(count, 0)).fill(\"0\").join(\"\");\n    }\n    toRounded(roundingPrecision) {\n        const printString = this.toString();\n        let shouldRoundUp = false;\n        const roundingDigitChar = printString[roundingPrecision];\n        if (roundingDigitChar) {\n            const roundingDigitVal = Number(roundingDigitChar);\n            if (roundingDigitVal >= 5) shouldRoundUp = true;\n        }\n        if (shouldRoundUp) {\n            const valueWithRoundedPrecisionAdded = this.add(BigNum.from(new anchor_1.BN(10).pow(new anchor_1.BN(printString.length - roundingPrecision)), this.precision));\n            const roundedUpPrintString = valueWithRoundedPrecisionAdded.toString().slice(0, roundingPrecision) + this.getZeroes(printString.length - roundingPrecision);\n            return BigNum.from(roundedUpPrintString, this.precision);\n        } else {\n            const roundedDownPrintString = printString.slice(0, roundingPrecision) + this.getZeroes(printString.length - roundingPrecision);\n            return BigNum.from(roundedDownPrintString, this.precision);\n        }\n    }\n    /**\n     * Pretty print to the specified number of significant figures\n     * @param fixedPrecision\n     * @returns\n     */ toPrecision(fixedPrecision, trailingZeroes = false, rounded = false) {\n        if (rounded) {\n            return this.toRounded(fixedPrecision).toPrecision(fixedPrecision, trailingZeroes);\n        }\n        const isNeg = this.isNeg();\n        const printString = this.abs().print();\n        const thisString = this.abs().toString();\n        let precisionPrintString = printString.slice(0, fixedPrecision + 1);\n        if (!printString.includes(BigNum.delim) && thisString.length < fixedPrecision) {\n            const precisionMismatch = fixedPrecision - thisString.length;\n            return BigNum.from((isNeg ? \"-\" : \"\") + thisString + this.getZeroes(precisionMismatch), precisionMismatch).toPrecision(fixedPrecision, trailingZeroes);\n        }\n        if (!precisionPrintString.includes(BigNum.delim) || precisionPrintString[precisionPrintString.length - 1] === BigNum.delim) {\n            precisionPrintString = printString.slice(0, fixedPrecision);\n        }\n        const pointsOfPrecision = precisionPrintString.replace(BigNum.delim, \"\").length;\n        if (pointsOfPrecision < fixedPrecision) {\n            precisionPrintString = [\n                ...precisionPrintString.split(\"\"),\n                ...Array(fixedPrecision - pointsOfPrecision).fill(\"0\")\n            ].join(\"\");\n        }\n        if (!precisionPrintString.includes(BigNum.delim)) {\n            const delimFullStringLocation = printString.indexOf(BigNum.delim);\n            let skipExponent = false;\n            if (delimFullStringLocation === -1) {\n                // no decimal, not missing any precision\n                skipExponent = true;\n            }\n            if (precisionPrintString[precisionPrintString.length - 1] === BigNum.delim) {\n                // decimal is at end of string, not missing any precision, do nothing\n                skipExponent = true;\n            }\n            if (printString.indexOf(BigNum.delim) === fixedPrecision) {\n                // decimal is at end of string, not missing any precision, do nothing\n                skipExponent = true;\n            }\n            if (!skipExponent) {\n                const exponent = delimFullStringLocation - fixedPrecision;\n                if (trailingZeroes) {\n                    precisionPrintString = `${precisionPrintString}${Array(exponent).fill(\"0\").join(\"\")}`;\n                } else {\n                    precisionPrintString = `${precisionPrintString}e${exponent}`;\n                }\n            }\n        }\n        return `${isNeg ? \"-\" : \"\"}${precisionPrintString}`;\n    }\n    toTradePrecision(rounded = false) {\n        return this.toPrecision(6, true, rounded);\n    }\n    /**\n     * Print dollar formatted value. Defaults to fixed decimals two unless a given precision is given.\n     * @param useTradePrecision\n     * @param precisionOverride\n     * @returns\n     */ toNotional(useTradePrecision, precisionOverride) {\n        var _a;\n        const prefix = `${this.lt(BigNum.zero()) ? `-` : ``}$`;\n        const usingCustomPrecision =  true && (useTradePrecision || precisionOverride);\n        let val = usingCustomPrecision ? this.prettyPrint(useTradePrecision, precisionOverride) : BigNum.fromPrint(this.toFixed(2), new anchor_1.BN(2)).prettyPrint();\n        // Append trailing zeroes out to 2 decimal places if not using custom precision\n        if (!usingCustomPrecision) {\n            const [_, rightSide] = val.split(BigNum.delim);\n            const trailingLength = (_a = rightSide === null || rightSide === void 0 ? void 0 : rightSide.length) !== null && _a !== void 0 ? _a : 0;\n            if (trailingLength === 0) {\n                val = `${val}${BigNum.delim}00`;\n            } else if (trailingLength === 1) {\n                val = `${val}0`;\n            }\n        }\n        return `${prefix}${val.replace(\"-\", \"\")}`;\n    }\n    toMillified(precision = 3, rounded = false) {\n        if (rounded) {\n            return this.toRounded(precision).toMillified(precision);\n        }\n        const isNeg = this.isNeg();\n        const stringVal = this.abs().print();\n        const [leftSide] = stringVal.split(BigNum.delim);\n        if (!leftSide) {\n            return this.shift(new anchor_1.BN(precision)).toPrecision(precision, true);\n        }\n        if (leftSide.length <= precision) {\n            return this.toPrecision(precision);\n        }\n        if (leftSide.length <= 3) {\n            return this.shift(new anchor_1.BN(precision)).toPrecision(precision, true);\n        }\n        const unitTicks = [\n            \"\",\n            \"K\",\n            \"M\",\n            \"G\",\n            \"T\",\n            \"P\",\n            \"E\",\n            \"Z\",\n            \"Y\"\n        ];\n        const unitNumber = Math.floor((leftSide.length - 1) / 3);\n        const unit = unitTicks[unitNumber];\n        let leadDigits = leftSide.slice(0, precision);\n        if (leadDigits.length < precision) {\n            leadDigits = [\n                ...leadDigits.split(\"\"),\n                ...Array(precision - leadDigits.length).fill(\"0\")\n            ].join(\"\");\n        }\n        const decimalLocation = leftSide.length - 3 * unitNumber;\n        let leadString = \"\";\n        if (decimalLocation >= precision) {\n            leadString = `${leadDigits}`;\n        } else {\n            leadString = `${leadDigits.slice(0, decimalLocation)}${BigNum.delim}${leadDigits.slice(decimalLocation)}`;\n        }\n        return `${isNeg ? \"-\" : \"\"}${leadString}${unit}`;\n    }\n    toJSON() {\n        return {\n            val: this.val.toString(),\n            precision: this.precision.toString()\n        };\n    }\n    isNeg() {\n        return this.lt(numericConstants_1.ZERO, true);\n    }\n    isPos() {\n        return !this.isNeg();\n    }\n    /**\n     * Get the numerical value of the BigNum. This can break if the BigNum is too large.\n     * @returns\n     */ toNum() {\n        let printedValue = this.print();\n        // Must convert any non-US delimiters and spacers to US format before using parseFloat\n        if (BigNum.delim !== \".\" || BigNum.spacer !== \",\") {\n            printedValue = printedValue.split(\"\").map((char)=>{\n                if (char === BigNum.delim) return \".\";\n                if (char === BigNum.spacer) return \",\";\n                return char;\n            }).join(\"\");\n        }\n        return parseFloat(printedValue);\n    }\n    static fromJSON(json) {\n        return BigNum.from(new anchor_1.BN(json.val), new anchor_1.BN(json.precision));\n    }\n    /**\n     * Create a BigNum instance\n     * @param val\n     * @param precision\n     * @returns\n     */ static from(val = numericConstants_1.ZERO, precision) {\n        (0, assert_1.assert)(new anchor_1.BN(precision).lt(new anchor_1.BN(100)), \"Tried to create a bignum with precision higher than 10^100\");\n        return new BigNum(val, precision);\n    }\n    /**\n     * Create a BigNum instance from a printed BigNum\n     * @param val\n     * @param precisionOverride\n     * @returns\n     */ static fromPrint(val, precisionShift) {\n        var _a;\n        // Handle empty number edge cases\n        if (!val) return BigNum.from(numericConstants_1.ZERO, precisionShift);\n        if (!val.replace(BigNum.delim, \"\")) {\n            return BigNum.from(numericConstants_1.ZERO, precisionShift);\n        }\n        const sides = val.split(BigNum.delim);\n        const rightSide = sides[1];\n        const leftSide = sides[0].replace(/\\s/g, \"\");\n        const bnInput = `${leftSide !== null && leftSide !== void 0 ? leftSide : \"\"}${rightSide !== null && rightSide !== void 0 ? rightSide : \"\"}`;\n        const rawBn = new anchor_1.BN(bnInput);\n        const rightSideLength = (_a = rightSide === null || rightSide === void 0 ? void 0 : rightSide.length) !== null && _a !== void 0 ? _a : 0;\n        const totalShift = precisionShift ? precisionShift.sub(new anchor_1.BN(rightSideLength)) : numericConstants_1.ZERO;\n        return BigNum.from(rawBn, precisionShift).shift(totalShift, true);\n    }\n    static max(a, b) {\n        return a.gt(b) ? a : b;\n    }\n    static min(a, b) {\n        return a.lt(b) ? a : b;\n    }\n    static zero(precision) {\n        return BigNum.from(0, precision);\n    }\n}\nexports.BigNum = BigNum;\nBigNum.delim = \".\";\nBigNum.spacer = \",\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/factory/bigNum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/factory/oracleClient.js":
/*!******************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/factory/oracleClient.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getOracleClient = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst pythClient_1 = __webpack_require__(/*! ../oracles/pythClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/pythClient.js\");\n// import { SwitchboardClient } from '../oracles/switchboardClient';\nconst quoteAssetOracleClient_1 = __webpack_require__(/*! ../oracles/quoteAssetOracleClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/quoteAssetOracleClient.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nfunction getOracleClient(oracleSource, connection) {\n    if ((0, types_1.isVariant)(oracleSource, \"pyth\")) {\n        return new pythClient_1.PythClient(connection);\n    }\n    if ((0, types_1.isVariant)(oracleSource, \"pyth1K\")) {\n        return new pythClient_1.PythClient(connection, new anchor_1.BN(1000));\n    }\n    if ((0, types_1.isVariant)(oracleSource, \"pyth1M\")) {\n        return new pythClient_1.PythClient(connection, new anchor_1.BN(1000000));\n    }\n    if ((0, types_1.isVariant)(oracleSource, \"pythStableCoin\")) {\n        return new pythClient_1.PythClient(connection, undefined, true);\n    }\n    // if (isVariant(oracleSource, 'switchboard')) {\n    // \treturn new SwitchboardClient(connection);\n    // }\n    if ((0, types_1.isVariant)(oracleSource, \"quoteAsset\")) {\n        return new quoteAssetOracleClient_1.QuoteAssetOracleClient();\n    }\n    throw new Error(`Unknown oracle source ${oracleSource}`);\n}\nexports.getOracleClient = getOracleClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9mYWN0b3J5L29yYWNsZUNsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUcsS0FBSztBQUMvQixNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQyxtRUFBVTtBQUNsQyxNQUFNQyxlQUFlRCxtQkFBT0EsQ0FBQyw2RkFBdUI7QUFDcEQsb0VBQW9FO0FBQ3BFLE1BQU1FLDJCQUEyQkYsbUJBQU9BLENBQUMscUhBQW1DO0FBQzVFLE1BQU1HLFdBQVdILG1CQUFPQSxDQUFDLG1GQUFtQjtBQUM1QyxTQUFTRixnQkFBZ0JNLFlBQVksRUFBRUMsVUFBVTtJQUM3QyxJQUFJLENBQUMsR0FBR04sUUFBUU8sU0FBUyxFQUFFRixjQUFjLFNBQVM7UUFDOUMsT0FBTyxJQUFJSCxhQUFhTSxVQUFVLENBQUNGO0lBQ3ZDO0lBQ0EsSUFBSSxDQUFDLEdBQUdOLFFBQVFPLFNBQVMsRUFBRUYsY0FBYyxXQUFXO1FBQ2hELE9BQU8sSUFBSUgsYUFBYU0sVUFBVSxDQUFDRixZQUFZLElBQUlGLFNBQVNLLEVBQUUsQ0FBQztJQUNuRTtJQUNBLElBQUksQ0FBQyxHQUFHVCxRQUFRTyxTQUFTLEVBQUVGLGNBQWMsV0FBVztRQUNoRCxPQUFPLElBQUlILGFBQWFNLFVBQVUsQ0FBQ0YsWUFBWSxJQUFJRixTQUFTSyxFQUFFLENBQUM7SUFDbkU7SUFDQSxJQUFJLENBQUMsR0FBR1QsUUFBUU8sU0FBUyxFQUFFRixjQUFjLG1CQUFtQjtRQUN4RCxPQUFPLElBQUlILGFBQWFNLFVBQVUsQ0FBQ0YsWUFBWUksV0FBVztJQUM5RDtJQUNBLGdEQUFnRDtJQUNoRCw2Q0FBNkM7SUFDN0MsSUFBSTtJQUNKLElBQUksQ0FBQyxHQUFHVixRQUFRTyxTQUFTLEVBQUVGLGNBQWMsZUFBZTtRQUNwRCxPQUFPLElBQUlGLHlCQUF5QlEsc0JBQXNCO0lBQzlEO0lBQ0EsTUFBTSxJQUFJQyxNQUFNLENBQUMsc0JBQXNCLEVBQUVQLGFBQWEsQ0FBQztBQUMzRDtBQUNBUix1QkFBdUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvZmFjdG9yeS9vcmFjbGVDbGllbnQuanM/ZTQ1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0T3JhY2xlQ2xpZW50ID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi90eXBlc1wiKTtcbmNvbnN0IHB5dGhDbGllbnRfMSA9IHJlcXVpcmUoXCIuLi9vcmFjbGVzL3B5dGhDbGllbnRcIik7XG4vLyBpbXBvcnQgeyBTd2l0Y2hib2FyZENsaWVudCB9IGZyb20gJy4uL29yYWNsZXMvc3dpdGNoYm9hcmRDbGllbnQnO1xuY29uc3QgcXVvdGVBc3NldE9yYWNsZUNsaWVudF8xID0gcmVxdWlyZShcIi4uL29yYWNsZXMvcXVvdGVBc3NldE9yYWNsZUNsaWVudFwiKTtcbmNvbnN0IGFuY2hvcl8xID0gcmVxdWlyZShcIkBjb3JhbC14eXovYW5jaG9yXCIpO1xuZnVuY3Rpb24gZ2V0T3JhY2xlQ2xpZW50KG9yYWNsZVNvdXJjZSwgY29ubmVjdGlvbikge1xuICAgIGlmICgoMCwgdHlwZXNfMS5pc1ZhcmlhbnQpKG9yYWNsZVNvdXJjZSwgJ3B5dGgnKSkge1xuICAgICAgICByZXR1cm4gbmV3IHB5dGhDbGllbnRfMS5QeXRoQ2xpZW50KGNvbm5lY3Rpb24pO1xuICAgIH1cbiAgICBpZiAoKDAsIHR5cGVzXzEuaXNWYXJpYW50KShvcmFjbGVTb3VyY2UsICdweXRoMUsnKSkge1xuICAgICAgICByZXR1cm4gbmV3IHB5dGhDbGllbnRfMS5QeXRoQ2xpZW50KGNvbm5lY3Rpb24sIG5ldyBhbmNob3JfMS5CTigxMDAwKSk7XG4gICAgfVxuICAgIGlmICgoMCwgdHlwZXNfMS5pc1ZhcmlhbnQpKG9yYWNsZVNvdXJjZSwgJ3B5dGgxTScpKSB7XG4gICAgICAgIHJldHVybiBuZXcgcHl0aENsaWVudF8xLlB5dGhDbGllbnQoY29ubmVjdGlvbiwgbmV3IGFuY2hvcl8xLkJOKDEwMDAwMDApKTtcbiAgICB9XG4gICAgaWYgKCgwLCB0eXBlc18xLmlzVmFyaWFudCkob3JhY2xlU291cmNlLCAncHl0aFN0YWJsZUNvaW4nKSkge1xuICAgICAgICByZXR1cm4gbmV3IHB5dGhDbGllbnRfMS5QeXRoQ2xpZW50KGNvbm5lY3Rpb24sIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGlmIChpc1ZhcmlhbnQob3JhY2xlU291cmNlLCAnc3dpdGNoYm9hcmQnKSkge1xuICAgIC8vIFx0cmV0dXJuIG5ldyBTd2l0Y2hib2FyZENsaWVudChjb25uZWN0aW9uKTtcbiAgICAvLyB9XG4gICAgaWYgKCgwLCB0eXBlc18xLmlzVmFyaWFudCkob3JhY2xlU291cmNlLCAncXVvdGVBc3NldCcpKSB7XG4gICAgICAgIHJldHVybiBuZXcgcXVvdGVBc3NldE9yYWNsZUNsaWVudF8xLlF1b3RlQXNzZXRPcmFjbGVDbGllbnQoKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIG9yYWNsZSBzb3VyY2UgJHtvcmFjbGVTb3VyY2V9YCk7XG59XG5leHBvcnRzLmdldE9yYWNsZUNsaWVudCA9IGdldE9yYWNsZUNsaWVudDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldE9yYWNsZUNsaWVudCIsInR5cGVzXzEiLCJyZXF1aXJlIiwicHl0aENsaWVudF8xIiwicXVvdGVBc3NldE9yYWNsZUNsaWVudF8xIiwiYW5jaG9yXzEiLCJvcmFjbGVTb3VyY2UiLCJjb25uZWN0aW9uIiwiaXNWYXJpYW50IiwiUHl0aENsaWVudCIsIkJOIiwidW5kZWZpbmVkIiwiUXVvdGVBc3NldE9yYWNsZUNsaWVudCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/factory/oracleClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.pyth = exports.PublicKey = exports.BN = void 0;\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nObject.defineProperty(exports, \"BN\", ({\n    enumerable: true,\n    get: function() {\n        return anchor_1.BN;\n    }\n}));\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nObject.defineProperty(exports, \"PublicKey\", ({\n    enumerable: true,\n    get: function() {\n        return web3_js_1.PublicKey;\n    }\n}));\nconst client_1 = __importDefault(__webpack_require__(/*! @pythnetwork/client */ \"(ssr)/./node_modules/@pythnetwork/client/lib/index.js\"));\nexports.pyth = client_1.default;\n__exportStar(__webpack_require__(/*! ./tokenFaucet */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/tokenFaucet.js\"), exports);\n__exportStar(__webpack_require__(/*! ./oracles/types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./oracles/pythClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/pythClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./constants/perpMarkets */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/perpMarkets.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/fetch */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/fetch.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/webSocketDriftClientAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketDriftClientAccountSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/bulkAccountLoader */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/bulkAccountLoader.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/bulkUserSubscription */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/bulkUserSubscription.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/bulkUserStatsSubscription */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/bulkUserStatsSubscription.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/pollingDriftClientAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingDriftClientAccountSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/pollingOracleAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingOracleAccountSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/pollingTokenAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingTokenAccountSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/pollingUserAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingUserAccountSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/pollingUserStatsAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingUserStatsAccountSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/mockUserAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/mockUserAccountSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./accounts/types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./addresses/pda */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/addresses/pda.js\"), exports);\n__exportStar(__webpack_require__(/*! ./adminClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/adminClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./testClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/testClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./user */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/user.js\"), exports);\n__exportStar(__webpack_require__(/*! ./userConfig */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/userConfig.js\"), exports);\n__exportStar(__webpack_require__(/*! ./userStats */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/userStats.js\"), exports);\n__exportStar(__webpack_require__(/*! ./userName */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/userName.js\"), exports);\n__exportStar(__webpack_require__(/*! ./userStatsConfig */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/userStatsConfig.js\"), exports);\n__exportStar(__webpack_require__(/*! ./driftClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/driftClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./factory/oracleClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/factory/oracleClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./factory/bigNum */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/factory/bigNum.js\"), exports);\n__exportStar(__webpack_require__(/*! ./events/types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./events/eventSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/eventSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./events/fetchLogs */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/events/fetchLogs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./jupiter/jupiterClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/jupiter/jupiterClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/auction */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/auction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/spotMarket */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotMarket.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/conversion */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/conversion.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/exchangeStatus */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/exchangeStatus.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/funding */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/funding.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/market */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/market.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/position */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/position.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/oracles */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/oracles.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/amm */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/amm.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/trade */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/trade.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/orders */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/orders.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/repeg */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/repeg.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/margin */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/margin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/insurance */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/insurance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/superStake */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/superStake.js\"), exports);\n__exportStar(__webpack_require__(/*! ./marinade */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/marinade/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./orderParams */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/orderParams.js\"), exports);\n__exportStar(__webpack_require__(/*! ./slot/SlotSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/slot/SlotSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/wallet.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/utils */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/utils.js\"), exports);\n__exportStar(__webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/config.js\"), exports);\n__exportStar(__webpack_require__(/*! ./constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\"), exports);\n__exportStar(__webpack_require__(/*! ./serum/serumSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/serum/serumSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./serum/serumFulfillmentConfigMap */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/serum/serumFulfillmentConfigMap.js\"), exports);\n__exportStar(__webpack_require__(/*! ./phoenix/phoenixSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/phoenix/phoenixSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./phoenix/phoenixFulfillmentConfigMap */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/phoenix/phoenixFulfillmentConfigMap.js\"), exports);\n__exportStar(__webpack_require__(/*! ./tx/fastSingleTxSender */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/tx/fastSingleTxSender.js\"), exports);\n__exportStar(__webpack_require__(/*! ./tx/retryTxSender */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/tx/retryTxSender.js\"), exports);\n__exportStar(__webpack_require__(/*! ./tx/types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/tx/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./util/computeUnits */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/util/computeUnits.js\"), exports);\n__exportStar(__webpack_require__(/*! ./util/tps */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/util/tps.js\"), exports);\n__exportStar(__webpack_require__(/*! ./util/promiseTimeout */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/util/promiseTimeout.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/spotBalance */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotBalance.js\"), exports);\n__exportStar(__webpack_require__(/*! ./constants/spotMarkets */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/spotMarkets.js\"), exports);\n__exportStar(__webpack_require__(/*! ./driftClientConfig */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/driftClientConfig.js\"), exports);\n__exportStar(__webpack_require__(/*! ./dlob/DLOB */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOB.js\"), exports);\n__exportStar(__webpack_require__(/*! ./dlob/DLOBNode */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBNode.js\"), exports);\n__exportStar(__webpack_require__(/*! ./dlob/DLOBOrders */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBOrders.js\"), exports);\n__exportStar(__webpack_require__(/*! ./dlob/NodeList */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/NodeList.js\"), exports);\n__exportStar(__webpack_require__(/*! ./dlob/DLOBSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./dlob/DLOBApiClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOBApiClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./dlob/types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./dlob/orderBookLevels */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/orderBookLevels.js\"), exports);\n__exportStar(__webpack_require__(/*! ./userMap/userMap */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/userMap/userMap.js\"), exports);\n__exportStar(__webpack_require__(/*! ./userMap/userStatsMap */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/userMap/userStatsMap.js\"), exports);\n__exportStar(__webpack_require__(/*! ./math/bankruptcy */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/bankruptcy.js\"), exports);\n__exportStar(__webpack_require__(/*! ./orderSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./orderSubscriber/types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./auctionSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/auctionSubscriber/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./auctionSubscriber/types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/auctionSubscriber/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./memcmp */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/memcmp.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/jupiter/jupiterClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/jupiter/jupiterClient.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.JupiterClient = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\"));\nclass JupiterClient {\n    constructor({ connection }){\n        this.url = \"https://quote-api.jup.ag/v4\";\n        this.lookupTableCahce = new Map();\n        this.connection = connection;\n    }\n    /**\n     * Get routes for a swap\n     * @param inputMint the mint of the input token\n     * @param outputMint the mint of the output token\n     * @param amount the amount of the input token\n     * @param slippageBps the slippage tolerance in basis points\n     * @param swapMode the swap mode (ExactIn or ExactOut)\n     * @param onlyDirectRoutes whether to only return direct routes\n     */ async getRoutes({ inputMint, outputMint, amount, slippageBps = 50, swapMode = \"ExactIn\", onlyDirectRoutes = false }) {\n        const params = new URLSearchParams({\n            inputMint: inputMint.toString(),\n            outputMint: outputMint.toString(),\n            amount: amount.toString(),\n            slippageBps: slippageBps.toString(),\n            swapMode,\n            onlyDirectRoutes: onlyDirectRoutes.toString()\n        }).toString();\n        const { data: routes } = await (await (0, node_fetch_1.default)(`https://quote-api.jup.ag/v4/quote?${params}`)).json();\n        return routes;\n    }\n    /**\n     * Get a swap transaction for a route\n     * @param route the route to perform swap\n     * @param userPublicKey the signer's wallet public key\n     * @param slippageBps the slippage tolerance in basis points\n     */ async getSwapTransaction({ route, userPublicKey, slippageBps = 50 }) {\n        const resp = await (await (0, node_fetch_1.default)(`${this.url}/swap`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                route,\n                userPublicKey,\n                slippageBps\n            })\n        })).json();\n        const { swapTransaction } = resp;\n        const swapTransactionBuf = Buffer.from(swapTransaction, \"base64\");\n        return web3_js_1.VersionedTransaction.deserialize(swapTransactionBuf);\n    }\n    /**\n     * Get the transaction message and lookup tables for a transaction\n     * @param transaction\n     */ async getTransactionMessageAndLookupTables({ transaction }) {\n        const message = transaction.message;\n        const lookupTables = (await Promise.all(message.addressTableLookups.map(async (lookup)=>{\n            return await this.getLookupTable(lookup.accountKey);\n        }))).filter((lookup)=>lookup);\n        const transactionMessage = web3_js_1.TransactionMessage.decompile(message, {\n            addressLookupTableAccounts: lookupTables\n        });\n        return {\n            transactionMessage,\n            lookupTables\n        };\n    }\n    async getLookupTable(accountKey) {\n        if (this.lookupTableCahce.has(accountKey.toString())) {\n            return this.lookupTableCahce.get(accountKey.toString());\n        }\n        return (await this.connection.getAddressLookupTable(accountKey)).value;\n    }\n    /**\n     * Get the jupiter instructions from transaction by filtering out instructions to compute budget and associated token programs\n     * @param transactionMessage the transaction message\n     * @param inputMint the input mint\n     * @param outputMint the output mint\n     */ getJupiterInstructions({ transactionMessage, inputMint, outputMint }) {\n        return transactionMessage.instructions.filter((instruction)=>{\n            if (instruction.programId.toString() === \"ComputeBudget111111111111111111111111111111\") {\n                return false;\n            }\n            if (instruction.programId.toString() === \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\") {\n                return false;\n            }\n            if (instruction.programId.toString() === \"11111111111111111111111111111111\") {\n                return false;\n            }\n            if (instruction.programId.toString() === \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\") {\n                const mint = instruction.keys[3].pubkey;\n                if (mint.equals(inputMint) || mint.equals(outputMint)) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    }\n}\nexports.JupiterClient = JupiterClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/jupiter/jupiterClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/marinade/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/marinade/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getMarinadeMSolPrice = exports.getMarinadeDepositIx = exports.getMarinadeFinanceProgram = void 0;\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/marinade/types.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst spl_token_1 = __webpack_require__(/*! @solana/spl-token */ \"(ssr)/./node_modules/@solana/spl-token/lib/cjs/index.js\");\nconst marinadeFinanceProgramId = new web3_js_1.PublicKey(\"MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD\");\nfunction getMarinadeFinanceProgram(provider) {\n    return new anchor_1.Program(types_1.IDL, marinadeFinanceProgramId, provider);\n}\nexports.getMarinadeFinanceProgram = getMarinadeFinanceProgram;\nfunction getMarinadeDepositIx({ program, amount, mSOLAccount, transferFrom }) {\n    return program.methods.deposit(amount).accountsStrict({\n        reservePda: new web3_js_1.PublicKey(\"Du3Ysj1wKbxPKkuPPnvzQLQh8oMSVifs3jGZjJWXFmHN\"),\n        state: new web3_js_1.PublicKey(\"8szGkuLTAux9XMgZ2vtY39jVSowEcpBfFfD8hXSEqdGC\"),\n        msolMint: new web3_js_1.PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\"),\n        msolMintAuthority: new web3_js_1.PublicKey(\"3JLPCS1qM2zRw3Dp6V4hZnYHd4toMNPkNesXdX9tg6KM\"),\n        liqPoolMsolLegAuthority: new web3_js_1.PublicKey(\"EyaSjUtSgo9aRD1f8LWXwdvkpDTmXAW54yoSHZRF14WL\"),\n        liqPoolMsolLeg: new web3_js_1.PublicKey(\"7GgPYjS5Dza89wV6FpZ23kUJRG5vbQ1GM25ezspYFSoE\"),\n        liqPoolSolLegPda: new web3_js_1.PublicKey(\"UefNb6z6yvArqe4cJHTXCqStRsKmWhGxnZzuHbikP5Q\"),\n        mintTo: mSOLAccount,\n        transferFrom,\n        systemProgram: web3_js_1.SystemProgram.programId,\n        tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n    }).instruction();\n}\nexports.getMarinadeDepositIx = getMarinadeDepositIx;\nasync function getMarinadeMSolPrice(program) {\n    const state = await program.account.state.fetch(new web3_js_1.PublicKey(\"8szGkuLTAux9XMgZ2vtY39jVSowEcpBfFfD8hXSEqdGC\"));\n    return state.msolPrice.toNumber() / 4294967296;\n}\nexports.getMarinadeMSolPrice = getMarinadeMSolPrice;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXJpbmFkZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNEJBQTRCLEdBQUdBLDRCQUE0QixHQUFHQSxpQ0FBaUMsR0FBRyxLQUFLO0FBQ3ZHLE1BQU1LLFdBQVdDLG1CQUFPQSxDQUFDLG1GQUFtQjtBQUM1QyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQywyRUFBUztBQUNqQyxNQUFNRSxZQUFZRixtQkFBT0EsQ0FBQyw4RUFBaUI7QUFDM0MsTUFBTUcsY0FBY0gsbUJBQU9BLENBQUMsa0ZBQW1CO0FBQy9DLE1BQU1JLDJCQUEyQixJQUFJRixVQUFVRyxTQUFTLENBQUM7QUFDekQsU0FBU1AsMEJBQTBCUSxRQUFRO0lBQ3ZDLE9BQU8sSUFBSVAsU0FBU1EsT0FBTyxDQUFDTixRQUFRTyxHQUFHLEVBQUVKLDBCQUEwQkU7QUFDdkU7QUFDQVosaUNBQWlDLEdBQUdJO0FBQ3BDLFNBQVNELHFCQUFxQixFQUFFWSxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUc7SUFDekUsT0FBT0gsUUFBUUksT0FBTyxDQUNqQkMsT0FBTyxDQUFDSixRQUNSSyxjQUFjLENBQUM7UUFDaEJDLFlBQVksSUFBSWQsVUFBVUcsU0FBUyxDQUFDO1FBQ3BDWSxPQUFPLElBQUlmLFVBQVVHLFNBQVMsQ0FBQztRQUMvQmEsVUFBVSxJQUFJaEIsVUFBVUcsU0FBUyxDQUFDO1FBQ2xDYyxtQkFBbUIsSUFBSWpCLFVBQVVHLFNBQVMsQ0FBQztRQUMzQ2UseUJBQXlCLElBQUlsQixVQUFVRyxTQUFTLENBQUM7UUFDakRnQixnQkFBZ0IsSUFBSW5CLFVBQVVHLFNBQVMsQ0FBQztRQUN4Q2lCLGtCQUFrQixJQUFJcEIsVUFBVUcsU0FBUyxDQUFDO1FBQzFDa0IsUUFBUVo7UUFDUkM7UUFDQVksZUFBZXRCLFVBQVV1QixhQUFhLENBQUNDLFNBQVM7UUFDaERDLGNBQWN4QixZQUFZeUIsZ0JBQWdCO0lBQzlDLEdBQ0tDLFdBQVc7QUFDcEI7QUFDQW5DLDRCQUE0QixHQUFHRztBQUMvQixlQUFlRCxxQkFBcUJhLE9BQU87SUFDdkMsTUFBTVEsUUFBUSxNQUFNUixRQUFRcUIsT0FBTyxDQUFDYixLQUFLLENBQUNjLEtBQUssQ0FBQyxJQUFJN0IsVUFBVUcsU0FBUyxDQUFDO0lBQ3hFLE9BQU9ZLE1BQU1lLFNBQVMsQ0FBQ0MsUUFBUSxLQUFLO0FBQ3hDO0FBQ0F2Qyw0QkFBNEIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvbWFyaW5hZGUvaW5kZXguanM/ZDk4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0TWFyaW5hZGVNU29sUHJpY2UgPSBleHBvcnRzLmdldE1hcmluYWRlRGVwb3NpdEl4ID0gZXhwb3J0cy5nZXRNYXJpbmFkZUZpbmFuY2VQcm9ncmFtID0gdm9pZCAwO1xuY29uc3QgYW5jaG9yXzEgPSByZXF1aXJlKFwiQGNvcmFsLXh5ei9hbmNob3JcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCB3ZWIzX2pzXzEgPSByZXF1aXJlKFwiQHNvbGFuYS93ZWIzLmpzXCIpO1xuY29uc3Qgc3BsX3Rva2VuXzEgPSByZXF1aXJlKFwiQHNvbGFuYS9zcGwtdG9rZW5cIik7XG5jb25zdCBtYXJpbmFkZUZpbmFuY2VQcm9ncmFtSWQgPSBuZXcgd2ViM19qc18xLlB1YmxpY0tleSgnTWFyQm1zU2dLWGRyTjFlZ1pmNXNxZTFUTWFpOUsxckNoWU5ESmdqcTdhRCcpO1xuZnVuY3Rpb24gZ2V0TWFyaW5hZGVGaW5hbmNlUHJvZ3JhbShwcm92aWRlcikge1xuICAgIHJldHVybiBuZXcgYW5jaG9yXzEuUHJvZ3JhbSh0eXBlc18xLklETCwgbWFyaW5hZGVGaW5hbmNlUHJvZ3JhbUlkLCBwcm92aWRlcik7XG59XG5leHBvcnRzLmdldE1hcmluYWRlRmluYW5jZVByb2dyYW0gPSBnZXRNYXJpbmFkZUZpbmFuY2VQcm9ncmFtO1xuZnVuY3Rpb24gZ2V0TWFyaW5hZGVEZXBvc2l0SXgoeyBwcm9ncmFtLCBhbW91bnQsIG1TT0xBY2NvdW50LCB0cmFuc2ZlckZyb20sIH0pIHtcbiAgICByZXR1cm4gcHJvZ3JhbS5tZXRob2RzXG4gICAgICAgIC5kZXBvc2l0KGFtb3VudClcbiAgICAgICAgLmFjY291bnRzU3RyaWN0KHtcbiAgICAgICAgcmVzZXJ2ZVBkYTogbmV3IHdlYjNfanNfMS5QdWJsaWNLZXkoJ0R1M1lzajF3S2J4UEtrdVBQbnZ6UUxRaDhvTVNWaWZzM2pHWmpKV1hGbUhOJyksXG4gICAgICAgIHN0YXRlOiBuZXcgd2ViM19qc18xLlB1YmxpY0tleSgnOHN6R2t1TFRBdXg5WE1nWjJ2dFkzOWpWU293RWNwQmZGZkQ4aFhTRXFkR0MnKSxcbiAgICAgICAgbXNvbE1pbnQ6IG5ldyB3ZWIzX2pzXzEuUHVibGljS2V5KCdtU29MellDeEhkWWdkelUxNmc1UVNoM2k1SzN6M0taSzd5dGZxY0ptN1NvJyksXG4gICAgICAgIG1zb2xNaW50QXV0aG9yaXR5OiBuZXcgd2ViM19qc18xLlB1YmxpY0tleSgnM0pMUENTMXFNMnpSdzNEcDZWNGhabllIZDR0b01OUGtOZXNYZFg5dGc2S00nKSxcbiAgICAgICAgbGlxUG9vbE1zb2xMZWdBdXRob3JpdHk6IG5ldyB3ZWIzX2pzXzEuUHVibGljS2V5KCdFeWFTalV0U2dvOWFSRDFmOExXWHdkdmtwRFRtWEFXNTR5b1NIWlJGMTRXTCcpLFxuICAgICAgICBsaXFQb29sTXNvbExlZzogbmV3IHdlYjNfanNfMS5QdWJsaWNLZXkoJzdHZ1BZalM1RHphODl3VjZGcFoyM2tVSlJHNXZiUTFHTTI1ZXpzcFlGU29FJyksXG4gICAgICAgIGxpcVBvb2xTb2xMZWdQZGE6IG5ldyB3ZWIzX2pzXzEuUHVibGljS2V5KCdVZWZOYjZ6Nnl2QXJxZTRjSkhUWENxU3RSc0ttV2hHeG5aenVIYmlrUDVRJyksXG4gICAgICAgIG1pbnRUbzogbVNPTEFjY291bnQsXG4gICAgICAgIHRyYW5zZmVyRnJvbSxcbiAgICAgICAgc3lzdGVtUHJvZ3JhbTogd2ViM19qc18xLlN5c3RlbVByb2dyYW0ucHJvZ3JhbUlkLFxuICAgICAgICB0b2tlblByb2dyYW06IHNwbF90b2tlbl8xLlRPS0VOX1BST0dSQU1fSUQsXG4gICAgfSlcbiAgICAgICAgLmluc3RydWN0aW9uKCk7XG59XG5leHBvcnRzLmdldE1hcmluYWRlRGVwb3NpdEl4ID0gZ2V0TWFyaW5hZGVEZXBvc2l0SXg7XG5hc3luYyBmdW5jdGlvbiBnZXRNYXJpbmFkZU1Tb2xQcmljZShwcm9ncmFtKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBhd2FpdCBwcm9ncmFtLmFjY291bnQuc3RhdGUuZmV0Y2gobmV3IHdlYjNfanNfMS5QdWJsaWNLZXkoJzhzekdrdUxUQXV4OVhNZ1oydnRZMzlqVlNvd0VjcEJmRmZEOGhYU0VxZEdDJykpO1xuICAgIHJldHVybiBzdGF0ZS5tc29sUHJpY2UudG9OdW1iZXIoKSAvIDQyOTQ5NjcyOTY7XG59XG5leHBvcnRzLmdldE1hcmluYWRlTVNvbFByaWNlID0gZ2V0TWFyaW5hZGVNU29sUHJpY2U7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRNYXJpbmFkZU1Tb2xQcmljZSIsImdldE1hcmluYWRlRGVwb3NpdEl4IiwiZ2V0TWFyaW5hZGVGaW5hbmNlUHJvZ3JhbSIsImFuY2hvcl8xIiwicmVxdWlyZSIsInR5cGVzXzEiLCJ3ZWIzX2pzXzEiLCJzcGxfdG9rZW5fMSIsIm1hcmluYWRlRmluYW5jZVByb2dyYW1JZCIsIlB1YmxpY0tleSIsInByb3ZpZGVyIiwiUHJvZ3JhbSIsIklETCIsInByb2dyYW0iLCJhbW91bnQiLCJtU09MQWNjb3VudCIsInRyYW5zZmVyRnJvbSIsIm1ldGhvZHMiLCJkZXBvc2l0IiwiYWNjb3VudHNTdHJpY3QiLCJyZXNlcnZlUGRhIiwic3RhdGUiLCJtc29sTWludCIsIm1zb2xNaW50QXV0aG9yaXR5IiwibGlxUG9vbE1zb2xMZWdBdXRob3JpdHkiLCJsaXFQb29sTXNvbExlZyIsImxpcVBvb2xTb2xMZWdQZGEiLCJtaW50VG8iLCJzeXN0ZW1Qcm9ncmFtIiwiU3lzdGVtUHJvZ3JhbSIsInByb2dyYW1JZCIsInRva2VuUHJvZ3JhbSIsIlRPS0VOX1BST0dSQU1fSUQiLCJpbnN0cnVjdGlvbiIsImFjY291bnQiLCJmZXRjaCIsIm1zb2xQcmljZSIsInRvTnVtYmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/marinade/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/marinade/types.js":
/*!************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/marinade/types.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IDL = void 0;\nexports.IDL = {\n    version: \"0.1.0\",\n    name: \"marinade_finance\",\n    instructions: [\n        {\n            name: \"initialize\",\n            accounts: [\n                {\n                    name: \"creatorAuthority\",\n                    isMut: false,\n                    isSigner: true\n                },\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"reservePda\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"validatorList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"msolMint\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"operationalSolAccount\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"liqPool\",\n                    accounts: [\n                        {\n                            name: \"lpMint\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"solLegPda\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"msolLeg\",\n                            isMut: false,\n                            isSigner: false\n                        }\n                    ]\n                },\n                {\n                    name: \"treasuryMsolAccount\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"clock\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"rent\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"data\",\n                    type: {\n                        defined: \"InitializeData\"\n                    }\n                }\n            ]\n        },\n        {\n            name: \"changeAuthority\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"adminAuthority\",\n                    isMut: false,\n                    isSigner: true\n                }\n            ],\n            args: [\n                {\n                    name: \"data\",\n                    type: {\n                        defined: \"ChangeAuthorityData\"\n                    }\n                }\n            ]\n        },\n        {\n            name: \"addValidator\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"managerAuthority\",\n                    isMut: false,\n                    isSigner: true\n                },\n                {\n                    name: \"validatorList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"validatorVote\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"duplicationFlag\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"rentPayer\",\n                    isMut: true,\n                    isSigner: true\n                },\n                {\n                    name: \"clock\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"rent\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"score\",\n                    type: \"u32\"\n                }\n            ]\n        },\n        {\n            name: \"removeValidator\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"managerAuthority\",\n                    isMut: false,\n                    isSigner: true\n                },\n                {\n                    name: \"validatorList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"duplicationFlag\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"operationalSolAccount\",\n                    isMut: true,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"index\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"validatorVote\",\n                    type: \"publicKey\"\n                }\n            ]\n        },\n        {\n            name: \"setValidatorScore\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"managerAuthority\",\n                    isMut: false,\n                    isSigner: true\n                },\n                {\n                    name: \"validatorList\",\n                    isMut: true,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"index\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"validatorVote\",\n                    type: \"publicKey\"\n                },\n                {\n                    name: \"score\",\n                    type: \"u32\"\n                }\n            ]\n        },\n        {\n            name: \"configValidatorSystem\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"managerAuthority\",\n                    isMut: false,\n                    isSigner: true\n                }\n            ],\n            args: [\n                {\n                    name: \"extraRuns\",\n                    type: \"u32\"\n                }\n            ]\n        },\n        {\n            name: \"deposit\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"msolMint\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"liqPoolSolLegPda\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"liqPoolMsolLeg\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"liqPoolMsolLegAuthority\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"reservePda\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"transferFrom\",\n                    isMut: true,\n                    isSigner: true\n                },\n                {\n                    name: \"mintTo\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"msolMintAuthority\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"tokenProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"lamports\",\n                    type: \"u64\"\n                }\n            ]\n        },\n        {\n            name: \"depositStakeAccount\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"validatorList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeAccount\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeAuthority\",\n                    isMut: false,\n                    isSigner: true\n                },\n                {\n                    name: \"duplicationFlag\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"rentPayer\",\n                    isMut: true,\n                    isSigner: true\n                },\n                {\n                    name: \"msolMint\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"mintTo\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"msolMintAuthority\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"clock\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"rent\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"tokenProgram\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"validatorIndex\",\n                    type: \"u32\"\n                }\n            ]\n        },\n        {\n            name: \"liquidUnstake\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"msolMint\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"liqPoolSolLegPda\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"liqPoolMsolLeg\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"treasuryMsolAccount\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"getMsolFrom\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"getMsolFromAuthority\",\n                    isMut: false,\n                    isSigner: true\n                },\n                {\n                    name: \"transferSolTo\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"tokenProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"msolAmount\",\n                    type: \"u64\"\n                }\n            ]\n        },\n        {\n            name: \"addLiquidity\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"lpMint\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"lpMintAuthority\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"liqPoolMsolLeg\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"liqPoolSolLegPda\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"transferFrom\",\n                    isMut: true,\n                    isSigner: true\n                },\n                {\n                    name: \"mintTo\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"tokenProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"lamports\",\n                    type: \"u64\"\n                }\n            ]\n        },\n        {\n            name: \"removeLiquidity\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"lpMint\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"burnFrom\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"burnFromAuthority\",\n                    isMut: false,\n                    isSigner: true\n                },\n                {\n                    name: \"transferSolTo\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"transferMsolTo\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"liqPoolSolLegPda\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"liqPoolMsolLeg\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"liqPoolMsolLegAuthority\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"tokenProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"tokens\",\n                    type: \"u64\"\n                }\n            ]\n        },\n        {\n            name: \"configLp\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"adminAuthority\",\n                    isMut: false,\n                    isSigner: true\n                }\n            ],\n            args: [\n                {\n                    name: \"params\",\n                    type: {\n                        defined: \"ConfigLpParams\"\n                    }\n                }\n            ]\n        },\n        {\n            name: \"configMarinade\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"adminAuthority\",\n                    isMut: false,\n                    isSigner: true\n                }\n            ],\n            args: [\n                {\n                    name: \"params\",\n                    type: {\n                        defined: \"ConfigMarinadeParams\"\n                    }\n                }\n            ]\n        },\n        {\n            name: \"orderUnstake\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"msolMint\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"burnMsolFrom\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"burnMsolAuthority\",\n                    isMut: false,\n                    isSigner: true\n                },\n                {\n                    name: \"newTicketAccount\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"clock\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"rent\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"tokenProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"msolAmount\",\n                    type: \"u64\"\n                }\n            ]\n        },\n        {\n            name: \"claim\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"reservePda\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"ticketAccount\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"transferSolTo\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"clock\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: []\n        },\n        {\n            name: \"stakeReserve\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"validatorList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"validatorVote\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"reservePda\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeAccount\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeDepositAuthority\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"clock\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"epochSchedule\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"rent\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeHistory\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeConfig\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"validatorIndex\",\n                    type: \"u32\"\n                }\n            ]\n        },\n        {\n            name: \"updateActive\",\n            accounts: [\n                {\n                    name: \"common\",\n                    accounts: [\n                        {\n                            name: \"state\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"stakeList\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"stakeAccount\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"stakeWithdrawAuthority\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"reservePda\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"msolMint\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"msolMintAuthority\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"treasuryMsolAccount\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"clock\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"stakeHistory\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"stakeProgram\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"tokenProgram\",\n                            isMut: false,\n                            isSigner: false\n                        }\n                    ]\n                },\n                {\n                    name: \"validatorList\",\n                    isMut: true,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"stakeIndex\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"validatorIndex\",\n                    type: \"u32\"\n                }\n            ]\n        },\n        {\n            name: \"updateDeactivated\",\n            accounts: [\n                {\n                    name: \"common\",\n                    accounts: [\n                        {\n                            name: \"state\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"stakeList\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"stakeAccount\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"stakeWithdrawAuthority\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"reservePda\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"msolMint\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"msolMintAuthority\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"treasuryMsolAccount\",\n                            isMut: true,\n                            isSigner: false\n                        },\n                        {\n                            name: \"clock\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"stakeHistory\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"stakeProgram\",\n                            isMut: false,\n                            isSigner: false\n                        },\n                        {\n                            name: \"tokenProgram\",\n                            isMut: false,\n                            isSigner: false\n                        }\n                    ]\n                },\n                {\n                    name: \"operationalSolAccount\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"stakeIndex\",\n                    type: \"u32\"\n                }\n            ]\n        },\n        {\n            name: \"deactivateStake\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"reservePda\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"validatorList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeAccount\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeDepositAuthority\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"splitStakeAccount\",\n                    isMut: true,\n                    isSigner: true\n                },\n                {\n                    name: \"splitStakeRentPayer\",\n                    isMut: true,\n                    isSigner: true\n                },\n                {\n                    name: \"clock\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"rent\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"epochSchedule\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeHistory\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"stakeIndex\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"validatorIndex\",\n                    type: \"u32\"\n                }\n            ]\n        },\n        {\n            name: \"emergencyUnstake\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"validatorManagerAuthority\",\n                    isMut: false,\n                    isSigner: true\n                },\n                {\n                    name: \"validatorList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeAccount\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeDepositAuthority\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"clock\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"stakeIndex\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"validatorIndex\",\n                    type: \"u32\"\n                }\n            ]\n        },\n        {\n            name: \"partialUnstake\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"validatorManagerAuthority\",\n                    isMut: false,\n                    isSigner: true\n                },\n                {\n                    name: \"validatorList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeAccount\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeDepositAuthority\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"reservePda\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"splitStakeAccount\",\n                    isMut: true,\n                    isSigner: true\n                },\n                {\n                    name: \"splitStakeRentPayer\",\n                    isMut: true,\n                    isSigner: true\n                },\n                {\n                    name: \"clock\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"rent\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeHistory\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"systemProgram\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"stakeIndex\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"validatorIndex\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"desiredUnstakeAmount\",\n                    type: \"u64\"\n                }\n            ]\n        },\n        {\n            name: \"mergeStakes\",\n            accounts: [\n                {\n                    name: \"state\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"validatorList\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"destinationStake\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"sourceStake\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeDepositAuthority\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeWithdrawAuthority\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"operationalSolAccount\",\n                    isMut: true,\n                    isSigner: false\n                },\n                {\n                    name: \"clock\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeHistory\",\n                    isMut: false,\n                    isSigner: false\n                },\n                {\n                    name: \"stakeProgram\",\n                    isMut: false,\n                    isSigner: false\n                }\n            ],\n            args: [\n                {\n                    name: \"destinationStakeIndex\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"sourceStakeIndex\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"validatorIndex\",\n                    type: \"u32\"\n                }\n            ]\n        }\n    ],\n    accounts: [\n        {\n            name: \"state\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"msolMint\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"adminAuthority\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"operationalSolAccount\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"treasuryMsolAccount\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"reserveBumpSeed\",\n                        type: \"u8\"\n                    },\n                    {\n                        name: \"msolMintAuthorityBumpSeed\",\n                        type: \"u8\"\n                    },\n                    {\n                        name: \"rentExemptForTokenAcc\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"rewardFee\",\n                        type: {\n                            defined: \"Fee\"\n                        }\n                    },\n                    {\n                        name: \"stakeSystem\",\n                        type: {\n                            defined: \"StakeSystem\"\n                        }\n                    },\n                    {\n                        name: \"validatorSystem\",\n                        type: {\n                            defined: \"ValidatorSystem\"\n                        }\n                    },\n                    {\n                        name: \"liqPool\",\n                        type: {\n                            defined: \"LiqPool\"\n                        }\n                    },\n                    {\n                        name: \"availableReserveBalance\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"msolSupply\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"msolPrice\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"circulatingTicketCount\",\n                        docs: [\n                            \"count tickets for delayed-unstake\"\n                        ],\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"circulatingTicketBalance\",\n                        docs: [\n                            \"total lamports amount of generated and not claimed yet tickets\"\n                        ],\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"lentFromReserve\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"minDeposit\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"minWithdraw\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"stakingSolCap\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"emergencyCoolingDown\",\n                        type: \"u64\"\n                    }\n                ]\n            }\n        },\n        {\n            name: \"ticketAccountData\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"stateAddress\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"beneficiary\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"lamportsAmount\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"createdEpoch\",\n                        type: \"u64\"\n                    }\n                ]\n            }\n        }\n    ],\n    types: [\n        {\n            name: \"LiqPool\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"lpMint\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"lpMintAuthorityBumpSeed\",\n                        type: \"u8\"\n                    },\n                    {\n                        name: \"solLegBumpSeed\",\n                        type: \"u8\"\n                    },\n                    {\n                        name: \"msolLegAuthorityBumpSeed\",\n                        type: \"u8\"\n                    },\n                    {\n                        name: \"msolLeg\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"lpLiquidityTarget\",\n                        docs: [\n                            \"Liquidity target. If the Liquidity reach this amount, the fee reaches lp_min_discount_fee\"\n                        ],\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"lpMaxFee\",\n                        docs: [\n                            \"Liquidity pool max fee\"\n                        ],\n                        type: {\n                            defined: \"Fee\"\n                        }\n                    },\n                    {\n                        name: \"lpMinFee\",\n                        docs: [\n                            \"SOL/mSOL Liquidity pool min fee\"\n                        ],\n                        type: {\n                            defined: \"Fee\"\n                        }\n                    },\n                    {\n                        name: \"treasuryCut\",\n                        docs: [\n                            \"Treasury cut\"\n                        ],\n                        type: {\n                            defined: \"Fee\"\n                        }\n                    },\n                    {\n                        name: \"lpSupply\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"lentFromSolLeg\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"liquiditySolCap\",\n                        type: \"u64\"\n                    }\n                ]\n            }\n        },\n        {\n            name: \"List\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"account\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"itemSize\",\n                        type: \"u32\"\n                    },\n                    {\n                        name: \"count\",\n                        type: \"u32\"\n                    },\n                    {\n                        name: \"newAccount\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"copiedCount\",\n                        type: \"u32\"\n                    }\n                ]\n            }\n        },\n        {\n            name: \"StakeRecord\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"stakeAccount\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"lastUpdateDelegatedLamports\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"lastUpdateEpoch\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"isEmergencyUnstaking\",\n                        type: \"u8\"\n                    }\n                ]\n            }\n        },\n        {\n            name: \"StakeSystem\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"stakeList\",\n                        type: {\n                            defined: \"List\"\n                        }\n                    },\n                    {\n                        name: \"delayedUnstakeCoolingDown\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"stakeDepositBumpSeed\",\n                        type: \"u8\"\n                    },\n                    {\n                        name: \"stakeWithdrawBumpSeed\",\n                        type: \"u8\"\n                    },\n                    {\n                        name: \"slotsForStakeDelta\",\n                        docs: [\n                            \"set by admin, how much slots before the end of the epoch, stake-delta can start\"\n                        ],\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"lastStakeDeltaEpoch\",\n                        docs: [\n                            \"Marks the start of stake-delta operations, meaning that if somebody starts a delayed-unstake ticket\",\n                            \"after this var is set with epoch_num the ticket will have epoch_created = current_epoch+1\",\n                            \"(the user must wait one more epoch, because their unstake-delta will be execute in this epoch)\"\n                        ],\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"minStake\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"extraStakeDeltaRuns\",\n                        docs: [\n                            \"can be set by validator-manager-auth to allow a second run of stake-delta to stake late stakers in the last minute of the epoch\",\n                            \"so we maximize user's rewards\"\n                        ],\n                        type: \"u32\"\n                    }\n                ]\n            }\n        },\n        {\n            name: \"ValidatorRecord\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"validatorAccount\",\n                        docs: [\n                            \"Validator vote pubkey\"\n                        ],\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"activeBalance\",\n                        docs: [\n                            \"Validator total balance in lamports\"\n                        ],\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"score\",\n                        type: \"u32\"\n                    },\n                    {\n                        name: \"lastStakeDeltaEpoch\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"duplicationFlagBumpSeed\",\n                        type: \"u8\"\n                    }\n                ]\n            }\n        },\n        {\n            name: \"ValidatorSystem\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"validatorList\",\n                        type: {\n                            defined: \"List\"\n                        }\n                    },\n                    {\n                        name: \"managerAuthority\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"totalValidatorScore\",\n                        type: \"u32\"\n                    },\n                    {\n                        name: \"totalActiveBalance\",\n                        docs: [\n                            \"sum of all active lamports staked\"\n                        ],\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"autoAddValidatorEnabled\",\n                        docs: [\n                            \"allow & auto-add validator when a user deposits a stake-account of a non-listed validator\"\n                        ],\n                        type: \"u8\"\n                    }\n                ]\n            }\n        },\n        {\n            name: \"Fee\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"basisPoints\",\n                        type: \"u32\"\n                    }\n                ]\n            }\n        },\n        {\n            name: \"InitializeData\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"adminAuthority\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"validatorManagerAuthority\",\n                        type: \"publicKey\"\n                    },\n                    {\n                        name: \"minStake\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"rewardFee\",\n                        type: {\n                            defined: \"Fee\"\n                        }\n                    },\n                    {\n                        name: \"liqPool\",\n                        type: {\n                            defined: \"LiqPoolInitializeData\"\n                        }\n                    },\n                    {\n                        name: \"additionalStakeRecordSpace\",\n                        type: \"u32\"\n                    },\n                    {\n                        name: \"additionalValidatorRecordSpace\",\n                        type: \"u32\"\n                    },\n                    {\n                        name: \"slotsForStakeDelta\",\n                        type: \"u64\"\n                    }\n                ]\n            }\n        },\n        {\n            name: \"LiqPoolInitializeData\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"lpLiquidityTarget\",\n                        type: \"u64\"\n                    },\n                    {\n                        name: \"lpMaxFee\",\n                        type: {\n                            defined: \"Fee\"\n                        }\n                    },\n                    {\n                        name: \"lpMinFee\",\n                        type: {\n                            defined: \"Fee\"\n                        }\n                    },\n                    {\n                        name: \"lpTreasuryCut\",\n                        type: {\n                            defined: \"Fee\"\n                        }\n                    }\n                ]\n            }\n        },\n        {\n            name: \"ChangeAuthorityData\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"admin\",\n                        type: {\n                            option: \"publicKey\"\n                        }\n                    },\n                    {\n                        name: \"validatorManager\",\n                        type: {\n                            option: \"publicKey\"\n                        }\n                    },\n                    {\n                        name: \"operationalSolAccount\",\n                        type: {\n                            option: \"publicKey\"\n                        }\n                    },\n                    {\n                        name: \"treasuryMsolAccount\",\n                        type: {\n                            option: \"publicKey\"\n                        }\n                    }\n                ]\n            }\n        },\n        {\n            name: \"ConfigLpParams\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"minFee\",\n                        type: {\n                            option: {\n                                defined: \"Fee\"\n                            }\n                        }\n                    },\n                    {\n                        name: \"maxFee\",\n                        type: {\n                            option: {\n                                defined: \"Fee\"\n                            }\n                        }\n                    },\n                    {\n                        name: \"liquidityTarget\",\n                        type: {\n                            option: \"u64\"\n                        }\n                    },\n                    {\n                        name: \"treasuryCut\",\n                        type: {\n                            option: {\n                                defined: \"Fee\"\n                            }\n                        }\n                    }\n                ]\n            }\n        },\n        {\n            name: \"ConfigMarinadeParams\",\n            type: {\n                kind: \"struct\",\n                fields: [\n                    {\n                        name: \"rewardsFee\",\n                        type: {\n                            option: {\n                                defined: \"Fee\"\n                            }\n                        }\n                    },\n                    {\n                        name: \"slotsForStakeDelta\",\n                        type: {\n                            option: \"u64\"\n                        }\n                    },\n                    {\n                        name: \"minStake\",\n                        type: {\n                            option: \"u64\"\n                        }\n                    },\n                    {\n                        name: \"minDeposit\",\n                        type: {\n                            option: \"u64\"\n                        }\n                    },\n                    {\n                        name: \"minWithdraw\",\n                        type: {\n                            option: \"u64\"\n                        }\n                    },\n                    {\n                        name: \"stakingSolCap\",\n                        type: {\n                            option: \"u64\"\n                        }\n                    },\n                    {\n                        name: \"liquiditySolCap\",\n                        type: {\n                            option: \"u64\"\n                        }\n                    },\n                    {\n                        name: \"autoAddValidatorEnabled\",\n                        type: {\n                            option: \"bool\"\n                        }\n                    }\n                ]\n            }\n        },\n        {\n            name: \"CommonError\",\n            type: {\n                kind: \"enum\",\n                variants: [\n                    {\n                        name: \"WrongReserveOwner\"\n                    },\n                    {\n                        name: \"NonEmptyReserveData\"\n                    },\n                    {\n                        name: \"InvalidInitialReserveLamports\"\n                    },\n                    {\n                        name: \"ZeroValidatorChunkSize\"\n                    },\n                    {\n                        name: \"TooBigValidatorChunkSize\"\n                    },\n                    {\n                        name: \"ZeroCreditChunkSize\"\n                    },\n                    {\n                        name: \"TooBigCreditChunkSize\"\n                    },\n                    {\n                        name: \"TooLowCreditFee\"\n                    },\n                    {\n                        name: \"InvalidMintAuthority\"\n                    },\n                    {\n                        name: \"MintHasInitialSupply\"\n                    },\n                    {\n                        name: \"InvalidOwnerFeeState\"\n                    },\n                    {\n                        name: \"InvalidProgramId\"\n                    },\n                    {\n                        name: \"UnexpectedAccount\"\n                    },\n                    {\n                        name: \"CalculationFailure\"\n                    },\n                    {\n                        name: \"AccountWithLockup\"\n                    },\n                    {\n                        name: \"NumberTooLow\"\n                    },\n                    {\n                        name: \"NumberTooHigh\"\n                    },\n                    {\n                        name: \"FeeTooHigh\"\n                    },\n                    {\n                        name: \"FeesWrongWayRound\"\n                    },\n                    {\n                        name: \"LiquidityTargetTooLow\"\n                    },\n                    {\n                        name: \"TicketNotDue\"\n                    },\n                    {\n                        name: \"TicketNotReady\"\n                    },\n                    {\n                        name: \"WrongBeneficiary\"\n                    },\n                    {\n                        name: \"StakeAccountNotUpdatedYet\"\n                    },\n                    {\n                        name: \"StakeNotDelegated\"\n                    },\n                    {\n                        name: \"StakeAccountIsEmergencyUnstaking\"\n                    },\n                    {\n                        name: \"InsufficientLiquidity\"\n                    },\n                    {\n                        name: \"InvalidValidator\"\n                    }\n                ]\n            }\n        }\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/marinade/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/amm.js":
/*!******************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/amm.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateMaxBaseAssetAmountFillable = exports.calculateQuoteAssetAmountSwapped = exports.calculateMaxBaseAssetAmountToTrade = exports.calculateTerminalPrice = exports.getSwapDirection = exports.calculateSwapOutput = exports.calculateSpreadReserves = exports.calculateSpread = exports.calculateSpreadBN = exports.calculateVolSpreadBN = exports.calculateMaxSpread = exports.calculateEffectiveLeverage = exports.calculateInventoryScale = exports.calculateMarketOpenBidAsk = exports.calculateAmmReservesAfterSwap = exports.calculatePrice = exports.calculateBidAskPrice = exports.calculateUpdatedAMMSpreadReserves = exports.calculateUpdatedAMM = exports.calculateNewAmm = exports.calculateOptimalPegAndBudget = exports.calculatePegFromTargetPrice = void 0;\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst assert_1 = __webpack_require__(/*! ../assert/assert */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/assert/assert.js\");\nconst __1 = __webpack_require__(/*! .. */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nconst repeg_1 = __webpack_require__(/*! ./repeg */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/repeg.js\");\nconst oracles_1 = __webpack_require__(/*! ./oracles */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/oracles.js\");\nfunction calculatePegFromTargetPrice(targetPrice, baseAssetReserve, quoteAssetReserve) {\n    return anchor_1.BN.max(targetPrice.mul(baseAssetReserve).div(quoteAssetReserve).add(numericConstants_1.PRICE_DIV_PEG.div(new anchor_1.BN(2))).div(numericConstants_1.PRICE_DIV_PEG), numericConstants_1.ONE);\n}\nexports.calculatePegFromTargetPrice = calculatePegFromTargetPrice;\nfunction calculateOptimalPegAndBudget(amm, oraclePriceData) {\n    const reservePriceBefore = calculatePrice(amm.baseAssetReserve, amm.quoteAssetReserve, amm.pegMultiplier);\n    const targetPrice = oraclePriceData.price;\n    const newPeg = calculatePegFromTargetPrice(targetPrice, amm.baseAssetReserve, amm.quoteAssetReserve);\n    const prePegCost = (0, repeg_1.calculateRepegCost)(amm, newPeg);\n    const totalFeeLB = amm.totalExchangeFee.div(new anchor_1.BN(2));\n    const budget = anchor_1.BN.max(numericConstants_1.ZERO, amm.totalFeeMinusDistributions.sub(totalFeeLB));\n    let checkLowerBound = true;\n    if (budget.lt(prePegCost)) {\n        const halfMaxPriceSpread = new anchor_1.BN(amm.maxSpread).div(new anchor_1.BN(2)).mul(targetPrice).div(numericConstants_1.BID_ASK_SPREAD_PRECISION);\n        let newTargetPrice;\n        let newOptimalPeg;\n        let newBudget;\n        const targetPriceGap = reservePriceBefore.sub(targetPrice);\n        if (targetPriceGap.abs().gt(halfMaxPriceSpread)) {\n            const markAdj = targetPriceGap.abs().sub(halfMaxPriceSpread);\n            if (targetPriceGap.lt(new anchor_1.BN(0))) {\n                newTargetPrice = reservePriceBefore.add(markAdj);\n            } else {\n                newTargetPrice = reservePriceBefore.sub(markAdj);\n            }\n            newOptimalPeg = calculatePegFromTargetPrice(newTargetPrice, amm.baseAssetReserve, amm.quoteAssetReserve);\n            newBudget = (0, repeg_1.calculateRepegCost)(amm, newOptimalPeg);\n            checkLowerBound = false;\n            return [\n                newTargetPrice,\n                newOptimalPeg,\n                newBudget,\n                false\n            ];\n        } else if (amm.totalFeeMinusDistributions.lt(amm.totalExchangeFee.div(new anchor_1.BN(2)))) {\n            checkLowerBound = false;\n        }\n    }\n    return [\n        targetPrice,\n        newPeg,\n        budget,\n        checkLowerBound\n    ];\n}\nexports.calculateOptimalPegAndBudget = calculateOptimalPegAndBudget;\nfunction calculateNewAmm(amm, oraclePriceData) {\n    let pKNumer = new anchor_1.BN(1);\n    let pKDenom = new anchor_1.BN(1);\n    const [targetPrice, _newPeg, budget, _checkLowerBound] = calculateOptimalPegAndBudget(amm, oraclePriceData);\n    let prePegCost = (0, repeg_1.calculateRepegCost)(amm, _newPeg);\n    let newPeg = _newPeg;\n    if (prePegCost.gte(budget) && prePegCost.gt(numericConstants_1.ZERO)) {\n        [pKNumer, pKDenom] = [\n            new anchor_1.BN(999),\n            new anchor_1.BN(1000)\n        ];\n        const deficitMadeup = (0, repeg_1.calculateAdjustKCost)(amm, pKNumer, pKDenom);\n        (0, assert_1.assert)(deficitMadeup.lte(new anchor_1.BN(0)));\n        prePegCost = budget.add(deficitMadeup.abs());\n        const newAmm = Object.assign({}, amm);\n        newAmm.baseAssetReserve = newAmm.baseAssetReserve.mul(pKNumer).div(pKDenom);\n        newAmm.sqrtK = newAmm.sqrtK.mul(pKNumer).div(pKDenom);\n        const invariant = newAmm.sqrtK.mul(newAmm.sqrtK);\n        newAmm.quoteAssetReserve = invariant.div(newAmm.baseAssetReserve);\n        const directionToClose = amm.baseAssetAmountWithAmm.gt(numericConstants_1.ZERO) ? types_1.PositionDirection.SHORT : types_1.PositionDirection.LONG;\n        const [newQuoteAssetReserve, _newBaseAssetReserve] = calculateAmmReservesAfterSwap(newAmm, \"base\", amm.baseAssetAmountWithAmm.abs(), getSwapDirection(\"base\", directionToClose));\n        newAmm.terminalQuoteAssetReserve = newQuoteAssetReserve;\n        newPeg = (0, repeg_1.calculateBudgetedPeg)(newAmm, prePegCost, targetPrice);\n        prePegCost = (0, repeg_1.calculateRepegCost)(newAmm, newPeg);\n    }\n    return [\n        prePegCost,\n        pKNumer,\n        pKDenom,\n        newPeg\n    ];\n}\nexports.calculateNewAmm = calculateNewAmm;\nfunction calculateUpdatedAMM(amm, oraclePriceData) {\n    if (amm.curveUpdateIntensity == 0 || oraclePriceData === undefined) {\n        return amm;\n    }\n    const newAmm = Object.assign({}, amm);\n    const [prepegCost, pKNumer, pKDenom, newPeg] = calculateNewAmm(amm, oraclePriceData);\n    newAmm.baseAssetReserve = newAmm.baseAssetReserve.mul(pKNumer).div(pKDenom);\n    newAmm.sqrtK = newAmm.sqrtK.mul(pKNumer).div(pKDenom);\n    const invariant = newAmm.sqrtK.mul(newAmm.sqrtK);\n    newAmm.quoteAssetReserve = invariant.div(newAmm.baseAssetReserve);\n    newAmm.pegMultiplier = newPeg;\n    const directionToClose = amm.baseAssetAmountWithAmm.gt(numericConstants_1.ZERO) ? types_1.PositionDirection.SHORT : types_1.PositionDirection.LONG;\n    const [newQuoteAssetReserve, _newBaseAssetReserve] = calculateAmmReservesAfterSwap(newAmm, \"base\", amm.baseAssetAmountWithAmm.abs(), getSwapDirection(\"base\", directionToClose));\n    newAmm.terminalQuoteAssetReserve = newQuoteAssetReserve;\n    newAmm.totalFeeMinusDistributions = newAmm.totalFeeMinusDistributions.sub(prepegCost);\n    newAmm.netRevenueSinceLastFunding = newAmm.netRevenueSinceLastFunding.sub(prepegCost);\n    return newAmm;\n}\nexports.calculateUpdatedAMM = calculateUpdatedAMM;\nfunction calculateUpdatedAMMSpreadReserves(amm, direction, oraclePriceData) {\n    const newAmm = calculateUpdatedAMM(amm, oraclePriceData);\n    const [shortReserves, longReserves] = calculateSpreadReserves(newAmm, oraclePriceData);\n    const dirReserves = (0, types_1.isVariant)(direction, \"long\") ? longReserves : shortReserves;\n    const result = {\n        baseAssetReserve: dirReserves.baseAssetReserve,\n        quoteAssetReserve: dirReserves.quoteAssetReserve,\n        sqrtK: newAmm.sqrtK,\n        newPeg: newAmm.pegMultiplier\n    };\n    return result;\n}\nexports.calculateUpdatedAMMSpreadReserves = calculateUpdatedAMMSpreadReserves;\nfunction calculateBidAskPrice(amm, oraclePriceData, withUpdate = true) {\n    let newAmm;\n    if (withUpdate) {\n        newAmm = calculateUpdatedAMM(amm, oraclePriceData);\n    } else {\n        newAmm = amm;\n    }\n    const [bidReserves, askReserves] = calculateSpreadReserves(newAmm, oraclePriceData);\n    const askPrice = calculatePrice(askReserves.baseAssetReserve, askReserves.quoteAssetReserve, newAmm.pegMultiplier);\n    const bidPrice = calculatePrice(bidReserves.baseAssetReserve, bidReserves.quoteAssetReserve, newAmm.pegMultiplier);\n    return [\n        bidPrice,\n        askPrice\n    ];\n}\nexports.calculateBidAskPrice = calculateBidAskPrice;\n/**\n * Calculates a price given an arbitrary base and quote amount (they must have the same precision)\n *\n * @param baseAssetReserves\n * @param quoteAssetReserves\n * @param pegMultiplier\n * @returns price : Precision PRICE_PRECISION\n */ function calculatePrice(baseAssetReserves, quoteAssetReserves, pegMultiplier) {\n    if (baseAssetReserves.abs().lte(numericConstants_1.ZERO)) {\n        return new anchor_1.BN(0);\n    }\n    return quoteAssetReserves.mul(numericConstants_1.PRICE_PRECISION).mul(pegMultiplier).div(numericConstants_1.PEG_PRECISION).div(baseAssetReserves);\n}\nexports.calculatePrice = calculatePrice;\n/**\n * Calculates what the amm reserves would be after swapping a quote or base asset amount.\n *\n * @param amm\n * @param inputAssetType\n * @param swapAmount\n * @param swapDirection\n * @returns quoteAssetReserve and baseAssetReserve after swap. : Precision AMM_RESERVE_PRECISION\n */ function calculateAmmReservesAfterSwap(amm, inputAssetType, swapAmount, swapDirection) {\n    (0, assert_1.assert)(swapAmount.gte(numericConstants_1.ZERO), \"swapAmount must be greater than 0\");\n    let newQuoteAssetReserve;\n    let newBaseAssetReserve;\n    if (inputAssetType === \"quote\") {\n        swapAmount = swapAmount.mul(numericConstants_1.AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO).div(amm.pegMultiplier);\n        [newQuoteAssetReserve, newBaseAssetReserve] = calculateSwapOutput(amm.quoteAssetReserve, swapAmount, swapDirection, amm.sqrtK.mul(amm.sqrtK));\n    } else {\n        [newBaseAssetReserve, newQuoteAssetReserve] = calculateSwapOutput(amm.baseAssetReserve, swapAmount, swapDirection, amm.sqrtK.mul(amm.sqrtK));\n    }\n    return [\n        newQuoteAssetReserve,\n        newBaseAssetReserve\n    ];\n}\nexports.calculateAmmReservesAfterSwap = calculateAmmReservesAfterSwap;\nfunction calculateMarketOpenBidAsk(baseAssetReserve, minBaseAssetReserve, maxBaseAssetReserve, stepSize) {\n    // open orders\n    let openAsks;\n    if (minBaseAssetReserve.lt(baseAssetReserve)) {\n        openAsks = baseAssetReserve.sub(minBaseAssetReserve).mul(new anchor_1.BN(-1));\n        if (stepSize && openAsks.abs().div(numericConstants_1.TWO).lt(stepSize)) {\n            openAsks = numericConstants_1.ZERO;\n        }\n    } else {\n        openAsks = numericConstants_1.ZERO;\n    }\n    let openBids;\n    if (maxBaseAssetReserve.gt(baseAssetReserve)) {\n        openBids = maxBaseAssetReserve.sub(baseAssetReserve);\n        if (stepSize && openBids.div(numericConstants_1.TWO).lt(stepSize)) {\n            openBids = numericConstants_1.ZERO;\n        }\n    } else {\n        openBids = numericConstants_1.ZERO;\n    }\n    return [\n        openBids,\n        openAsks\n    ];\n}\nexports.calculateMarketOpenBidAsk = calculateMarketOpenBidAsk;\nfunction calculateInventoryScale(baseAssetAmountWithAmm, baseAssetReserve, minBaseAssetReserve, maxBaseAssetReserve, directionalSpread, maxSpread) {\n    if (baseAssetAmountWithAmm.eq(numericConstants_1.ZERO)) {\n        return 1;\n    }\n    const MAX_BID_ASK_INVENTORY_SKEW_FACTOR = numericConstants_1.BID_ASK_SPREAD_PRECISION.mul(new anchor_1.BN(10));\n    // inventory skew\n    const [openBids, openAsks] = calculateMarketOpenBidAsk(baseAssetReserve, minBaseAssetReserve, maxBaseAssetReserve);\n    const minSideLiquidity = anchor_1.BN.min(openBids.abs(), openAsks.abs());\n    const inventoryScaleBN = anchor_1.BN.min(baseAssetAmountWithAmm.mul(numericConstants_1.PERCENTAGE_PRECISION).div(anchor_1.BN.max(minSideLiquidity, numericConstants_1.ONE)).abs(), numericConstants_1.PERCENTAGE_PRECISION);\n    const inventoryScaleMaxBN = anchor_1.BN.max(MAX_BID_ASK_INVENTORY_SKEW_FACTOR, new anchor_1.BN(maxSpread).mul(numericConstants_1.BID_ASK_SPREAD_PRECISION).div(new anchor_1.BN(Math.max(directionalSpread, 1))));\n    const inventoryScaleCapped = anchor_1.BN.min(inventoryScaleMaxBN, numericConstants_1.BID_ASK_SPREAD_PRECISION.add(inventoryScaleMaxBN.mul(inventoryScaleBN).div(numericConstants_1.PERCENTAGE_PRECISION))).toNumber() / numericConstants_1.BID_ASK_SPREAD_PRECISION.toNumber();\n    return inventoryScaleCapped;\n}\nexports.calculateInventoryScale = calculateInventoryScale;\nfunction calculateEffectiveLeverage(baseSpread, quoteAssetReserve, terminalQuoteAssetReserve, pegMultiplier, netBaseAssetAmount, reservePrice, totalFeeMinusDistributions) {\n    // vAMM skew\n    const netBaseAssetValue = quoteAssetReserve.sub(terminalQuoteAssetReserve).mul(pegMultiplier).div(numericConstants_1.AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO);\n    const localBaseAssetValue = netBaseAssetAmount.mul(reservePrice).div(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO.mul(numericConstants_1.PRICE_PRECISION));\n    const effectiveGap = Math.max(0, localBaseAssetValue.sub(netBaseAssetValue).toNumber());\n    const effectiveLeverage = effectiveGap / (Math.max(0, totalFeeMinusDistributions.toNumber()) + 1) + 1 / numericConstants_1.QUOTE_PRECISION.toNumber();\n    return effectiveLeverage;\n}\nexports.calculateEffectiveLeverage = calculateEffectiveLeverage;\nfunction calculateMaxSpread(marginRatioInitial) {\n    const maxTargetSpread = new anchor_1.BN(marginRatioInitial).mul(numericConstants_1.BID_ASK_SPREAD_PRECISION.div(numericConstants_1.MARGIN_PRECISION)).toNumber();\n    return maxTargetSpread;\n}\nexports.calculateMaxSpread = calculateMaxSpread;\nfunction calculateVolSpreadBN(lastOracleConfPct, reservePrice, markStd, oracleStd, longIntensity, shortIntensity, volume24H) {\n    const marketAvgStdPct = markStd.add(oracleStd).mul(numericConstants_1.PERCENTAGE_PRECISION).div(reservePrice).div(new anchor_1.BN(2));\n    const volSpread = anchor_1.BN.max(lastOracleConfPct, marketAvgStdPct.div(new anchor_1.BN(2)));\n    const clampMin = numericConstants_1.PERCENTAGE_PRECISION.div(new anchor_1.BN(100));\n    const clampMax = numericConstants_1.PERCENTAGE_PRECISION.mul(new anchor_1.BN(16)).div(new anchor_1.BN(10));\n    const longVolSpreadFactor = (0, __1.clampBN)(longIntensity.mul(numericConstants_1.PERCENTAGE_PRECISION).div(anchor_1.BN.max(numericConstants_1.ONE, volume24H)), clampMin, clampMax);\n    const shortVolSpreadFactor = (0, __1.clampBN)(shortIntensity.mul(numericConstants_1.PERCENTAGE_PRECISION).div(anchor_1.BN.max(numericConstants_1.ONE, volume24H)), clampMin, clampMax);\n    const longVolSpread = anchor_1.BN.max(lastOracleConfPct, volSpread.mul(longVolSpreadFactor).div(numericConstants_1.PERCENTAGE_PRECISION));\n    const shortVolSpread = anchor_1.BN.max(lastOracleConfPct, volSpread.mul(shortVolSpreadFactor).div(numericConstants_1.PERCENTAGE_PRECISION));\n    return [\n        longVolSpread,\n        shortVolSpread\n    ];\n}\nexports.calculateVolSpreadBN = calculateVolSpreadBN;\nfunction calculateSpreadBN(baseSpread, lastOracleReservePriceSpreadPct, lastOracleConfPct, maxSpread, quoteAssetReserve, terminalQuoteAssetReserve, pegMultiplier, baseAssetAmountWithAmm, reservePrice, totalFeeMinusDistributions, netRevenueSinceLastFunding, baseAssetReserve, minBaseAssetReserve, maxBaseAssetReserve, markStd, oracleStd, longIntensity, shortIntensity, volume24H, returnTerms = false) {\n    (0, assert_1.assert)(Number.isInteger(baseSpread));\n    (0, assert_1.assert)(Number.isInteger(maxSpread));\n    const spreadTerms = {\n        longVolSpread: 0,\n        shortVolSpread: 0,\n        longSpreadwPS: 0,\n        shortSpreadwPS: 0,\n        maxTargetSpread: 0,\n        inventorySpreadScale: 0,\n        longSpreadwInvScale: 0,\n        shortSpreadwInvScale: 0,\n        effectiveLeverage: 0,\n        effectiveLeverageCapped: 0,\n        longSpreadwEL: 0,\n        shortSpreadwEL: 0,\n        revenueRetreatAmount: 0,\n        halfRevenueRetreatAmount: 0,\n        longSpreadwRevRetreat: 0,\n        shortSpreadwRevRetreat: 0,\n        totalSpread: 0,\n        longSpread: 0,\n        shortSpread: 0\n    };\n    const [longVolSpread, shortVolSpread] = calculateVolSpreadBN(lastOracleConfPct, reservePrice, markStd, oracleStd, longIntensity, shortIntensity, volume24H);\n    spreadTerms.longVolSpread = longVolSpread.toNumber();\n    spreadTerms.shortVolSpread = shortVolSpread.toNumber();\n    let longSpread = Math.max(baseSpread / 2, longVolSpread.toNumber());\n    let shortSpread = Math.max(baseSpread / 2, shortVolSpread.toNumber());\n    if (lastOracleReservePriceSpreadPct.gt(numericConstants_1.ZERO)) {\n        shortSpread = Math.max(shortSpread, lastOracleReservePriceSpreadPct.abs().toNumber() + shortVolSpread.toNumber());\n    } else if (lastOracleReservePriceSpreadPct.lt(numericConstants_1.ZERO)) {\n        longSpread = Math.max(longSpread, lastOracleReservePriceSpreadPct.abs().toNumber() + longVolSpread.toNumber());\n    }\n    spreadTerms.longSpreadwPS = longSpread;\n    spreadTerms.shortSpreadwPS = shortSpread;\n    const maxTargetSpread = Math.floor(Math.max(maxSpread, lastOracleReservePriceSpreadPct.abs().toNumber()));\n    const inventorySpreadScale = calculateInventoryScale(baseAssetAmountWithAmm, baseAssetReserve, minBaseAssetReserve, maxBaseAssetReserve, baseAssetAmountWithAmm.gt(numericConstants_1.ZERO) ? longSpread : shortSpread, maxTargetSpread);\n    if (baseAssetAmountWithAmm.gt(numericConstants_1.ZERO)) {\n        longSpread *= inventorySpreadScale;\n    } else if (baseAssetAmountWithAmm.lt(numericConstants_1.ZERO)) {\n        shortSpread *= inventorySpreadScale;\n    }\n    spreadTerms.maxTargetSpread = maxTargetSpread;\n    spreadTerms.inventorySpreadScale = inventorySpreadScale;\n    spreadTerms.longSpreadwInvScale = longSpread;\n    spreadTerms.shortSpreadwInvScale = shortSpread;\n    const MAX_SPREAD_SCALE = 10;\n    if (totalFeeMinusDistributions.gt(numericConstants_1.ZERO)) {\n        const effectiveLeverage = calculateEffectiveLeverage(baseSpread, quoteAssetReserve, terminalQuoteAssetReserve, pegMultiplier, baseAssetAmountWithAmm, reservePrice, totalFeeMinusDistributions);\n        spreadTerms.effectiveLeverage = effectiveLeverage;\n        const spreadScale = Math.min(MAX_SPREAD_SCALE, 1 + effectiveLeverage);\n        spreadTerms.effectiveLeverageCapped = spreadScale;\n        if (baseAssetAmountWithAmm.gt(numericConstants_1.ZERO)) {\n            longSpread *= spreadScale;\n            longSpread = Math.floor(longSpread);\n        } else {\n            shortSpread *= spreadScale;\n            shortSpread = Math.floor(shortSpread);\n        }\n    } else {\n        longSpread *= MAX_SPREAD_SCALE;\n        shortSpread *= MAX_SPREAD_SCALE;\n    }\n    spreadTerms.longSpreadwEL = longSpread;\n    spreadTerms.shortSpreadwEL = shortSpread;\n    if (netRevenueSinceLastFunding.lt(numericConstants_1.DEFAULT_REVENUE_SINCE_LAST_FUNDING_SPREAD_RETREAT)) {\n        const maxRetreat = maxTargetSpread / 10;\n        let revenueRetreatAmount = maxRetreat;\n        if (netRevenueSinceLastFunding.gte(numericConstants_1.DEFAULT_REVENUE_SINCE_LAST_FUNDING_SPREAD_RETREAT.mul(new anchor_1.BN(1000)))) {\n            revenueRetreatAmount = Math.min(maxRetreat, Math.floor(baseSpread * netRevenueSinceLastFunding.abs().toNumber() / numericConstants_1.DEFAULT_REVENUE_SINCE_LAST_FUNDING_SPREAD_RETREAT.abs().toNumber()));\n        }\n        const halfRevenueRetreatAmount = Math.floor(revenueRetreatAmount / 2);\n        spreadTerms.revenueRetreatAmount = revenueRetreatAmount;\n        spreadTerms.halfRevenueRetreatAmount = halfRevenueRetreatAmount;\n        if (baseAssetAmountWithAmm.gt(numericConstants_1.ZERO)) {\n            longSpread += revenueRetreatAmount;\n            shortSpread += halfRevenueRetreatAmount;\n        } else if (baseAssetAmountWithAmm.lt(numericConstants_1.ZERO)) {\n            longSpread += halfRevenueRetreatAmount;\n            shortSpread += revenueRetreatAmount;\n        } else {\n            longSpread += halfRevenueRetreatAmount;\n            shortSpread += halfRevenueRetreatAmount;\n        }\n    }\n    spreadTerms.longSpreadwRevRetreat = longSpread;\n    spreadTerms.shortSpreadwRevRetreat = shortSpread;\n    const totalSpread = longSpread + shortSpread;\n    if (totalSpread > maxTargetSpread) {\n        if (longSpread > shortSpread) {\n            longSpread = Math.ceil(longSpread * maxTargetSpread / totalSpread);\n            shortSpread = Math.floor(maxTargetSpread - longSpread);\n        } else {\n            shortSpread = Math.ceil(shortSpread * maxTargetSpread / totalSpread);\n            longSpread = Math.floor(maxTargetSpread - shortSpread);\n        }\n    }\n    spreadTerms.totalSpread = totalSpread;\n    spreadTerms.longSpread = longSpread;\n    spreadTerms.shortSpread = shortSpread;\n    if (returnTerms) {\n        return spreadTerms;\n    }\n    return [\n        longSpread,\n        shortSpread\n    ];\n}\nexports.calculateSpreadBN = calculateSpreadBN;\nfunction calculateSpread(amm, oraclePriceData, now) {\n    if (amm.baseSpread == 0 || amm.curveUpdateIntensity == 0) {\n        return [\n            amm.baseSpread / 2,\n            amm.baseSpread / 2\n        ];\n    }\n    const reservePrice = calculatePrice(amm.baseAssetReserve, amm.quoteAssetReserve, amm.pegMultiplier);\n    const targetPrice = (oraclePriceData === null || oraclePriceData === void 0 ? void 0 : oraclePriceData.price) || reservePrice;\n    const confInterval = oraclePriceData.confidence || numericConstants_1.ZERO;\n    const targetMarkSpreadPct = reservePrice.sub(targetPrice).mul(numericConstants_1.BID_ASK_SPREAD_PRECISION).div(reservePrice);\n    const confIntervalPct = confInterval.mul(numericConstants_1.BID_ASK_SPREAD_PRECISION).div(reservePrice);\n    now = now || new anchor_1.BN(new Date().getTime() / 1000); //todo\n    const liveOracleStd = (0, oracles_1.calculateLiveOracleStd)(amm, oraclePriceData, now);\n    const spreads = calculateSpreadBN(amm.baseSpread, targetMarkSpreadPct, confIntervalPct, amm.maxSpread, amm.quoteAssetReserve, amm.terminalQuoteAssetReserve, amm.pegMultiplier, amm.baseAssetAmountWithAmm, reservePrice, amm.totalFeeMinusDistributions, amm.netRevenueSinceLastFunding, amm.baseAssetReserve, amm.minBaseAssetReserve, amm.maxBaseAssetReserve, amm.markStd, liveOracleStd, amm.longIntensityVolume, amm.shortIntensityVolume, amm.volume24H);\n    const longSpread = spreads[0];\n    const shortSpread = spreads[1];\n    return [\n        longSpread,\n        shortSpread\n    ];\n}\nexports.calculateSpread = calculateSpread;\nfunction calculateSpreadReserves(amm, oraclePriceData, now) {\n    function calculateSpreadReserve(spread, direction, amm) {\n        if (spread === 0) {\n            return {\n                baseAssetReserve: amm.baseAssetReserve,\n                quoteAssetReserve: amm.quoteAssetReserve\n            };\n        }\n        const quoteAssetReserveDelta = amm.quoteAssetReserve.div(numericConstants_1.BID_ASK_SPREAD_PRECISION.div(new anchor_1.BN(spread / 2)));\n        let quoteAssetReserve;\n        if ((0, types_1.isVariant)(direction, \"long\")) {\n            quoteAssetReserve = amm.quoteAssetReserve.add(quoteAssetReserveDelta);\n        } else {\n            quoteAssetReserve = amm.quoteAssetReserve.sub(quoteAssetReserveDelta);\n        }\n        const baseAssetReserve = amm.sqrtK.mul(amm.sqrtK).div(quoteAssetReserve);\n        return {\n            baseAssetReserve,\n            quoteAssetReserve\n        };\n    }\n    const [longSpread, shortSpread] = calculateSpread(amm, oraclePriceData, now);\n    const askReserves = calculateSpreadReserve(longSpread, types_1.PositionDirection.LONG, amm);\n    const bidReserves = calculateSpreadReserve(shortSpread, types_1.PositionDirection.SHORT, amm);\n    return [\n        bidReserves,\n        askReserves\n    ];\n}\nexports.calculateSpreadReserves = calculateSpreadReserves;\n/**\n * Helper function calculating constant product curve output. Agnostic to whether input asset is quote or base\n *\n * @param inputAssetReserve\n * @param swapAmount\n * @param swapDirection\n * @param invariant\n * @returns newInputAssetReserve and newOutputAssetReserve after swap. : Precision AMM_RESERVE_PRECISION\n */ function calculateSwapOutput(inputAssetReserve, swapAmount, swapDirection, invariant) {\n    let newInputAssetReserve;\n    if (swapDirection === types_1.SwapDirection.ADD) {\n        newInputAssetReserve = inputAssetReserve.add(swapAmount);\n    } else {\n        newInputAssetReserve = inputAssetReserve.sub(swapAmount);\n    }\n    const newOutputAssetReserve = invariant.div(newInputAssetReserve);\n    return [\n        newInputAssetReserve,\n        newOutputAssetReserve\n    ];\n}\nexports.calculateSwapOutput = calculateSwapOutput;\n/**\n * Translate long/shorting quote/base asset into amm operation\n *\n * @param inputAssetType\n * @param positionDirection\n */ function getSwapDirection(inputAssetType, positionDirection) {\n    if ((0, types_1.isVariant)(positionDirection, \"long\") && inputAssetType === \"base\") {\n        return types_1.SwapDirection.REMOVE;\n    }\n    if ((0, types_1.isVariant)(positionDirection, \"short\") && inputAssetType === \"quote\") {\n        return types_1.SwapDirection.REMOVE;\n    }\n    return types_1.SwapDirection.ADD;\n}\nexports.getSwapDirection = getSwapDirection;\n/**\n * Helper function calculating terminal price of amm\n *\n * @param market\n * @returns cost : Precision PRICE_PRECISION\n */ function calculateTerminalPrice(market) {\n    const directionToClose = market.amm.baseAssetAmountWithAmm.gt(numericConstants_1.ZERO) ? types_1.PositionDirection.SHORT : types_1.PositionDirection.LONG;\n    const [newQuoteAssetReserve, newBaseAssetReserve] = calculateAmmReservesAfterSwap(market.amm, \"base\", market.amm.baseAssetAmountWithAmm.abs(), getSwapDirection(\"base\", directionToClose));\n    const terminalPrice = newQuoteAssetReserve.mul(numericConstants_1.PRICE_PRECISION).mul(market.amm.pegMultiplier).div(numericConstants_1.PEG_PRECISION).div(newBaseAssetReserve);\n    return terminalPrice;\n}\nexports.calculateTerminalPrice = calculateTerminalPrice;\nfunction calculateMaxBaseAssetAmountToTrade(amm, limit_price, direction, oraclePriceData, now) {\n    const invariant = amm.sqrtK.mul(amm.sqrtK);\n    const newBaseAssetReserveSquared = invariant.mul(numericConstants_1.PRICE_PRECISION).mul(amm.pegMultiplier).div(limit_price).div(numericConstants_1.PEG_PRECISION);\n    const newBaseAssetReserve = (0, __1.squareRootBN)(newBaseAssetReserveSquared);\n    const [shortSpreadReserves, longSpreadReserves] = calculateSpreadReserves(amm, oraclePriceData, now);\n    const baseAssetReserveBefore = (0, types_1.isVariant)(direction, \"long\") ? longSpreadReserves.baseAssetReserve : shortSpreadReserves.baseAssetReserve;\n    if (newBaseAssetReserve.gt(baseAssetReserveBefore)) {\n        return [\n            newBaseAssetReserve.sub(baseAssetReserveBefore),\n            types_1.PositionDirection.SHORT\n        ];\n    } else if (newBaseAssetReserve.lt(baseAssetReserveBefore)) {\n        return [\n            baseAssetReserveBefore.sub(newBaseAssetReserve),\n            types_1.PositionDirection.LONG\n        ];\n    } else {\n        console.log(\"tradeSize Too Small\");\n        return [\n            new anchor_1.BN(0),\n            types_1.PositionDirection.LONG\n        ];\n    }\n}\nexports.calculateMaxBaseAssetAmountToTrade = calculateMaxBaseAssetAmountToTrade;\nfunction calculateQuoteAssetAmountSwapped(quoteAssetReserves, pegMultiplier, swapDirection) {\n    if ((0, types_1.isVariant)(swapDirection, \"remove\")) {\n        quoteAssetReserves = quoteAssetReserves.add(numericConstants_1.ONE);\n    }\n    let quoteAssetAmount = quoteAssetReserves.mul(pegMultiplier).div(numericConstants_1.AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO);\n    if ((0, types_1.isVariant)(swapDirection, \"remove\")) {\n        quoteAssetAmount = quoteAssetAmount.add(numericConstants_1.ONE);\n    }\n    return quoteAssetAmount;\n}\nexports.calculateQuoteAssetAmountSwapped = calculateQuoteAssetAmountSwapped;\nfunction calculateMaxBaseAssetAmountFillable(amm, orderDirection) {\n    const maxFillSize = amm.baseAssetReserve.div(new anchor_1.BN(amm.maxFillReserveFraction));\n    let maxBaseAssetAmountOnSide;\n    if ((0, types_1.isVariant)(orderDirection, \"long\")) {\n        maxBaseAssetAmountOnSide = anchor_1.BN.max(numericConstants_1.ZERO, amm.baseAssetReserve.sub(amm.minBaseAssetReserve));\n    } else {\n        maxBaseAssetAmountOnSide = anchor_1.BN.max(numericConstants_1.ZERO, amm.maxBaseAssetReserve.sub(amm.baseAssetReserve));\n    }\n    return (0, __1.standardizeBaseAssetAmount)(anchor_1.BN.min(maxFillSize, maxBaseAssetAmountOnSide), amm.orderStepSize);\n}\nexports.calculateMaxBaseAssetAmountFillable = calculateMaxBaseAssetAmountFillable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/amm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/auction.js":
/*!**********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/auction.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getAuctionPriceForOracleOffsetAuction = exports.getAuctionPriceForFixedAuction = exports.getAuctionPrice = exports.isFallbackAvailableLiquiditySource = exports.isAuctionComplete = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst _1 = __webpack_require__(/*! ../. */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nfunction isAuctionComplete(order, slot) {\n    if (order.auctionDuration === 0) {\n        return true;\n    }\n    return new _1.BN(slot).sub(order.slot).gt(new _1.BN(order.auctionDuration));\n}\nexports.isAuctionComplete = isAuctionComplete;\nfunction isFallbackAvailableLiquiditySource(order, minAuctionDuration, slot) {\n    if (minAuctionDuration === 0) {\n        return true;\n    }\n    return new _1.BN(slot).sub(order.slot).gt(new _1.BN(minAuctionDuration));\n}\nexports.isFallbackAvailableLiquiditySource = isFallbackAvailableLiquiditySource;\nfunction getAuctionPrice(order, slot, oraclePrice) {\n    if ((0, types_1.isOneOfVariant)(order.orderType, [\n        \"market\",\n        \"triggerMarket\",\n        \"limit\"\n    ])) {\n        return getAuctionPriceForFixedAuction(order, slot);\n    } else if ((0, types_1.isVariant)(order.orderType, \"oracle\")) {\n        return getAuctionPriceForOracleOffsetAuction(order, slot, oraclePrice);\n    } else {\n        throw Error(`Cant get auction price for order type ${order.orderType}`);\n    }\n}\nexports.getAuctionPrice = getAuctionPrice;\nfunction getAuctionPriceForFixedAuction(order, slot) {\n    const slotsElapsed = new _1.BN(slot).sub(order.slot);\n    const deltaDenominator = new _1.BN(order.auctionDuration);\n    const deltaNumerator = _1.BN.min(slotsElapsed, deltaDenominator);\n    if (deltaDenominator.eq(_1.ZERO)) {\n        return order.auctionEndPrice;\n    }\n    let priceDelta;\n    if ((0, types_1.isVariant)(order.direction, \"long\")) {\n        priceDelta = order.auctionEndPrice.sub(order.auctionStartPrice).mul(deltaNumerator).div(deltaDenominator);\n    } else {\n        priceDelta = order.auctionStartPrice.sub(order.auctionEndPrice).mul(deltaNumerator).div(deltaDenominator);\n    }\n    let price;\n    if ((0, types_1.isVariant)(order.direction, \"long\")) {\n        price = order.auctionStartPrice.add(priceDelta);\n    } else {\n        price = order.auctionStartPrice.sub(priceDelta);\n    }\n    return price;\n}\nexports.getAuctionPriceForFixedAuction = getAuctionPriceForFixedAuction;\nfunction getAuctionPriceForOracleOffsetAuction(order, slot, oraclePrice) {\n    const slotsElapsed = new _1.BN(slot).sub(order.slot);\n    const deltaDenominator = new _1.BN(order.auctionDuration);\n    const deltaNumerator = _1.BN.min(slotsElapsed, deltaDenominator);\n    if (deltaDenominator.eq(_1.ZERO)) {\n        return oraclePrice.add(order.auctionEndPrice);\n    }\n    let priceOffsetDelta;\n    if ((0, types_1.isVariant)(order.direction, \"long\")) {\n        priceOffsetDelta = order.auctionEndPrice.sub(order.auctionStartPrice).mul(deltaNumerator).div(deltaDenominator);\n    } else {\n        priceOffsetDelta = order.auctionStartPrice.sub(order.auctionEndPrice).mul(deltaNumerator).div(deltaDenominator);\n    }\n    let priceOffset;\n    if ((0, types_1.isVariant)(order.direction, \"long\")) {\n        priceOffset = order.auctionStartPrice.add(priceOffsetDelta);\n    } else {\n        priceOffset = order.auctionStartPrice.sub(priceOffsetDelta);\n    }\n    return oraclePrice.add(priceOffset);\n}\nexports.getAuctionPriceForOracleOffsetAuction = getAuctionPriceForOracleOffsetAuction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/auction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/bankruptcy.js":
/*!*************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/bankruptcy.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isUserBankrupt = void 0;\nconst __1 = __webpack_require__(/*! .. */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nfunction isUserBankrupt(user) {\n    const userAccount = user.getUserAccount();\n    let hasLiability = false;\n    for (const position of userAccount.spotPositions){\n        if (position.scaledBalance.gt(__1.ZERO)) {\n            if ((0, __1.isVariant)(position.balanceType, \"deposit\")) {\n                return false;\n            }\n            if ((0, __1.isVariant)(position.balanceType, \"borrow\")) {\n                hasLiability = true;\n            }\n        }\n    }\n    for (const position of userAccount.perpPositions){\n        if (!position.baseAssetAmount.eq(__1.ZERO) || position.quoteAssetAmount.gt(__1.ZERO) || (0, __1.hasOpenOrders)(position) || position.lpShares.gt(__1.ZERO)) {\n            return false;\n        }\n        if (position.quoteAssetAmount.lt(__1.ZERO)) {\n            hasLiability = true;\n        }\n    }\n    return hasLiability;\n}\nexports.isUserBankrupt = isUserBankrupt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL2JhbmtydXB0Y3kuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUcsTUFBTUMsbUJBQU9BLENBQUMsNkRBQUk7QUFDeEIsU0FBU0YsZUFBZUcsSUFBSTtJQUN4QixNQUFNQyxjQUFjRCxLQUFLRSxjQUFjO0lBQ3ZDLElBQUlDLGVBQWU7SUFDbkIsS0FBSyxNQUFNQyxZQUFZSCxZQUFZSSxhQUFhLENBQUU7UUFDOUMsSUFBSUQsU0FBU0UsYUFBYSxDQUFDQyxFQUFFLENBQUNULElBQUlVLElBQUksR0FBRztZQUNyQyxJQUFJLENBQUMsR0FBR1YsSUFBSVcsU0FBUyxFQUFFTCxTQUFTTSxXQUFXLEVBQUUsWUFBWTtnQkFDckQsT0FBTztZQUNYO1lBQ0EsSUFBSSxDQUFDLEdBQUdaLElBQUlXLFNBQVMsRUFBRUwsU0FBU00sV0FBVyxFQUFFLFdBQVc7Z0JBQ3BEUCxlQUFlO1lBQ25CO1FBQ0o7SUFDSjtJQUNBLEtBQUssTUFBTUMsWUFBWUgsWUFBWVUsYUFBYSxDQUFFO1FBQzlDLElBQUksQ0FBQ1AsU0FBU1EsZUFBZSxDQUFDQyxFQUFFLENBQUNmLElBQUlVLElBQUksS0FDckNKLFNBQVNVLGdCQUFnQixDQUFDUCxFQUFFLENBQUNULElBQUlVLElBQUksS0FDckMsQ0FBQyxHQUFHVixJQUFJaUIsYUFBYSxFQUFFWCxhQUN2QkEsU0FBU1ksUUFBUSxDQUFDVCxFQUFFLENBQUNULElBQUlVLElBQUksR0FBRztZQUNoQyxPQUFPO1FBQ1g7UUFDQSxJQUFJSixTQUFTVSxnQkFBZ0IsQ0FBQ0csRUFBRSxDQUFDbkIsSUFBSVUsSUFBSSxHQUFHO1lBQ3hDTCxlQUFlO1FBQ25CO0lBQ0o7SUFDQSxPQUFPQTtBQUNYO0FBQ0FSLHNCQUFzQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL2JhbmtydXB0Y3kuanM/MDUzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNVc2VyQmFua3J1cHQgPSB2b2lkIDA7XG5jb25zdCBfXzEgPSByZXF1aXJlKFwiLi5cIik7XG5mdW5jdGlvbiBpc1VzZXJCYW5rcnVwdCh1c2VyKSB7XG4gICAgY29uc3QgdXNlckFjY291bnQgPSB1c2VyLmdldFVzZXJBY2NvdW50KCk7XG4gICAgbGV0IGhhc0xpYWJpbGl0eSA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgcG9zaXRpb24gb2YgdXNlckFjY291bnQuc3BvdFBvc2l0aW9ucykge1xuICAgICAgICBpZiAocG9zaXRpb24uc2NhbGVkQmFsYW5jZS5ndChfXzEuWkVSTykpIHtcbiAgICAgICAgICAgIGlmICgoMCwgX18xLmlzVmFyaWFudCkocG9zaXRpb24uYmFsYW5jZVR5cGUsICdkZXBvc2l0JykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKDAsIF9fMS5pc1ZhcmlhbnQpKHBvc2l0aW9uLmJhbGFuY2VUeXBlLCAnYm9ycm93JykpIHtcbiAgICAgICAgICAgICAgICBoYXNMaWFiaWxpdHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgcG9zaXRpb24gb2YgdXNlckFjY291bnQucGVycFBvc2l0aW9ucykge1xuICAgICAgICBpZiAoIXBvc2l0aW9uLmJhc2VBc3NldEFtb3VudC5lcShfXzEuWkVSTykgfHxcbiAgICAgICAgICAgIHBvc2l0aW9uLnF1b3RlQXNzZXRBbW91bnQuZ3QoX18xLlpFUk8pIHx8XG4gICAgICAgICAgICAoMCwgX18xLmhhc09wZW5PcmRlcnMpKHBvc2l0aW9uKSB8fFxuICAgICAgICAgICAgcG9zaXRpb24ubHBTaGFyZXMuZ3QoX18xLlpFUk8pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uLnF1b3RlQXNzZXRBbW91bnQubHQoX18xLlpFUk8pKSB7XG4gICAgICAgICAgICBoYXNMaWFiaWxpdHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoYXNMaWFiaWxpdHk7XG59XG5leHBvcnRzLmlzVXNlckJhbmtydXB0ID0gaXNVc2VyQmFua3J1cHQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc1VzZXJCYW5rcnVwdCIsIl9fMSIsInJlcXVpcmUiLCJ1c2VyIiwidXNlckFjY291bnQiLCJnZXRVc2VyQWNjb3VudCIsImhhc0xpYWJpbGl0eSIsInBvc2l0aW9uIiwic3BvdFBvc2l0aW9ucyIsInNjYWxlZEJhbGFuY2UiLCJndCIsIlpFUk8iLCJpc1ZhcmlhbnQiLCJiYWxhbmNlVHlwZSIsInBlcnBQb3NpdGlvbnMiLCJiYXNlQXNzZXRBbW91bnQiLCJlcSIsInF1b3RlQXNzZXRBbW91bnQiLCJoYXNPcGVuT3JkZXJzIiwibHBTaGFyZXMiLCJsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/bankruptcy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/conversion.js":
/*!*************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/conversion.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.convertToNumber = void 0;\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst convertToNumber = (bigNumber, precision = numericConstants_1.PRICE_PRECISION)=>{\n    if (!bigNumber) return 0;\n    return bigNumber.div(precision).toNumber() + bigNumber.mod(precision).toNumber() / precision.toNumber();\n};\nexports.convertToNumber = convertToNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL2NvbnZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHLEtBQUs7QUFDL0IsTUFBTUcscUJBQXFCQyxtQkFBT0EsQ0FBQyw2R0FBK0I7QUFDbEUsTUFBTUYsa0JBQWtCLENBQUNHLFdBQVdDLFlBQVlILG1CQUFtQkksZUFBZTtJQUM5RSxJQUFJLENBQUNGLFdBQ0QsT0FBTztJQUNYLE9BQVFBLFVBQVVHLEdBQUcsQ0FBQ0YsV0FBV0csUUFBUSxLQUNyQ0osVUFBVUssR0FBRyxDQUFDSixXQUFXRyxRQUFRLEtBQUtILFVBQVVHLFFBQVE7QUFDaEU7QUFDQVQsdUJBQXVCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL21hdGgvY29udmVyc2lvbi5qcz8yY2Q1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb252ZXJ0VG9OdW1iZXIgPSB2b2lkIDA7XG5jb25zdCBudW1lcmljQ29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzL251bWVyaWNDb25zdGFudHNcIik7XG5jb25zdCBjb252ZXJ0VG9OdW1iZXIgPSAoYmlnTnVtYmVyLCBwcmVjaXNpb24gPSBudW1lcmljQ29uc3RhbnRzXzEuUFJJQ0VfUFJFQ0lTSU9OKSA9PiB7XG4gICAgaWYgKCFiaWdOdW1iZXIpXG4gICAgICAgIHJldHVybiAwO1xuICAgIHJldHVybiAoYmlnTnVtYmVyLmRpdihwcmVjaXNpb24pLnRvTnVtYmVyKCkgK1xuICAgICAgICBiaWdOdW1iZXIubW9kKHByZWNpc2lvbikudG9OdW1iZXIoKSAvIHByZWNpc2lvbi50b051bWJlcigpKTtcbn07XG5leHBvcnRzLmNvbnZlcnRUb051bWJlciA9IGNvbnZlcnRUb051bWJlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbnZlcnRUb051bWJlciIsIm51bWVyaWNDb25zdGFudHNfMSIsInJlcXVpcmUiLCJiaWdOdW1iZXIiLCJwcmVjaXNpb24iLCJQUklDRV9QUkVDSVNJT04iLCJkaXYiLCJ0b051bWJlciIsIm1vZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/conversion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/exchangeStatus.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/exchangeStatus.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ammPaused = exports.fillPaused = exports.exchangePaused = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nfunction exchangePaused(state) {\n    return state.exchangeStatus !== types_1.ExchangeStatus.ACTIVE;\n}\nexports.exchangePaused = exchangePaused;\nfunction fillPaused(state, market) {\n    return (state.exchangeStatus & types_1.ExchangeStatus.FILL_PAUSED) === types_1.ExchangeStatus.FILL_PAUSED || (0, types_1.isOneOfVariant)(market.status, [\n        \"paused\",\n        \"fillPaused\"\n    ]);\n}\nexports.fillPaused = fillPaused;\nfunction ammPaused(state, market) {\n    return (state.exchangeStatus & types_1.ExchangeStatus.AMM_PAUSED) === types_1.ExchangeStatus.AMM_PAUSED || (0, types_1.isOneOfVariant)(market.status, [\n        \"paused\",\n        \"ammPaused\"\n    ]);\n}\nexports.ammPaused = ammPaused;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL2V4Y2hhbmdlU3RhdHVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0Esa0JBQWtCLEdBQUdBLHNCQUFzQixHQUFHLEtBQUs7QUFDdkUsTUFBTUssVUFBVUMsbUJBQU9BLENBQUMsbUVBQVU7QUFDbEMsU0FBU0YsZUFBZUcsS0FBSztJQUN6QixPQUFPQSxNQUFNQyxjQUFjLEtBQUtILFFBQVFJLGNBQWMsQ0FBQ0MsTUFBTTtBQUNqRTtBQUNBVixzQkFBc0IsR0FBR0k7QUFDekIsU0FBU0QsV0FBV0ksS0FBSyxFQUFFSSxNQUFNO0lBQzdCLE9BQVEsQ0FBQ0osTUFBTUMsY0FBYyxHQUFHSCxRQUFRSSxjQUFjLENBQUNHLFdBQVcsTUFDOURQLFFBQVFJLGNBQWMsQ0FBQ0csV0FBVyxJQUNsQyxDQUFDLEdBQUdQLFFBQVFRLGNBQWMsRUFBRUYsT0FBT0csTUFBTSxFQUFFO1FBQUM7UUFBVTtLQUFhO0FBQzNFO0FBQ0FkLGtCQUFrQixHQUFHRztBQUNyQixTQUFTRCxVQUFVSyxLQUFLLEVBQUVJLE1BQU07SUFDNUIsT0FBUSxDQUFDSixNQUFNQyxjQUFjLEdBQUdILFFBQVFJLGNBQWMsQ0FBQ00sVUFBVSxNQUM3RFYsUUFBUUksY0FBYyxDQUFDTSxVQUFVLElBQ2pDLENBQUMsR0FBR1YsUUFBUVEsY0FBYyxFQUFFRixPQUFPRyxNQUFNLEVBQUU7UUFBQztRQUFVO0tBQVk7QUFDMUU7QUFDQWQsaUJBQWlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL21hdGgvZXhjaGFuZ2VTdGF0dXMuanM/YjM4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYW1tUGF1c2VkID0gZXhwb3J0cy5maWxsUGF1c2VkID0gZXhwb3J0cy5leGNoYW5nZVBhdXNlZCA9IHZvaWQgMDtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG5mdW5jdGlvbiBleGNoYW5nZVBhdXNlZChzdGF0ZSkge1xuICAgIHJldHVybiBzdGF0ZS5leGNoYW5nZVN0YXR1cyAhPT0gdHlwZXNfMS5FeGNoYW5nZVN0YXR1cy5BQ1RJVkU7XG59XG5leHBvcnRzLmV4Y2hhbmdlUGF1c2VkID0gZXhjaGFuZ2VQYXVzZWQ7XG5mdW5jdGlvbiBmaWxsUGF1c2VkKHN0YXRlLCBtYXJrZXQpIHtcbiAgICByZXR1cm4gKChzdGF0ZS5leGNoYW5nZVN0YXR1cyAmIHR5cGVzXzEuRXhjaGFuZ2VTdGF0dXMuRklMTF9QQVVTRUQpID09PVxuICAgICAgICB0eXBlc18xLkV4Y2hhbmdlU3RhdHVzLkZJTExfUEFVU0VEIHx8XG4gICAgICAgICgwLCB0eXBlc18xLmlzT25lT2ZWYXJpYW50KShtYXJrZXQuc3RhdHVzLCBbJ3BhdXNlZCcsICdmaWxsUGF1c2VkJ10pKTtcbn1cbmV4cG9ydHMuZmlsbFBhdXNlZCA9IGZpbGxQYXVzZWQ7XG5mdW5jdGlvbiBhbW1QYXVzZWQoc3RhdGUsIG1hcmtldCkge1xuICAgIHJldHVybiAoKHN0YXRlLmV4Y2hhbmdlU3RhdHVzICYgdHlwZXNfMS5FeGNoYW5nZVN0YXR1cy5BTU1fUEFVU0VEKSA9PT1cbiAgICAgICAgdHlwZXNfMS5FeGNoYW5nZVN0YXR1cy5BTU1fUEFVU0VEIHx8XG4gICAgICAgICgwLCB0eXBlc18xLmlzT25lT2ZWYXJpYW50KShtYXJrZXQuc3RhdHVzLCBbJ3BhdXNlZCcsICdhbW1QYXVzZWQnXSkpO1xufVxuZXhwb3J0cy5hbW1QYXVzZWQgPSBhbW1QYXVzZWQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhbW1QYXVzZWQiLCJmaWxsUGF1c2VkIiwiZXhjaGFuZ2VQYXVzZWQiLCJ0eXBlc18xIiwicmVxdWlyZSIsInN0YXRlIiwiZXhjaGFuZ2VTdGF0dXMiLCJFeGNoYW5nZVN0YXR1cyIsIkFDVElWRSIsIm1hcmtldCIsIkZJTExfUEFVU0VEIiwiaXNPbmVPZlZhcmlhbnQiLCJzdGF0dXMiLCJBTU1fUEFVU0VEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/exchangeStatus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/funding.js":
/*!**********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/funding.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateFundingPool = exports.calculateLongShortFundingRateAndLiveTwaps = exports.calculateLongShortFundingRate = exports.calculateAllEstimatedFundingRate = void 0;\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst amm_1 = __webpack_require__(/*! ./amm */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/amm.js\");\nconst oracles_1 = __webpack_require__(/*! ./oracles */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/oracles.js\");\nfunction calculateLiveMarkTwap(market, oraclePriceData, markPrice, now, period = new anchor_1.BN(3600)) {\n    now = now || new anchor_1.BN((Date.now() / 1000).toFixed(0));\n    const lastMarkTwapWithMantissa = market.amm.lastMarkPriceTwap;\n    const lastMarkPriceTwapTs = market.amm.lastMarkPriceTwapTs;\n    const timeSinceLastMarkChange = now.sub(lastMarkPriceTwapTs);\n    const markTwapTimeSinceLastUpdate = anchor_1.BN.max(period, anchor_1.BN.max(numericConstants_1.ZERO, period.sub(timeSinceLastMarkChange)));\n    if (!markPrice) {\n        const [bid, ask] = (0, amm_1.calculateBidAskPrice)(market.amm, oraclePriceData);\n        markPrice = bid.add(ask).div(new anchor_1.BN(2));\n    }\n    const markTwapWithMantissa = markTwapTimeSinceLastUpdate.mul(lastMarkTwapWithMantissa).add(timeSinceLastMarkChange.mul(markPrice)).div(timeSinceLastMarkChange.add(markTwapTimeSinceLastUpdate));\n    return markTwapWithMantissa;\n}\nfunction shrinkStaleTwaps(market, markTwapWithMantissa, oracleTwapWithMantissa, now) {\n    now = now || new anchor_1.BN((Date.now() / 1000).toFixed(0));\n    let newMarkTwap = markTwapWithMantissa;\n    let newOracleTwap = oracleTwapWithMantissa;\n    if (market.amm.lastMarkPriceTwapTs.gt(market.amm.historicalOracleData.lastOraclePriceTwapTs)) {\n        // shrink oracle based on invalid intervals\n        const oracleInvalidDuration = anchor_1.BN.max(numericConstants_1.ZERO, market.amm.lastMarkPriceTwapTs.sub(market.amm.historicalOracleData.lastOraclePriceTwapTs));\n        const timeSinceLastOracleTwapUpdate = now.sub(market.amm.historicalOracleData.lastOraclePriceTwapTs);\n        const oracleTwapTimeSinceLastUpdate = anchor_1.BN.max(numericConstants_1.ONE, anchor_1.BN.min(market.amm.fundingPeriod, anchor_1.BN.max(numericConstants_1.ONE, market.amm.fundingPeriod.sub(timeSinceLastOracleTwapUpdate))));\n        newOracleTwap = oracleTwapTimeSinceLastUpdate.mul(oracleTwapWithMantissa).add(oracleInvalidDuration.mul(markTwapWithMantissa)).div(oracleTwapTimeSinceLastUpdate.add(oracleInvalidDuration));\n    } else if (market.amm.lastMarkPriceTwapTs.lt(market.amm.historicalOracleData.lastOraclePriceTwapTs)) {\n        // shrink mark to oracle twap over tradless intervals\n        const tradelessDuration = anchor_1.BN.max(numericConstants_1.ZERO, market.amm.historicalOracleData.lastOraclePriceTwapTs.sub(market.amm.lastMarkPriceTwapTs));\n        const timeSinceLastMarkTwapUpdate = now.sub(market.amm.lastMarkPriceTwapTs);\n        const markTwapTimeSinceLastUpdate = anchor_1.BN.max(numericConstants_1.ONE, anchor_1.BN.min(market.amm.fundingPeriod, anchor_1.BN.max(numericConstants_1.ONE, market.amm.fundingPeriod.sub(timeSinceLastMarkTwapUpdate))));\n        newMarkTwap = markTwapTimeSinceLastUpdate.mul(markTwapWithMantissa).add(tradelessDuration.mul(oracleTwapWithMantissa)).div(markTwapTimeSinceLastUpdate.add(tradelessDuration));\n    }\n    return [\n        newMarkTwap,\n        newOracleTwap\n    ];\n}\n/**\n *\n * @param market\n * @param oraclePriceData\n * @param periodAdjustment\n * @returns Estimated funding rate. : Precision //TODO-PRECISION\n */ async function calculateAllEstimatedFundingRate(market, oraclePriceData, markPrice, now) {\n    if ((0, types_1.isVariant)(market.status, \"uninitialized\")) {\n        return [\n            numericConstants_1.ZERO,\n            numericConstants_1.ZERO,\n            numericConstants_1.ZERO,\n            numericConstants_1.ZERO,\n            numericConstants_1.ZERO\n        ];\n    }\n    // todo: sufficiently differs from blockchain timestamp?\n    now = now || new anchor_1.BN((Date.now() / 1000).toFixed(0));\n    // calculate real-time mark and oracle twap\n    const liveMarkTwap = calculateLiveMarkTwap(market, oraclePriceData, markPrice, now, market.amm.fundingPeriod);\n    const liveOracleTwap = (0, oracles_1.calculateLiveOracleTwap)(market.amm.historicalOracleData, oraclePriceData, now, market.amm.fundingPeriod);\n    const [markTwap, oracleTwap] = shrinkStaleTwaps(market, liveMarkTwap, liveOracleTwap, now);\n    // if(!markTwap.eq(liveMarkTwap)){\n    // \tconsole.log('shrink mark:', liveMarkTwap.toString(), '->', markTwap.toString());\n    // }\n    // if(!oracleTwap.eq(liveOracleTwap)){\n    // \tconsole.log('shrink orac:', liveOracleTwap.toString(), '->', oracleTwap.toString());\n    // }\n    const twapSpread = markTwap.sub(oracleTwap);\n    const twapSpreadPct = twapSpread.mul(numericConstants_1.PRICE_PRECISION).mul(new anchor_1.BN(100)).div(oracleTwap);\n    const secondsInHour = new anchor_1.BN(3600);\n    const hoursInDay = new anchor_1.BN(24);\n    const timeSinceLastUpdate = now.sub(market.amm.lastFundingRateTs);\n    const lowerboundEst = twapSpreadPct.mul(market.amm.fundingPeriod).mul(anchor_1.BN.min(secondsInHour, timeSinceLastUpdate)).div(secondsInHour).div(secondsInHour).div(hoursInDay);\n    const interpEst = twapSpreadPct.div(hoursInDay);\n    const interpRateQuote = twapSpreadPct.div(hoursInDay).div(numericConstants_1.PRICE_PRECISION.div(numericConstants_1.QUOTE_PRECISION));\n    let feePoolSize = calculateFundingPool(market);\n    if (interpRateQuote.lt(new anchor_1.BN(0))) {\n        feePoolSize = feePoolSize.mul(new anchor_1.BN(-1));\n    }\n    let cappedAltEst;\n    let largerSide;\n    let smallerSide;\n    if (market.amm.baseAssetAmountLong.gt(market.amm.baseAssetAmountShort.abs())) {\n        largerSide = market.amm.baseAssetAmountLong.abs();\n        smallerSide = market.amm.baseAssetAmountShort.abs();\n        if (twapSpread.gt(new anchor_1.BN(0))) {\n            return [\n                markTwap,\n                oracleTwap,\n                lowerboundEst,\n                interpEst,\n                interpEst\n            ];\n        }\n    } else if (market.amm.baseAssetAmountLong.lt(market.amm.baseAssetAmountShort.abs())) {\n        largerSide = market.amm.baseAssetAmountShort.abs();\n        smallerSide = market.amm.baseAssetAmountLong.abs();\n        if (twapSpread.lt(new anchor_1.BN(0))) {\n            return [\n                markTwap,\n                oracleTwap,\n                lowerboundEst,\n                interpEst,\n                interpEst\n            ];\n        }\n    } else {\n        return [\n            markTwap,\n            oracleTwap,\n            lowerboundEst,\n            interpEst,\n            interpEst\n        ];\n    }\n    if (largerSide.gt(numericConstants_1.ZERO)) {\n        // funding smaller flow\n        cappedAltEst = smallerSide.mul(twapSpread).div(hoursInDay);\n        const feePoolTopOff = feePoolSize.mul(numericConstants_1.PRICE_PRECISION.div(numericConstants_1.QUOTE_PRECISION)).mul(numericConstants_1.AMM_RESERVE_PRECISION);\n        cappedAltEst = cappedAltEst.add(feePoolTopOff).div(largerSide);\n        cappedAltEst = cappedAltEst.mul(numericConstants_1.PRICE_PRECISION).mul(new anchor_1.BN(100)).div(oracleTwap);\n        if (cappedAltEst.abs().gte(interpEst.abs())) {\n            cappedAltEst = interpEst;\n        }\n    } else {\n        cappedAltEst = interpEst;\n    }\n    return [\n        markTwap,\n        oracleTwap,\n        lowerboundEst,\n        cappedAltEst,\n        interpEst\n    ];\n}\nexports.calculateAllEstimatedFundingRate = calculateAllEstimatedFundingRate;\n/**\n *\n * @param market\n * @param oraclePriceData\n * @param periodAdjustment\n * @returns Estimated funding rate. : Precision //TODO-PRECISION\n */ async function calculateLongShortFundingRate(market, oraclePriceData, markPrice, now) {\n    const [_1, _2, _, cappedAltEst, interpEst] = await calculateAllEstimatedFundingRate(market, oraclePriceData, markPrice, now);\n    if (market.amm.baseAssetAmountLong.gt(market.amm.baseAssetAmountShort)) {\n        return [\n            cappedAltEst,\n            interpEst\n        ];\n    } else if (market.amm.baseAssetAmountLong.lt(market.amm.baseAssetAmountShort)) {\n        return [\n            interpEst,\n            cappedAltEst\n        ];\n    } else {\n        return [\n            interpEst,\n            interpEst\n        ];\n    }\n}\nexports.calculateLongShortFundingRate = calculateLongShortFundingRate;\n/**\n *\n * @param market\n * @param oraclePriceData\n * @param periodAdjustment\n * @returns Estimated funding rate. : Precision //TODO-PRECISION\n */ async function calculateLongShortFundingRateAndLiveTwaps(market, oraclePriceData, markPrice, now) {\n    const [markTwapLive, oracleTwapLive, _2, cappedAltEst, interpEst] = await calculateAllEstimatedFundingRate(market, oraclePriceData, markPrice, now);\n    if (market.amm.baseAssetAmountLong.gt(market.amm.baseAssetAmountShort.abs())) {\n        return [\n            markTwapLive,\n            oracleTwapLive,\n            cappedAltEst,\n            interpEst\n        ];\n    } else if (market.amm.baseAssetAmountLong.lt(market.amm.baseAssetAmountShort.abs())) {\n        return [\n            markTwapLive,\n            oracleTwapLive,\n            interpEst,\n            cappedAltEst\n        ];\n    } else {\n        return [\n            markTwapLive,\n            oracleTwapLive,\n            interpEst,\n            interpEst\n        ];\n    }\n}\nexports.calculateLongShortFundingRateAndLiveTwaps = calculateLongShortFundingRateAndLiveTwaps;\n/**\n *\n * @param market\n * @returns Estimated fee pool size\n */ function calculateFundingPool(market) {\n    // todo\n    const totalFeeLB = market.amm.totalExchangeFee.div(new anchor_1.BN(2));\n    const feePool = anchor_1.BN.max(numericConstants_1.ZERO, market.amm.totalFeeMinusDistributions.sub(totalFeeLB).mul(new anchor_1.BN(1)).div(new anchor_1.BN(3)));\n    return feePool;\n}\nexports.calculateFundingPool = calculateFundingPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/funding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/insurance.js":
/*!************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/insurance.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.unstakeSharesToAmountWithOpenRequest = exports.unstakeSharesToAmount = exports.stakeAmountToShares = void 0;\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst index_1 = __webpack_require__(/*! ../index */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nfunction stakeAmountToShares(amount, totalIfShares, insuranceFundVaultBalance) {\n    let nShares;\n    if (insuranceFundVaultBalance.gt(numericConstants_1.ZERO)) {\n        nShares = amount.mul(totalIfShares).div(insuranceFundVaultBalance);\n    } else {\n        nShares = amount;\n    }\n    return nShares;\n}\nexports.stakeAmountToShares = stakeAmountToShares;\nfunction unstakeSharesToAmount(nShares, totalIfShares, insuranceFundVaultBalance) {\n    let amount;\n    if (totalIfShares.gt(numericConstants_1.ZERO)) {\n        amount = index_1.BN.max(numericConstants_1.ZERO, nShares.mul(insuranceFundVaultBalance).div(totalIfShares));\n    } else {\n        amount = numericConstants_1.ZERO;\n    }\n    return amount;\n}\nexports.unstakeSharesToAmount = unstakeSharesToAmount;\nfunction unstakeSharesToAmountWithOpenRequest(nShares, withdrawRequestShares, withdrawRequestAmount, totalIfShares, insuranceFundVaultBalance) {\n    let stakedAmount;\n    if (totalIfShares.gt(numericConstants_1.ZERO)) {\n        stakedAmount = index_1.BN.max(numericConstants_1.ZERO, nShares.sub(withdrawRequestShares).mul(insuranceFundVaultBalance).div(totalIfShares));\n    } else {\n        stakedAmount = numericConstants_1.ZERO;\n    }\n    const withdrawAmount = index_1.BN.min(withdrawRequestAmount, withdrawRequestShares.mul(insuranceFundVaultBalance).div(totalIfShares));\n    const amount = withdrawAmount.add(stakedAmount);\n    return amount;\n}\nexports.unstakeSharesToAmountWithOpenRequest = unstakeSharesToAmountWithOpenRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL2luc3VyYW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNENBQTRDLEdBQUdBLDZCQUE2QixHQUFHQSwyQkFBMkIsR0FBRyxLQUFLO0FBQ2xILE1BQU1LLHFCQUFxQkMsbUJBQU9BLENBQUMsNkdBQStCO0FBQ2xFLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLG1FQUFVO0FBQ2xDLFNBQVNGLG9CQUFvQkksTUFBTSxFQUFFQyxhQUFhLEVBQUVDLHlCQUF5QjtJQUN6RSxJQUFJQztJQUNKLElBQUlELDBCQUEwQkUsRUFBRSxDQUFDUCxtQkFBbUJRLElBQUksR0FBRztRQUN2REYsVUFBVUgsT0FBT00sR0FBRyxDQUFDTCxlQUFlTSxHQUFHLENBQUNMO0lBQzVDLE9BQ0s7UUFDREMsVUFBVUg7SUFDZDtJQUNBLE9BQU9HO0FBQ1g7QUFDQVgsMkJBQTJCLEdBQUdJO0FBQzlCLFNBQVNELHNCQUFzQlEsT0FBTyxFQUFFRixhQUFhLEVBQUVDLHlCQUF5QjtJQUM1RSxJQUFJRjtJQUNKLElBQUlDLGNBQWNHLEVBQUUsQ0FBQ1AsbUJBQW1CUSxJQUFJLEdBQUc7UUFDM0NMLFNBQVNELFFBQVFTLEVBQUUsQ0FBQ0MsR0FBRyxDQUFDWixtQkFBbUJRLElBQUksRUFBRUYsUUFBUUcsR0FBRyxDQUFDSiwyQkFBMkJLLEdBQUcsQ0FBQ047SUFDaEcsT0FDSztRQUNERCxTQUFTSCxtQkFBbUJRLElBQUk7SUFDcEM7SUFDQSxPQUFPTDtBQUNYO0FBQ0FSLDZCQUE2QixHQUFHRztBQUNoQyxTQUFTRCxxQ0FBcUNTLE9BQU8sRUFBRU8scUJBQXFCLEVBQUVDLHFCQUFxQixFQUFFVixhQUFhLEVBQUVDLHlCQUF5QjtJQUN6SSxJQUFJVTtJQUNKLElBQUlYLGNBQWNHLEVBQUUsQ0FBQ1AsbUJBQW1CUSxJQUFJLEdBQUc7UUFDM0NPLGVBQWViLFFBQVFTLEVBQUUsQ0FBQ0MsR0FBRyxDQUFDWixtQkFBbUJRLElBQUksRUFBRUYsUUFDbERVLEdBQUcsQ0FBQ0gsdUJBQ0pKLEdBQUcsQ0FBQ0osMkJBQ0pLLEdBQUcsQ0FBQ047SUFDYixPQUNLO1FBQ0RXLGVBQWVmLG1CQUFtQlEsSUFBSTtJQUMxQztJQUNBLE1BQU1TLGlCQUFpQmYsUUFBUVMsRUFBRSxDQUFDTyxHQUFHLENBQUNKLHVCQUF1QkQsc0JBQXNCSixHQUFHLENBQUNKLDJCQUEyQkssR0FBRyxDQUFDTjtJQUN0SCxNQUFNRCxTQUFTYyxlQUFlRSxHQUFHLENBQUNKO0lBQ2xDLE9BQU9aO0FBQ1g7QUFDQVIsNENBQTRDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL21hdGgvaW5zdXJhbmNlLmpzPzRlMzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVuc3Rha2VTaGFyZXNUb0Ftb3VudFdpdGhPcGVuUmVxdWVzdCA9IGV4cG9ydHMudW5zdGFrZVNoYXJlc1RvQW1vdW50ID0gZXhwb3J0cy5zdGFrZUFtb3VudFRvU2hhcmVzID0gdm9pZCAwO1xuY29uc3QgbnVtZXJpY0NvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50cy9udW1lcmljQ29uc3RhbnRzXCIpO1xuY29uc3QgaW5kZXhfMSA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcbmZ1bmN0aW9uIHN0YWtlQW1vdW50VG9TaGFyZXMoYW1vdW50LCB0b3RhbElmU2hhcmVzLCBpbnN1cmFuY2VGdW5kVmF1bHRCYWxhbmNlKSB7XG4gICAgbGV0IG5TaGFyZXM7XG4gICAgaWYgKGluc3VyYW5jZUZ1bmRWYXVsdEJhbGFuY2UuZ3QobnVtZXJpY0NvbnN0YW50c18xLlpFUk8pKSB7XG4gICAgICAgIG5TaGFyZXMgPSBhbW91bnQubXVsKHRvdGFsSWZTaGFyZXMpLmRpdihpbnN1cmFuY2VGdW5kVmF1bHRCYWxhbmNlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5TaGFyZXMgPSBhbW91bnQ7XG4gICAgfVxuICAgIHJldHVybiBuU2hhcmVzO1xufVxuZXhwb3J0cy5zdGFrZUFtb3VudFRvU2hhcmVzID0gc3Rha2VBbW91bnRUb1NoYXJlcztcbmZ1bmN0aW9uIHVuc3Rha2VTaGFyZXNUb0Ftb3VudChuU2hhcmVzLCB0b3RhbElmU2hhcmVzLCBpbnN1cmFuY2VGdW5kVmF1bHRCYWxhbmNlKSB7XG4gICAgbGV0IGFtb3VudDtcbiAgICBpZiAodG90YWxJZlNoYXJlcy5ndChudW1lcmljQ29uc3RhbnRzXzEuWkVSTykpIHtcbiAgICAgICAgYW1vdW50ID0gaW5kZXhfMS5CTi5tYXgobnVtZXJpY0NvbnN0YW50c18xLlpFUk8sIG5TaGFyZXMubXVsKGluc3VyYW5jZUZ1bmRWYXVsdEJhbGFuY2UpLmRpdih0b3RhbElmU2hhcmVzKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhbW91bnQgPSBudW1lcmljQ29uc3RhbnRzXzEuWkVSTztcbiAgICB9XG4gICAgcmV0dXJuIGFtb3VudDtcbn1cbmV4cG9ydHMudW5zdGFrZVNoYXJlc1RvQW1vdW50ID0gdW5zdGFrZVNoYXJlc1RvQW1vdW50O1xuZnVuY3Rpb24gdW5zdGFrZVNoYXJlc1RvQW1vdW50V2l0aE9wZW5SZXF1ZXN0KG5TaGFyZXMsIHdpdGhkcmF3UmVxdWVzdFNoYXJlcywgd2l0aGRyYXdSZXF1ZXN0QW1vdW50LCB0b3RhbElmU2hhcmVzLCBpbnN1cmFuY2VGdW5kVmF1bHRCYWxhbmNlKSB7XG4gICAgbGV0IHN0YWtlZEFtb3VudDtcbiAgICBpZiAodG90YWxJZlNoYXJlcy5ndChudW1lcmljQ29uc3RhbnRzXzEuWkVSTykpIHtcbiAgICAgICAgc3Rha2VkQW1vdW50ID0gaW5kZXhfMS5CTi5tYXgobnVtZXJpY0NvbnN0YW50c18xLlpFUk8sIG5TaGFyZXNcbiAgICAgICAgICAgIC5zdWIod2l0aGRyYXdSZXF1ZXN0U2hhcmVzKVxuICAgICAgICAgICAgLm11bChpbnN1cmFuY2VGdW5kVmF1bHRCYWxhbmNlKVxuICAgICAgICAgICAgLmRpdih0b3RhbElmU2hhcmVzKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdGFrZWRBbW91bnQgPSBudW1lcmljQ29uc3RhbnRzXzEuWkVSTztcbiAgICB9XG4gICAgY29uc3Qgd2l0aGRyYXdBbW91bnQgPSBpbmRleF8xLkJOLm1pbih3aXRoZHJhd1JlcXVlc3RBbW91bnQsIHdpdGhkcmF3UmVxdWVzdFNoYXJlcy5tdWwoaW5zdXJhbmNlRnVuZFZhdWx0QmFsYW5jZSkuZGl2KHRvdGFsSWZTaGFyZXMpKTtcbiAgICBjb25zdCBhbW91bnQgPSB3aXRoZHJhd0Ftb3VudC5hZGQoc3Rha2VkQW1vdW50KTtcbiAgICByZXR1cm4gYW1vdW50O1xufVxuZXhwb3J0cy51bnN0YWtlU2hhcmVzVG9BbW91bnRXaXRoT3BlblJlcXVlc3QgPSB1bnN0YWtlU2hhcmVzVG9BbW91bnRXaXRoT3BlblJlcXVlc3Q7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1bnN0YWtlU2hhcmVzVG9BbW91bnRXaXRoT3BlblJlcXVlc3QiLCJ1bnN0YWtlU2hhcmVzVG9BbW91bnQiLCJzdGFrZUFtb3VudFRvU2hhcmVzIiwibnVtZXJpY0NvbnN0YW50c18xIiwicmVxdWlyZSIsImluZGV4XzEiLCJhbW91bnQiLCJ0b3RhbElmU2hhcmVzIiwiaW5zdXJhbmNlRnVuZFZhdWx0QmFsYW5jZSIsIm5TaGFyZXMiLCJndCIsIlpFUk8iLCJtdWwiLCJkaXYiLCJCTiIsIm1heCIsIndpdGhkcmF3UmVxdWVzdFNoYXJlcyIsIndpdGhkcmF3UmVxdWVzdEFtb3VudCIsInN0YWtlZEFtb3VudCIsInN1YiIsIndpdGhkcmF3QW1vdW50IiwibWluIiwiYWRkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/insurance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/margin.js":
/*!*********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/margin.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateWorstCaseBaseAssetAmount = exports.calculateBaseAssetValueWithOracle = exports.calculateOraclePriceForPerpMargin = exports.calculateSizeDiscountAssetWeight = exports.calculateSizePremiumLiabilityWeight = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/utils.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst assert_1 = __webpack_require__(/*! ../assert/assert */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/assert/assert.js\");\nfunction calculateSizePremiumLiabilityWeight(size, imfFactor, liabilityWeight, precision) {\n    if (imfFactor.eq(numericConstants_1.ZERO)) {\n        return liabilityWeight;\n    }\n    const sizeSqrt = (0, utils_1.squareRootBN)(size.abs().mul(new anchor_1.BN(10)).add(new anchor_1.BN(1))); //1e9 -> 1e10 -> 1e5\n    const liabilityWeightNumerator = liabilityWeight.sub(liabilityWeight.div(new anchor_1.BN(5)));\n    const denom = new anchor_1.BN(100000).mul(numericConstants_1.SPOT_MARKET_IMF_PRECISION).div(precision);\n    (0, assert_1.assert)(denom.gt(numericConstants_1.ZERO));\n    const sizePremiumLiabilityWeight = liabilityWeightNumerator.add(sizeSqrt // 1e5\n    .mul(imfFactor).div(denom) // 1e5\n    );\n    const maxLiabilityWeight = anchor_1.BN.max(liabilityWeight, sizePremiumLiabilityWeight);\n    return maxLiabilityWeight;\n}\nexports.calculateSizePremiumLiabilityWeight = calculateSizePremiumLiabilityWeight;\nfunction calculateSizeDiscountAssetWeight(size, imfFactor, assetWeight) {\n    if (imfFactor.eq(numericConstants_1.ZERO)) {\n        return assetWeight;\n    }\n    const sizeSqrt = (0, utils_1.squareRootBN)(size.abs().mul(new anchor_1.BN(10)).add(new anchor_1.BN(1))); //1e9 -> 1e10 -> 1e5\n    const imfNumerator = numericConstants_1.SPOT_MARKET_IMF_PRECISION.add(numericConstants_1.SPOT_MARKET_IMF_PRECISION.div(new anchor_1.BN(10)));\n    const sizeDiscountAssetWeight = imfNumerator.mul(numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION).div(numericConstants_1.SPOT_MARKET_IMF_PRECISION.add(sizeSqrt // 1e5\n    .mul(imfFactor).div(new anchor_1.BN(100000)) // 1e5\n    ));\n    const minAssetWeight = anchor_1.BN.min(assetWeight, sizeDiscountAssetWeight);\n    return minAssetWeight;\n}\nexports.calculateSizeDiscountAssetWeight = calculateSizeDiscountAssetWeight;\nfunction calculateOraclePriceForPerpMargin(perpPosition, market, oraclePriceData) {\n    const oraclePriceOffset = anchor_1.BN.min(new anchor_1.BN(market.amm.maxSpread).mul(oraclePriceData.price).div(numericConstants_1.BID_ASK_SPREAD_PRECISION), oraclePriceData.confidence.add(new anchor_1.BN(market.amm.baseSpread).mul(oraclePriceData.price).div(numericConstants_1.BID_ASK_SPREAD_PRECISION)));\n    let marginPrice;\n    if (perpPosition.baseAssetAmount.gt(numericConstants_1.ZERO)) {\n        marginPrice = oraclePriceData.price.sub(oraclePriceOffset);\n    } else {\n        marginPrice = oraclePriceData.price.add(oraclePriceOffset);\n    }\n    return marginPrice;\n}\nexports.calculateOraclePriceForPerpMargin = calculateOraclePriceForPerpMargin;\nfunction calculateBaseAssetValueWithOracle(market, perpPosition, oraclePriceData, includeOpenOrders = false) {\n    let price = oraclePriceData.price;\n    if ((0, types_1.isVariant)(market.status, \"settlement\")) {\n        price = market.expiryPrice;\n    }\n    const baseAssetAmount = includeOpenOrders ? calculateWorstCaseBaseAssetAmount(perpPosition) : perpPosition.baseAssetAmount;\n    return baseAssetAmount.abs().mul(price).div(numericConstants_1.AMM_RESERVE_PRECISION);\n}\nexports.calculateBaseAssetValueWithOracle = calculateBaseAssetValueWithOracle;\nfunction calculateWorstCaseBaseAssetAmount(perpPosition) {\n    const allBids = perpPosition.baseAssetAmount.add(perpPosition.openBids);\n    const allAsks = perpPosition.baseAssetAmount.add(perpPosition.openAsks);\n    if (allBids.abs().gt(allAsks.abs())) {\n        return allBids;\n    } else {\n        return allAsks;\n    }\n}\nexports.calculateWorstCaseBaseAssetAmount = calculateWorstCaseBaseAssetAmount;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/margin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/market.js":
/*!*********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/market.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateAvailablePerpLiquidity = exports.calculateNetUserPnlImbalance = exports.calculateNetUserPnl = exports.calculateMarketMaxAvailableInsurance = exports.calculateMarketAvailablePNL = exports.calculateUnrealizedAssetWeight = exports.calculateMarketMarginRatio = exports.calculateOracleSpread = exports.calculateOracleReserveSpread = exports.calculateNewMarketAfterTrade = exports.calculateAskPrice = exports.calculateBidPrice = exports.calculateReservePrice = void 0;\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst amm_1 = __webpack_require__(/*! ./amm */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/amm.js\");\nconst margin_1 = __webpack_require__(/*! ./margin */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/margin.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst spotBalance_1 = __webpack_require__(/*! ./spotBalance */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotBalance.js\");\nconst assert_1 = __webpack_require__(/*! ../assert/assert */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/assert/assert.js\");\n/**\n * Calculates market mark price\n *\n * @param market\n * @return markPrice : Precision PRICE_PRECISION\n */ function calculateReservePrice(market, oraclePriceData) {\n    const newAmm = (0, amm_1.calculateUpdatedAMM)(market.amm, oraclePriceData);\n    return (0, amm_1.calculatePrice)(newAmm.baseAssetReserve, newAmm.quoteAssetReserve, newAmm.pegMultiplier);\n}\nexports.calculateReservePrice = calculateReservePrice;\n/**\n * Calculates market bid price\n *\n * @param market\n * @return bidPrice : Precision PRICE_PRECISION\n */ function calculateBidPrice(market, oraclePriceData) {\n    const { baseAssetReserve, quoteAssetReserve, newPeg } = (0, amm_1.calculateUpdatedAMMSpreadReserves)(market.amm, types_1.PositionDirection.SHORT, oraclePriceData);\n    return (0, amm_1.calculatePrice)(baseAssetReserve, quoteAssetReserve, newPeg);\n}\nexports.calculateBidPrice = calculateBidPrice;\n/**\n * Calculates market ask price\n *\n * @param market\n * @return askPrice : Precision PRICE_PRECISION\n */ function calculateAskPrice(market, oraclePriceData) {\n    const { baseAssetReserve, quoteAssetReserve, newPeg } = (0, amm_1.calculateUpdatedAMMSpreadReserves)(market.amm, types_1.PositionDirection.LONG, oraclePriceData);\n    return (0, amm_1.calculatePrice)(baseAssetReserve, quoteAssetReserve, newPeg);\n}\nexports.calculateAskPrice = calculateAskPrice;\nfunction calculateNewMarketAfterTrade(baseAssetAmount, direction, market) {\n    const [newQuoteAssetReserve, newBaseAssetReserve] = (0, amm_1.calculateAmmReservesAfterSwap)(market.amm, \"base\", baseAssetAmount.abs(), (0, amm_1.getSwapDirection)(\"base\", direction));\n    const newAmm = Object.assign({}, market.amm);\n    const newMarket = Object.assign({}, market);\n    newMarket.amm = newAmm;\n    newMarket.amm.quoteAssetReserve = newQuoteAssetReserve;\n    newMarket.amm.baseAssetReserve = newBaseAssetReserve;\n    return newMarket;\n}\nexports.calculateNewMarketAfterTrade = calculateNewMarketAfterTrade;\nfunction calculateOracleReserveSpread(market, oraclePriceData) {\n    const reservePrice = calculateReservePrice(market, oraclePriceData);\n    return calculateOracleSpread(reservePrice, oraclePriceData);\n}\nexports.calculateOracleReserveSpread = calculateOracleReserveSpread;\nfunction calculateOracleSpread(price, oraclePriceData) {\n    return price.sub(oraclePriceData.price);\n}\nexports.calculateOracleSpread = calculateOracleSpread;\nfunction calculateMarketMarginRatio(market, size, marginCategory) {\n    let marginRatio;\n    switch(marginCategory){\n        case \"Initial\":\n            {\n                marginRatio = (0, margin_1.calculateSizePremiumLiabilityWeight)(size, new anchor_1.BN(market.imfFactor), new anchor_1.BN(market.marginRatioInitial), numericConstants_1.MARGIN_PRECISION).toNumber();\n                break;\n            }\n        case \"Maintenance\":\n            {\n                marginRatio = (0, margin_1.calculateSizePremiumLiabilityWeight)(size, new anchor_1.BN(market.imfFactor), new anchor_1.BN(market.marginRatioMaintenance), numericConstants_1.MARGIN_PRECISION).toNumber();\n                break;\n            }\n    }\n    return marginRatio;\n}\nexports.calculateMarketMarginRatio = calculateMarketMarginRatio;\nfunction calculateUnrealizedAssetWeight(market, quoteSpotMarket, unrealizedPnl, marginCategory, oraclePriceData) {\n    let assetWeight;\n    switch(marginCategory){\n        case \"Initial\":\n            assetWeight = new anchor_1.BN(market.unrealizedPnlInitialAssetWeight);\n            if (market.unrealizedPnlMaxImbalance.gt(numericConstants_1.ZERO)) {\n                const netUnsettledPnl = calculateNetUserPnlImbalance(market, quoteSpotMarket, oraclePriceData);\n                if (netUnsettledPnl.gt(market.unrealizedPnlMaxImbalance)) {\n                    assetWeight = assetWeight.mul(market.unrealizedPnlMaxImbalance).div(netUnsettledPnl);\n                }\n            }\n            assetWeight = (0, margin_1.calculateSizeDiscountAssetWeight)(unrealizedPnl, new anchor_1.BN(market.unrealizedPnlImfFactor), assetWeight);\n            break;\n        case \"Maintenance\":\n            assetWeight = new anchor_1.BN(market.unrealizedPnlMaintenanceAssetWeight);\n            break;\n    }\n    return assetWeight;\n}\nexports.calculateUnrealizedAssetWeight = calculateUnrealizedAssetWeight;\nfunction calculateMarketAvailablePNL(perpMarket, spotMarket) {\n    return (0, spotBalance_1.getTokenAmount)(perpMarket.pnlPool.scaledBalance, spotMarket, types_1.SpotBalanceType.DEPOSIT);\n}\nexports.calculateMarketAvailablePNL = calculateMarketAvailablePNL;\nfunction calculateMarketMaxAvailableInsurance(perpMarket, spotMarket) {\n    (0, assert_1.assert)(spotMarket.marketIndex == numericConstants_1.QUOTE_SPOT_MARKET_INDEX);\n    // todo: insuranceFundAllocation technically not guaranteed to be in Insurance Fund\n    const insuranceFundAllocation = perpMarket.insuranceClaim.quoteMaxInsurance.sub(perpMarket.insuranceClaim.quoteSettledInsurance);\n    const ammFeePool = (0, spotBalance_1.getTokenAmount)(perpMarket.amm.feePool.scaledBalance, spotMarket, types_1.SpotBalanceType.DEPOSIT);\n    return insuranceFundAllocation.add(ammFeePool);\n}\nexports.calculateMarketMaxAvailableInsurance = calculateMarketMaxAvailableInsurance;\nfunction calculateNetUserPnl(perpMarket, oraclePriceData) {\n    const netUserPositionValue = perpMarket.amm.baseAssetAmountWithAmm.mul(oraclePriceData.price).div(numericConstants_1.BASE_PRECISION).div(numericConstants_1.PRICE_TO_QUOTE_PRECISION);\n    const netUserCostBasis = perpMarket.amm.quoteAssetAmount;\n    const netUserPnl = netUserPositionValue.add(netUserCostBasis);\n    return netUserPnl;\n}\nexports.calculateNetUserPnl = calculateNetUserPnl;\nfunction calculateNetUserPnlImbalance(perpMarket, spotMarket, oraclePriceData) {\n    const netUserPnl = calculateNetUserPnl(perpMarket, oraclePriceData);\n    const pnlPool = (0, spotBalance_1.getTokenAmount)(perpMarket.pnlPool.scaledBalance, spotMarket, types_1.SpotBalanceType.DEPOSIT);\n    const feePool = (0, spotBalance_1.getTokenAmount)(perpMarket.amm.feePool.scaledBalance, spotMarket, types_1.SpotBalanceType.DEPOSIT);\n    const imbalance = netUserPnl.sub(pnlPool.add(feePool));\n    return imbalance;\n}\nexports.calculateNetUserPnlImbalance = calculateNetUserPnlImbalance;\nfunction calculateAvailablePerpLiquidity(market, oraclePriceData, dlob, slot) {\n    let [bids, asks] = (0, amm_1.calculateMarketOpenBidAsk)(market.amm.baseAssetReserve, market.amm.minBaseAssetReserve, market.amm.maxBaseAssetReserve, market.amm.orderStepSize);\n    asks = asks.abs();\n    const bidPrice = calculateBidPrice(market, oraclePriceData);\n    const askPrice = calculateAskPrice(market, oraclePriceData);\n    for (const bid of dlob.getMakerLimitBids(market.marketIndex, slot, types_1.MarketType.PERP, oraclePriceData, askPrice)){\n        bids = bids.add(bid.order.baseAssetAmount.sub(bid.order.baseAssetAmountFilled));\n    }\n    for (const ask of dlob.getMakerLimitAsks(market.marketIndex, slot, types_1.MarketType.PERP, oraclePriceData, bidPrice)){\n        asks = asks.add(ask.order.baseAssetAmount.sub(ask.order.baseAssetAmountFilled));\n    }\n    return {\n        bids: bids,\n        asks: asks\n    };\n}\nexports.calculateAvailablePerpLiquidity = calculateAvailablePerpLiquidity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/market.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/oracles.js":
/*!**********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/oracles.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateLiveOracleStd = exports.calculateLiveOracleTwap = exports.isOracleTooDivergent = exports.isOracleValid = exports.oraclePriceBands = void 0;\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst index_1 = __webpack_require__(/*! ../index */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nconst assert_1 = __webpack_require__(/*! ../assert/assert */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/assert/assert.js\");\nfunction oraclePriceBands(market, oraclePriceData) {\n    const maxPercentDiff = market.marginRatioInitial - market.marginRatioMaintenance;\n    const offset = oraclePriceData.price.mul(new index_1.BN(maxPercentDiff)).div(numericConstants_1.MARGIN_PRECISION);\n    (0, assert_1.assert)(offset.gt(numericConstants_1.ZERO));\n    return [\n        oraclePriceData.price.sub(offset),\n        oraclePriceData.price.add(offset)\n    ];\n}\nexports.oraclePriceBands = oraclePriceBands;\nfunction isOracleValid(amm, oraclePriceData, oracleGuardRails, slot) {\n    const isOraclePriceNonPositive = oraclePriceData.price.lte(numericConstants_1.ZERO);\n    const isOraclePriceTooVolatile = oraclePriceData.price.div(index_1.BN.max(numericConstants_1.ONE, amm.historicalOracleData.lastOraclePriceTwap)).gt(oracleGuardRails.validity.tooVolatileRatio) || amm.historicalOracleData.lastOraclePriceTwap.div(index_1.BN.max(numericConstants_1.ONE, oraclePriceData.price)).gt(oracleGuardRails.validity.tooVolatileRatio);\n    const isConfidenceTooLarge = index_1.BN.max(numericConstants_1.ONE, oraclePriceData.confidence).mul(numericConstants_1.BID_ASK_SPREAD_PRECISION).div(oraclePriceData.price).gt(oracleGuardRails.validity.confidenceIntervalMaxSize);\n    const oracleIsStale = oraclePriceData.slot.sub(new index_1.BN(slot)).gt(oracleGuardRails.validity.slotsBeforeStaleForAmm);\n    return !(!oraclePriceData.hasSufficientNumberOfDataPoints || oracleIsStale || isOraclePriceNonPositive || isOraclePriceTooVolatile || isConfidenceTooLarge);\n}\nexports.isOracleValid = isOracleValid;\nfunction isOracleTooDivergent(amm, oraclePriceData, oracleGuardRails, now) {\n    const sinceLastUpdate = now.sub(amm.historicalOracleData.lastOraclePriceTwapTs);\n    const sinceStart = index_1.BN.max(numericConstants_1.ZERO, numericConstants_1.FIVE_MINUTE.sub(sinceLastUpdate));\n    const oracleTwap5min = amm.historicalOracleData.lastOraclePriceTwap5Min.mul(sinceStart).add(oraclePriceData.price).mul(sinceLastUpdate).div(sinceStart.add(sinceLastUpdate));\n    const oracleSpread = oracleTwap5min.sub(oraclePriceData.price);\n    const oracleSpreadPct = oracleSpread.mul(numericConstants_1.PRICE_PRECISION).div(oracleTwap5min);\n    const maxDivergence = index_1.BN.max(oracleGuardRails.priceDivergence.markOraclePercentDivergence, numericConstants_1.PERCENTAGE_PRECISION.div(new index_1.BN(10)));\n    const tooDivergent = oracleSpreadPct.abs().gte(maxDivergence);\n    return tooDivergent;\n}\nexports.isOracleTooDivergent = isOracleTooDivergent;\nfunction calculateLiveOracleTwap(histOracleData, oraclePriceData, now, period) {\n    let oracleTwap = undefined;\n    if (period.eq(numericConstants_1.FIVE_MINUTE)) {\n        oracleTwap = histOracleData.lastOraclePriceTwap5Min;\n    } else {\n        //todo: assumes its fundingPeriod (1hr)\n        // period = amm.fundingPeriod;\n        oracleTwap = histOracleData.lastOraclePriceTwap;\n    }\n    const sinceLastUpdate = index_1.BN.max(numericConstants_1.ONE, now.sub(histOracleData.lastOraclePriceTwapTs));\n    const sinceStart = index_1.BN.max(numericConstants_1.ZERO, period.sub(sinceLastUpdate));\n    const clampRange = oracleTwap.div(new index_1.BN(3));\n    const clampedOraclePrice = index_1.BN.min(oracleTwap.add(clampRange), index_1.BN.max(oraclePriceData.price, oracleTwap.sub(clampRange)));\n    const newOracleTwap = oracleTwap.mul(sinceStart).add(clampedOraclePrice.mul(sinceLastUpdate)).div(sinceStart.add(sinceLastUpdate));\n    return newOracleTwap;\n}\nexports.calculateLiveOracleTwap = calculateLiveOracleTwap;\nfunction calculateLiveOracleStd(amm, oraclePriceData, now) {\n    const sinceLastUpdate = index_1.BN.max(numericConstants_1.ONE, now.sub(amm.historicalOracleData.lastOraclePriceTwapTs));\n    const sinceStart = index_1.BN.max(numericConstants_1.ZERO, amm.fundingPeriod.sub(sinceLastUpdate));\n    const liveOracleTwap = calculateLiveOracleTwap(amm.historicalOracleData, oraclePriceData, now, amm.fundingPeriod);\n    const priceDeltaVsTwap = oraclePriceData.price.sub(liveOracleTwap).abs();\n    const oracleStd = priceDeltaVsTwap.add(amm.oracleStd.mul(sinceStart).div(sinceStart.add(sinceLastUpdate)));\n    return oracleStd;\n}\nexports.calculateLiveOracleStd = calculateLiveOracleStd;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/oracles.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/orders.js":
/*!*********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/orders.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isTakingOrder = exports.isRestingLimitOrder = exports.isTriggered = exports.mustBeTriggered = exports.isLimitOrder = exports.isMarketOrder = exports.isOrderExpired = exports.calculateBaseAssetAmountToFillUpToLimitPrice = exports.calculateBaseAssetAmountForAmmToFulfill = exports.isFillableByVAMM = exports.hasAuctionPrice = exports.hasLimitPrice = exports.getLimitPrice = exports.standardizePrice = exports.standardizeBaseAssetAmount = exports.isOrderReduceOnly = exports.isOrderRiskIncreasingInSameDirection = exports.isOrderRiskIncreasing = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst auction_1 = __webpack_require__(/*! ./auction */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/auction.js\");\nconst amm_1 = __webpack_require__(/*! ./amm */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/amm.js\");\nfunction isOrderRiskIncreasing(user, order) {\n    if ((0, types_1.isVariant)(order.status, \"init\")) {\n        return false;\n    }\n    const position = user.getPerpPosition(order.marketIndex) || user.getEmptyPosition(order.marketIndex);\n    // if no position exists, it's risk increasing\n    if (position.baseAssetAmount.eq(numericConstants_1.ZERO)) {\n        return true;\n    }\n    // if position is long and order is long\n    if (position.baseAssetAmount.gt(numericConstants_1.ZERO) && (0, types_1.isVariant)(order.direction, \"long\")) {\n        return true;\n    }\n    // if position is short and order is short\n    if (position.baseAssetAmount.lt(numericConstants_1.ZERO) && (0, types_1.isVariant)(order.direction, \"short\")) {\n        return true;\n    }\n    const baseAssetAmountToFill = order.baseAssetAmount.sub(order.baseAssetAmountFilled);\n    // if order will flip position\n    if (baseAssetAmountToFill.gt(position.baseAssetAmount.abs().mul(numericConstants_1.TWO))) {\n        return true;\n    }\n    return false;\n}\nexports.isOrderRiskIncreasing = isOrderRiskIncreasing;\nfunction isOrderRiskIncreasingInSameDirection(user, order) {\n    if ((0, types_1.isVariant)(order.status, \"init\")) {\n        return false;\n    }\n    const position = user.getPerpPosition(order.marketIndex) || user.getEmptyPosition(order.marketIndex);\n    // if no position exists, it's risk increasing\n    if (position.baseAssetAmount.eq(numericConstants_1.ZERO)) {\n        return true;\n    }\n    // if position is long and order is long\n    if (position.baseAssetAmount.gt(numericConstants_1.ZERO) && (0, types_1.isVariant)(order.direction, \"long\")) {\n        return true;\n    }\n    // if position is short and order is short\n    if (position.baseAssetAmount.lt(numericConstants_1.ZERO) && (0, types_1.isVariant)(order.direction, \"short\")) {\n        return true;\n    }\n    return false;\n}\nexports.isOrderRiskIncreasingInSameDirection = isOrderRiskIncreasingInSameDirection;\nfunction isOrderReduceOnly(user, order) {\n    if ((0, types_1.isVariant)(order.status, \"init\")) {\n        return false;\n    }\n    const position = user.getPerpPosition(order.marketIndex) || user.getEmptyPosition(order.marketIndex);\n    // if position is long and order is long\n    if (position.baseAssetAmount.gte(numericConstants_1.ZERO) && (0, types_1.isVariant)(order.direction, \"long\")) {\n        return false;\n    }\n    // if position is short and order is short\n    if (position.baseAssetAmount.lte(numericConstants_1.ZERO) && (0, types_1.isVariant)(order.direction, \"short\")) {\n        return false;\n    }\n    return true;\n}\nexports.isOrderReduceOnly = isOrderReduceOnly;\nfunction standardizeBaseAssetAmount(baseAssetAmount, stepSize) {\n    const remainder = baseAssetAmount.mod(stepSize);\n    return baseAssetAmount.sub(remainder);\n}\nexports.standardizeBaseAssetAmount = standardizeBaseAssetAmount;\nfunction standardizePrice(price, tickSize, direction) {\n    if (price.eq(numericConstants_1.ZERO)) {\n        console.log(\"price is zero\");\n        return price;\n    }\n    const remainder = price.mod(tickSize);\n    if (remainder.eq(numericConstants_1.ZERO)) {\n        return price;\n    }\n    if ((0, types_1.isVariant)(direction, \"long\")) {\n        return price.sub(remainder);\n    } else {\n        return price.add(tickSize).sub(remainder);\n    }\n}\nexports.standardizePrice = standardizePrice;\nfunction getLimitPrice(order, oraclePriceData, slot, fallbackPrice) {\n    let limitPrice;\n    if (hasAuctionPrice(order, slot)) {\n        limitPrice = (0, auction_1.getAuctionPrice)(order, slot, oraclePriceData.price);\n    } else if (order.oraclePriceOffset !== 0) {\n        limitPrice = oraclePriceData.price.add(new anchor_1.BN(order.oraclePriceOffset));\n    } else if (order.price.eq(numericConstants_1.ZERO)) {\n        limitPrice = fallbackPrice;\n    } else {\n        limitPrice = order.price;\n    }\n    return limitPrice;\n}\nexports.getLimitPrice = getLimitPrice;\nfunction hasLimitPrice(order, slot) {\n    return order.price.gt(numericConstants_1.ZERO) || order.oraclePriceOffset != 0 || !(0, auction_1.isAuctionComplete)(order, slot);\n}\nexports.hasLimitPrice = hasLimitPrice;\nfunction hasAuctionPrice(order, slot) {\n    return !(0, auction_1.isAuctionComplete)(order, slot) && (!order.auctionStartPrice.eq(numericConstants_1.ZERO) || !order.auctionEndPrice.eq(numericConstants_1.ZERO));\n}\nexports.hasAuctionPrice = hasAuctionPrice;\nfunction isFillableByVAMM(order, market, oraclePriceData, slot, ts) {\n    return (0, auction_1.isAuctionComplete)(order, slot) && calculateBaseAssetAmountForAmmToFulfill(order, market, oraclePriceData, slot).gte(market.amm.minOrderSize) || isOrderExpired(order, ts);\n}\nexports.isFillableByVAMM = isFillableByVAMM;\nfunction calculateBaseAssetAmountForAmmToFulfill(order, market, oraclePriceData, slot) {\n    if (mustBeTriggered(order) && !isTriggered(order)) {\n        return numericConstants_1.ZERO;\n    }\n    const limitPrice = getLimitPrice(order, oraclePriceData, slot);\n    let baseAssetAmount;\n    const updatedAMM = (0, amm_1.calculateUpdatedAMM)(market.amm, oraclePriceData);\n    if (limitPrice !== undefined) {\n        baseAssetAmount = calculateBaseAssetAmountToFillUpToLimitPrice(order, updatedAMM, limitPrice, oraclePriceData);\n    } else {\n        baseAssetAmount = order.baseAssetAmount.sub(order.baseAssetAmountFilled);\n    }\n    const maxBaseAssetAmount = (0, amm_1.calculateMaxBaseAssetAmountFillable)(updatedAMM, order.direction);\n    return anchor_1.BN.min(maxBaseAssetAmount, baseAssetAmount);\n}\nexports.calculateBaseAssetAmountForAmmToFulfill = calculateBaseAssetAmountForAmmToFulfill;\nfunction calculateBaseAssetAmountToFillUpToLimitPrice(order, amm, limitPrice, oraclePriceData) {\n    const adjustedLimitPrice = (0, types_1.isVariant)(order.direction, \"long\") ? limitPrice.sub(amm.orderTickSize) : limitPrice.add(amm.orderTickSize);\n    const [maxAmountToTrade, direction] = (0, amm_1.calculateMaxBaseAssetAmountToTrade)(amm, adjustedLimitPrice, order.direction, oraclePriceData);\n    const baseAssetAmount = standardizeBaseAssetAmount(maxAmountToTrade, amm.orderStepSize);\n    // Check that directions are the same\n    const sameDirection = isSameDirection(direction, order.direction);\n    if (!sameDirection) {\n        return numericConstants_1.ZERO;\n    }\n    const baseAssetAmountUnfilled = order.baseAssetAmount.sub(order.baseAssetAmountFilled);\n    return baseAssetAmount.gt(baseAssetAmountUnfilled) ? baseAssetAmountUnfilled : baseAssetAmount;\n}\nexports.calculateBaseAssetAmountToFillUpToLimitPrice = calculateBaseAssetAmountToFillUpToLimitPrice;\nfunction isSameDirection(firstDirection, secondDirection) {\n    return (0, types_1.isVariant)(firstDirection, \"long\") && (0, types_1.isVariant)(secondDirection, \"long\") || (0, types_1.isVariant)(firstDirection, \"short\") && (0, types_1.isVariant)(secondDirection, \"short\");\n}\nfunction isOrderExpired(order, ts, enforceBuffer = false) {\n    if (mustBeTriggered(order) || !(0, types_1.isVariant)(order.status, \"open\") || order.maxTs.eq(numericConstants_1.ZERO)) {\n        return false;\n    }\n    let maxTs;\n    if (enforceBuffer && isLimitOrder(order)) {\n        maxTs = order.maxTs.addn(15);\n    } else {\n        maxTs = order.maxTs;\n    }\n    return new anchor_1.BN(ts).gt(maxTs);\n}\nexports.isOrderExpired = isOrderExpired;\nfunction isMarketOrder(order) {\n    return (0, types_1.isOneOfVariant)(order.orderType, [\n        \"market\",\n        \"triggerMarket\",\n        \"oracle\"\n    ]);\n}\nexports.isMarketOrder = isMarketOrder;\nfunction isLimitOrder(order) {\n    return (0, types_1.isOneOfVariant)(order.orderType, [\n        \"limit\",\n        \"triggerLimit\"\n    ]);\n}\nexports.isLimitOrder = isLimitOrder;\nfunction mustBeTriggered(order) {\n    return (0, types_1.isOneOfVariant)(order.orderType, [\n        \"triggerMarket\",\n        \"triggerLimit\"\n    ]);\n}\nexports.mustBeTriggered = mustBeTriggered;\nfunction isTriggered(order) {\n    return (0, types_1.isOneOfVariant)(order.triggerCondition, [\n        \"triggeredAbove\",\n        \"triggeredBelow\"\n    ]);\n}\nexports.isTriggered = isTriggered;\nfunction isRestingLimitOrder(order, slot) {\n    return isLimitOrder(order) && (order.postOnly || (0, auction_1.isAuctionComplete)(order, slot));\n}\nexports.isRestingLimitOrder = isRestingLimitOrder;\nfunction isTakingOrder(order, slot) {\n    return isMarketOrder(order) || !isRestingLimitOrder(order, slot);\n}\nexports.isTakingOrder = isTakingOrder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/orders.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/position.js":
/*!***********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/position.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hasOpenOrders = exports.isEmptyPosition = exports.positionCurrentDirection = exports.findDirectionToClose = exports.calculateCostBasis = exports.calculateEntryPrice = exports.calculateBreakEvenPrice = exports.positionIsAvailable = exports.calculatePositionFundingPNL = exports.calculateClaimablePnl = exports.calculatePositionPNL = exports.calculateBaseAssetValue = void 0;\nconst __1 = __webpack_require__(/*! ../ */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst amm_1 = __webpack_require__(/*! ./amm */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/amm.js\");\nconst margin_1 = __webpack_require__(/*! ./margin */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/margin.js\");\nconst market_1 = __webpack_require__(/*! ./market */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/market.js\");\n/**\n * calculateBaseAssetValue\n * = market value of closing entire position\n * @param market\n * @param userPosition\n * @param oraclePriceData\n * @returns Base Asset Value. : Precision QUOTE_PRECISION\n */ function calculateBaseAssetValue(market, userPosition, oraclePriceData, useSpread = true, skipUpdate = false) {\n    if (userPosition.baseAssetAmount.eq(numericConstants_1.ZERO)) {\n        return numericConstants_1.ZERO;\n    }\n    const directionToClose = findDirectionToClose(userPosition);\n    let prepegAmm;\n    if (!skipUpdate) {\n        if (market.amm.baseSpread > 0 && useSpread) {\n            const { baseAssetReserve, quoteAssetReserve, sqrtK, newPeg } = (0, amm_1.calculateUpdatedAMMSpreadReserves)(market.amm, directionToClose, oraclePriceData);\n            prepegAmm = {\n                baseAssetReserve,\n                quoteAssetReserve,\n                sqrtK: sqrtK,\n                pegMultiplier: newPeg\n            };\n        } else {\n            prepegAmm = (0, amm_1.calculateUpdatedAMM)(market.amm, oraclePriceData);\n        }\n    } else {\n        prepegAmm = market.amm;\n    }\n    const [newQuoteAssetReserve, _] = (0, amm_1.calculateAmmReservesAfterSwap)(prepegAmm, \"base\", userPosition.baseAssetAmount.abs(), (0, amm_1.getSwapDirection)(\"base\", directionToClose));\n    switch(directionToClose){\n        case types_1.PositionDirection.SHORT:\n            return prepegAmm.quoteAssetReserve.sub(newQuoteAssetReserve).mul(prepegAmm.pegMultiplier).div(numericConstants_1.AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO);\n        case types_1.PositionDirection.LONG:\n            return newQuoteAssetReserve.sub(prepegAmm.quoteAssetReserve).mul(prepegAmm.pegMultiplier).div(numericConstants_1.AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO).add(numericConstants_1.ONE);\n    }\n}\nexports.calculateBaseAssetValue = calculateBaseAssetValue;\n/**\n * calculatePositionPNL\n * = BaseAssetAmount * (Avg Exit Price - Avg Entry Price)\n * @param market\n * @param PerpPosition\n * @param withFunding (adds unrealized funding payment pnl to result)\n * @param oraclePriceData\n * @returns BaseAssetAmount : Precision QUOTE_PRECISION\n */ function calculatePositionPNL(market, perpPosition, withFunding = false, oraclePriceData) {\n    if (perpPosition.baseAssetAmount.eq(numericConstants_1.ZERO)) {\n        return perpPosition.quoteAssetAmount;\n    }\n    const baseAssetValue = (0, margin_1.calculateBaseAssetValueWithOracle)(market, perpPosition, oraclePriceData);\n    const baseAssetValueSign = perpPosition.baseAssetAmount.isNeg() ? new __1.BN(-1) : new __1.BN(1);\n    let pnl = baseAssetValue.mul(baseAssetValueSign).add(perpPosition.quoteAssetAmount);\n    if (withFunding) {\n        const fundingRatePnL = calculatePositionFundingPNL(market, perpPosition);\n        pnl = pnl.add(fundingRatePnL);\n    }\n    return pnl;\n}\nexports.calculatePositionPNL = calculatePositionPNL;\nfunction calculateClaimablePnl(market, spotMarket, perpPosition, oraclePriceData) {\n    const unrealizedPnl = calculatePositionPNL(market, perpPosition, true, oraclePriceData);\n    let unsettledPnl = unrealizedPnl;\n    if (unrealizedPnl.gt(numericConstants_1.ZERO)) {\n        const excessPnlPool = __1.BN.max(numericConstants_1.ZERO, (0, market_1.calculateNetUserPnlImbalance)(market, spotMarket, oraclePriceData).mul(new __1.BN(-1)));\n        const maxPositivePnl = __1.BN.max(perpPosition.quoteAssetAmount.sub(perpPosition.quoteEntryAmount), numericConstants_1.ZERO).add(excessPnlPool);\n        unsettledPnl = __1.BN.min(maxPositivePnl, unrealizedPnl);\n    }\n    return unsettledPnl;\n}\nexports.calculateClaimablePnl = calculateClaimablePnl;\n/**\n *\n * @param market\n * @param PerpPosition\n * @returns // QUOTE_PRECISION\n */ function calculatePositionFundingPNL(market, perpPosition) {\n    if (perpPosition.baseAssetAmount.eq(numericConstants_1.ZERO)) {\n        return numericConstants_1.ZERO;\n    }\n    let ammCumulativeFundingRate;\n    if (perpPosition.baseAssetAmount.gt(numericConstants_1.ZERO)) {\n        ammCumulativeFundingRate = market.amm.cumulativeFundingRateLong;\n    } else {\n        ammCumulativeFundingRate = market.amm.cumulativeFundingRateShort;\n    }\n    const perPositionFundingRate = ammCumulativeFundingRate.sub(perpPosition.lastCumulativeFundingRate).mul(perpPosition.baseAssetAmount).div(numericConstants_1.AMM_RESERVE_PRECISION).div(numericConstants_1.FUNDING_RATE_BUFFER_PRECISION).mul(new __1.BN(-1));\n    return perPositionFundingRate;\n}\nexports.calculatePositionFundingPNL = calculatePositionFundingPNL;\nfunction positionIsAvailable(position) {\n    return position.baseAssetAmount.eq(numericConstants_1.ZERO) && position.openOrders === 0 && position.quoteAssetAmount.eq(numericConstants_1.ZERO) && position.lpShares.eq(numericConstants_1.ZERO);\n}\nexports.positionIsAvailable = positionIsAvailable;\n/**\n *\n * @param userPosition\n * @returns Precision: PRICE_PRECISION (10^6)\n */ function calculateBreakEvenPrice(userPosition) {\n    if (userPosition.baseAssetAmount.eq(numericConstants_1.ZERO)) {\n        return numericConstants_1.ZERO;\n    }\n    return userPosition.quoteBreakEvenAmount.mul(numericConstants_1.PRICE_PRECISION).mul(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO).div(userPosition.baseAssetAmount).abs();\n}\nexports.calculateBreakEvenPrice = calculateBreakEvenPrice;\n/**\n *\n * @param userPosition\n * @returns Precision: PRICE_PRECISION (10^6)\n */ function calculateEntryPrice(userPosition) {\n    if (userPosition.baseAssetAmount.eq(numericConstants_1.ZERO)) {\n        return numericConstants_1.ZERO;\n    }\n    return userPosition.quoteEntryAmount.mul(numericConstants_1.PRICE_PRECISION).mul(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO).div(userPosition.baseAssetAmount).abs();\n}\nexports.calculateEntryPrice = calculateEntryPrice;\n/**\n *\n * @param userPosition\n * @returns Precision: PRICE_PRECISION (10^10)\n */ function calculateCostBasis(userPosition) {\n    if (userPosition.baseAssetAmount.eq(numericConstants_1.ZERO)) {\n        return numericConstants_1.ZERO;\n    }\n    return userPosition.quoteAssetAmount.mul(numericConstants_1.PRICE_PRECISION).mul(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO).div(userPosition.baseAssetAmount).abs();\n}\nexports.calculateCostBasis = calculateCostBasis;\nfunction findDirectionToClose(userPosition) {\n    return userPosition.baseAssetAmount.gt(numericConstants_1.ZERO) ? types_1.PositionDirection.SHORT : types_1.PositionDirection.LONG;\n}\nexports.findDirectionToClose = findDirectionToClose;\nfunction positionCurrentDirection(userPosition) {\n    return userPosition.baseAssetAmount.gte(numericConstants_1.ZERO) ? types_1.PositionDirection.LONG : types_1.PositionDirection.SHORT;\n}\nexports.positionCurrentDirection = positionCurrentDirection;\nfunction isEmptyPosition(userPosition) {\n    return userPosition.baseAssetAmount.eq(numericConstants_1.ZERO) && userPosition.openOrders === 0;\n}\nexports.isEmptyPosition = isEmptyPosition;\nfunction hasOpenOrders(position) {\n    return position.openOrders != 0 || !position.openBids.eq(numericConstants_1.ZERO) || !position.openAsks.eq(numericConstants_1.ZERO);\n}\nexports.hasOpenOrders = hasOpenOrders;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL3Bvc2l0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBR0EsdUJBQXVCLEdBQUdBLGdDQUFnQyxHQUFHQSw0QkFBNEIsR0FBR0EsMEJBQTBCLEdBQUdBLDJCQUEyQixHQUFHQSwrQkFBK0IsR0FBR0EsMkJBQTJCLEdBQUdBLG1DQUFtQyxHQUFHQSw2QkFBNkIsR0FBR0EsNEJBQTRCLEdBQUdBLCtCQUErQixHQUFHLEtBQUs7QUFDM1gsTUFBTWMsTUFBTUMsbUJBQU9BLENBQUMsOERBQUs7QUFDekIsTUFBTUMscUJBQXFCRCxtQkFBT0EsQ0FBQyw2R0FBK0I7QUFDbEUsTUFBTUUsVUFBVUYsbUJBQU9BLENBQUMsbUVBQVU7QUFDbEMsTUFBTUcsUUFBUUgsbUJBQU9BLENBQUMsbUVBQU87QUFDN0IsTUFBTUksV0FBV0osbUJBQU9BLENBQUMseUVBQVU7QUFDbkMsTUFBTUssV0FBV0wsbUJBQU9BLENBQUMseUVBQVU7QUFDbkM7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNGLHdCQUF3QlEsTUFBTSxFQUFFQyxZQUFZLEVBQUVDLGVBQWUsRUFBRUMsWUFBWSxJQUFJLEVBQUVDLGFBQWEsS0FBSztJQUN4RyxJQUFJSCxhQUFhSSxlQUFlLENBQUNDLEVBQUUsQ0FBQ1gsbUJBQW1CWSxJQUFJLEdBQUc7UUFDMUQsT0FBT1osbUJBQW1CWSxJQUFJO0lBQ2xDO0lBQ0EsTUFBTUMsbUJBQW1CeEIscUJBQXFCaUI7SUFDOUMsSUFBSVE7SUFDSixJQUFJLENBQUNMLFlBQVk7UUFDYixJQUFJSixPQUFPVSxHQUFHLENBQUNDLFVBQVUsR0FBRyxLQUFLUixXQUFXO1lBQ3hDLE1BQU0sRUFBRVMsZ0JBQWdCLEVBQUVDLGlCQUFpQixFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBR2xCLE1BQU1tQixpQ0FBaUMsRUFBRWhCLE9BQU9VLEdBQUcsRUFBRUYsa0JBQWtCTjtZQUMxSU8sWUFBWTtnQkFDUkc7Z0JBQ0FDO2dCQUNBQyxPQUFPQTtnQkFDUEcsZUFBZUY7WUFDbkI7UUFDSixPQUNLO1lBQ0ROLFlBQVksQ0FBQyxHQUFHWixNQUFNcUIsbUJBQW1CLEVBQUVsQixPQUFPVSxHQUFHLEVBQUVSO1FBQzNEO0lBQ0osT0FDSztRQUNETyxZQUFZVCxPQUFPVSxHQUFHO0lBQzFCO0lBQ0EsTUFBTSxDQUFDUyxzQkFBc0JDLEVBQUUsR0FBRyxDQUFDLEdBQUd2QixNQUFNd0IsNkJBQTZCLEVBQUVaLFdBQVcsUUFBUVIsYUFBYUksZUFBZSxDQUFDaUIsR0FBRyxJQUFJLENBQUMsR0FBR3pCLE1BQU0wQixnQkFBZ0IsRUFBRSxRQUFRZjtJQUN0SyxPQUFRQTtRQUNKLEtBQUtaLFFBQVE0QixpQkFBaUIsQ0FBQ0MsS0FBSztZQUNoQyxPQUFPaEIsVUFBVUksaUJBQWlCLENBQzdCYSxHQUFHLENBQUNQLHNCQUNKUSxHQUFHLENBQUNsQixVQUFVUSxhQUFhLEVBQzNCVyxHQUFHLENBQUNqQyxtQkFBbUJrQyxzQ0FBc0M7UUFDdEUsS0FBS2pDLFFBQVE0QixpQkFBaUIsQ0FBQ00sSUFBSTtZQUMvQixPQUFPWCxxQkFDRk8sR0FBRyxDQUFDakIsVUFBVUksaUJBQWlCLEVBQy9CYyxHQUFHLENBQUNsQixVQUFVUSxhQUFhLEVBQzNCVyxHQUFHLENBQUNqQyxtQkFBbUJrQyxzQ0FBc0MsRUFDN0RFLEdBQUcsQ0FBQ3BDLG1CQUFtQnFDLEdBQUc7SUFDdkM7QUFDSjtBQUNBckQsK0JBQStCLEdBQUdhO0FBQ2xDOzs7Ozs7OztDQVFDLEdBQ0QsU0FBU0QscUJBQXFCUyxNQUFNLEVBQUVpQyxZQUFZLEVBQUVDLGNBQWMsS0FBSyxFQUFFaEMsZUFBZTtJQUNwRixJQUFJK0IsYUFBYTVCLGVBQWUsQ0FBQ0MsRUFBRSxDQUFDWCxtQkFBbUJZLElBQUksR0FBRztRQUMxRCxPQUFPMEIsYUFBYUUsZ0JBQWdCO0lBQ3hDO0lBQ0EsTUFBTUMsaUJBQWlCLENBQUMsR0FBR3RDLFNBQVN1QyxpQ0FBaUMsRUFBRXJDLFFBQVFpQyxjQUFjL0I7SUFDN0YsTUFBTW9DLHFCQUFxQkwsYUFBYTVCLGVBQWUsQ0FBQ2tDLEtBQUssS0FDdkQsSUFBSTlDLElBQUkrQyxFQUFFLENBQUMsQ0FBQyxLQUNaLElBQUkvQyxJQUFJK0MsRUFBRSxDQUFDO0lBQ2pCLElBQUlDLE1BQU1MLGVBQ0xULEdBQUcsQ0FBQ1csb0JBQ0pQLEdBQUcsQ0FBQ0UsYUFBYUUsZ0JBQWdCO0lBQ3RDLElBQUlELGFBQWE7UUFDYixNQUFNUSxpQkFBaUJyRCw0QkFBNEJXLFFBQVFpQztRQUMzRFEsTUFBTUEsSUFBSVYsR0FBRyxDQUFDVztJQUNsQjtJQUNBLE9BQU9EO0FBQ1g7QUFDQTlELDRCQUE0QixHQUFHWTtBQUMvQixTQUFTRCxzQkFBc0JVLE1BQU0sRUFBRTJDLFVBQVUsRUFBRVYsWUFBWSxFQUFFL0IsZUFBZTtJQUM1RSxNQUFNMEMsZ0JBQWdCckQscUJBQXFCUyxRQUFRaUMsY0FBYyxNQUFNL0I7SUFDdkUsSUFBSTJDLGVBQWVEO0lBQ25CLElBQUlBLGNBQWNFLEVBQUUsQ0FBQ25ELG1CQUFtQlksSUFBSSxHQUFHO1FBQzNDLE1BQU13QyxnQkFBZ0J0RCxJQUFJK0MsRUFBRSxDQUFDUSxHQUFHLENBQUNyRCxtQkFBbUJZLElBQUksRUFBRSxDQUFDLEdBQUdSLFNBQVNrRCw0QkFBNEIsRUFBRWpELFFBQVEyQyxZQUFZekMsaUJBQWlCeUIsR0FBRyxDQUFDLElBQUlsQyxJQUFJK0MsRUFBRSxDQUFDLENBQUM7UUFDMUosTUFBTVUsaUJBQWlCekQsSUFBSStDLEVBQUUsQ0FBQ1EsR0FBRyxDQUFDZixhQUFhRSxnQkFBZ0IsQ0FBQ1QsR0FBRyxDQUFDTyxhQUFha0IsZ0JBQWdCLEdBQUd4RCxtQkFBbUJZLElBQUksRUFBRXdCLEdBQUcsQ0FBQ2dCO1FBQ2pJRixlQUFlcEQsSUFBSStDLEVBQUUsQ0FBQ1ksR0FBRyxDQUFDRixnQkFBZ0JOO0lBQzlDO0lBQ0EsT0FBT0M7QUFDWDtBQUNBbEUsNkJBQTZCLEdBQUdXO0FBQ2hDOzs7OztDQUtDLEdBQ0QsU0FBU0QsNEJBQTRCVyxNQUFNLEVBQUVpQyxZQUFZO0lBQ3JELElBQUlBLGFBQWE1QixlQUFlLENBQUNDLEVBQUUsQ0FBQ1gsbUJBQW1CWSxJQUFJLEdBQUc7UUFDMUQsT0FBT1osbUJBQW1CWSxJQUFJO0lBQ2xDO0lBQ0EsSUFBSThDO0lBQ0osSUFBSXBCLGFBQWE1QixlQUFlLENBQUN5QyxFQUFFLENBQUNuRCxtQkFBbUJZLElBQUksR0FBRztRQUMxRDhDLDJCQUEyQnJELE9BQU9VLEdBQUcsQ0FBQzRDLHlCQUF5QjtJQUNuRSxPQUNLO1FBQ0RELDJCQUEyQnJELE9BQU9VLEdBQUcsQ0FBQzZDLDBCQUEwQjtJQUNwRTtJQUNBLE1BQU1DLHlCQUF5QkgseUJBQzFCM0IsR0FBRyxDQUFDTyxhQUFhd0IseUJBQXlCLEVBQzFDOUIsR0FBRyxDQUFDTSxhQUFhNUIsZUFBZSxFQUNoQ3VCLEdBQUcsQ0FBQ2pDLG1CQUFtQitELHFCQUFxQixFQUM1QzlCLEdBQUcsQ0FBQ2pDLG1CQUFtQmdFLDZCQUE2QixFQUNwRGhDLEdBQUcsQ0FBQyxJQUFJbEMsSUFBSStDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JCLE9BQU9nQjtBQUNYO0FBQ0E3RSxtQ0FBbUMsR0FBR1U7QUFDdEMsU0FBU0Qsb0JBQW9Cd0UsUUFBUTtJQUNqQyxPQUFRQSxTQUFTdkQsZUFBZSxDQUFDQyxFQUFFLENBQUNYLG1CQUFtQlksSUFBSSxLQUN2RHFELFNBQVNDLFVBQVUsS0FBSyxLQUN4QkQsU0FBU3pCLGdCQUFnQixDQUFDN0IsRUFBRSxDQUFDWCxtQkFBbUJZLElBQUksS0FDcERxRCxTQUFTRSxRQUFRLENBQUN4RCxFQUFFLENBQUNYLG1CQUFtQlksSUFBSTtBQUNwRDtBQUNBNUIsMkJBQTJCLEdBQUdTO0FBQzlCOzs7O0NBSUMsR0FDRCxTQUFTRCx3QkFBd0JjLFlBQVk7SUFDekMsSUFBSUEsYUFBYUksZUFBZSxDQUFDQyxFQUFFLENBQUNYLG1CQUFtQlksSUFBSSxHQUFHO1FBQzFELE9BQU9aLG1CQUFtQlksSUFBSTtJQUNsQztJQUNBLE9BQU9OLGFBQWE4RCxvQkFBb0IsQ0FDbkNwQyxHQUFHLENBQUNoQyxtQkFBbUJxRSxlQUFlLEVBQ3RDckMsR0FBRyxDQUFDaEMsbUJBQW1Cc0UsNEJBQTRCLEVBQ25EckMsR0FBRyxDQUFDM0IsYUFBYUksZUFBZSxFQUNoQ2lCLEdBQUc7QUFDWjtBQUNBM0MsK0JBQStCLEdBQUdRO0FBQ2xDOzs7O0NBSUMsR0FDRCxTQUFTRCxvQkFBb0JlLFlBQVk7SUFDckMsSUFBSUEsYUFBYUksZUFBZSxDQUFDQyxFQUFFLENBQUNYLG1CQUFtQlksSUFBSSxHQUFHO1FBQzFELE9BQU9aLG1CQUFtQlksSUFBSTtJQUNsQztJQUNBLE9BQU9OLGFBQWFrRCxnQkFBZ0IsQ0FDL0J4QixHQUFHLENBQUNoQyxtQkFBbUJxRSxlQUFlLEVBQ3RDckMsR0FBRyxDQUFDaEMsbUJBQW1Cc0UsNEJBQTRCLEVBQ25EckMsR0FBRyxDQUFDM0IsYUFBYUksZUFBZSxFQUNoQ2lCLEdBQUc7QUFDWjtBQUNBM0MsMkJBQTJCLEdBQUdPO0FBQzlCOzs7O0NBSUMsR0FDRCxTQUFTRCxtQkFBbUJnQixZQUFZO0lBQ3BDLElBQUlBLGFBQWFJLGVBQWUsQ0FBQ0MsRUFBRSxDQUFDWCxtQkFBbUJZLElBQUksR0FBRztRQUMxRCxPQUFPWixtQkFBbUJZLElBQUk7SUFDbEM7SUFDQSxPQUFPTixhQUFha0MsZ0JBQWdCLENBQy9CUixHQUFHLENBQUNoQyxtQkFBbUJxRSxlQUFlLEVBQ3RDckMsR0FBRyxDQUFDaEMsbUJBQW1Cc0UsNEJBQTRCLEVBQ25EckMsR0FBRyxDQUFDM0IsYUFBYUksZUFBZSxFQUNoQ2lCLEdBQUc7QUFDWjtBQUNBM0MsMEJBQTBCLEdBQUdNO0FBQzdCLFNBQVNELHFCQUFxQmlCLFlBQVk7SUFDdEMsT0FBT0EsYUFBYUksZUFBZSxDQUFDeUMsRUFBRSxDQUFDbkQsbUJBQW1CWSxJQUFJLElBQ3hEWCxRQUFRNEIsaUJBQWlCLENBQUNDLEtBQUssR0FDL0I3QixRQUFRNEIsaUJBQWlCLENBQUNNLElBQUk7QUFDeEM7QUFDQW5ELDRCQUE0QixHQUFHSztBQUMvQixTQUFTRCx5QkFBeUJrQixZQUFZO0lBQzFDLE9BQU9BLGFBQWFJLGVBQWUsQ0FBQzZELEdBQUcsQ0FBQ3ZFLG1CQUFtQlksSUFBSSxJQUN6RFgsUUFBUTRCLGlCQUFpQixDQUFDTSxJQUFJLEdBQzlCbEMsUUFBUTRCLGlCQUFpQixDQUFDQyxLQUFLO0FBQ3pDO0FBQ0E5QyxnQ0FBZ0MsR0FBR0k7QUFDbkMsU0FBU0QsZ0JBQWdCbUIsWUFBWTtJQUNqQyxPQUFPQSxhQUFhSSxlQUFlLENBQUNDLEVBQUUsQ0FBQ1gsbUJBQW1CWSxJQUFJLEtBQUtOLGFBQWE0RCxVQUFVLEtBQUs7QUFDbkc7QUFDQWxGLHVCQUF1QixHQUFHRztBQUMxQixTQUFTRCxjQUFjK0UsUUFBUTtJQUMzQixPQUFRQSxTQUFTQyxVQUFVLElBQUksS0FDM0IsQ0FBQ0QsU0FBU08sUUFBUSxDQUFDN0QsRUFBRSxDQUFDWCxtQkFBbUJZLElBQUksS0FDN0MsQ0FBQ3FELFNBQVNRLFFBQVEsQ0FBQzlELEVBQUUsQ0FBQ1gsbUJBQW1CWSxJQUFJO0FBQ3JEO0FBQ0E1QixxQkFBcUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvbWF0aC9wb3NpdGlvbi5qcz84Y2JlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYXNPcGVuT3JkZXJzID0gZXhwb3J0cy5pc0VtcHR5UG9zaXRpb24gPSBleHBvcnRzLnBvc2l0aW9uQ3VycmVudERpcmVjdGlvbiA9IGV4cG9ydHMuZmluZERpcmVjdGlvblRvQ2xvc2UgPSBleHBvcnRzLmNhbGN1bGF0ZUNvc3RCYXNpcyA9IGV4cG9ydHMuY2FsY3VsYXRlRW50cnlQcmljZSA9IGV4cG9ydHMuY2FsY3VsYXRlQnJlYWtFdmVuUHJpY2UgPSBleHBvcnRzLnBvc2l0aW9uSXNBdmFpbGFibGUgPSBleHBvcnRzLmNhbGN1bGF0ZVBvc2l0aW9uRnVuZGluZ1BOTCA9IGV4cG9ydHMuY2FsY3VsYXRlQ2xhaW1hYmxlUG5sID0gZXhwb3J0cy5jYWxjdWxhdGVQb3NpdGlvblBOTCA9IGV4cG9ydHMuY2FsY3VsYXRlQmFzZUFzc2V0VmFsdWUgPSB2b2lkIDA7XG5jb25zdCBfXzEgPSByZXF1aXJlKFwiLi4vXCIpO1xuY29uc3QgbnVtZXJpY0NvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50cy9udW1lcmljQ29uc3RhbnRzXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi90eXBlc1wiKTtcbmNvbnN0IGFtbV8xID0gcmVxdWlyZShcIi4vYW1tXCIpO1xuY29uc3QgbWFyZ2luXzEgPSByZXF1aXJlKFwiLi9tYXJnaW5cIik7XG5jb25zdCBtYXJrZXRfMSA9IHJlcXVpcmUoXCIuL21hcmtldFwiKTtcbi8qKlxuICogY2FsY3VsYXRlQmFzZUFzc2V0VmFsdWVcbiAqID0gbWFya2V0IHZhbHVlIG9mIGNsb3NpbmcgZW50aXJlIHBvc2l0aW9uXG4gKiBAcGFyYW0gbWFya2V0XG4gKiBAcGFyYW0gdXNlclBvc2l0aW9uXG4gKiBAcGFyYW0gb3JhY2xlUHJpY2VEYXRhXG4gKiBAcmV0dXJucyBCYXNlIEFzc2V0IFZhbHVlLiA6IFByZWNpc2lvbiBRVU9URV9QUkVDSVNJT05cbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlQmFzZUFzc2V0VmFsdWUobWFya2V0LCB1c2VyUG9zaXRpb24sIG9yYWNsZVByaWNlRGF0YSwgdXNlU3ByZWFkID0gdHJ1ZSwgc2tpcFVwZGF0ZSA9IGZhbHNlKSB7XG4gICAgaWYgKHVzZXJQb3NpdGlvbi5iYXNlQXNzZXRBbW91bnQuZXEobnVtZXJpY0NvbnN0YW50c18xLlpFUk8pKSB7XG4gICAgICAgIHJldHVybiBudW1lcmljQ29uc3RhbnRzXzEuWkVSTztcbiAgICB9XG4gICAgY29uc3QgZGlyZWN0aW9uVG9DbG9zZSA9IGZpbmREaXJlY3Rpb25Ub0Nsb3NlKHVzZXJQb3NpdGlvbik7XG4gICAgbGV0IHByZXBlZ0FtbTtcbiAgICBpZiAoIXNraXBVcGRhdGUpIHtcbiAgICAgICAgaWYgKG1hcmtldC5hbW0uYmFzZVNwcmVhZCA+IDAgJiYgdXNlU3ByZWFkKSB7XG4gICAgICAgICAgICBjb25zdCB7IGJhc2VBc3NldFJlc2VydmUsIHF1b3RlQXNzZXRSZXNlcnZlLCBzcXJ0SywgbmV3UGVnIH0gPSAoMCwgYW1tXzEuY2FsY3VsYXRlVXBkYXRlZEFNTVNwcmVhZFJlc2VydmVzKShtYXJrZXQuYW1tLCBkaXJlY3Rpb25Ub0Nsb3NlLCBvcmFjbGVQcmljZURhdGEpO1xuICAgICAgICAgICAgcHJlcGVnQW1tID0ge1xuICAgICAgICAgICAgICAgIGJhc2VBc3NldFJlc2VydmUsXG4gICAgICAgICAgICAgICAgcXVvdGVBc3NldFJlc2VydmUsXG4gICAgICAgICAgICAgICAgc3FydEs6IHNxcnRLLFxuICAgICAgICAgICAgICAgIHBlZ011bHRpcGxpZXI6IG5ld1BlZyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcmVwZWdBbW0gPSAoMCwgYW1tXzEuY2FsY3VsYXRlVXBkYXRlZEFNTSkobWFya2V0LmFtbSwgb3JhY2xlUHJpY2VEYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcHJlcGVnQW1tID0gbWFya2V0LmFtbTtcbiAgICB9XG4gICAgY29uc3QgW25ld1F1b3RlQXNzZXRSZXNlcnZlLCBfXSA9ICgwLCBhbW1fMS5jYWxjdWxhdGVBbW1SZXNlcnZlc0FmdGVyU3dhcCkocHJlcGVnQW1tLCAnYmFzZScsIHVzZXJQb3NpdGlvbi5iYXNlQXNzZXRBbW91bnQuYWJzKCksICgwLCBhbW1fMS5nZXRTd2FwRGlyZWN0aW9uKSgnYmFzZScsIGRpcmVjdGlvblRvQ2xvc2UpKTtcbiAgICBzd2l0Y2ggKGRpcmVjdGlvblRvQ2xvc2UpIHtcbiAgICAgICAgY2FzZSB0eXBlc18xLlBvc2l0aW9uRGlyZWN0aW9uLlNIT1JUOlxuICAgICAgICAgICAgcmV0dXJuIHByZXBlZ0FtbS5xdW90ZUFzc2V0UmVzZXJ2ZVxuICAgICAgICAgICAgICAgIC5zdWIobmV3UXVvdGVBc3NldFJlc2VydmUpXG4gICAgICAgICAgICAgICAgLm11bChwcmVwZWdBbW0ucGVnTXVsdGlwbGllcilcbiAgICAgICAgICAgICAgICAuZGl2KG51bWVyaWNDb25zdGFudHNfMS5BTU1fVElNRVNfUEVHX1RPX1FVT1RFX1BSRUNJU0lPTl9SQVRJTyk7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Qb3NpdGlvbkRpcmVjdGlvbi5MT05HOlxuICAgICAgICAgICAgcmV0dXJuIG5ld1F1b3RlQXNzZXRSZXNlcnZlXG4gICAgICAgICAgICAgICAgLnN1YihwcmVwZWdBbW0ucXVvdGVBc3NldFJlc2VydmUpXG4gICAgICAgICAgICAgICAgLm11bChwcmVwZWdBbW0ucGVnTXVsdGlwbGllcilcbiAgICAgICAgICAgICAgICAuZGl2KG51bWVyaWNDb25zdGFudHNfMS5BTU1fVElNRVNfUEVHX1RPX1FVT1RFX1BSRUNJU0lPTl9SQVRJTylcbiAgICAgICAgICAgICAgICAuYWRkKG51bWVyaWNDb25zdGFudHNfMS5PTkUpO1xuICAgIH1cbn1cbmV4cG9ydHMuY2FsY3VsYXRlQmFzZUFzc2V0VmFsdWUgPSBjYWxjdWxhdGVCYXNlQXNzZXRWYWx1ZTtcbi8qKlxuICogY2FsY3VsYXRlUG9zaXRpb25QTkxcbiAqID0gQmFzZUFzc2V0QW1vdW50ICogKEF2ZyBFeGl0IFByaWNlIC0gQXZnIEVudHJ5IFByaWNlKVxuICogQHBhcmFtIG1hcmtldFxuICogQHBhcmFtIFBlcnBQb3NpdGlvblxuICogQHBhcmFtIHdpdGhGdW5kaW5nIChhZGRzIHVucmVhbGl6ZWQgZnVuZGluZyBwYXltZW50IHBubCB0byByZXN1bHQpXG4gKiBAcGFyYW0gb3JhY2xlUHJpY2VEYXRhXG4gKiBAcmV0dXJucyBCYXNlQXNzZXRBbW91bnQgOiBQcmVjaXNpb24gUVVPVEVfUFJFQ0lTSU9OXG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uUE5MKG1hcmtldCwgcGVycFBvc2l0aW9uLCB3aXRoRnVuZGluZyA9IGZhbHNlLCBvcmFjbGVQcmljZURhdGEpIHtcbiAgICBpZiAocGVycFBvc2l0aW9uLmJhc2VBc3NldEFtb3VudC5lcShudW1lcmljQ29uc3RhbnRzXzEuWkVSTykpIHtcbiAgICAgICAgcmV0dXJuIHBlcnBQb3NpdGlvbi5xdW90ZUFzc2V0QW1vdW50O1xuICAgIH1cbiAgICBjb25zdCBiYXNlQXNzZXRWYWx1ZSA9ICgwLCBtYXJnaW5fMS5jYWxjdWxhdGVCYXNlQXNzZXRWYWx1ZVdpdGhPcmFjbGUpKG1hcmtldCwgcGVycFBvc2l0aW9uLCBvcmFjbGVQcmljZURhdGEpO1xuICAgIGNvbnN0IGJhc2VBc3NldFZhbHVlU2lnbiA9IHBlcnBQb3NpdGlvbi5iYXNlQXNzZXRBbW91bnQuaXNOZWcoKVxuICAgICAgICA/IG5ldyBfXzEuQk4oLTEpXG4gICAgICAgIDogbmV3IF9fMS5CTigxKTtcbiAgICBsZXQgcG5sID0gYmFzZUFzc2V0VmFsdWVcbiAgICAgICAgLm11bChiYXNlQXNzZXRWYWx1ZVNpZ24pXG4gICAgICAgIC5hZGQocGVycFBvc2l0aW9uLnF1b3RlQXNzZXRBbW91bnQpO1xuICAgIGlmICh3aXRoRnVuZGluZykge1xuICAgICAgICBjb25zdCBmdW5kaW5nUmF0ZVBuTCA9IGNhbGN1bGF0ZVBvc2l0aW9uRnVuZGluZ1BOTChtYXJrZXQsIHBlcnBQb3NpdGlvbik7XG4gICAgICAgIHBubCA9IHBubC5hZGQoZnVuZGluZ1JhdGVQbkwpO1xuICAgIH1cbiAgICByZXR1cm4gcG5sO1xufVxuZXhwb3J0cy5jYWxjdWxhdGVQb3NpdGlvblBOTCA9IGNhbGN1bGF0ZVBvc2l0aW9uUE5MO1xuZnVuY3Rpb24gY2FsY3VsYXRlQ2xhaW1hYmxlUG5sKG1hcmtldCwgc3BvdE1hcmtldCwgcGVycFBvc2l0aW9uLCBvcmFjbGVQcmljZURhdGEpIHtcbiAgICBjb25zdCB1bnJlYWxpemVkUG5sID0gY2FsY3VsYXRlUG9zaXRpb25QTkwobWFya2V0LCBwZXJwUG9zaXRpb24sIHRydWUsIG9yYWNsZVByaWNlRGF0YSk7XG4gICAgbGV0IHVuc2V0dGxlZFBubCA9IHVucmVhbGl6ZWRQbmw7XG4gICAgaWYgKHVucmVhbGl6ZWRQbmwuZ3QobnVtZXJpY0NvbnN0YW50c18xLlpFUk8pKSB7XG4gICAgICAgIGNvbnN0IGV4Y2Vzc1BubFBvb2wgPSBfXzEuQk4ubWF4KG51bWVyaWNDb25zdGFudHNfMS5aRVJPLCAoMCwgbWFya2V0XzEuY2FsY3VsYXRlTmV0VXNlclBubEltYmFsYW5jZSkobWFya2V0LCBzcG90TWFya2V0LCBvcmFjbGVQcmljZURhdGEpLm11bChuZXcgX18xLkJOKC0xKSkpO1xuICAgICAgICBjb25zdCBtYXhQb3NpdGl2ZVBubCA9IF9fMS5CTi5tYXgocGVycFBvc2l0aW9uLnF1b3RlQXNzZXRBbW91bnQuc3ViKHBlcnBQb3NpdGlvbi5xdW90ZUVudHJ5QW1vdW50KSwgbnVtZXJpY0NvbnN0YW50c18xLlpFUk8pLmFkZChleGNlc3NQbmxQb29sKTtcbiAgICAgICAgdW5zZXR0bGVkUG5sID0gX18xLkJOLm1pbihtYXhQb3NpdGl2ZVBubCwgdW5yZWFsaXplZFBubCk7XG4gICAgfVxuICAgIHJldHVybiB1bnNldHRsZWRQbmw7XG59XG5leHBvcnRzLmNhbGN1bGF0ZUNsYWltYWJsZVBubCA9IGNhbGN1bGF0ZUNsYWltYWJsZVBubDtcbi8qKlxuICpcbiAqIEBwYXJhbSBtYXJrZXRcbiAqIEBwYXJhbSBQZXJwUG9zaXRpb25cbiAqIEByZXR1cm5zIC8vIFFVT1RFX1BSRUNJU0lPTlxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVQb3NpdGlvbkZ1bmRpbmdQTkwobWFya2V0LCBwZXJwUG9zaXRpb24pIHtcbiAgICBpZiAocGVycFBvc2l0aW9uLmJhc2VBc3NldEFtb3VudC5lcShudW1lcmljQ29uc3RhbnRzXzEuWkVSTykpIHtcbiAgICAgICAgcmV0dXJuIG51bWVyaWNDb25zdGFudHNfMS5aRVJPO1xuICAgIH1cbiAgICBsZXQgYW1tQ3VtdWxhdGl2ZUZ1bmRpbmdSYXRlO1xuICAgIGlmIChwZXJwUG9zaXRpb24uYmFzZUFzc2V0QW1vdW50Lmd0KG51bWVyaWNDb25zdGFudHNfMS5aRVJPKSkge1xuICAgICAgICBhbW1DdW11bGF0aXZlRnVuZGluZ1JhdGUgPSBtYXJrZXQuYW1tLmN1bXVsYXRpdmVGdW5kaW5nUmF0ZUxvbmc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhbW1DdW11bGF0aXZlRnVuZGluZ1JhdGUgPSBtYXJrZXQuYW1tLmN1bXVsYXRpdmVGdW5kaW5nUmF0ZVNob3J0O1xuICAgIH1cbiAgICBjb25zdCBwZXJQb3NpdGlvbkZ1bmRpbmdSYXRlID0gYW1tQ3VtdWxhdGl2ZUZ1bmRpbmdSYXRlXG4gICAgICAgIC5zdWIocGVycFBvc2l0aW9uLmxhc3RDdW11bGF0aXZlRnVuZGluZ1JhdGUpXG4gICAgICAgIC5tdWwocGVycFBvc2l0aW9uLmJhc2VBc3NldEFtb3VudClcbiAgICAgICAgLmRpdihudW1lcmljQ29uc3RhbnRzXzEuQU1NX1JFU0VSVkVfUFJFQ0lTSU9OKVxuICAgICAgICAuZGl2KG51bWVyaWNDb25zdGFudHNfMS5GVU5ESU5HX1JBVEVfQlVGRkVSX1BSRUNJU0lPTilcbiAgICAgICAgLm11bChuZXcgX18xLkJOKC0xKSk7XG4gICAgcmV0dXJuIHBlclBvc2l0aW9uRnVuZGluZ1JhdGU7XG59XG5leHBvcnRzLmNhbGN1bGF0ZVBvc2l0aW9uRnVuZGluZ1BOTCA9IGNhbGN1bGF0ZVBvc2l0aW9uRnVuZGluZ1BOTDtcbmZ1bmN0aW9uIHBvc2l0aW9uSXNBdmFpbGFibGUocG9zaXRpb24pIHtcbiAgICByZXR1cm4gKHBvc2l0aW9uLmJhc2VBc3NldEFtb3VudC5lcShudW1lcmljQ29uc3RhbnRzXzEuWkVSTykgJiZcbiAgICAgICAgcG9zaXRpb24ub3Blbk9yZGVycyA9PT0gMCAmJlxuICAgICAgICBwb3NpdGlvbi5xdW90ZUFzc2V0QW1vdW50LmVxKG51bWVyaWNDb25zdGFudHNfMS5aRVJPKSAmJlxuICAgICAgICBwb3NpdGlvbi5scFNoYXJlcy5lcShudW1lcmljQ29uc3RhbnRzXzEuWkVSTykpO1xufVxuZXhwb3J0cy5wb3NpdGlvbklzQXZhaWxhYmxlID0gcG9zaXRpb25Jc0F2YWlsYWJsZTtcbi8qKlxuICpcbiAqIEBwYXJhbSB1c2VyUG9zaXRpb25cbiAqIEByZXR1cm5zIFByZWNpc2lvbjogUFJJQ0VfUFJFQ0lTSU9OICgxMF42KVxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVCcmVha0V2ZW5QcmljZSh1c2VyUG9zaXRpb24pIHtcbiAgICBpZiAodXNlclBvc2l0aW9uLmJhc2VBc3NldEFtb3VudC5lcShudW1lcmljQ29uc3RhbnRzXzEuWkVSTykpIHtcbiAgICAgICAgcmV0dXJuIG51bWVyaWNDb25zdGFudHNfMS5aRVJPO1xuICAgIH1cbiAgICByZXR1cm4gdXNlclBvc2l0aW9uLnF1b3RlQnJlYWtFdmVuQW1vdW50XG4gICAgICAgIC5tdWwobnVtZXJpY0NvbnN0YW50c18xLlBSSUNFX1BSRUNJU0lPTilcbiAgICAgICAgLm11bChudW1lcmljQ29uc3RhbnRzXzEuQU1NX1RPX1FVT1RFX1BSRUNJU0lPTl9SQVRJTylcbiAgICAgICAgLmRpdih1c2VyUG9zaXRpb24uYmFzZUFzc2V0QW1vdW50KVxuICAgICAgICAuYWJzKCk7XG59XG5leHBvcnRzLmNhbGN1bGF0ZUJyZWFrRXZlblByaWNlID0gY2FsY3VsYXRlQnJlYWtFdmVuUHJpY2U7XG4vKipcbiAqXG4gKiBAcGFyYW0gdXNlclBvc2l0aW9uXG4gKiBAcmV0dXJucyBQcmVjaXNpb246IFBSSUNFX1BSRUNJU0lPTiAoMTBeNilcbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlRW50cnlQcmljZSh1c2VyUG9zaXRpb24pIHtcbiAgICBpZiAodXNlclBvc2l0aW9uLmJhc2VBc3NldEFtb3VudC5lcShudW1lcmljQ29uc3RhbnRzXzEuWkVSTykpIHtcbiAgICAgICAgcmV0dXJuIG51bWVyaWNDb25zdGFudHNfMS5aRVJPO1xuICAgIH1cbiAgICByZXR1cm4gdXNlclBvc2l0aW9uLnF1b3RlRW50cnlBbW91bnRcbiAgICAgICAgLm11bChudW1lcmljQ29uc3RhbnRzXzEuUFJJQ0VfUFJFQ0lTSU9OKVxuICAgICAgICAubXVsKG51bWVyaWNDb25zdGFudHNfMS5BTU1fVE9fUVVPVEVfUFJFQ0lTSU9OX1JBVElPKVxuICAgICAgICAuZGl2KHVzZXJQb3NpdGlvbi5iYXNlQXNzZXRBbW91bnQpXG4gICAgICAgIC5hYnMoKTtcbn1cbmV4cG9ydHMuY2FsY3VsYXRlRW50cnlQcmljZSA9IGNhbGN1bGF0ZUVudHJ5UHJpY2U7XG4vKipcbiAqXG4gKiBAcGFyYW0gdXNlclBvc2l0aW9uXG4gKiBAcmV0dXJucyBQcmVjaXNpb246IFBSSUNFX1BSRUNJU0lPTiAoMTBeMTApXG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNvc3RCYXNpcyh1c2VyUG9zaXRpb24pIHtcbiAgICBpZiAodXNlclBvc2l0aW9uLmJhc2VBc3NldEFtb3VudC5lcShudW1lcmljQ29uc3RhbnRzXzEuWkVSTykpIHtcbiAgICAgICAgcmV0dXJuIG51bWVyaWNDb25zdGFudHNfMS5aRVJPO1xuICAgIH1cbiAgICByZXR1cm4gdXNlclBvc2l0aW9uLnF1b3RlQXNzZXRBbW91bnRcbiAgICAgICAgLm11bChudW1lcmljQ29uc3RhbnRzXzEuUFJJQ0VfUFJFQ0lTSU9OKVxuICAgICAgICAubXVsKG51bWVyaWNDb25zdGFudHNfMS5BTU1fVE9fUVVPVEVfUFJFQ0lTSU9OX1JBVElPKVxuICAgICAgICAuZGl2KHVzZXJQb3NpdGlvbi5iYXNlQXNzZXRBbW91bnQpXG4gICAgICAgIC5hYnMoKTtcbn1cbmV4cG9ydHMuY2FsY3VsYXRlQ29zdEJhc2lzID0gY2FsY3VsYXRlQ29zdEJhc2lzO1xuZnVuY3Rpb24gZmluZERpcmVjdGlvblRvQ2xvc2UodXNlclBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHVzZXJQb3NpdGlvbi5iYXNlQXNzZXRBbW91bnQuZ3QobnVtZXJpY0NvbnN0YW50c18xLlpFUk8pXG4gICAgICAgID8gdHlwZXNfMS5Qb3NpdGlvbkRpcmVjdGlvbi5TSE9SVFxuICAgICAgICA6IHR5cGVzXzEuUG9zaXRpb25EaXJlY3Rpb24uTE9ORztcbn1cbmV4cG9ydHMuZmluZERpcmVjdGlvblRvQ2xvc2UgPSBmaW5kRGlyZWN0aW9uVG9DbG9zZTtcbmZ1bmN0aW9uIHBvc2l0aW9uQ3VycmVudERpcmVjdGlvbih1c2VyUG9zaXRpb24pIHtcbiAgICByZXR1cm4gdXNlclBvc2l0aW9uLmJhc2VBc3NldEFtb3VudC5ndGUobnVtZXJpY0NvbnN0YW50c18xLlpFUk8pXG4gICAgICAgID8gdHlwZXNfMS5Qb3NpdGlvbkRpcmVjdGlvbi5MT05HXG4gICAgICAgIDogdHlwZXNfMS5Qb3NpdGlvbkRpcmVjdGlvbi5TSE9SVDtcbn1cbmV4cG9ydHMucG9zaXRpb25DdXJyZW50RGlyZWN0aW9uID0gcG9zaXRpb25DdXJyZW50RGlyZWN0aW9uO1xuZnVuY3Rpb24gaXNFbXB0eVBvc2l0aW9uKHVzZXJQb3NpdGlvbikge1xuICAgIHJldHVybiB1c2VyUG9zaXRpb24uYmFzZUFzc2V0QW1vdW50LmVxKG51bWVyaWNDb25zdGFudHNfMS5aRVJPKSAmJiB1c2VyUG9zaXRpb24ub3Blbk9yZGVycyA9PT0gMDtcbn1cbmV4cG9ydHMuaXNFbXB0eVBvc2l0aW9uID0gaXNFbXB0eVBvc2l0aW9uO1xuZnVuY3Rpb24gaGFzT3Blbk9yZGVycyhwb3NpdGlvbikge1xuICAgIHJldHVybiAocG9zaXRpb24ub3Blbk9yZGVycyAhPSAwIHx8XG4gICAgICAgICFwb3NpdGlvbi5vcGVuQmlkcy5lcShudW1lcmljQ29uc3RhbnRzXzEuWkVSTykgfHxcbiAgICAgICAgIXBvc2l0aW9uLm9wZW5Bc2tzLmVxKG51bWVyaWNDb25zdGFudHNfMS5aRVJPKSk7XG59XG5leHBvcnRzLmhhc09wZW5PcmRlcnMgPSBoYXNPcGVuT3JkZXJzO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaGFzT3Blbk9yZGVycyIsImlzRW1wdHlQb3NpdGlvbiIsInBvc2l0aW9uQ3VycmVudERpcmVjdGlvbiIsImZpbmREaXJlY3Rpb25Ub0Nsb3NlIiwiY2FsY3VsYXRlQ29zdEJhc2lzIiwiY2FsY3VsYXRlRW50cnlQcmljZSIsImNhbGN1bGF0ZUJyZWFrRXZlblByaWNlIiwicG9zaXRpb25Jc0F2YWlsYWJsZSIsImNhbGN1bGF0ZVBvc2l0aW9uRnVuZGluZ1BOTCIsImNhbGN1bGF0ZUNsYWltYWJsZVBubCIsImNhbGN1bGF0ZVBvc2l0aW9uUE5MIiwiY2FsY3VsYXRlQmFzZUFzc2V0VmFsdWUiLCJfXzEiLCJyZXF1aXJlIiwibnVtZXJpY0NvbnN0YW50c18xIiwidHlwZXNfMSIsImFtbV8xIiwibWFyZ2luXzEiLCJtYXJrZXRfMSIsIm1hcmtldCIsInVzZXJQb3NpdGlvbiIsIm9yYWNsZVByaWNlRGF0YSIsInVzZVNwcmVhZCIsInNraXBVcGRhdGUiLCJiYXNlQXNzZXRBbW91bnQiLCJlcSIsIlpFUk8iLCJkaXJlY3Rpb25Ub0Nsb3NlIiwicHJlcGVnQW1tIiwiYW1tIiwiYmFzZVNwcmVhZCIsImJhc2VBc3NldFJlc2VydmUiLCJxdW90ZUFzc2V0UmVzZXJ2ZSIsInNxcnRLIiwibmV3UGVnIiwiY2FsY3VsYXRlVXBkYXRlZEFNTVNwcmVhZFJlc2VydmVzIiwicGVnTXVsdGlwbGllciIsImNhbGN1bGF0ZVVwZGF0ZWRBTU0iLCJuZXdRdW90ZUFzc2V0UmVzZXJ2ZSIsIl8iLCJjYWxjdWxhdGVBbW1SZXNlcnZlc0FmdGVyU3dhcCIsImFicyIsImdldFN3YXBEaXJlY3Rpb24iLCJQb3NpdGlvbkRpcmVjdGlvbiIsIlNIT1JUIiwic3ViIiwibXVsIiwiZGl2IiwiQU1NX1RJTUVTX1BFR19UT19RVU9URV9QUkVDSVNJT05fUkFUSU8iLCJMT05HIiwiYWRkIiwiT05FIiwicGVycFBvc2l0aW9uIiwid2l0aEZ1bmRpbmciLCJxdW90ZUFzc2V0QW1vdW50IiwiYmFzZUFzc2V0VmFsdWUiLCJjYWxjdWxhdGVCYXNlQXNzZXRWYWx1ZVdpdGhPcmFjbGUiLCJiYXNlQXNzZXRWYWx1ZVNpZ24iLCJpc05lZyIsIkJOIiwicG5sIiwiZnVuZGluZ1JhdGVQbkwiLCJzcG90TWFya2V0IiwidW5yZWFsaXplZFBubCIsInVuc2V0dGxlZFBubCIsImd0IiwiZXhjZXNzUG5sUG9vbCIsIm1heCIsImNhbGN1bGF0ZU5ldFVzZXJQbmxJbWJhbGFuY2UiLCJtYXhQb3NpdGl2ZVBubCIsInF1b3RlRW50cnlBbW91bnQiLCJtaW4iLCJhbW1DdW11bGF0aXZlRnVuZGluZ1JhdGUiLCJjdW11bGF0aXZlRnVuZGluZ1JhdGVMb25nIiwiY3VtdWxhdGl2ZUZ1bmRpbmdSYXRlU2hvcnQiLCJwZXJQb3NpdGlvbkZ1bmRpbmdSYXRlIiwibGFzdEN1bXVsYXRpdmVGdW5kaW5nUmF0ZSIsIkFNTV9SRVNFUlZFX1BSRUNJU0lPTiIsIkZVTkRJTkdfUkFURV9CVUZGRVJfUFJFQ0lTSU9OIiwicG9zaXRpb24iLCJvcGVuT3JkZXJzIiwibHBTaGFyZXMiLCJxdW90ZUJyZWFrRXZlbkFtb3VudCIsIlBSSUNFX1BSRUNJU0lPTiIsIkFNTV9UT19RVU9URV9QUkVDSVNJT05fUkFUSU8iLCJndGUiLCJvcGVuQmlkcyIsIm9wZW5Bc2tzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/position.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/repeg.js":
/*!********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/repeg.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateBudgetedPeg = exports.calculateBudgetedK = exports.calculateBudgetedKBN = exports.calculateRepegCost = exports.calculateAdjustKCost = void 0;\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst assert_1 = __webpack_require__(/*! ../assert/assert */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/assert/assert.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\n/**\n * Helper function calculating adjust k cost\n * @param amm\n * @param numerator\n * @param denomenator\n * @returns cost : Precision QUOTE_ASSET_PRECISION\n */ function calculateAdjustKCost(amm, numerator, denomenator) {\n    // const k = market.amm.sqrtK.mul(market.amm.sqrtK);\n    const x = amm.baseAssetReserve;\n    const y = amm.quoteAssetReserve;\n    const d = amm.baseAssetAmountWithAmm;\n    const Q = amm.pegMultiplier;\n    const quoteScale = y.mul(d).mul(Q); //.div(AMM_RESERVE_PRECISION);\n    const p = numerator.mul(numericConstants_1.PRICE_PRECISION).div(denomenator);\n    const cost = quoteScale.mul(numericConstants_1.PERCENTAGE_PRECISION).mul(numericConstants_1.PERCENTAGE_PRECISION).div(x.add(d)).sub(quoteScale.mul(p).mul(numericConstants_1.PERCENTAGE_PRECISION).mul(numericConstants_1.PERCENTAGE_PRECISION).div(numericConstants_1.PRICE_PRECISION).div(x.mul(p).div(numericConstants_1.PRICE_PRECISION).add(d))).div(numericConstants_1.PERCENTAGE_PRECISION).div(numericConstants_1.PERCENTAGE_PRECISION).div(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO).div(numericConstants_1.PEG_PRECISION);\n    return cost.mul(new anchor_1.BN(-1));\n}\nexports.calculateAdjustKCost = calculateAdjustKCost;\n// /**\n//  * Helper function calculating adjust k cost\n//  * @param amm\n//  * @param numerator\n//  * @param denomenator\n//  * @returns cost : Precision QUOTE_ASSET_PRECISION\n//  */\n// export function calculateAdjustKCost2(\n// \tamm: AMM,\n// \tnumerator: BN,\n// \tdenomenator: BN\n// ): BN {\n// \t// const k = market.amm.sqrtK.mul(market.amm.sqrtK);\n// \tconst directionToClose = amm.baseAssetAmountWithAmm.gt(ZERO)\n// \t\t? PositionDirection.SHORT\n// \t\t: PositionDirection.LONG;\n// \tconst [newQuoteAssetReserve, _newBaseAssetReserve] =\n// \t\tcalculateAmmReservesAfterSwap(\n// \t\t\tamm,\n// \t\t\t'base',\n// \t\t\tamm.baseAssetAmountWithAmm.abs(),\n// \t\t\tgetSwapDirection('base', directionToClose)\n// \t\t);\n// }\n/**\n * Helper function calculating adjust pegMultiplier (repeg) cost\n *\n * @param amm\n * @param newPeg\n * @returns cost : Precision QUOTE_ASSET_PRECISION\n */ function calculateRepegCost(amm, newPeg) {\n    const dqar = amm.quoteAssetReserve.sub(amm.terminalQuoteAssetReserve);\n    const cost = dqar.mul(newPeg.sub(amm.pegMultiplier)).div(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO).div(numericConstants_1.PEG_PRECISION);\n    return cost;\n}\nexports.calculateRepegCost = calculateRepegCost;\nfunction calculateBudgetedKBN(x, y, budget, Q, d) {\n    (0, assert_1.assert)(Q.gt(new anchor_1.BN(0)));\n    const C = budget.mul(new anchor_1.BN(-1));\n    let dSign = new anchor_1.BN(1);\n    if (d.lt(new anchor_1.BN(0))) {\n        dSign = new anchor_1.BN(-1);\n    }\n    const pegged_y_d_d = y.mul(d).mul(d).mul(Q).div(numericConstants_1.AMM_RESERVE_PRECISION).div(numericConstants_1.AMM_RESERVE_PRECISION).div(numericConstants_1.PEG_PRECISION);\n    const numer1 = pegged_y_d_d;\n    const numer2 = C.mul(d).div(numericConstants_1.QUOTE_PRECISION).mul(x.add(d)).div(numericConstants_1.AMM_RESERVE_PRECISION).mul(dSign);\n    const denom1 = C.mul(x).mul(x.add(d)).div(numericConstants_1.AMM_RESERVE_PRECISION).div(numericConstants_1.QUOTE_PRECISION);\n    const denom2 = pegged_y_d_d;\n    // protocol is spending to increase k\n    if (C.lt(numericConstants_1.ZERO)) {\n        // thus denom1 is negative and solution is unstable\n        if (denom1.abs().gt(denom2.abs())) {\n            console.log(\"denom1 > denom2\", denom1.toString(), denom2.toString());\n            console.log(\"budget cost exceeds stable K solution\");\n            return [\n                new anchor_1.BN(10000),\n                new anchor_1.BN(1)\n            ];\n        }\n    }\n    const numerator = numer1.sub(numer2).div(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO);\n    const denominator = denom1.add(denom2).div(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO);\n    return [\n        numerator,\n        denominator\n    ];\n}\nexports.calculateBudgetedKBN = calculateBudgetedKBN;\nfunction calculateBudgetedK(amm, cost) {\n    // wolframalpha.com\n    // (1/(x+d) - p/(x*p+d))*y*d*Q = C solve for p\n    // p = (d(y*d*Q - C(x+d))) / (C*x(x+d) + y*d*d*Q)\n    // numer\n    //   =  y*d*d*Q - Cxd - Cdd\n    //   =  y/x*Q*d*d - Cd - Cd/x\n    //   = mark      - C/d - C/(x)\n    //   =  mark/C    - 1/d - 1/x\n    // denom\n    // = C*x*x + C*x*d + y*d*d*Q\n    // = x/d**2 + 1 / d + mark/C\n    // todo: assumes k = x * y\n    // otherwise use: (y(1-p) + (kp^2/(x*p+d)) - k/(x+d)) * Q = C solve for p\n    const x = amm.baseAssetReserve;\n    const y = amm.quoteAssetReserve;\n    const d = amm.baseAssetAmountWithAmm;\n    const Q = amm.pegMultiplier;\n    const [numerator, denominator] = calculateBudgetedKBN(x, y, cost, Q, d);\n    return [\n        numerator,\n        denominator\n    ];\n}\nexports.calculateBudgetedK = calculateBudgetedK;\nfunction calculateBudgetedPeg(amm, budget, targetPrice) {\n    let perPegCost = amm.quoteAssetReserve.sub(amm.terminalQuoteAssetReserve).div(numericConstants_1.AMM_RESERVE_PRECISION.div(numericConstants_1.PRICE_PRECISION));\n    if (perPegCost.gt(numericConstants_1.ZERO)) {\n        perPegCost = perPegCost.add(numericConstants_1.ONE);\n    } else if (perPegCost.lt(numericConstants_1.ZERO)) {\n        perPegCost = perPegCost.sub(numericConstants_1.ONE);\n    }\n    const targetPeg = targetPrice.mul(amm.baseAssetReserve).div(amm.quoteAssetReserve).div(numericConstants_1.PRICE_DIV_PEG);\n    const pegChangeDirection = targetPeg.sub(amm.pegMultiplier);\n    const useTargetPeg = perPegCost.lt(numericConstants_1.ZERO) && pegChangeDirection.gt(numericConstants_1.ZERO) || perPegCost.gt(numericConstants_1.ZERO) && pegChangeDirection.lt(numericConstants_1.ZERO);\n    if (perPegCost.eq(numericConstants_1.ZERO) || useTargetPeg) {\n        return targetPeg;\n    }\n    const budgetDeltaPeg = budget.mul(numericConstants_1.PEG_PRECISION).div(perPegCost);\n    const newPeg = anchor_1.BN.max(numericConstants_1.ONE, amm.pegMultiplier.add(budgetDeltaPeg));\n    return newPeg;\n}\nexports.calculateBudgetedPeg = calculateBudgetedPeg;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/repeg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotBalance.js":
/*!**************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/spotBalance.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateWithdrawLimit = exports.calculateTokenUtilizationLimits = exports.calculateInterestAccumulated = exports.calculateBorrowRate = exports.calculateDepositRate = exports.calculateInterestRate = exports.calculateSpotMarketBorrowCapacity = exports.calculateUtilization = exports.calculateLiabilityWeight = exports.calculateAssetWeight = exports.getTokenValue = exports.getStrictTokenValue = exports.getSignedTokenAmount = exports.getTokenAmount = exports.getBalance = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst margin_1 = __webpack_require__(/*! ./margin */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/margin.js\");\nconst numericConstants_2 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/utils.js\");\n/**\n * Calculates the balance of a given token amount including any accumulated interest. This\n * is the same as `SpotPosition.scaledBalance`.\n *\n * @param {BN} tokenAmount - the amount of tokens\n * @param {SpotMarketAccount} spotMarket - the spot market account\n * @param {SpotBalanceType} balanceType - the balance type ('deposit' or 'borrow')\n * @return {BN} the calculated balance, scaled by `SPOT_MARKET_BALANCE_PRECISION`\n */ function getBalance(tokenAmount, spotMarket, balanceType) {\n    const precisionIncrease = numericConstants_1.TEN.pow(new anchor_1.BN(19 - spotMarket.decimals));\n    const cumulativeInterest = (0, types_1.isVariant)(balanceType, \"deposit\") ? spotMarket.cumulativeDepositInterest : spotMarket.cumulativeBorrowInterest;\n    let balance = tokenAmount.mul(precisionIncrease).div(cumulativeInterest);\n    if (!balance.eq(numericConstants_1.ZERO) && (0, types_1.isVariant)(balanceType, \"borrow\")) {\n        balance = balance.add(numericConstants_1.ONE);\n    }\n    return balance;\n}\nexports.getBalance = getBalance;\n/**\n * Calculates the spot token amount including any accumulated interest.\n *\n * @param {BN} balanceAmount - The balance amount, typically from `SpotPosition.scaledBalance`\n * @param {SpotMarketAccount} spotMarket - The spot market account details\n * @param {SpotBalanceType} balanceType - The balance type to be used for calculation\n * @returns {BN} The calculated token amount, scaled by `SpotMarketConfig.precision`\n */ function getTokenAmount(balanceAmount, spotMarket, balanceType) {\n    const precisionDecrease = numericConstants_1.TEN.pow(new anchor_1.BN(19 - spotMarket.decimals));\n    if ((0, types_1.isVariant)(balanceType, \"deposit\")) {\n        return balanceAmount.mul(spotMarket.cumulativeDepositInterest).div(precisionDecrease);\n    } else {\n        return (0, utils_1.divCeil)(balanceAmount.mul(spotMarket.cumulativeBorrowInterest), precisionDecrease);\n    }\n}\nexports.getTokenAmount = getTokenAmount;\n/**\n * Returns the signed (positive for deposit,negative for borrow) token amount based on the balance type.\n *\n * @param {BN} tokenAmount - The token amount to convert (from `getTokenAmount`)\n * @param {SpotBalanceType} balanceType - The balance type to determine the sign of the token amount.\n * @returns {BN} - The signed token amount, scaled by `SpotMarketConfig.precision`\n */ function getSignedTokenAmount(tokenAmount, balanceType) {\n    if ((0, types_1.isVariant)(balanceType, \"deposit\")) {\n        return tokenAmount;\n    } else {\n        return tokenAmount.abs().neg();\n    }\n}\nexports.getSignedTokenAmount = getSignedTokenAmount;\n/**\n * Calculates the value of a given token amount using the worst of the provided oracle price and its TWAP.\n *\n * @param {BN} tokenAmount - The amount of tokens to calculate the value for (from `getTokenAmount`)\n * @param {number} spotDecimals - The number of decimals in the token.\n * @param {OraclePriceData} oraclePriceData - The oracle price data (typically a token/USD oracle).\n * @param {BN} oraclePriceTwap - The Time-Weighted Average Price of the oracle.\n * @return {BN} The calculated value of the given token amount, scaled by `PRICE_PRECISION`\n */ function getStrictTokenValue(tokenAmount, spotDecimals, oraclePriceData, oraclePriceTwap) {\n    if (tokenAmount.eq(numericConstants_1.ZERO)) {\n        return numericConstants_1.ZERO;\n    }\n    let price = oraclePriceData.price;\n    if (tokenAmount.gt(numericConstants_1.ZERO)) {\n        price = anchor_1.BN.min(oraclePriceData.price, oraclePriceTwap);\n    } else {\n        price = anchor_1.BN.max(oraclePriceData.price, oraclePriceTwap);\n    }\n    const precisionDecrease = numericConstants_1.TEN.pow(new anchor_1.BN(spotDecimals));\n    return tokenAmount.mul(price).div(precisionDecrease);\n}\nexports.getStrictTokenValue = getStrictTokenValue;\n/**\n * Calculates the value of a given token amount in relation to an oracle price data\n *\n * @param {BN} tokenAmount - The amount of tokens to calculate the value for (from `getTokenAmount`)\n * @param {number} spotDecimals - The number of decimal places of the token.\n * @param {OraclePriceData} oraclePriceData - The oracle price data (typically a token/USD oracle).\n * @return {BN} The value of the token based on the oracle, scaled by `PRICE_PRECISION`\n */ function getTokenValue(tokenAmount, spotDecimals, oraclePriceData) {\n    if (tokenAmount.eq(numericConstants_1.ZERO)) {\n        return numericConstants_1.ZERO;\n    }\n    const precisionDecrease = numericConstants_1.TEN.pow(new anchor_1.BN(spotDecimals));\n    return tokenAmount.mul(oraclePriceData.price).div(precisionDecrease);\n}\nexports.getTokenValue = getTokenValue;\nfunction calculateAssetWeight(balanceAmount, spotMarket, marginCategory) {\n    const sizePrecision = numericConstants_1.TEN.pow(new anchor_1.BN(spotMarket.decimals));\n    let sizeInAmmReservePrecision;\n    if (sizePrecision.gt(numericConstants_1.AMM_RESERVE_PRECISION)) {\n        sizeInAmmReservePrecision = balanceAmount.div(sizePrecision.div(numericConstants_1.AMM_RESERVE_PRECISION));\n    } else {\n        sizeInAmmReservePrecision = balanceAmount.mul(numericConstants_1.AMM_RESERVE_PRECISION).div(sizePrecision);\n    }\n    let assetWeight;\n    switch(marginCategory){\n        case \"Initial\":\n            assetWeight = (0, margin_1.calculateSizeDiscountAssetWeight)(sizeInAmmReservePrecision, new anchor_1.BN(spotMarket.imfFactor), new anchor_1.BN(spotMarket.initialAssetWeight));\n            break;\n        case \"Maintenance\":\n            assetWeight = (0, margin_1.calculateSizeDiscountAssetWeight)(sizeInAmmReservePrecision, new anchor_1.BN(spotMarket.imfFactor), new anchor_1.BN(spotMarket.maintenanceAssetWeight));\n            break;\n        default:\n            assetWeight = new anchor_1.BN(spotMarket.initialAssetWeight);\n            break;\n    }\n    return assetWeight;\n}\nexports.calculateAssetWeight = calculateAssetWeight;\nfunction calculateLiabilityWeight(size, spotMarket, marginCategory) {\n    const sizePrecision = numericConstants_1.TEN.pow(new anchor_1.BN(spotMarket.decimals));\n    let sizeInAmmReservePrecision;\n    if (sizePrecision.gt(numericConstants_1.AMM_RESERVE_PRECISION)) {\n        sizeInAmmReservePrecision = size.div(sizePrecision.div(numericConstants_1.AMM_RESERVE_PRECISION));\n    } else {\n        sizeInAmmReservePrecision = size.mul(numericConstants_1.AMM_RESERVE_PRECISION).div(sizePrecision);\n    }\n    let liabilityWeight;\n    switch(marginCategory){\n        case \"Initial\":\n            liabilityWeight = (0, margin_1.calculateSizePremiumLiabilityWeight)(sizeInAmmReservePrecision, new anchor_1.BN(spotMarket.imfFactor), new anchor_1.BN(spotMarket.initialLiabilityWeight), numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION);\n            break;\n        case \"Maintenance\":\n            liabilityWeight = (0, margin_1.calculateSizePremiumLiabilityWeight)(sizeInAmmReservePrecision, new anchor_1.BN(spotMarket.imfFactor), new anchor_1.BN(spotMarket.maintenanceLiabilityWeight), numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION);\n            break;\n        default:\n            liabilityWeight = spotMarket.initialLiabilityWeight;\n            break;\n    }\n    return liabilityWeight;\n}\nexports.calculateLiabilityWeight = calculateLiabilityWeight;\nfunction calculateUtilization(bank, delta = numericConstants_1.ZERO) {\n    let tokenDepositAmount = getTokenAmount(bank.depositBalance, bank, types_1.SpotBalanceType.DEPOSIT);\n    let tokenBorrowAmount = getTokenAmount(bank.borrowBalance, bank, types_1.SpotBalanceType.BORROW);\n    if (delta.gt(numericConstants_1.ZERO)) {\n        tokenDepositAmount = tokenDepositAmount.add(delta);\n    } else if (delta.lt(numericConstants_1.ZERO)) {\n        tokenBorrowAmount = tokenBorrowAmount.add(delta.abs());\n    }\n    let utilization;\n    if (tokenBorrowAmount.eq(numericConstants_1.ZERO) && tokenDepositAmount.eq(numericConstants_1.ZERO)) {\n        utilization = numericConstants_1.ZERO;\n    } else if (tokenDepositAmount.eq(numericConstants_1.ZERO)) {\n        utilization = numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION;\n    } else {\n        utilization = tokenBorrowAmount.mul(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION).div(tokenDepositAmount);\n    }\n    return utilization;\n}\nexports.calculateUtilization = calculateUtilization;\n/**\n * calculates max borrow amount where rate would stay below targetBorrowRate\n * @param spotMarketAccount\n * @param targetBorrowRate\n * @returns : Precision: TOKEN DECIMALS\n */ function calculateSpotMarketBorrowCapacity(spotMarketAccount, targetBorrowRate) {\n    const currentBorrowRate = calculateBorrowRate(spotMarketAccount);\n    const tokenDepositAmount = getTokenAmount(spotMarketAccount.depositBalance, spotMarketAccount, types_1.SpotBalanceType.DEPOSIT);\n    const tokenBorrowAmount = getTokenAmount(spotMarketAccount.borrowBalance, spotMarketAccount, types_1.SpotBalanceType.BORROW);\n    let targetUtilization;\n    // target utilization past mid point\n    if (targetBorrowRate.gte(new anchor_1.BN(spotMarketAccount.optimalBorrowRate))) {\n        const borrowRateSlope = new anchor_1.BN(spotMarketAccount.maxBorrowRate - spotMarketAccount.optimalBorrowRate).mul(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION).div(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION.sub(new anchor_1.BN(spotMarketAccount.optimalUtilization)));\n        const surplusTargetUtilization = targetBorrowRate.sub(new anchor_1.BN(spotMarketAccount.optimalBorrowRate)).mul(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION).div(borrowRateSlope);\n        targetUtilization = surplusTargetUtilization.add(new anchor_1.BN(spotMarketAccount.optimalUtilization));\n    } else {\n        const borrowRateSlope = new anchor_1.BN(spotMarketAccount.optimalBorrowRate).mul(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION).div(new anchor_1.BN(spotMarketAccount.optimalUtilization));\n        targetUtilization = targetBorrowRate.mul(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION).div(borrowRateSlope);\n    }\n    const totalCapacity = tokenDepositAmount.mul(targetUtilization).div(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION);\n    let remainingCapacity;\n    if (currentBorrowRate.gte(targetBorrowRate)) {\n        remainingCapacity = numericConstants_1.ZERO;\n    } else {\n        remainingCapacity = anchor_1.BN.max(numericConstants_1.ZERO, totalCapacity.sub(tokenBorrowAmount));\n    }\n    return {\n        totalCapacity,\n        remainingCapacity\n    };\n}\nexports.calculateSpotMarketBorrowCapacity = calculateSpotMarketBorrowCapacity;\nfunction calculateInterestRate(bank, delta = numericConstants_1.ZERO) {\n    const utilization = calculateUtilization(bank, delta);\n    let interestRate;\n    if (utilization.gt(new anchor_1.BN(bank.optimalUtilization))) {\n        const surplusUtilization = utilization.sub(new anchor_1.BN(bank.optimalUtilization));\n        const borrowRateSlope = new anchor_1.BN(bank.maxBorrowRate - bank.optimalBorrowRate).mul(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION).div(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION.sub(new anchor_1.BN(bank.optimalUtilization)));\n        interestRate = new anchor_1.BN(bank.optimalBorrowRate).add(surplusUtilization.mul(borrowRateSlope).div(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION));\n    } else {\n        const borrowRateSlope = new anchor_1.BN(bank.optimalBorrowRate).mul(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION).div(new anchor_1.BN(bank.optimalUtilization));\n        interestRate = utilization.mul(borrowRateSlope).div(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION);\n    }\n    return interestRate;\n}\nexports.calculateInterestRate = calculateInterestRate;\nfunction calculateDepositRate(bank) {\n    const utilization = calculateUtilization(bank);\n    const borrowRate = calculateBorrowRate(bank);\n    const depositRate = borrowRate.mul(numericConstants_2.PERCENTAGE_PRECISION.sub(new anchor_1.BN(bank.insuranceFund.totalFactor))).mul(utilization).div(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION).div(numericConstants_2.PERCENTAGE_PRECISION);\n    return depositRate;\n}\nexports.calculateDepositRate = calculateDepositRate;\nfunction calculateBorrowRate(bank) {\n    return calculateInterestRate(bank);\n}\nexports.calculateBorrowRate = calculateBorrowRate;\nfunction calculateInterestAccumulated(bank, now) {\n    const interestRate = calculateInterestRate(bank);\n    const timeSinceLastUpdate = now.sub(bank.lastInterestTs);\n    const modifiedBorrowRate = interestRate.mul(timeSinceLastUpdate);\n    const utilization = calculateUtilization(bank);\n    const modifiedDepositRate = modifiedBorrowRate.mul(utilization).div(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION);\n    const borrowInterest = bank.cumulativeBorrowInterest.mul(modifiedBorrowRate).div(numericConstants_1.ONE_YEAR).div(numericConstants_1.SPOT_MARKET_RATE_PRECISION).add(numericConstants_1.ONE);\n    const depositInterest = bank.cumulativeDepositInterest.mul(modifiedDepositRate).div(numericConstants_1.ONE_YEAR).div(numericConstants_1.SPOT_MARKET_RATE_PRECISION);\n    return {\n        borrowInterest,\n        depositInterest\n    };\n}\nexports.calculateInterestAccumulated = calculateInterestAccumulated;\nfunction calculateTokenUtilizationLimits(depositTokenAmount, borrowTokenAmount, spotMarket) {\n    // Calculates the allowable minimum deposit and maximum borrow amounts for immediate withdrawal based on market utilization.\n    // First, it determines a maximum withdrawal utilization from the market's target and historic utilization.\n    // Then, it deduces corresponding deposit/borrow amounts.\n    // Note: For deposit sizes below the guard threshold, withdrawals aren't blocked.\n    const maxWithdrawUtilization = anchor_1.BN.max(new anchor_1.BN(spotMarket.optimalUtilization), spotMarket.utilizationTwap.add(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION.sub(spotMarket.utilizationTwap).div(new anchor_1.BN(2))));\n    let minDepositTokensForUtilization = borrowTokenAmount.mul(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION).div(maxWithdrawUtilization);\n    // don't block withdraws for deposit sizes below guard threshold\n    minDepositTokensForUtilization = anchor_1.BN.min(minDepositTokensForUtilization, depositTokenAmount.sub(spotMarket.withdrawGuardThreshold));\n    let maxBorrowTokensForUtilization = maxWithdrawUtilization.mul(depositTokenAmount).div(numericConstants_1.SPOT_MARKET_UTILIZATION_PRECISION);\n    maxBorrowTokensForUtilization = anchor_1.BN.max(spotMarket.withdrawGuardThreshold, maxBorrowTokensForUtilization);\n    return {\n        minDepositTokensForUtilization,\n        maxBorrowTokensForUtilization\n    };\n}\nexports.calculateTokenUtilizationLimits = calculateTokenUtilizationLimits;\nfunction calculateWithdrawLimit(spotMarket, now) {\n    const marketDepositTokenAmount = getTokenAmount(spotMarket.depositBalance, spotMarket, types_1.SpotBalanceType.DEPOSIT);\n    const marketBorrowTokenAmount = getTokenAmount(spotMarket.borrowBalance, spotMarket, types_1.SpotBalanceType.BORROW);\n    const twentyFourHours = new anchor_1.BN(60 * 60 * 24);\n    const sinceLast = now.sub(spotMarket.lastTwapTs);\n    const sinceStart = anchor_1.BN.max(numericConstants_1.ZERO, twentyFourHours.sub(sinceLast));\n    const borrowTokenTwapLive = spotMarket.borrowTokenTwap.mul(sinceStart).add(marketBorrowTokenAmount.mul(sinceLast)).div(sinceLast.add(sinceStart));\n    const depositTokenTwapLive = spotMarket.depositTokenTwap.mul(sinceStart).add(marketDepositTokenAmount.mul(sinceLast)).div(sinceLast.add(sinceStart));\n    const lesserDepositAmount = anchor_1.BN.min(marketDepositTokenAmount, depositTokenTwapLive);\n    const maxBorrowTokensTwap = anchor_1.BN.max(spotMarket.withdrawGuardThreshold, anchor_1.BN.min(anchor_1.BN.max(marketDepositTokenAmount.div(new anchor_1.BN(6)), borrowTokenTwapLive.add(lesserDepositAmount.div(new anchor_1.BN(10)))), lesserDepositAmount.sub(lesserDepositAmount.div(new anchor_1.BN(5))))); // between ~15-80% utilization with friction on twap\n    const minDepositTokensTwap = depositTokenTwapLive.sub(anchor_1.BN.max(depositTokenTwapLive.div(new anchor_1.BN(4)), anchor_1.BN.min(spotMarket.withdrawGuardThreshold, depositTokenTwapLive)));\n    const { minDepositTokensForUtilization, maxBorrowTokensForUtilization } = calculateTokenUtilizationLimits(marketDepositTokenAmount, marketBorrowTokenAmount, spotMarket);\n    const minDepositTokens = anchor_1.BN.max(minDepositTokensForUtilization, minDepositTokensTwap);\n    const maxBorrowTokens = anchor_1.BN.min(maxBorrowTokensForUtilization, maxBorrowTokensTwap);\n    const withdrawLimit = anchor_1.BN.max(marketDepositTokenAmount.sub(minDepositTokens), numericConstants_1.ZERO);\n    let borrowLimit = maxBorrowTokens.sub(marketBorrowTokenAmount);\n    borrowLimit = anchor_1.BN.min(borrowLimit, marketDepositTokenAmount.sub(marketBorrowTokenAmount));\n    if (withdrawLimit.eq(numericConstants_1.ZERO)) {\n        borrowLimit = numericConstants_1.ZERO;\n    }\n    return {\n        borrowLimit,\n        withdrawLimit,\n        maxBorrowAmount: maxBorrowTokens,\n        minDepositAmount: minDepositTokens,\n        currentDepositAmount: marketDepositTokenAmount,\n        currentBorrowAmount: marketBorrowTokenAmount\n    };\n}\nexports.calculateWithdrawLimit = calculateWithdrawLimit;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotBalance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotMarket.js":
/*!*************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/spotMarket.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateSpotMarketMarginRatio = exports.castNumberToSpotPrecision = void 0;\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst spotBalance_1 = __webpack_require__(/*! ./spotBalance */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotBalance.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nfunction castNumberToSpotPrecision(value, spotMarket) {\n    if (typeof value === \"number\") {\n        return new anchor_1.BN(value * Math.pow(10, spotMarket.decimals));\n    } else {\n        return value.mul(new anchor_1.BN(Math.pow(10, spotMarket.decimals)));\n    }\n}\nexports.castNumberToSpotPrecision = castNumberToSpotPrecision;\nfunction calculateSpotMarketMarginRatio(market, marginCategory, size, balanceType) {\n    if ((0, types_1.isVariant)(balanceType, \"deposit\")) {\n        const assetWeight = (0, spotBalance_1.calculateAssetWeight)(size, market, marginCategory);\n        return numericConstants_1.MARGIN_PRECISION.sub(assetWeight).toNumber();\n    } else {\n        const liabilityWeight = (0, spotBalance_1.calculateLiabilityWeight)(size, market, marginCategory);\n        return liabilityWeight.sub(numericConstants_1.MARGIN_PRECISION).toNumber();\n    }\n}\nexports.calculateSpotMarketMarginRatio = calculateSpotMarketMarginRatio;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL3Nwb3RNYXJrZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNDQUFzQyxHQUFHQSxpQ0FBaUMsR0FBRyxLQUFLO0FBQ2xGLE1BQU1JLFdBQVdDLG1CQUFPQSxDQUFDLG1GQUFtQjtBQUM1QyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQyxtRUFBVTtBQUNsQyxNQUFNRSxnQkFBZ0JGLG1CQUFPQSxDQUFDLG1GQUFlO0FBQzdDLE1BQU1HLHFCQUFxQkgsbUJBQU9BLENBQUMsNkdBQStCO0FBQ2xFLFNBQVNGLDBCQUEwQkYsS0FBSyxFQUFFUSxVQUFVO0lBQ2hELElBQUksT0FBT1IsVUFBVSxVQUFVO1FBQzNCLE9BQU8sSUFBSUcsU0FBU00sRUFBRSxDQUFDVCxRQUFRVSxLQUFLQyxHQUFHLENBQUMsSUFBSUgsV0FBV0ksUUFBUTtJQUNuRSxPQUNLO1FBQ0QsT0FBT1osTUFBTWEsR0FBRyxDQUFDLElBQUlWLFNBQVNNLEVBQUUsQ0FBQ0MsS0FBS0MsR0FBRyxDQUFDLElBQUlILFdBQVdJLFFBQVE7SUFDckU7QUFDSjtBQUNBYixpQ0FBaUMsR0FBR0c7QUFDcEMsU0FBU0QsK0JBQStCYSxNQUFNLEVBQUVDLGNBQWMsRUFBRUMsSUFBSSxFQUFFQyxXQUFXO0lBQzdFLElBQUksQ0FBQyxHQUFHWixRQUFRYSxTQUFTLEVBQUVELGFBQWEsWUFBWTtRQUNoRCxNQUFNRSxjQUFjLENBQUMsR0FBR2IsY0FBY2Msb0JBQW9CLEVBQUVKLE1BQU1GLFFBQVFDO1FBQzFFLE9BQU9SLG1CQUFtQmMsZ0JBQWdCLENBQUNDLEdBQUcsQ0FBQ0gsYUFBYUksUUFBUTtJQUN4RSxPQUNLO1FBQ0QsTUFBTUMsa0JBQWtCLENBQUMsR0FBR2xCLGNBQWNtQix3QkFBd0IsRUFBRVQsTUFBTUYsUUFBUUM7UUFDbEYsT0FBT1MsZ0JBQWdCRixHQUFHLENBQUNmLG1CQUFtQmMsZ0JBQWdCLEVBQUVFLFFBQVE7SUFDNUU7QUFDSjtBQUNBeEIsc0NBQXNDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL21hdGgvc3BvdE1hcmtldC5qcz82Y2I5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jYWxjdWxhdGVTcG90TWFya2V0TWFyZ2luUmF0aW8gPSBleHBvcnRzLmNhc3ROdW1iZXJUb1Nwb3RQcmVjaXNpb24gPSB2b2lkIDA7XG5jb25zdCBhbmNob3JfMSA9IHJlcXVpcmUoXCJAY29yYWwteHl6L2FuY2hvclwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG5jb25zdCBzcG90QmFsYW5jZV8xID0gcmVxdWlyZShcIi4vc3BvdEJhbGFuY2VcIik7XG5jb25zdCBudW1lcmljQ29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzL251bWVyaWNDb25zdGFudHNcIik7XG5mdW5jdGlvbiBjYXN0TnVtYmVyVG9TcG90UHJlY2lzaW9uKHZhbHVlLCBzcG90TWFya2V0KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhbmNob3JfMS5CTih2YWx1ZSAqIE1hdGgucG93KDEwLCBzcG90TWFya2V0LmRlY2ltYWxzKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWUubXVsKG5ldyBhbmNob3JfMS5CTihNYXRoLnBvdygxMCwgc3BvdE1hcmtldC5kZWNpbWFscykpKTtcbiAgICB9XG59XG5leHBvcnRzLmNhc3ROdW1iZXJUb1Nwb3RQcmVjaXNpb24gPSBjYXN0TnVtYmVyVG9TcG90UHJlY2lzaW9uO1xuZnVuY3Rpb24gY2FsY3VsYXRlU3BvdE1hcmtldE1hcmdpblJhdGlvKG1hcmtldCwgbWFyZ2luQ2F0ZWdvcnksIHNpemUsIGJhbGFuY2VUeXBlKSB7XG4gICAgaWYgKCgwLCB0eXBlc18xLmlzVmFyaWFudCkoYmFsYW5jZVR5cGUsICdkZXBvc2l0JykpIHtcbiAgICAgICAgY29uc3QgYXNzZXRXZWlnaHQgPSAoMCwgc3BvdEJhbGFuY2VfMS5jYWxjdWxhdGVBc3NldFdlaWdodCkoc2l6ZSwgbWFya2V0LCBtYXJnaW5DYXRlZ29yeSk7XG4gICAgICAgIHJldHVybiBudW1lcmljQ29uc3RhbnRzXzEuTUFSR0lOX1BSRUNJU0lPTi5zdWIoYXNzZXRXZWlnaHQpLnRvTnVtYmVyKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBsaWFiaWxpdHlXZWlnaHQgPSAoMCwgc3BvdEJhbGFuY2VfMS5jYWxjdWxhdGVMaWFiaWxpdHlXZWlnaHQpKHNpemUsIG1hcmtldCwgbWFyZ2luQ2F0ZWdvcnkpO1xuICAgICAgICByZXR1cm4gbGlhYmlsaXR5V2VpZ2h0LnN1YihudW1lcmljQ29uc3RhbnRzXzEuTUFSR0lOX1BSRUNJU0lPTikudG9OdW1iZXIoKTtcbiAgICB9XG59XG5leHBvcnRzLmNhbGN1bGF0ZVNwb3RNYXJrZXRNYXJnaW5SYXRpbyA9IGNhbGN1bGF0ZVNwb3RNYXJrZXRNYXJnaW5SYXRpbztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNhbGN1bGF0ZVNwb3RNYXJrZXRNYXJnaW5SYXRpbyIsImNhc3ROdW1iZXJUb1Nwb3RQcmVjaXNpb24iLCJhbmNob3JfMSIsInJlcXVpcmUiLCJ0eXBlc18xIiwic3BvdEJhbGFuY2VfMSIsIm51bWVyaWNDb25zdGFudHNfMSIsInNwb3RNYXJrZXQiLCJCTiIsIk1hdGgiLCJwb3ciLCJkZWNpbWFscyIsIm11bCIsIm1hcmtldCIsIm1hcmdpbkNhdGVnb3J5Iiwic2l6ZSIsImJhbGFuY2VUeXBlIiwiaXNWYXJpYW50IiwiYXNzZXRXZWlnaHQiLCJjYWxjdWxhdGVBc3NldFdlaWdodCIsIk1BUkdJTl9QUkVDSVNJT04iLCJzdWIiLCJ0b051bWJlciIsImxpYWJpbGl0eVdlaWdodCIsImNhbGN1bGF0ZUxpYWJpbGl0eVdlaWdodCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotMarket.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotPosition.js":
/*!***************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/spotPosition.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getWorstCaseTokenAmounts = exports.isSpotPositionAvailable = void 0;\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst spotBalance_1 = __webpack_require__(/*! ./spotBalance */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotBalance.js\");\nfunction isSpotPositionAvailable(position) {\n    return position.scaledBalance.eq(numericConstants_1.ZERO) && position.openOrders === 0;\n}\nexports.isSpotPositionAvailable = isSpotPositionAvailable;\nfunction getWorstCaseTokenAmounts(spotPosition, spotMarketAccount, oraclePriceData) {\n    const tokenAmount = (0, spotBalance_1.getSignedTokenAmount)((0, spotBalance_1.getTokenAmount)(spotPosition.scaledBalance, spotMarketAccount, spotPosition.balanceType), spotPosition.balanceType);\n    const tokenAmountAllBidsFill = tokenAmount.add(spotPosition.openBids);\n    const tokenAmountAllAsksFill = tokenAmount.add(spotPosition.openAsks);\n    if (tokenAmountAllBidsFill.abs().gt(tokenAmountAllAsksFill.abs())) {\n        const worstCaseQuoteTokenAmount = (0, spotBalance_1.getTokenValue)(spotPosition.openBids.neg(), spotMarketAccount.decimals, oraclePriceData);\n        return [\n            tokenAmountAllBidsFill,\n            worstCaseQuoteTokenAmount\n        ];\n    } else {\n        const worstCaseQuoteTokenAmount = (0, spotBalance_1.getTokenValue)(spotPosition.openAsks.neg(), spotMarketAccount.decimals, oraclePriceData);\n        return [\n            tokenAmountAllAsksFill,\n            worstCaseQuoteTokenAmount\n        ];\n    }\n}\nexports.getWorstCaseTokenAmounts = getWorstCaseTokenAmounts;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL3Nwb3RQb3NpdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0NBQWdDLEdBQUdBLCtCQUErQixHQUFHLEtBQUs7QUFDMUUsTUFBTUkscUJBQXFCQyxtQkFBT0EsQ0FBQyw2R0FBK0I7QUFDbEUsTUFBTUMsZ0JBQWdCRCxtQkFBT0EsQ0FBQyxtRkFBZTtBQUM3QyxTQUFTRix3QkFBd0JJLFFBQVE7SUFDckMsT0FBT0EsU0FBU0MsYUFBYSxDQUFDQyxFQUFFLENBQUNMLG1CQUFtQk0sSUFBSSxLQUFLSCxTQUFTSSxVQUFVLEtBQUs7QUFDekY7QUFDQVgsK0JBQStCLEdBQUdHO0FBQ2xDLFNBQVNELHlCQUF5QlUsWUFBWSxFQUFFQyxpQkFBaUIsRUFBRUMsZUFBZTtJQUM5RSxNQUFNQyxjQUFjLENBQUMsR0FBR1QsY0FBY1Usb0JBQW9CLEVBQUUsQ0FBQyxHQUFHVixjQUFjVyxjQUFjLEVBQUVMLGFBQWFKLGFBQWEsRUFBRUssbUJBQW1CRCxhQUFhTSxXQUFXLEdBQUdOLGFBQWFNLFdBQVc7SUFDaE0sTUFBTUMseUJBQXlCSixZQUFZSyxHQUFHLENBQUNSLGFBQWFTLFFBQVE7SUFDcEUsTUFBTUMseUJBQXlCUCxZQUFZSyxHQUFHLENBQUNSLGFBQWFXLFFBQVE7SUFDcEUsSUFBSUosdUJBQXVCSyxHQUFHLEdBQUdDLEVBQUUsQ0FBQ0gsdUJBQXVCRSxHQUFHLEtBQUs7UUFDL0QsTUFBTUUsNEJBQTRCLENBQUMsR0FBR3BCLGNBQWNxQixhQUFhLEVBQUVmLGFBQWFTLFFBQVEsQ0FBQ08sR0FBRyxJQUFJZixrQkFBa0JnQixRQUFRLEVBQUVmO1FBQzVILE9BQU87WUFBQ0s7WUFBd0JPO1NBQTBCO0lBQzlELE9BQ0s7UUFDRCxNQUFNQSw0QkFBNEIsQ0FBQyxHQUFHcEIsY0FBY3FCLGFBQWEsRUFBRWYsYUFBYVcsUUFBUSxDQUFDSyxHQUFHLElBQUlmLGtCQUFrQmdCLFFBQVEsRUFBRWY7UUFDNUgsT0FBTztZQUFDUTtZQUF3Qkk7U0FBMEI7SUFDOUQ7QUFDSjtBQUNBMUIsZ0NBQWdDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL21hdGgvc3BvdFBvc2l0aW9uLmpzPzVkNzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFdvcnN0Q2FzZVRva2VuQW1vdW50cyA9IGV4cG9ydHMuaXNTcG90UG9zaXRpb25BdmFpbGFibGUgPSB2b2lkIDA7XG5jb25zdCBudW1lcmljQ29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzL251bWVyaWNDb25zdGFudHNcIik7XG5jb25zdCBzcG90QmFsYW5jZV8xID0gcmVxdWlyZShcIi4vc3BvdEJhbGFuY2VcIik7XG5mdW5jdGlvbiBpc1Nwb3RQb3NpdGlvbkF2YWlsYWJsZShwb3NpdGlvbikge1xuICAgIHJldHVybiBwb3NpdGlvbi5zY2FsZWRCYWxhbmNlLmVxKG51bWVyaWNDb25zdGFudHNfMS5aRVJPKSAmJiBwb3NpdGlvbi5vcGVuT3JkZXJzID09PSAwO1xufVxuZXhwb3J0cy5pc1Nwb3RQb3NpdGlvbkF2YWlsYWJsZSA9IGlzU3BvdFBvc2l0aW9uQXZhaWxhYmxlO1xuZnVuY3Rpb24gZ2V0V29yc3RDYXNlVG9rZW5BbW91bnRzKHNwb3RQb3NpdGlvbiwgc3BvdE1hcmtldEFjY291bnQsIG9yYWNsZVByaWNlRGF0YSkge1xuICAgIGNvbnN0IHRva2VuQW1vdW50ID0gKDAsIHNwb3RCYWxhbmNlXzEuZ2V0U2lnbmVkVG9rZW5BbW91bnQpKCgwLCBzcG90QmFsYW5jZV8xLmdldFRva2VuQW1vdW50KShzcG90UG9zaXRpb24uc2NhbGVkQmFsYW5jZSwgc3BvdE1hcmtldEFjY291bnQsIHNwb3RQb3NpdGlvbi5iYWxhbmNlVHlwZSksIHNwb3RQb3NpdGlvbi5iYWxhbmNlVHlwZSk7XG4gICAgY29uc3QgdG9rZW5BbW91bnRBbGxCaWRzRmlsbCA9IHRva2VuQW1vdW50LmFkZChzcG90UG9zaXRpb24ub3BlbkJpZHMpO1xuICAgIGNvbnN0IHRva2VuQW1vdW50QWxsQXNrc0ZpbGwgPSB0b2tlbkFtb3VudC5hZGQoc3BvdFBvc2l0aW9uLm9wZW5Bc2tzKTtcbiAgICBpZiAodG9rZW5BbW91bnRBbGxCaWRzRmlsbC5hYnMoKS5ndCh0b2tlbkFtb3VudEFsbEFza3NGaWxsLmFicygpKSkge1xuICAgICAgICBjb25zdCB3b3JzdENhc2VRdW90ZVRva2VuQW1vdW50ID0gKDAsIHNwb3RCYWxhbmNlXzEuZ2V0VG9rZW5WYWx1ZSkoc3BvdFBvc2l0aW9uLm9wZW5CaWRzLm5lZygpLCBzcG90TWFya2V0QWNjb3VudC5kZWNpbWFscywgb3JhY2xlUHJpY2VEYXRhKTtcbiAgICAgICAgcmV0dXJuIFt0b2tlbkFtb3VudEFsbEJpZHNGaWxsLCB3b3JzdENhc2VRdW90ZVRva2VuQW1vdW50XTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHdvcnN0Q2FzZVF1b3RlVG9rZW5BbW91bnQgPSAoMCwgc3BvdEJhbGFuY2VfMS5nZXRUb2tlblZhbHVlKShzcG90UG9zaXRpb24ub3BlbkFza3MubmVnKCksIHNwb3RNYXJrZXRBY2NvdW50LmRlY2ltYWxzLCBvcmFjbGVQcmljZURhdGEpO1xuICAgICAgICByZXR1cm4gW3Rva2VuQW1vdW50QWxsQXNrc0ZpbGwsIHdvcnN0Q2FzZVF1b3RlVG9rZW5BbW91bnRdO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0V29yc3RDYXNlVG9rZW5BbW91bnRzID0gZ2V0V29yc3RDYXNlVG9rZW5BbW91bnRzO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0V29yc3RDYXNlVG9rZW5BbW91bnRzIiwiaXNTcG90UG9zaXRpb25BdmFpbGFibGUiLCJudW1lcmljQ29uc3RhbnRzXzEiLCJyZXF1aXJlIiwic3BvdEJhbGFuY2VfMSIsInBvc2l0aW9uIiwic2NhbGVkQmFsYW5jZSIsImVxIiwiWkVSTyIsIm9wZW5PcmRlcnMiLCJzcG90UG9zaXRpb24iLCJzcG90TWFya2V0QWNjb3VudCIsIm9yYWNsZVByaWNlRGF0YSIsInRva2VuQW1vdW50IiwiZ2V0U2lnbmVkVG9rZW5BbW91bnQiLCJnZXRUb2tlbkFtb3VudCIsImJhbGFuY2VUeXBlIiwidG9rZW5BbW91bnRBbGxCaWRzRmlsbCIsImFkZCIsIm9wZW5CaWRzIiwidG9rZW5BbW91bnRBbGxBc2tzRmlsbCIsIm9wZW5Bc2tzIiwiYWJzIiwiZ3QiLCJ3b3JzdENhc2VRdW90ZVRva2VuQW1vdW50IiwiZ2V0VG9rZW5WYWx1ZSIsIm5lZyIsImRlY2ltYWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotPosition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/superStake.js":
/*!*************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/superStake.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateEstimatedSuperStakeLiquidationPrice = exports.calculateSolEarned = exports.findBestSuperStakeIxs = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst marinade_1 = __webpack_require__(/*! ../marinade */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/marinade/index.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\"));\nasync function findBestSuperStakeIxs({ amount, jupiterClient, driftClient, userAccountPublicKey, marinadePrice, forceMarinade, onlyDirectRoutes }) {\n    if (!marinadePrice) {\n        const marinadeProgram = (0, marinade_1.getMarinadeFinanceProgram)(driftClient.provider);\n        marinadePrice = await (0, marinade_1.getMarinadeMSolPrice)(marinadeProgram);\n    }\n    const solMint = driftClient.getSpotMarketAccount(1).mint;\n    const mSOLMint = driftClient.getSpotMarketAccount(2).mint;\n    let jupiterPrice;\n    let bestRoute;\n    try {\n        const jupiterRoutes = await jupiterClient.getRoutes({\n            inputMint: solMint,\n            outputMint: mSOLMint,\n            amount,\n            onlyDirectRoutes\n        });\n        bestRoute = jupiterRoutes[0];\n        jupiterPrice = bestRoute.inAmount / bestRoute.outAmount;\n    } catch (e) {\n        console.error(\"Error getting jupiter price\", e);\n    }\n    if (!jupiterPrice || marinadePrice <= jupiterPrice || forceMarinade) {\n        const ixs = await driftClient.getStakeForMSOLIx({\n            amount,\n            userAccountPublicKey\n        });\n        return {\n            method: \"marinade\",\n            ixs,\n            lookupTables: [],\n            price: marinadePrice\n        };\n    } else {\n        const { ixs, lookupTables } = await driftClient.getJupiterSwapIx({\n            inMarketIndex: 1,\n            outMarketIndex: 2,\n            route: bestRoute,\n            jupiterClient,\n            amount,\n            userAccountPublicKey\n        });\n        return {\n            method: \"jupiter\",\n            ixs,\n            lookupTables,\n            price: jupiterPrice\n        };\n    }\n}\nexports.findBestSuperStakeIxs = findBestSuperStakeIxs;\nasync function calculateSolEarned({ user, depositRecords }) {\n    const now = Date.now() / 1000;\n    const timestamps = [\n        now,\n        ...depositRecords.map((r)=>r.ts.toNumber())\n    ];\n    const msolRatios = new Map();\n    const getPrice = async (timestamp)=>{\n        const date = new Date(timestamp * 1000); // Convert Unix timestamp to milliseconds\n        const swaggerApiDateTime = date.toISOString(); // Format date as swagger API date-time\n        const url = `https://api.marinade.finance/msol/price_sol?time=${swaggerApiDateTime}`;\n        const response = await (0, node_fetch_1.default)(url);\n        if (response.status === 200) {\n            const data = await response.json();\n            msolRatios.set(timestamp, data);\n        }\n    };\n    await Promise.all(timestamps.map(getPrice));\n    let solEarned = numericConstants_1.ZERO;\n    for (const record of depositRecords){\n        if (record.marketIndex === 1) {\n            if ((0, types_1.isVariant)(record.direction, \"deposit\")) {\n                solEarned = solEarned.sub(record.amount);\n            } else {\n                solEarned = solEarned.add(record.amount);\n            }\n        } else if (record.marketIndex === 2) {\n            const msolRatio = msolRatios.get(record.ts.toNumber());\n            const msolRatioBN = new anchor_1.BN(msolRatio * web3_js_1.LAMPORTS_PER_SOL);\n            const solAmount = record.amount.mul(msolRatioBN).div(numericConstants_1.LAMPORTS_PRECISION);\n            if ((0, types_1.isVariant)(record.direction, \"deposit\")) {\n                solEarned = solEarned.sub(solAmount);\n            } else {\n                solEarned = solEarned.add(solAmount);\n            }\n        }\n    }\n    const currentMSOLTokenAmount = await user.getTokenAmount(2);\n    const currentSOLTokenAmount = await user.getTokenAmount(1);\n    const currentMSOLRatio = msolRatios.get(now);\n    const currentMSOLRatioBN = new anchor_1.BN(currentMSOLRatio * web3_js_1.LAMPORTS_PER_SOL);\n    solEarned = solEarned.add(currentMSOLTokenAmount.mul(currentMSOLRatioBN).div(numericConstants_1.LAMPORTS_PRECISION));\n    solEarned = solEarned.add(currentSOLTokenAmount);\n    return solEarned;\n}\nexports.calculateSolEarned = calculateSolEarned;\n// calculate estimated liquidation price (in mSOL/SOL) based on target amounts\nfunction calculateEstimatedSuperStakeLiquidationPrice(msolDepositAmount, msolMaintenanceAssetWeight, solBorrowAmount, solMaintenanceLiabilityWeight, msolPriceRatio) {\n    const liquidationDivergence = solMaintenanceLiabilityWeight * solBorrowAmount / (msolMaintenanceAssetWeight * msolDepositAmount * msolPriceRatio);\n    const liquidationPrice = msolPriceRatio * liquidationDivergence;\n    return liquidationPrice;\n}\nexports.calculateEstimatedSuperStakeLiquidationPrice = calculateEstimatedSuperStakeLiquidationPrice;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL3N1cGVyU3Rha2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9EQUFvRCxHQUFHQSwwQkFBMEIsR0FBR0EsNkJBQTZCLEdBQUcsS0FBSztBQUN6SCxNQUFNSyxZQUFZQyxtQkFBT0EsQ0FBQyw4RUFBaUI7QUFDM0MsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsK0VBQWE7QUFDeEMsTUFBTUUsV0FBV0YsbUJBQU9BLENBQUMsbUZBQW1CO0FBQzVDLE1BQU1HLFVBQVVILG1CQUFPQSxDQUFDLG1FQUFVO0FBQ2xDLE1BQU1JLHFCQUFxQkosbUJBQU9BLENBQUMsNkdBQStCO0FBQ2xFLE1BQU1LLGVBQWVoQixnQkFBZ0JXLG1CQUFPQSxDQUFDLGlFQUFZO0FBQ3pELGVBQWVGLHNCQUFzQixFQUFFUSxNQUFNLEVBQUVDLGFBQWEsRUFBRUMsV0FBVyxFQUFFQyxvQkFBb0IsRUFBRUMsYUFBYSxFQUFFQyxhQUFhLEVBQUVDLGdCQUFnQixFQUFHO0lBQzlJLElBQUksQ0FBQ0YsZUFBZTtRQUNoQixNQUFNRyxrQkFBa0IsQ0FBQyxHQUFHWixXQUFXYSx5QkFBeUIsRUFBRU4sWUFBWU8sUUFBUTtRQUN0RkwsZ0JBQWdCLE1BQU0sQ0FBQyxHQUFHVCxXQUFXZSxvQkFBb0IsRUFBRUg7SUFDL0Q7SUFDQSxNQUFNSSxVQUFVVCxZQUFZVSxvQkFBb0IsQ0FBQyxHQUFHQyxJQUFJO0lBQ3hELE1BQU1DLFdBQVdaLFlBQVlVLG9CQUFvQixDQUFDLEdBQUdDLElBQUk7SUFDekQsSUFBSUU7SUFDSixJQUFJQztJQUNKLElBQUk7UUFDQSxNQUFNQyxnQkFBZ0IsTUFBTWhCLGNBQWNpQixTQUFTLENBQUM7WUFDaERDLFdBQVdSO1lBQ1hTLFlBQVlOO1lBQ1pkO1lBQ0FNO1FBQ0o7UUFDQVUsWUFBWUMsYUFBYSxDQUFDLEVBQUU7UUFDNUJGLGVBQWVDLFVBQVVLLFFBQVEsR0FBR0wsVUFBVU0sU0FBUztJQUMzRCxFQUNBLE9BQU9DLEdBQUc7UUFDTkMsUUFBUUMsS0FBSyxDQUFDLCtCQUErQkY7SUFDakQ7SUFDQSxJQUFJLENBQUNSLGdCQUFnQlgsaUJBQWlCVyxnQkFBZ0JWLGVBQWU7UUFDakUsTUFBTXFCLE1BQU0sTUFBTXhCLFlBQVl5QixpQkFBaUIsQ0FBQztZQUM1QzNCO1lBQ0FHO1FBQ0o7UUFDQSxPQUFPO1lBQ0h5QixRQUFRO1lBQ1JGO1lBQ0FHLGNBQWMsRUFBRTtZQUNoQkMsT0FBTzFCO1FBQ1g7SUFDSixPQUNLO1FBQ0QsTUFBTSxFQUFFc0IsR0FBRyxFQUFFRyxZQUFZLEVBQUUsR0FBRyxNQUFNM0IsWUFBWTZCLGdCQUFnQixDQUFDO1lBQzdEQyxlQUFlO1lBQ2ZDLGdCQUFnQjtZQUNoQkMsT0FBT2xCO1lBQ1BmO1lBQ0FEO1lBQ0FHO1FBQ0o7UUFDQSxPQUFPO1lBQ0h5QixRQUFRO1lBQ1JGO1lBQ0FHO1lBQ0FDLE9BQU9mO1FBQ1g7SUFDSjtBQUNKO0FBQ0EzQiw2QkFBNkIsR0FBR0k7QUFDaEMsZUFBZUQsbUJBQW1CLEVBQUU0QyxJQUFJLEVBQUVDLGNBQWMsRUFBRztJQUN2RCxNQUFNQyxNQUFNQyxLQUFLRCxHQUFHLEtBQUs7SUFDekIsTUFBTUUsYUFBYTtRQUNmRjtXQUNHRCxlQUFlSSxHQUFHLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsRUFBRSxDQUFDQyxRQUFRO0tBQzdDO0lBQ0QsTUFBTUMsYUFBYSxJQUFJQztJQUN2QixNQUFNQyxXQUFXLE9BQU9DO1FBQ3BCLE1BQU1DLE9BQU8sSUFBSVYsS0FBS1MsWUFBWSxPQUFPLHlDQUF5QztRQUNsRixNQUFNRSxxQkFBcUJELEtBQUtFLFdBQVcsSUFBSSx1Q0FBdUM7UUFDdEYsTUFBTUMsTUFBTSxDQUFDLGlEQUFpRCxFQUFFRixtQkFBbUIsQ0FBQztRQUNwRixNQUFNRyxXQUFXLE1BQU0sQ0FBQyxHQUFHckQsYUFBYXNELE9BQU8sRUFBRUY7UUFDakQsSUFBSUMsU0FBU0UsTUFBTSxLQUFLLEtBQUs7WUFDekIsTUFBTUMsT0FBTyxNQUFNSCxTQUFTSSxJQUFJO1lBQ2hDWixXQUFXYSxHQUFHLENBQUNWLFdBQVdRO1FBQzlCO0lBQ0o7SUFDQSxNQUFNRyxRQUFRQyxHQUFHLENBQUNwQixXQUFXQyxHQUFHLENBQUNNO0lBQ2pDLElBQUljLFlBQVk5RCxtQkFBbUIrRCxJQUFJO0lBQ3ZDLEtBQUssTUFBTUMsVUFBVTFCLGVBQWdCO1FBQ2pDLElBQUkwQixPQUFPQyxXQUFXLEtBQUssR0FBRztZQUMxQixJQUFJLENBQUMsR0FBR2xFLFFBQVFtRSxTQUFTLEVBQUVGLE9BQU9HLFNBQVMsRUFBRSxZQUFZO2dCQUNyREwsWUFBWUEsVUFBVU0sR0FBRyxDQUFDSixPQUFPOUQsTUFBTTtZQUMzQyxPQUNLO2dCQUNENEQsWUFBWUEsVUFBVU8sR0FBRyxDQUFDTCxPQUFPOUQsTUFBTTtZQUMzQztRQUNKLE9BQ0ssSUFBSThELE9BQU9DLFdBQVcsS0FBSyxHQUFHO1lBQy9CLE1BQU1LLFlBQVl4QixXQUFXeUIsR0FBRyxDQUFDUCxPQUFPcEIsRUFBRSxDQUFDQyxRQUFRO1lBQ25ELE1BQU0yQixjQUFjLElBQUkxRSxTQUFTMkUsRUFBRSxDQUFDSCxZQUFZM0UsVUFBVStFLGdCQUFnQjtZQUMxRSxNQUFNQyxZQUFZWCxPQUFPOUQsTUFBTSxDQUFDMEUsR0FBRyxDQUFDSixhQUFhSyxHQUFHLENBQUM3RSxtQkFBbUI4RSxrQkFBa0I7WUFDMUYsSUFBSSxDQUFDLEdBQUcvRSxRQUFRbUUsU0FBUyxFQUFFRixPQUFPRyxTQUFTLEVBQUUsWUFBWTtnQkFDckRMLFlBQVlBLFVBQVVNLEdBQUcsQ0FBQ087WUFDOUIsT0FDSztnQkFDRGIsWUFBWUEsVUFBVU8sR0FBRyxDQUFDTTtZQUM5QjtRQUNKO0lBQ0o7SUFDQSxNQUFNSSx5QkFBeUIsTUFBTTFDLEtBQUsyQyxjQUFjLENBQUM7SUFDekQsTUFBTUMsd0JBQXdCLE1BQU01QyxLQUFLMkMsY0FBYyxDQUFDO0lBQ3hELE1BQU1FLG1CQUFtQnBDLFdBQVd5QixHQUFHLENBQUNoQztJQUN4QyxNQUFNNEMscUJBQXFCLElBQUlyRixTQUFTMkUsRUFBRSxDQUFDUyxtQkFBbUJ2RixVQUFVK0UsZ0JBQWdCO0lBQ3hGWixZQUFZQSxVQUFVTyxHQUFHLENBQUNVLHVCQUF1QkgsR0FBRyxDQUFDTyxvQkFBb0JOLEdBQUcsQ0FBQzdFLG1CQUFtQjhFLGtCQUFrQjtJQUNsSGhCLFlBQVlBLFVBQVVPLEdBQUcsQ0FBQ1k7SUFDMUIsT0FBT25CO0FBQ1g7QUFDQXhFLDBCQUEwQixHQUFHRztBQUM3Qiw4RUFBOEU7QUFDOUUsU0FBU0QsNkNBQTZDNEYsaUJBQWlCLEVBQUVDLDBCQUEwQixFQUFFQyxlQUFlLEVBQUVDLDZCQUE2QixFQUFFQyxjQUFjO0lBQy9KLE1BQU1DLHdCQUF3QixnQ0FBaUNILGtCQUMxREQsQ0FBQUEsNkJBQTZCRCxvQkFBb0JJLGNBQWE7SUFDbkUsTUFBTUUsbUJBQW1CRixpQkFBaUJDO0lBQzFDLE9BQU9DO0FBQ1g7QUFDQXBHLG9EQUFvRCxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL3N1cGVyU3Rha2UuanM/MDMyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2FsY3VsYXRlRXN0aW1hdGVkU3VwZXJTdGFrZUxpcXVpZGF0aW9uUHJpY2UgPSBleHBvcnRzLmNhbGN1bGF0ZVNvbEVhcm5lZCA9IGV4cG9ydHMuZmluZEJlc3RTdXBlclN0YWtlSXhzID0gdm9pZCAwO1xuY29uc3Qgd2ViM19qc18xID0gcmVxdWlyZShcIkBzb2xhbmEvd2ViMy5qc1wiKTtcbmNvbnN0IG1hcmluYWRlXzEgPSByZXF1aXJlKFwiLi4vbWFyaW5hZGVcIik7XG5jb25zdCBhbmNob3JfMSA9IHJlcXVpcmUoXCJAY29yYWwteHl6L2FuY2hvclwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG5jb25zdCBudW1lcmljQ29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzL251bWVyaWNDb25zdGFudHNcIik7XG5jb25zdCBub2RlX2ZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm5vZGUtZmV0Y2hcIikpO1xuYXN5bmMgZnVuY3Rpb24gZmluZEJlc3RTdXBlclN0YWtlSXhzKHsgYW1vdW50LCBqdXBpdGVyQ2xpZW50LCBkcmlmdENsaWVudCwgdXNlckFjY291bnRQdWJsaWNLZXksIG1hcmluYWRlUHJpY2UsIGZvcmNlTWFyaW5hZGUsIG9ubHlEaXJlY3RSb3V0ZXMsIH0pIHtcbiAgICBpZiAoIW1hcmluYWRlUHJpY2UpIHtcbiAgICAgICAgY29uc3QgbWFyaW5hZGVQcm9ncmFtID0gKDAsIG1hcmluYWRlXzEuZ2V0TWFyaW5hZGVGaW5hbmNlUHJvZ3JhbSkoZHJpZnRDbGllbnQucHJvdmlkZXIpO1xuICAgICAgICBtYXJpbmFkZVByaWNlID0gYXdhaXQgKDAsIG1hcmluYWRlXzEuZ2V0TWFyaW5hZGVNU29sUHJpY2UpKG1hcmluYWRlUHJvZ3JhbSk7XG4gICAgfVxuICAgIGNvbnN0IHNvbE1pbnQgPSBkcmlmdENsaWVudC5nZXRTcG90TWFya2V0QWNjb3VudCgxKS5taW50O1xuICAgIGNvbnN0IG1TT0xNaW50ID0gZHJpZnRDbGllbnQuZ2V0U3BvdE1hcmtldEFjY291bnQoMikubWludDtcbiAgICBsZXQganVwaXRlclByaWNlO1xuICAgIGxldCBiZXN0Um91dGU7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QganVwaXRlclJvdXRlcyA9IGF3YWl0IGp1cGl0ZXJDbGllbnQuZ2V0Um91dGVzKHtcbiAgICAgICAgICAgIGlucHV0TWludDogc29sTWludCxcbiAgICAgICAgICAgIG91dHB1dE1pbnQ6IG1TT0xNaW50LFxuICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgb25seURpcmVjdFJvdXRlcyxcbiAgICAgICAgfSk7XG4gICAgICAgIGJlc3RSb3V0ZSA9IGp1cGl0ZXJSb3V0ZXNbMF07XG4gICAgICAgIGp1cGl0ZXJQcmljZSA9IGJlc3RSb3V0ZS5pbkFtb3VudCAvIGJlc3RSb3V0ZS5vdXRBbW91bnQ7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcganVwaXRlciBwcmljZScsIGUpO1xuICAgIH1cbiAgICBpZiAoIWp1cGl0ZXJQcmljZSB8fCBtYXJpbmFkZVByaWNlIDw9IGp1cGl0ZXJQcmljZSB8fCBmb3JjZU1hcmluYWRlKSB7XG4gICAgICAgIGNvbnN0IGl4cyA9IGF3YWl0IGRyaWZ0Q2xpZW50LmdldFN0YWtlRm9yTVNPTEl4KHtcbiAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgIHVzZXJBY2NvdW50UHVibGljS2V5LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ21hcmluYWRlJyxcbiAgICAgICAgICAgIGl4cyxcbiAgICAgICAgICAgIGxvb2t1cFRhYmxlczogW10sXG4gICAgICAgICAgICBwcmljZTogbWFyaW5hZGVQcmljZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgaXhzLCBsb29rdXBUYWJsZXMgfSA9IGF3YWl0IGRyaWZ0Q2xpZW50LmdldEp1cGl0ZXJTd2FwSXgoe1xuICAgICAgICAgICAgaW5NYXJrZXRJbmRleDogMSxcbiAgICAgICAgICAgIG91dE1hcmtldEluZGV4OiAyLFxuICAgICAgICAgICAgcm91dGU6IGJlc3RSb3V0ZSxcbiAgICAgICAgICAgIGp1cGl0ZXJDbGllbnQsXG4gICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICB1c2VyQWNjb3VudFB1YmxpY0tleSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXRob2Q6ICdqdXBpdGVyJyxcbiAgICAgICAgICAgIGl4cyxcbiAgICAgICAgICAgIGxvb2t1cFRhYmxlcyxcbiAgICAgICAgICAgIHByaWNlOiBqdXBpdGVyUHJpY2UsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5maW5kQmVzdFN1cGVyU3Rha2VJeHMgPSBmaW5kQmVzdFN1cGVyU3Rha2VJeHM7XG5hc3luYyBmdW5jdGlvbiBjYWxjdWxhdGVTb2xFYXJuZWQoeyB1c2VyLCBkZXBvc2l0UmVjb3JkcywgfSkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCkgLyAxMDAwO1xuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBbXG4gICAgICAgIG5vdyxcbiAgICAgICAgLi4uZGVwb3NpdFJlY29yZHMubWFwKChyKSA9PiByLnRzLnRvTnVtYmVyKCkpLFxuICAgIF07XG4gICAgY29uc3QgbXNvbFJhdGlvcyA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBnZXRQcmljZSA9IGFzeW5jICh0aW1lc3RhbXApID0+IHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCAqIDEwMDApOyAvLyBDb252ZXJ0IFVuaXggdGltZXN0YW1wIHRvIG1pbGxpc2Vjb25kc1xuICAgICAgICBjb25zdCBzd2FnZ2VyQXBpRGF0ZVRpbWUgPSBkYXRlLnRvSVNPU3RyaW5nKCk7IC8vIEZvcm1hdCBkYXRlIGFzIHN3YWdnZXIgQVBJIGRhdGUtdGltZVxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkubWFyaW5hZGUuZmluYW5jZS9tc29sL3ByaWNlX3NvbD90aW1lPSR7c3dhZ2dlckFwaURhdGVUaW1lfWA7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIG5vZGVfZmV0Y2hfMS5kZWZhdWx0KSh1cmwpO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICBtc29sUmF0aW9zLnNldCh0aW1lc3RhbXAsIGRhdGEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbCh0aW1lc3RhbXBzLm1hcChnZXRQcmljZSkpO1xuICAgIGxldCBzb2xFYXJuZWQgPSBudW1lcmljQ29uc3RhbnRzXzEuWkVSTztcbiAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiBkZXBvc2l0UmVjb3Jkcykge1xuICAgICAgICBpZiAocmVjb3JkLm1hcmtldEluZGV4ID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoKDAsIHR5cGVzXzEuaXNWYXJpYW50KShyZWNvcmQuZGlyZWN0aW9uLCAnZGVwb3NpdCcpKSB7XG4gICAgICAgICAgICAgICAgc29sRWFybmVkID0gc29sRWFybmVkLnN1YihyZWNvcmQuYW1vdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvbEVhcm5lZCA9IHNvbEVhcm5lZC5hZGQocmVjb3JkLmFtb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVjb3JkLm1hcmtldEluZGV4ID09PSAyKSB7XG4gICAgICAgICAgICBjb25zdCBtc29sUmF0aW8gPSBtc29sUmF0aW9zLmdldChyZWNvcmQudHMudG9OdW1iZXIoKSk7XG4gICAgICAgICAgICBjb25zdCBtc29sUmF0aW9CTiA9IG5ldyBhbmNob3JfMS5CTihtc29sUmF0aW8gKiB3ZWIzX2pzXzEuTEFNUE9SVFNfUEVSX1NPTCk7XG4gICAgICAgICAgICBjb25zdCBzb2xBbW91bnQgPSByZWNvcmQuYW1vdW50Lm11bChtc29sUmF0aW9CTikuZGl2KG51bWVyaWNDb25zdGFudHNfMS5MQU1QT1JUU19QUkVDSVNJT04pO1xuICAgICAgICAgICAgaWYgKCgwLCB0eXBlc18xLmlzVmFyaWFudCkocmVjb3JkLmRpcmVjdGlvbiwgJ2RlcG9zaXQnKSkge1xuICAgICAgICAgICAgICAgIHNvbEVhcm5lZCA9IHNvbEVhcm5lZC5zdWIoc29sQW1vdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvbEVhcm5lZCA9IHNvbEVhcm5lZC5hZGQoc29sQW1vdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjdXJyZW50TVNPTFRva2VuQW1vdW50ID0gYXdhaXQgdXNlci5nZXRUb2tlbkFtb3VudCgyKTtcbiAgICBjb25zdCBjdXJyZW50U09MVG9rZW5BbW91bnQgPSBhd2FpdCB1c2VyLmdldFRva2VuQW1vdW50KDEpO1xuICAgIGNvbnN0IGN1cnJlbnRNU09MUmF0aW8gPSBtc29sUmF0aW9zLmdldChub3cpO1xuICAgIGNvbnN0IGN1cnJlbnRNU09MUmF0aW9CTiA9IG5ldyBhbmNob3JfMS5CTihjdXJyZW50TVNPTFJhdGlvICogd2ViM19qc18xLkxBTVBPUlRTX1BFUl9TT0wpO1xuICAgIHNvbEVhcm5lZCA9IHNvbEVhcm5lZC5hZGQoY3VycmVudE1TT0xUb2tlbkFtb3VudC5tdWwoY3VycmVudE1TT0xSYXRpb0JOKS5kaXYobnVtZXJpY0NvbnN0YW50c18xLkxBTVBPUlRTX1BSRUNJU0lPTikpO1xuICAgIHNvbEVhcm5lZCA9IHNvbEVhcm5lZC5hZGQoY3VycmVudFNPTFRva2VuQW1vdW50KTtcbiAgICByZXR1cm4gc29sRWFybmVkO1xufVxuZXhwb3J0cy5jYWxjdWxhdGVTb2xFYXJuZWQgPSBjYWxjdWxhdGVTb2xFYXJuZWQ7XG4vLyBjYWxjdWxhdGUgZXN0aW1hdGVkIGxpcXVpZGF0aW9uIHByaWNlIChpbiBtU09ML1NPTCkgYmFzZWQgb24gdGFyZ2V0IGFtb3VudHNcbmZ1bmN0aW9uIGNhbGN1bGF0ZUVzdGltYXRlZFN1cGVyU3Rha2VMaXF1aWRhdGlvblByaWNlKG1zb2xEZXBvc2l0QW1vdW50LCBtc29sTWFpbnRlbmFuY2VBc3NldFdlaWdodCwgc29sQm9ycm93QW1vdW50LCBzb2xNYWludGVuYW5jZUxpYWJpbGl0eVdlaWdodCwgbXNvbFByaWNlUmF0aW8pIHtcbiAgICBjb25zdCBsaXF1aWRhdGlvbkRpdmVyZ2VuY2UgPSAoc29sTWFpbnRlbmFuY2VMaWFiaWxpdHlXZWlnaHQgKiBzb2xCb3Jyb3dBbW91bnQpIC9cbiAgICAgICAgKG1zb2xNYWludGVuYW5jZUFzc2V0V2VpZ2h0ICogbXNvbERlcG9zaXRBbW91bnQgKiBtc29sUHJpY2VSYXRpbyk7XG4gICAgY29uc3QgbGlxdWlkYXRpb25QcmljZSA9IG1zb2xQcmljZVJhdGlvICogbGlxdWlkYXRpb25EaXZlcmdlbmNlO1xuICAgIHJldHVybiBsaXF1aWRhdGlvblByaWNlO1xufVxuZXhwb3J0cy5jYWxjdWxhdGVFc3RpbWF0ZWRTdXBlclN0YWtlTGlxdWlkYXRpb25QcmljZSA9IGNhbGN1bGF0ZUVzdGltYXRlZFN1cGVyU3Rha2VMaXF1aWRhdGlvblByaWNlO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNhbGN1bGF0ZUVzdGltYXRlZFN1cGVyU3Rha2VMaXF1aWRhdGlvblByaWNlIiwiY2FsY3VsYXRlU29sRWFybmVkIiwiZmluZEJlc3RTdXBlclN0YWtlSXhzIiwid2ViM19qc18xIiwicmVxdWlyZSIsIm1hcmluYWRlXzEiLCJhbmNob3JfMSIsInR5cGVzXzEiLCJudW1lcmljQ29uc3RhbnRzXzEiLCJub2RlX2ZldGNoXzEiLCJhbW91bnQiLCJqdXBpdGVyQ2xpZW50IiwiZHJpZnRDbGllbnQiLCJ1c2VyQWNjb3VudFB1YmxpY0tleSIsIm1hcmluYWRlUHJpY2UiLCJmb3JjZU1hcmluYWRlIiwib25seURpcmVjdFJvdXRlcyIsIm1hcmluYWRlUHJvZ3JhbSIsImdldE1hcmluYWRlRmluYW5jZVByb2dyYW0iLCJwcm92aWRlciIsImdldE1hcmluYWRlTVNvbFByaWNlIiwic29sTWludCIsImdldFNwb3RNYXJrZXRBY2NvdW50IiwibWludCIsIm1TT0xNaW50IiwianVwaXRlclByaWNlIiwiYmVzdFJvdXRlIiwianVwaXRlclJvdXRlcyIsImdldFJvdXRlcyIsImlucHV0TWludCIsIm91dHB1dE1pbnQiLCJpbkFtb3VudCIsIm91dEFtb3VudCIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJpeHMiLCJnZXRTdGFrZUZvck1TT0xJeCIsIm1ldGhvZCIsImxvb2t1cFRhYmxlcyIsInByaWNlIiwiZ2V0SnVwaXRlclN3YXBJeCIsImluTWFya2V0SW5kZXgiLCJvdXRNYXJrZXRJbmRleCIsInJvdXRlIiwidXNlciIsImRlcG9zaXRSZWNvcmRzIiwibm93IiwiRGF0ZSIsInRpbWVzdGFtcHMiLCJtYXAiLCJyIiwidHMiLCJ0b051bWJlciIsIm1zb2xSYXRpb3MiLCJNYXAiLCJnZXRQcmljZSIsInRpbWVzdGFtcCIsImRhdGUiLCJzd2FnZ2VyQXBpRGF0ZVRpbWUiLCJ0b0lTT1N0cmluZyIsInVybCIsInJlc3BvbnNlIiwiZGVmYXVsdCIsInN0YXR1cyIsImRhdGEiLCJqc29uIiwic2V0IiwiUHJvbWlzZSIsImFsbCIsInNvbEVhcm5lZCIsIlpFUk8iLCJyZWNvcmQiLCJtYXJrZXRJbmRleCIsImlzVmFyaWFudCIsImRpcmVjdGlvbiIsInN1YiIsImFkZCIsIm1zb2xSYXRpbyIsImdldCIsIm1zb2xSYXRpb0JOIiwiQk4iLCJMQU1QT1JUU19QRVJfU09MIiwic29sQW1vdW50IiwibXVsIiwiZGl2IiwiTEFNUE9SVFNfUFJFQ0lTSU9OIiwiY3VycmVudE1TT0xUb2tlbkFtb3VudCIsImdldFRva2VuQW1vdW50IiwiY3VycmVudFNPTFRva2VuQW1vdW50IiwiY3VycmVudE1TT0xSYXRpbyIsImN1cnJlbnRNU09MUmF0aW9CTiIsIm1zb2xEZXBvc2l0QW1vdW50IiwibXNvbE1haW50ZW5hbmNlQXNzZXRXZWlnaHQiLCJzb2xCb3Jyb3dBbW91bnQiLCJzb2xNYWludGVuYW5jZUxpYWJpbGl0eVdlaWdodCIsIm1zb2xQcmljZVJhdGlvIiwibGlxdWlkYXRpb25EaXZlcmdlbmNlIiwibGlxdWlkYXRpb25QcmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/superStake.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/tiers.js":
/*!********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/tiers.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.perpTierIsAsSafeAs = exports.getSpotMarketTierNumber = exports.getPerpMarketTierNumber = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nfunction getPerpMarketTierNumber(perpMarket) {\n    if ((0, types_1.isVariant)(perpMarket.contractTier, \"a\")) {\n        return 0;\n    } else if ((0, types_1.isVariant)(perpMarket.contractTier, \"b\")) {\n        return 1;\n    } else if ((0, types_1.isVariant)(perpMarket.contractTier, \"c\")) {\n        return 2;\n    } else if ((0, types_1.isVariant)(perpMarket.contractTier, \"speculative\")) {\n        return 3;\n    } else if ((0, types_1.isVariant)(perpMarket.contractTier, \"isolated\")) {\n        return 4;\n    } else {\n        return 5;\n    }\n}\nexports.getPerpMarketTierNumber = getPerpMarketTierNumber;\nfunction getSpotMarketTierNumber(spotMarket) {\n    if ((0, types_1.isVariant)(spotMarket.assetTier, \"collateral\")) {\n        return 0;\n    } else if ((0, types_1.isVariant)(spotMarket.assetTier, \"protected\")) {\n        return 1;\n    } else if ((0, types_1.isVariant)(spotMarket.assetTier, \"cross\")) {\n        return 2;\n    } else if ((0, types_1.isVariant)(spotMarket.assetTier, \"isolated\")) {\n        return 3;\n    } else if ((0, types_1.isVariant)(spotMarket.assetTier, \"unlisted\")) {\n        return 4;\n    } else {\n        return 5;\n    }\n}\nexports.getSpotMarketTierNumber = getSpotMarketTierNumber;\nfunction perpTierIsAsSafeAs(perpTier, otherPerpTier, otherSpotTier) {\n    const asSafeAsPerp = perpTier <= otherPerpTier;\n    const asSafeAsSpot = otherSpotTier === 4 || otherSpotTier >= 2 && perpTier <= 2;\n    return asSafeAsSpot && asSafeAsPerp;\n}\nexports.perpTierIsAsSafeAs = perpTierIsAsSafeAs;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL3RpZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBR0EsK0JBQStCLEdBQUdBLCtCQUErQixHQUFHLEtBQUs7QUFDdEcsTUFBTUssVUFBVUMsbUJBQU9BLENBQUMsbUVBQVU7QUFDbEMsU0FBU0Ysd0JBQXdCRyxVQUFVO0lBQ3ZDLElBQUksQ0FBQyxHQUFHRixRQUFRRyxTQUFTLEVBQUVELFdBQVdFLFlBQVksRUFBRSxNQUFNO1FBQ3RELE9BQU87SUFDWCxPQUNLLElBQUksQ0FBQyxHQUFHSixRQUFRRyxTQUFTLEVBQUVELFdBQVdFLFlBQVksRUFBRSxNQUFNO1FBQzNELE9BQU87SUFDWCxPQUNLLElBQUksQ0FBQyxHQUFHSixRQUFRRyxTQUFTLEVBQUVELFdBQVdFLFlBQVksRUFBRSxNQUFNO1FBQzNELE9BQU87SUFDWCxPQUNLLElBQUksQ0FBQyxHQUFHSixRQUFRRyxTQUFTLEVBQUVELFdBQVdFLFlBQVksRUFBRSxnQkFBZ0I7UUFDckUsT0FBTztJQUNYLE9BQ0ssSUFBSSxDQUFDLEdBQUdKLFFBQVFHLFNBQVMsRUFBRUQsV0FBV0UsWUFBWSxFQUFFLGFBQWE7UUFDbEUsT0FBTztJQUNYLE9BQ0s7UUFDRCxPQUFPO0lBQ1g7QUFDSjtBQUNBVCwrQkFBK0IsR0FBR0k7QUFDbEMsU0FBU0Qsd0JBQXdCTyxVQUFVO0lBQ3ZDLElBQUksQ0FBQyxHQUFHTCxRQUFRRyxTQUFTLEVBQUVFLFdBQVdDLFNBQVMsRUFBRSxlQUFlO1FBQzVELE9BQU87SUFDWCxPQUNLLElBQUksQ0FBQyxHQUFHTixRQUFRRyxTQUFTLEVBQUVFLFdBQVdDLFNBQVMsRUFBRSxjQUFjO1FBQ2hFLE9BQU87SUFDWCxPQUNLLElBQUksQ0FBQyxHQUFHTixRQUFRRyxTQUFTLEVBQUVFLFdBQVdDLFNBQVMsRUFBRSxVQUFVO1FBQzVELE9BQU87SUFDWCxPQUNLLElBQUksQ0FBQyxHQUFHTixRQUFRRyxTQUFTLEVBQUVFLFdBQVdDLFNBQVMsRUFBRSxhQUFhO1FBQy9ELE9BQU87SUFDWCxPQUNLLElBQUksQ0FBQyxHQUFHTixRQUFRRyxTQUFTLEVBQUVFLFdBQVdDLFNBQVMsRUFBRSxhQUFhO1FBQy9ELE9BQU87SUFDWCxPQUNLO1FBQ0QsT0FBTztJQUNYO0FBQ0o7QUFDQVgsK0JBQStCLEdBQUdHO0FBQ2xDLFNBQVNELG1CQUFtQlUsUUFBUSxFQUFFQyxhQUFhLEVBQUVDLGFBQWE7SUFDOUQsTUFBTUMsZUFBZUgsWUFBWUM7SUFDakMsTUFBTUcsZUFBZUYsa0JBQWtCLEtBQU1BLGlCQUFpQixLQUFLRixZQUFZO0lBQy9FLE9BQU9JLGdCQUFnQkQ7QUFDM0I7QUFDQWYsMEJBQTBCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL21hdGgvdGllcnMuanM/YmQ0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGVycFRpZXJJc0FzU2FmZUFzID0gZXhwb3J0cy5nZXRTcG90TWFya2V0VGllck51bWJlciA9IGV4cG9ydHMuZ2V0UGVycE1hcmtldFRpZXJOdW1iZXIgPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL3R5cGVzXCIpO1xuZnVuY3Rpb24gZ2V0UGVycE1hcmtldFRpZXJOdW1iZXIocGVycE1hcmtldCkge1xuICAgIGlmICgoMCwgdHlwZXNfMS5pc1ZhcmlhbnQpKHBlcnBNYXJrZXQuY29udHJhY3RUaWVyLCAnYScpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgdHlwZXNfMS5pc1ZhcmlhbnQpKHBlcnBNYXJrZXQuY29udHJhY3RUaWVyLCAnYicpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgdHlwZXNfMS5pc1ZhcmlhbnQpKHBlcnBNYXJrZXQuY29udHJhY3RUaWVyLCAnYycpKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgdHlwZXNfMS5pc1ZhcmlhbnQpKHBlcnBNYXJrZXQuY29udHJhY3RUaWVyLCAnc3BlY3VsYXRpdmUnKSkge1xuICAgICAgICByZXR1cm4gMztcbiAgICB9XG4gICAgZWxzZSBpZiAoKDAsIHR5cGVzXzEuaXNWYXJpYW50KShwZXJwTWFya2V0LmNvbnRyYWN0VGllciwgJ2lzb2xhdGVkJykpIHtcbiAgICAgICAgcmV0dXJuIDQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gNTtcbiAgICB9XG59XG5leHBvcnRzLmdldFBlcnBNYXJrZXRUaWVyTnVtYmVyID0gZ2V0UGVycE1hcmtldFRpZXJOdW1iZXI7XG5mdW5jdGlvbiBnZXRTcG90TWFya2V0VGllck51bWJlcihzcG90TWFya2V0KSB7XG4gICAgaWYgKCgwLCB0eXBlc18xLmlzVmFyaWFudCkoc3BvdE1hcmtldC5hc3NldFRpZXIsICdjb2xsYXRlcmFsJykpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCB0eXBlc18xLmlzVmFyaWFudCkoc3BvdE1hcmtldC5hc3NldFRpZXIsICdwcm90ZWN0ZWQnKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKDAsIHR5cGVzXzEuaXNWYXJpYW50KShzcG90TWFya2V0LmFzc2V0VGllciwgJ2Nyb3NzJykpIHtcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCB0eXBlc18xLmlzVmFyaWFudCkoc3BvdE1hcmtldC5hc3NldFRpZXIsICdpc29sYXRlZCcpKSB7XG4gICAgICAgIHJldHVybiAzO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgdHlwZXNfMS5pc1ZhcmlhbnQpKHNwb3RNYXJrZXQuYXNzZXRUaWVyLCAndW5saXN0ZWQnKSkge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiA1O1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0U3BvdE1hcmtldFRpZXJOdW1iZXIgPSBnZXRTcG90TWFya2V0VGllck51bWJlcjtcbmZ1bmN0aW9uIHBlcnBUaWVySXNBc1NhZmVBcyhwZXJwVGllciwgb3RoZXJQZXJwVGllciwgb3RoZXJTcG90VGllcikge1xuICAgIGNvbnN0IGFzU2FmZUFzUGVycCA9IHBlcnBUaWVyIDw9IG90aGVyUGVycFRpZXI7XG4gICAgY29uc3QgYXNTYWZlQXNTcG90ID0gb3RoZXJTcG90VGllciA9PT0gNCB8fCAob3RoZXJTcG90VGllciA+PSAyICYmIHBlcnBUaWVyIDw9IDIpO1xuICAgIHJldHVybiBhc1NhZmVBc1Nwb3QgJiYgYXNTYWZlQXNQZXJwO1xufVxuZXhwb3J0cy5wZXJwVGllcklzQXNTYWZlQXMgPSBwZXJwVGllcklzQXNTYWZlQXM7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwZXJwVGllcklzQXNTYWZlQXMiLCJnZXRTcG90TWFya2V0VGllck51bWJlciIsImdldFBlcnBNYXJrZXRUaWVyTnVtYmVyIiwidHlwZXNfMSIsInJlcXVpcmUiLCJwZXJwTWFya2V0IiwiaXNWYXJpYW50IiwiY29udHJhY3RUaWVyIiwic3BvdE1hcmtldCIsImFzc2V0VGllciIsInBlcnBUaWVyIiwib3RoZXJQZXJwVGllciIsIm90aGVyU3BvdFRpZXIiLCJhc1NhZmVBc1BlcnAiLCJhc1NhZmVBc1Nwb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/tiers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/trade.js":
/*!********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/trade.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateEstimatedEntryPriceWithL2 = exports.calculateEstimatedSpotEntryPrice = exports.calculateEstimatedPerpEntryPrice = exports.calculateTargetPriceTrade = exports.calculateTradeAcquiredAmounts = exports.calculateTradeSlippage = void 0;\nconst types_1 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst assert_1 = __webpack_require__(/*! ../assert/assert */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/assert/assert.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst market_1 = __webpack_require__(/*! ./market */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/market.js\");\nconst amm_1 = __webpack_require__(/*! ./amm */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/amm.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/utils.js\");\nconst types_2 = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst MAXPCT = new anchor_1.BN(1000); //percentage units are [0,1000] => [0,1]\n/**\n * Calculates avg/max slippage (price impact) for candidate trade\n *\n * @deprecated use calculateEstimatedPerpEntryPrice instead\n *\n * @param direction\n * @param amount\n * @param market\n * @param inputAssetType which asset is being traded\n * @param useSpread whether to consider spread with calculating slippage\n * @return [pctAvgSlippage, pctMaxSlippage, entryPrice, newPrice]\n *\n * 'pctAvgSlippage' =>  the percentage change to entryPrice (average est slippage in execution) : Precision PRICE_PRECISION\n *\n * 'pctMaxSlippage' =>  the percentage change to maxPrice (highest est slippage in execution) : Precision PRICE_PRECISION\n *\n * 'entryPrice' => the average price of the trade : Precision PRICE_PRECISION\n *\n * 'newPrice' => the price of the asset after the trade : Precision PRICE_PRECISION\n */ function calculateTradeSlippage(direction, amount, market, inputAssetType = \"quote\", oraclePriceData, useSpread = true) {\n    let oldPrice;\n    if (useSpread && market.amm.baseSpread > 0) {\n        if ((0, types_2.isVariant)(direction, \"long\")) {\n            oldPrice = (0, market_1.calculateAskPrice)(market, oraclePriceData);\n        } else {\n            oldPrice = (0, market_1.calculateBidPrice)(market, oraclePriceData);\n        }\n    } else {\n        oldPrice = (0, market_1.calculateReservePrice)(market, oraclePriceData);\n    }\n    if (amount.eq(numericConstants_1.ZERO)) {\n        return [\n            numericConstants_1.ZERO,\n            numericConstants_1.ZERO,\n            oldPrice,\n            oldPrice\n        ];\n    }\n    const [acquiredBaseReserve, acquiredQuoteReserve, acquiredQuoteAssetAmount] = calculateTradeAcquiredAmounts(direction, amount, market, inputAssetType, oraclePriceData, useSpread);\n    const entryPrice = acquiredQuoteAssetAmount.mul(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO).mul(numericConstants_1.PRICE_PRECISION).div(acquiredBaseReserve.abs());\n    let amm;\n    if (useSpread && market.amm.baseSpread > 0) {\n        const { baseAssetReserve, quoteAssetReserve, sqrtK, newPeg } = (0, amm_1.calculateUpdatedAMMSpreadReserves)(market.amm, direction, oraclePriceData);\n        amm = {\n            baseAssetReserve,\n            quoteAssetReserve,\n            sqrtK: sqrtK,\n            pegMultiplier: newPeg\n        };\n    } else {\n        amm = market.amm;\n    }\n    const newPrice = (0, amm_1.calculatePrice)(amm.baseAssetReserve.sub(acquiredBaseReserve), amm.quoteAssetReserve.sub(acquiredQuoteReserve), amm.pegMultiplier);\n    if (direction == types_1.PositionDirection.SHORT) {\n        (0, assert_1.assert)(newPrice.lte(oldPrice));\n    } else {\n        (0, assert_1.assert)(oldPrice.lte(newPrice));\n    }\n    const pctMaxSlippage = newPrice.sub(oldPrice).mul(numericConstants_1.PRICE_PRECISION).div(oldPrice).abs();\n    const pctAvgSlippage = entryPrice.sub(oldPrice).mul(numericConstants_1.PRICE_PRECISION).div(oldPrice).abs();\n    return [\n        pctAvgSlippage,\n        pctMaxSlippage,\n        entryPrice,\n        newPrice\n    ];\n}\nexports.calculateTradeSlippage = calculateTradeSlippage;\n/**\n * Calculates acquired amounts for trade executed\n * @param direction\n * @param amount\n * @param market\n * @param inputAssetType\n * @param useSpread\n * @return\n * \t| 'acquiredBase' =>  positive/negative change in user's base : BN AMM_RESERVE_PRECISION\n * \t| 'acquiredQuote' => positive/negative change in user's quote : BN TODO-PRECISION\n */ function calculateTradeAcquiredAmounts(direction, amount, market, inputAssetType = \"quote\", oraclePriceData, useSpread = true) {\n    if (amount.eq(numericConstants_1.ZERO)) {\n        return [\n            numericConstants_1.ZERO,\n            numericConstants_1.ZERO,\n            numericConstants_1.ZERO\n        ];\n    }\n    const swapDirection = (0, amm_1.getSwapDirection)(inputAssetType, direction);\n    let amm;\n    if (useSpread && market.amm.baseSpread > 0) {\n        const { baseAssetReserve, quoteAssetReserve, sqrtK, newPeg } = (0, amm_1.calculateUpdatedAMMSpreadReserves)(market.amm, direction, oraclePriceData);\n        amm = {\n            baseAssetReserve,\n            quoteAssetReserve,\n            sqrtK: sqrtK,\n            pegMultiplier: newPeg\n        };\n    } else {\n        amm = market.amm;\n    }\n    const [newQuoteAssetReserve, newBaseAssetReserve] = (0, amm_1.calculateAmmReservesAfterSwap)(amm, inputAssetType, amount, swapDirection);\n    const acquiredBase = amm.baseAssetReserve.sub(newBaseAssetReserve);\n    const acquiredQuote = amm.quoteAssetReserve.sub(newQuoteAssetReserve);\n    const acquiredQuoteAssetAmount = (0, amm_1.calculateQuoteAssetAmountSwapped)(acquiredQuote.abs(), amm.pegMultiplier, swapDirection);\n    return [\n        acquiredBase,\n        acquiredQuote,\n        acquiredQuoteAssetAmount\n    ];\n}\nexports.calculateTradeAcquiredAmounts = calculateTradeAcquiredAmounts;\n/**\n * calculateTargetPriceTrade\n * simple function for finding arbitraging trades\n *\n * @deprecated\n *\n * @param market\n * @param targetPrice\n * @param pct optional default is 100% gap filling, can set smaller.\n * @param outputAssetType which asset to trade.\n * @param useSpread whether or not to consider the spread when calculating the trade size\n * @returns trade direction/size in order to push price to a targetPrice,\n *\n * [\n *   direction => direction of trade required, PositionDirection\n *   tradeSize => size of trade required, TODO-PRECISION\n *   entryPrice => the entry price for the trade, PRICE_PRECISION\n *   targetPrice => the target price PRICE_PRECISION\n * ]\n */ function calculateTargetPriceTrade(market, targetPrice, pct = MAXPCT, outputAssetType = \"quote\", oraclePriceData, useSpread = true) {\n    (0, assert_1.assert)(market.amm.baseAssetReserve.gt(numericConstants_1.ZERO));\n    (0, assert_1.assert)(targetPrice.gt(numericConstants_1.ZERO));\n    (0, assert_1.assert)(pct.lte(MAXPCT) && pct.gt(numericConstants_1.ZERO));\n    const reservePriceBefore = (0, market_1.calculateReservePrice)(market, oraclePriceData);\n    const bidPriceBefore = (0, market_1.calculateBidPrice)(market, oraclePriceData);\n    const askPriceBefore = (0, market_1.calculateAskPrice)(market, oraclePriceData);\n    let direction;\n    if (targetPrice.gt(reservePriceBefore)) {\n        const priceGap = targetPrice.sub(reservePriceBefore);\n        const priceGapScaled = priceGap.mul(pct).div(MAXPCT);\n        targetPrice = reservePriceBefore.add(priceGapScaled);\n        direction = types_1.PositionDirection.LONG;\n    } else {\n        const priceGap = reservePriceBefore.sub(targetPrice);\n        const priceGapScaled = priceGap.mul(pct).div(MAXPCT);\n        targetPrice = reservePriceBefore.sub(priceGapScaled);\n        direction = types_1.PositionDirection.SHORT;\n    }\n    let tradeSize;\n    let baseSize;\n    let baseAssetReserveBefore;\n    let quoteAssetReserveBefore;\n    let peg = market.amm.pegMultiplier;\n    if (useSpread && market.amm.baseSpread > 0) {\n        const { baseAssetReserve, quoteAssetReserve, newPeg } = (0, amm_1.calculateUpdatedAMMSpreadReserves)(market.amm, direction, oraclePriceData);\n        baseAssetReserveBefore = baseAssetReserve;\n        quoteAssetReserveBefore = quoteAssetReserve;\n        peg = newPeg;\n    } else {\n        baseAssetReserveBefore = market.amm.baseAssetReserve;\n        quoteAssetReserveBefore = market.amm.quoteAssetReserve;\n    }\n    const invariant = market.amm.sqrtK.mul(market.amm.sqrtK);\n    const k = invariant.mul(numericConstants_1.PRICE_PRECISION);\n    let baseAssetReserveAfter;\n    let quoteAssetReserveAfter;\n    const biasModifier = new anchor_1.BN(1);\n    let markPriceAfter;\n    if (useSpread && targetPrice.lt(askPriceBefore) && targetPrice.gt(bidPriceBefore)) {\n        // no trade, market is at target\n        if (reservePriceBefore.gt(targetPrice)) {\n            direction = types_1.PositionDirection.SHORT;\n        } else {\n            direction = types_1.PositionDirection.LONG;\n        }\n        tradeSize = numericConstants_1.ZERO;\n        return [\n            direction,\n            tradeSize,\n            targetPrice,\n            targetPrice\n        ];\n    } else if (reservePriceBefore.gt(targetPrice)) {\n        // overestimate y2\n        baseAssetReserveAfter = (0, utils_1.squareRootBN)(k.div(targetPrice).mul(peg).div(numericConstants_1.PEG_PRECISION).sub(biasModifier)).sub(new anchor_1.BN(1));\n        quoteAssetReserveAfter = k.div(numericConstants_1.PRICE_PRECISION).div(baseAssetReserveAfter);\n        markPriceAfter = (0, amm_1.calculatePrice)(baseAssetReserveAfter, quoteAssetReserveAfter, peg);\n        direction = types_1.PositionDirection.SHORT;\n        tradeSize = quoteAssetReserveBefore.sub(quoteAssetReserveAfter).mul(peg).div(numericConstants_1.PEG_PRECISION).div(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO);\n        baseSize = baseAssetReserveAfter.sub(baseAssetReserveBefore);\n    } else if (reservePriceBefore.lt(targetPrice)) {\n        // underestimate y2\n        baseAssetReserveAfter = (0, utils_1.squareRootBN)(k.div(targetPrice).mul(peg).div(numericConstants_1.PEG_PRECISION).add(biasModifier)).add(new anchor_1.BN(1));\n        quoteAssetReserveAfter = k.div(numericConstants_1.PRICE_PRECISION).div(baseAssetReserveAfter);\n        markPriceAfter = (0, amm_1.calculatePrice)(baseAssetReserveAfter, quoteAssetReserveAfter, peg);\n        direction = types_1.PositionDirection.LONG;\n        tradeSize = quoteAssetReserveAfter.sub(quoteAssetReserveBefore).mul(peg).div(numericConstants_1.PEG_PRECISION).div(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO);\n        baseSize = baseAssetReserveBefore.sub(baseAssetReserveAfter);\n    } else {\n        // no trade, market is at target\n        direction = types_1.PositionDirection.LONG;\n        tradeSize = numericConstants_1.ZERO;\n        return [\n            direction,\n            tradeSize,\n            targetPrice,\n            targetPrice\n        ];\n    }\n    let tp1 = targetPrice;\n    let tp2 = markPriceAfter;\n    let originalDiff = targetPrice.sub(reservePriceBefore);\n    if (direction == types_1.PositionDirection.SHORT) {\n        tp1 = markPriceAfter;\n        tp2 = targetPrice;\n        originalDiff = reservePriceBefore.sub(targetPrice);\n    }\n    const entryPrice = tradeSize.mul(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO).mul(numericConstants_1.PRICE_PRECISION).div(baseSize.abs());\n    (0, assert_1.assert)(tp1.sub(tp2).lte(originalDiff), \"Target Price Calculation incorrect\");\n    (0, assert_1.assert)(tp2.lte(tp1) || tp2.sub(tp1).abs() < 100000, \"Target Price Calculation incorrect\" + tp2.toString() + \">=\" + tp1.toString() + \"err: \" + tp2.sub(tp1).abs().toString());\n    if (outputAssetType == \"quote\") {\n        return [\n            direction,\n            tradeSize,\n            entryPrice,\n            targetPrice\n        ];\n    } else {\n        return [\n            direction,\n            baseSize,\n            entryPrice,\n            targetPrice\n        ];\n    }\n}\nexports.calculateTargetPriceTrade = calculateTargetPriceTrade;\n/**\n * Calculates the estimated entry price and price impact of order, in base or quote\n * Price impact is based on the difference between the entry price and the best bid/ask price (whether it's dlob or vamm)\n *\n * @param assetType\n * @param amount\n * @param direction\n * @param market\n * @param oraclePriceData\n * @param dlob\n * @param slot\n * @param usersToSkip\n */ function calculateEstimatedPerpEntryPrice(assetType, amount, direction, market, oraclePriceData, dlob, slot, usersToSkip = new Map()) {\n    if (amount.eq(numericConstants_1.ZERO)) {\n        return {\n            entryPrice: numericConstants_1.ZERO,\n            priceImpact: numericConstants_1.ZERO,\n            bestPrice: numericConstants_1.ZERO,\n            worstPrice: numericConstants_1.ZERO,\n            baseFilled: numericConstants_1.ZERO,\n            quoteFilled: numericConstants_1.ZERO\n        };\n    }\n    const takerIsLong = (0, types_2.isVariant)(direction, \"long\");\n    const limitOrders = dlob[takerIsLong ? \"getMakerLimitAsks\" : \"getMakerLimitBids\"](market.marketIndex, slot, types_1.MarketType.PERP, oraclePriceData, takerIsLong ? (0, market_1.calculateBidPrice)(market, oraclePriceData) : (0, market_1.calculateAskPrice)(market, oraclePriceData));\n    const swapDirection = (0, amm_1.getSwapDirection)(assetType, direction);\n    const { baseAssetReserve, quoteAssetReserve, sqrtK, newPeg } = (0, amm_1.calculateUpdatedAMMSpreadReserves)(market.amm, direction, oraclePriceData);\n    const amm = {\n        baseAssetReserve,\n        quoteAssetReserve,\n        sqrtK: sqrtK,\n        pegMultiplier: newPeg\n    };\n    const [ammBids, ammAsks] = (0, amm_1.calculateMarketOpenBidAsk)(market.amm.baseAssetReserve, market.amm.minBaseAssetReserve, market.amm.maxBaseAssetReserve, market.amm.orderStepSize);\n    let ammLiquidity;\n    if (assetType === \"base\") {\n        ammLiquidity = takerIsLong ? ammAsks.abs() : ammBids;\n    } else {\n        const [afterSwapQuoteReserves, _] = (0, amm_1.calculateAmmReservesAfterSwap)(amm, \"base\", takerIsLong ? ammAsks.abs() : ammBids, (0, amm_1.getSwapDirection)(\"base\", direction));\n        ammLiquidity = (0, amm_1.calculateQuoteAssetAmountSwapped)(amm.quoteAssetReserve.sub(afterSwapQuoteReserves).abs(), amm.pegMultiplier, swapDirection);\n    }\n    const invariant = amm.sqrtK.mul(amm.sqrtK);\n    let bestPrice = (0, amm_1.calculatePrice)(amm.baseAssetReserve, amm.quoteAssetReserve, amm.pegMultiplier);\n    let cumulativeBaseFilled = numericConstants_1.ZERO;\n    let cumulativeQuoteFilled = numericConstants_1.ZERO;\n    let limitOrder = limitOrders.next().value;\n    if (limitOrder) {\n        const limitOrderPrice = limitOrder.getPrice(oraclePriceData, slot);\n        bestPrice = takerIsLong ? anchor_1.BN.min(limitOrderPrice, bestPrice) : anchor_1.BN.max(limitOrderPrice, bestPrice);\n    }\n    let worstPrice = bestPrice;\n    if (assetType === \"base\") {\n        while(!cumulativeBaseFilled.eq(amount) && (ammLiquidity.gt(numericConstants_1.ZERO) || limitOrder)){\n            const limitOrderPrice = limitOrder === null || limitOrder === void 0 ? void 0 : limitOrder.getPrice(oraclePriceData, slot);\n            let maxAmmFill;\n            if (limitOrderPrice) {\n                const newBaseReserves = (0, utils_1.squareRootBN)(invariant.mul(numericConstants_1.PRICE_PRECISION).mul(amm.pegMultiplier).div(limitOrderPrice).div(numericConstants_1.PEG_PRECISION));\n                // will be zero if the limit order price is better than the amm price\n                maxAmmFill = takerIsLong ? amm.baseAssetReserve.sub(newBaseReserves) : newBaseReserves.sub(amm.baseAssetReserve);\n            } else {\n                maxAmmFill = amount.sub(cumulativeBaseFilled);\n            }\n            maxAmmFill = anchor_1.BN.min(maxAmmFill, ammLiquidity);\n            if (maxAmmFill.gt(numericConstants_1.ZERO)) {\n                const baseFilled = anchor_1.BN.min(amount.sub(cumulativeBaseFilled), maxAmmFill);\n                const [afterSwapQuoteReserves, afterSwapBaseReserves] = (0, amm_1.calculateAmmReservesAfterSwap)(amm, \"base\", baseFilled, swapDirection);\n                ammLiquidity = ammLiquidity.sub(baseFilled);\n                const quoteFilled = (0, amm_1.calculateQuoteAssetAmountSwapped)(amm.quoteAssetReserve.sub(afterSwapQuoteReserves).abs(), amm.pegMultiplier, swapDirection);\n                cumulativeBaseFilled = cumulativeBaseFilled.add(baseFilled);\n                cumulativeQuoteFilled = cumulativeQuoteFilled.add(quoteFilled);\n                amm.baseAssetReserve = afterSwapBaseReserves;\n                amm.quoteAssetReserve = afterSwapQuoteReserves;\n                worstPrice = (0, amm_1.calculatePrice)(amm.baseAssetReserve, amm.quoteAssetReserve, amm.pegMultiplier);\n                if (cumulativeBaseFilled.eq(amount)) {\n                    break;\n                }\n            }\n            if (!limitOrder) {\n                continue;\n            }\n            if (usersToSkip.has(limitOrder.userAccount)) {\n                continue;\n            }\n            const baseFilled = anchor_1.BN.min(limitOrder.order.baseAssetAmount.sub(limitOrder.order.baseAssetAmountFilled), amount.sub(cumulativeBaseFilled));\n            const quoteFilled = baseFilled.mul(limitOrderPrice).div(numericConstants_1.BASE_PRECISION);\n            cumulativeBaseFilled = cumulativeBaseFilled.add(baseFilled);\n            cumulativeQuoteFilled = cumulativeQuoteFilled.add(quoteFilled);\n            worstPrice = limitOrderPrice;\n            if (cumulativeBaseFilled.eq(amount)) {\n                break;\n            }\n            limitOrder = limitOrders.next().value;\n        }\n    } else {\n        while(!cumulativeQuoteFilled.eq(amount) && (ammLiquidity.gt(numericConstants_1.ZERO) || limitOrder)){\n            const limitOrderPrice = limitOrder === null || limitOrder === void 0 ? void 0 : limitOrder.getPrice(oraclePriceData, slot);\n            let maxAmmFill;\n            if (limitOrderPrice) {\n                const newQuoteReserves = (0, utils_1.squareRootBN)(invariant.mul(numericConstants_1.PEG_PRECISION).mul(limitOrderPrice).div(amm.pegMultiplier).div(numericConstants_1.PRICE_PRECISION));\n                // will be zero if the limit order price is better than the amm price\n                maxAmmFill = takerIsLong ? newQuoteReserves.sub(amm.quoteAssetReserve) : amm.quoteAssetReserve.sub(newQuoteReserves);\n            } else {\n                maxAmmFill = amount.sub(cumulativeQuoteFilled);\n            }\n            maxAmmFill = anchor_1.BN.min(maxAmmFill, ammLiquidity);\n            if (maxAmmFill.gt(numericConstants_1.ZERO)) {\n                const quoteFilled = anchor_1.BN.min(amount.sub(cumulativeQuoteFilled), maxAmmFill);\n                const [afterSwapQuoteReserves, afterSwapBaseReserves] = (0, amm_1.calculateAmmReservesAfterSwap)(amm, \"quote\", quoteFilled, swapDirection);\n                ammLiquidity = ammLiquidity.sub(quoteFilled);\n                const baseFilled = afterSwapBaseReserves.sub(amm.baseAssetReserve).abs();\n                cumulativeBaseFilled = cumulativeBaseFilled.add(baseFilled);\n                cumulativeQuoteFilled = cumulativeQuoteFilled.add(quoteFilled);\n                amm.baseAssetReserve = afterSwapBaseReserves;\n                amm.quoteAssetReserve = afterSwapQuoteReserves;\n                worstPrice = (0, amm_1.calculatePrice)(amm.baseAssetReserve, amm.quoteAssetReserve, amm.pegMultiplier);\n                if (cumulativeQuoteFilled.eq(amount)) {\n                    break;\n                }\n            }\n            if (!limitOrder) {\n                continue;\n            }\n            if (usersToSkip.has(limitOrder.userAccount)) {\n                continue;\n            }\n            const quoteFilled = anchor_1.BN.min(limitOrder.order.baseAssetAmount.sub(limitOrder.order.baseAssetAmountFilled).mul(limitOrderPrice).div(numericConstants_1.BASE_PRECISION), amount.sub(cumulativeQuoteFilled));\n            const baseFilled = quoteFilled.mul(numericConstants_1.BASE_PRECISION).div(limitOrderPrice);\n            cumulativeBaseFilled = cumulativeBaseFilled.add(baseFilled);\n            cumulativeQuoteFilled = cumulativeQuoteFilled.add(quoteFilled);\n            worstPrice = limitOrderPrice;\n            if (cumulativeQuoteFilled.eq(amount)) {\n                break;\n            }\n            limitOrder = limitOrders.next().value;\n        }\n    }\n    const entryPrice = cumulativeQuoteFilled.mul(numericConstants_1.BASE_PRECISION).div(cumulativeBaseFilled);\n    const priceImpact = entryPrice.sub(bestPrice).mul(numericConstants_1.PRICE_PRECISION).div(bestPrice).abs();\n    return {\n        entryPrice,\n        priceImpact,\n        bestPrice,\n        worstPrice,\n        baseFilled: cumulativeBaseFilled,\n        quoteFilled: cumulativeQuoteFilled\n    };\n}\nexports.calculateEstimatedPerpEntryPrice = calculateEstimatedPerpEntryPrice;\n/**\n * Calculates the estimated entry price and price impact of order, in base or quote\n * Price impact is based on the difference between the entry price and the best bid/ask price (whether it's dlob or serum)\n *\n * @param assetType\n * @param amount\n * @param direction\n * @param market\n * @param oraclePriceData\n * @param dlob\n * @param serumBids\n * @param serumAsks\n * @param slot\n * @param usersToSkip\n */ function calculateEstimatedSpotEntryPrice(assetType, amount, direction, market, oraclePriceData, dlob, serumBids, serumAsks, slot, usersToSkip = new Map()) {\n    if (amount.eq(numericConstants_1.ZERO)) {\n        return {\n            entryPrice: numericConstants_1.ZERO,\n            priceImpact: numericConstants_1.ZERO,\n            bestPrice: numericConstants_1.ZERO,\n            worstPrice: numericConstants_1.ZERO,\n            baseFilled: numericConstants_1.ZERO,\n            quoteFilled: numericConstants_1.ZERO\n        };\n    }\n    const basePrecision = new anchor_1.BN(Math.pow(10, market.decimals));\n    const takerIsLong = (0, types_2.isVariant)(direction, \"long\");\n    const dlobLimitOrders = dlob[takerIsLong ? \"getMakerLimitAsks\" : \"getMakerLimitBids\"](market.marketIndex, slot, types_1.MarketType.SPOT, oraclePriceData);\n    const serumLimitOrders = takerIsLong ? serumAsks.getL2(100) : serumBids.getL2(100);\n    let cumulativeBaseFilled = numericConstants_1.ZERO;\n    let cumulativeQuoteFilled = numericConstants_1.ZERO;\n    let dlobLimitOrder = dlobLimitOrders.next().value;\n    let serumLimitOrder = serumLimitOrders.shift();\n    const dlobLimitOrderPrice = dlobLimitOrder === null || dlobLimitOrder === void 0 ? void 0 : dlobLimitOrder.getPrice(oraclePriceData, slot);\n    const serumLimitOrderPrice = serumLimitOrder ? new anchor_1.BN(serumLimitOrder[0] * numericConstants_1.PRICE_PRECISION.toNumber()) : undefined;\n    const bestPrice = takerIsLong ? anchor_1.BN.min(serumLimitOrderPrice || numericConstants_1.BN_MAX, dlobLimitOrderPrice || numericConstants_1.BN_MAX) : anchor_1.BN.max(serumLimitOrderPrice || numericConstants_1.ZERO, dlobLimitOrderPrice || numericConstants_1.ZERO);\n    let worstPrice = bestPrice;\n    if (assetType === \"base\") {\n        while(!cumulativeBaseFilled.eq(amount) && (dlobLimitOrder || serumLimitOrder)){\n            const dlobLimitOrderPrice = dlobLimitOrder === null || dlobLimitOrder === void 0 ? void 0 : dlobLimitOrder.getPrice(oraclePriceData, slot);\n            const serumLimitOrderPrice = serumLimitOrder ? new anchor_1.BN(serumLimitOrder[0] * numericConstants_1.PRICE_PRECISION.toNumber()) : undefined;\n            const useSerum = takerIsLong ? (serumLimitOrderPrice || numericConstants_1.BN_MAX).lt(dlobLimitOrderPrice || numericConstants_1.BN_MAX) : (serumLimitOrderPrice || numericConstants_1.ZERO).gt(dlobLimitOrderPrice || numericConstants_1.ZERO);\n            if (!useSerum) {\n                if (dlobLimitOrder && usersToSkip.has(dlobLimitOrder.userAccount)) {\n                    continue;\n                }\n                const baseFilled = anchor_1.BN.min(dlobLimitOrder.order.baseAssetAmount.sub(dlobLimitOrder.order.baseAssetAmountFilled), amount.sub(cumulativeBaseFilled));\n                const quoteFilled = baseFilled.mul(dlobLimitOrderPrice).div(basePrecision);\n                cumulativeBaseFilled = cumulativeBaseFilled.add(baseFilled);\n                cumulativeQuoteFilled = cumulativeQuoteFilled.add(quoteFilled);\n                worstPrice = dlobLimitOrderPrice;\n                dlobLimitOrder = dlobLimitOrders.next().value;\n            } else {\n                const baseFilled = anchor_1.BN.min(new anchor_1.BN(serumLimitOrder[1] * basePrecision.toNumber()), amount.sub(cumulativeBaseFilled));\n                const quoteFilled = baseFilled.mul(serumLimitOrderPrice).div(basePrecision);\n                cumulativeBaseFilled = cumulativeBaseFilled.add(baseFilled);\n                cumulativeQuoteFilled = cumulativeQuoteFilled.add(quoteFilled);\n                worstPrice = serumLimitOrderPrice;\n                serumLimitOrder = serumLimitOrders.shift();\n            }\n        }\n    } else {\n        while(!cumulativeQuoteFilled.eq(amount) && (dlobLimitOrder || serumLimitOrder)){\n            const dlobLimitOrderPrice = dlobLimitOrder === null || dlobLimitOrder === void 0 ? void 0 : dlobLimitOrder.getPrice(oraclePriceData, slot);\n            const serumLimitOrderPrice = serumLimitOrder ? new anchor_1.BN(serumLimitOrder[0] * numericConstants_1.PRICE_PRECISION.toNumber()) : undefined;\n            const useSerum = takerIsLong ? (serumLimitOrderPrice || numericConstants_1.BN_MAX).lt(dlobLimitOrderPrice || numericConstants_1.BN_MAX) : (serumLimitOrderPrice || numericConstants_1.ZERO).gt(dlobLimitOrderPrice || numericConstants_1.ZERO);\n            if (!useSerum) {\n                if (dlobLimitOrder && usersToSkip.has(dlobLimitOrder.userAccount)) {\n                    continue;\n                }\n                const quoteFilled = anchor_1.BN.min(dlobLimitOrder.order.baseAssetAmount.sub(dlobLimitOrder.order.baseAssetAmountFilled).mul(dlobLimitOrderPrice).div(basePrecision), amount.sub(cumulativeQuoteFilled));\n                const baseFilled = quoteFilled.mul(basePrecision).div(dlobLimitOrderPrice);\n                cumulativeBaseFilled = cumulativeBaseFilled.add(baseFilled);\n                cumulativeQuoteFilled = cumulativeQuoteFilled.add(quoteFilled);\n                worstPrice = dlobLimitOrderPrice;\n                dlobLimitOrder = dlobLimitOrders.next().value;\n            } else {\n                const serumOrderBaseAmount = new anchor_1.BN(serumLimitOrder[1] * basePrecision.toNumber());\n                const quoteFilled = anchor_1.BN.min(serumOrderBaseAmount.mul(serumLimitOrderPrice).div(basePrecision), amount.sub(cumulativeQuoteFilled));\n                const baseFilled = quoteFilled.mul(basePrecision).div(serumLimitOrderPrice);\n                cumulativeBaseFilled = cumulativeBaseFilled.add(baseFilled);\n                cumulativeQuoteFilled = cumulativeQuoteFilled.add(quoteFilled);\n                worstPrice = serumLimitOrderPrice;\n                serumLimitOrder = serumLimitOrders.shift();\n            }\n        }\n    }\n    const entryPrice = cumulativeQuoteFilled.mul(basePrecision).div(cumulativeBaseFilled);\n    const priceImpact = entryPrice.sub(bestPrice).mul(numericConstants_1.PRICE_PRECISION).div(bestPrice).abs();\n    return {\n        entryPrice,\n        priceImpact,\n        bestPrice,\n        worstPrice,\n        baseFilled: cumulativeBaseFilled,\n        quoteFilled: cumulativeQuoteFilled\n    };\n}\nexports.calculateEstimatedSpotEntryPrice = calculateEstimatedSpotEntryPrice;\nfunction calculateEstimatedEntryPriceWithL2(assetType, amount, direction, basePrecision, l2) {\n    const takerIsLong = (0, types_2.isVariant)(direction, \"long\");\n    let cumulativeBaseFilled = numericConstants_1.ZERO;\n    let cumulativeQuoteFilled = numericConstants_1.ZERO;\n    const levels = [\n        ...takerIsLong ? l2.asks : l2.bids\n    ];\n    let nextLevel = levels.shift();\n    let bestPrice;\n    let worstPrice;\n    if (nextLevel) {\n        bestPrice = nextLevel.price;\n        worstPrice = nextLevel.price;\n    } else {\n        bestPrice = takerIsLong ? numericConstants_1.BN_MAX : numericConstants_1.ZERO;\n        worstPrice = bestPrice;\n    }\n    if (assetType === \"base\") {\n        while(!cumulativeBaseFilled.eq(amount) && nextLevel){\n            const price = nextLevel.price;\n            const size = nextLevel.size;\n            worstPrice = price;\n            const baseFilled = anchor_1.BN.min(size, amount.sub(cumulativeBaseFilled));\n            const quoteFilled = baseFilled.mul(price).div(basePrecision);\n            cumulativeBaseFilled = cumulativeBaseFilled.add(baseFilled);\n            cumulativeQuoteFilled = cumulativeQuoteFilled.add(quoteFilled);\n            nextLevel = levels.shift();\n        }\n    } else {\n        while(!cumulativeQuoteFilled.eq(amount) && nextLevel){\n            const price = nextLevel.price;\n            const size = nextLevel.size;\n            worstPrice = price;\n            const quoteFilled = anchor_1.BN.min(size.mul(price).div(basePrecision), amount.sub(cumulativeQuoteFilled));\n            const baseFilled = quoteFilled.mul(basePrecision).div(price);\n            cumulativeBaseFilled = cumulativeBaseFilled.add(baseFilled);\n            cumulativeQuoteFilled = cumulativeQuoteFilled.add(quoteFilled);\n            nextLevel = levels.shift();\n        }\n    }\n    const entryPrice = cumulativeQuoteFilled.mul(basePrecision).div(cumulativeBaseFilled);\n    const priceImpact = entryPrice.sub(bestPrice).mul(numericConstants_1.PRICE_PRECISION).div(bestPrice).abs();\n    return {\n        entryPrice,\n        priceImpact,\n        bestPrice,\n        worstPrice,\n        baseFilled: cumulativeBaseFilled,\n        quoteFilled: cumulativeQuoteFilled\n    };\n}\nexports.calculateEstimatedEntryPriceWithL2 = calculateEstimatedEntryPriceWithL2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/trade.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/math/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/math/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.timeRemainingUntilUpdate = exports.sigNum = exports.divCeil = exports.squareRootBN = exports.clampBN = void 0;\nconst __1 = __webpack_require__(/*! ../ */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nfunction clampBN(x, min, max) {\n    return __1.BN.max(min, __1.BN.min(x, max));\n}\nexports.clampBN = clampBN;\nconst squareRootBN = (n)=>{\n    if (n.lt(new __1.BN(0))) {\n        throw new Error(\"Sqrt only works on non-negtiave inputs\");\n    }\n    if (n.lt(new __1.BN(2))) {\n        return n;\n    }\n    const smallCand = (0, exports.squareRootBN)(n.shrn(2)).shln(1);\n    const largeCand = smallCand.add(new __1.BN(1));\n    if (largeCand.mul(largeCand).gt(n)) {\n        return smallCand;\n    } else {\n        return largeCand;\n    }\n};\nexports.squareRootBN = squareRootBN;\nconst divCeil = (a, b)=>{\n    const quotient = a.div(b);\n    const remainder = a.mod(b);\n    if (remainder.gt(__1.ZERO)) {\n        return quotient.add(__1.ONE);\n    } else {\n        return quotient;\n    }\n};\nexports.divCeil = divCeil;\nconst sigNum = (x)=>{\n    return x.isNeg() ? new __1.BN(-1) : new __1.BN(1);\n};\nexports.sigNum = sigNum;\n/**\n * calculates the time remaining until the next update based on a rounded, \"on-the-hour\" update schedule\n * this schedule is used for Perpetual Funding Rate and Revenue -> Insurance Updates\n * @param now: current blockchain unix timestamp\n * @param lastUpdateTs: the unix timestamp of the last update\n * @param updatePeriod: desired interval between updates (in seconds)\n * @returns: timeRemainingUntilUpdate (in seconds)\n */ function timeRemainingUntilUpdate(now, lastUpdateTs, updatePeriod) {\n    const timeSinceLastUpdate = now.sub(lastUpdateTs);\n    // round next update time to be available on the hour\n    let nextUpdateWait = updatePeriod;\n    if (updatePeriod.gt(new __1.BN(1))) {\n        const lastUpdateDelay = lastUpdateTs.umod(updatePeriod);\n        if (!lastUpdateDelay.isZero()) {\n            const maxDelayForNextPeriod = updatePeriod.div(new __1.BN(3));\n            const twoFundingPeriods = updatePeriod.mul(new __1.BN(2));\n            if (lastUpdateDelay.gt(maxDelayForNextPeriod)) {\n                // too late for on the hour next period, delay to following period\n                nextUpdateWait = twoFundingPeriods.sub(lastUpdateDelay);\n            } else {\n                // allow update on the hour\n                nextUpdateWait = updatePeriod.sub(lastUpdateDelay);\n            }\n            if (nextUpdateWait.gt(twoFundingPeriods)) {\n                nextUpdateWait = nextUpdateWait.sub(updatePeriod);\n            }\n        }\n    }\n    const timeRemainingUntilUpdate = nextUpdateWait.sub(timeSinceLastUpdate).isNeg() ? __1.ZERO : nextUpdateWait.sub(timeSinceLastUpdate);\n    return timeRemainingUntilUpdate;\n}\nexports.timeRemainingUntilUpdate = timeRemainingUntilUpdate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQ0FBZ0MsR0FBR0EsY0FBYyxHQUFHQSxlQUFlLEdBQUdBLG9CQUFvQixHQUFHQSxlQUFlLEdBQUcsS0FBSztBQUNwSCxNQUFNTyxNQUFNQyxtQkFBT0EsQ0FBQyw4REFBSztBQUN6QixTQUFTRixRQUFRRyxDQUFDLEVBQUVDLEdBQUcsRUFBRUMsR0FBRztJQUN4QixPQUFPSixJQUFJSyxFQUFFLENBQUNELEdBQUcsQ0FBQ0QsS0FBS0gsSUFBSUssRUFBRSxDQUFDRixHQUFHLENBQUNELEdBQUdFO0FBQ3pDO0FBQ0FYLGVBQWUsR0FBR007QUFDbEIsTUFBTUQsZUFBZSxDQUFDUTtJQUNsQixJQUFJQSxFQUFFQyxFQUFFLENBQUMsSUFBSVAsSUFBSUssRUFBRSxDQUFDLEtBQUs7UUFDckIsTUFBTSxJQUFJRyxNQUFNO0lBQ3BCO0lBQ0EsSUFBSUYsRUFBRUMsRUFBRSxDQUFDLElBQUlQLElBQUlLLEVBQUUsQ0FBQyxLQUFLO1FBQ3JCLE9BQU9DO0lBQ1g7SUFDQSxNQUFNRyxZQUFZLENBQUMsR0FBR2hCLFFBQVFLLFlBQVksRUFBRVEsRUFBRUksSUFBSSxDQUFDLElBQUlDLElBQUksQ0FBQztJQUM1RCxNQUFNQyxZQUFZSCxVQUFVSSxHQUFHLENBQUMsSUFBSWIsSUFBSUssRUFBRSxDQUFDO0lBQzNDLElBQUlPLFVBQVVFLEdBQUcsQ0FBQ0YsV0FBV0csRUFBRSxDQUFDVCxJQUFJO1FBQ2hDLE9BQU9HO0lBQ1gsT0FDSztRQUNELE9BQU9HO0lBQ1g7QUFDSjtBQUNBbkIsb0JBQW9CLEdBQUdLO0FBQ3ZCLE1BQU1ELFVBQVUsQ0FBQ21CLEdBQUdDO0lBQ2hCLE1BQU1DLFdBQVdGLEVBQUVHLEdBQUcsQ0FBQ0Y7SUFDdkIsTUFBTUcsWUFBWUosRUFBRUssR0FBRyxDQUFDSjtJQUN4QixJQUFJRyxVQUFVTCxFQUFFLENBQUNmLElBQUlzQixJQUFJLEdBQUc7UUFDeEIsT0FBT0osU0FBU0wsR0FBRyxDQUFDYixJQUFJdUIsR0FBRztJQUMvQixPQUNLO1FBQ0QsT0FBT0w7SUFDWDtBQUNKO0FBQ0F6QixlQUFlLEdBQUdJO0FBQ2xCLE1BQU1ELFNBQVMsQ0FBQ007SUFDWixPQUFPQSxFQUFFc0IsS0FBSyxLQUFLLElBQUl4QixJQUFJSyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUlMLElBQUlLLEVBQUUsQ0FBQztBQUNuRDtBQUNBWixjQUFjLEdBQUdHO0FBQ2pCOzs7Ozs7O0NBT0MsR0FDRCxTQUFTRCx5QkFBeUI4QixHQUFHLEVBQUVDLFlBQVksRUFBRUMsWUFBWTtJQUM3RCxNQUFNQyxzQkFBc0JILElBQUlJLEdBQUcsQ0FBQ0g7SUFDcEMscURBQXFEO0lBQ3JELElBQUlJLGlCQUFpQkg7SUFDckIsSUFBSUEsYUFBYVosRUFBRSxDQUFDLElBQUlmLElBQUlLLEVBQUUsQ0FBQyxLQUFLO1FBQ2hDLE1BQU0wQixrQkFBa0JMLGFBQWFNLElBQUksQ0FBQ0w7UUFDMUMsSUFBSSxDQUFDSSxnQkFBZ0JFLE1BQU0sSUFBSTtZQUMzQixNQUFNQyx3QkFBd0JQLGFBQWFSLEdBQUcsQ0FBQyxJQUFJbkIsSUFBSUssRUFBRSxDQUFDO1lBQzFELE1BQU04QixvQkFBb0JSLGFBQWFiLEdBQUcsQ0FBQyxJQUFJZCxJQUFJSyxFQUFFLENBQUM7WUFDdEQsSUFBSTBCLGdCQUFnQmhCLEVBQUUsQ0FBQ21CLHdCQUF3QjtnQkFDM0Msa0VBQWtFO2dCQUNsRUosaUJBQWlCSyxrQkFBa0JOLEdBQUcsQ0FBQ0U7WUFDM0MsT0FDSztnQkFDRCwyQkFBMkI7Z0JBQzNCRCxpQkFBaUJILGFBQWFFLEdBQUcsQ0FBQ0U7WUFDdEM7WUFDQSxJQUFJRCxlQUFlZixFQUFFLENBQUNvQixvQkFBb0I7Z0JBQ3RDTCxpQkFBaUJBLGVBQWVELEdBQUcsQ0FBQ0Y7WUFDeEM7UUFDSjtJQUNKO0lBQ0EsTUFBTWhDLDJCQUEyQm1DLGVBQzVCRCxHQUFHLENBQUNELHFCQUNKSixLQUFLLEtBQ0p4QixJQUFJc0IsSUFBSSxHQUNSUSxlQUFlRCxHQUFHLENBQUNEO0lBQ3pCLE9BQU9qQztBQUNYO0FBQ0FGLGdDQUFnQyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tYXRoL3V0aWxzLmpzPzE5MWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRpbWVSZW1haW5pbmdVbnRpbFVwZGF0ZSA9IGV4cG9ydHMuc2lnTnVtID0gZXhwb3J0cy5kaXZDZWlsID0gZXhwb3J0cy5zcXVhcmVSb290Qk4gPSBleHBvcnRzLmNsYW1wQk4gPSB2b2lkIDA7XG5jb25zdCBfXzEgPSByZXF1aXJlKFwiLi4vXCIpO1xuZnVuY3Rpb24gY2xhbXBCTih4LCBtaW4sIG1heCkge1xuICAgIHJldHVybiBfXzEuQk4ubWF4KG1pbiwgX18xLkJOLm1pbih4LCBtYXgpKTtcbn1cbmV4cG9ydHMuY2xhbXBCTiA9IGNsYW1wQk47XG5jb25zdCBzcXVhcmVSb290Qk4gPSAobikgPT4ge1xuICAgIGlmIChuLmx0KG5ldyBfXzEuQk4oMCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3FydCBvbmx5IHdvcmtzIG9uIG5vbi1uZWd0aWF2ZSBpbnB1dHMnKTtcbiAgICB9XG4gICAgaWYgKG4ubHQobmV3IF9fMS5CTigyKSkpIHtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgfVxuICAgIGNvbnN0IHNtYWxsQ2FuZCA9ICgwLCBleHBvcnRzLnNxdWFyZVJvb3RCTikobi5zaHJuKDIpKS5zaGxuKDEpO1xuICAgIGNvbnN0IGxhcmdlQ2FuZCA9IHNtYWxsQ2FuZC5hZGQobmV3IF9fMS5CTigxKSk7XG4gICAgaWYgKGxhcmdlQ2FuZC5tdWwobGFyZ2VDYW5kKS5ndChuKSkge1xuICAgICAgICByZXR1cm4gc21hbGxDYW5kO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxhcmdlQ2FuZDtcbiAgICB9XG59O1xuZXhwb3J0cy5zcXVhcmVSb290Qk4gPSBzcXVhcmVSb290Qk47XG5jb25zdCBkaXZDZWlsID0gKGEsIGIpID0+IHtcbiAgICBjb25zdCBxdW90aWVudCA9IGEuZGl2KGIpO1xuICAgIGNvbnN0IHJlbWFpbmRlciA9IGEubW9kKGIpO1xuICAgIGlmIChyZW1haW5kZXIuZ3QoX18xLlpFUk8pKSB7XG4gICAgICAgIHJldHVybiBxdW90aWVudC5hZGQoX18xLk9ORSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gcXVvdGllbnQ7XG4gICAgfVxufTtcbmV4cG9ydHMuZGl2Q2VpbCA9IGRpdkNlaWw7XG5jb25zdCBzaWdOdW0gPSAoeCkgPT4ge1xuICAgIHJldHVybiB4LmlzTmVnKCkgPyBuZXcgX18xLkJOKC0xKSA6IG5ldyBfXzEuQk4oMSk7XG59O1xuZXhwb3J0cy5zaWdOdW0gPSBzaWdOdW07XG4vKipcbiAqIGNhbGN1bGF0ZXMgdGhlIHRpbWUgcmVtYWluaW5nIHVudGlsIHRoZSBuZXh0IHVwZGF0ZSBiYXNlZCBvbiBhIHJvdW5kZWQsIFwib24tdGhlLWhvdXJcIiB1cGRhdGUgc2NoZWR1bGVcbiAqIHRoaXMgc2NoZWR1bGUgaXMgdXNlZCBmb3IgUGVycGV0dWFsIEZ1bmRpbmcgUmF0ZSBhbmQgUmV2ZW51ZSAtPiBJbnN1cmFuY2UgVXBkYXRlc1xuICogQHBhcmFtIG5vdzogY3VycmVudCBibG9ja2NoYWluIHVuaXggdGltZXN0YW1wXG4gKiBAcGFyYW0gbGFzdFVwZGF0ZVRzOiB0aGUgdW5peCB0aW1lc3RhbXAgb2YgdGhlIGxhc3QgdXBkYXRlXG4gKiBAcGFyYW0gdXBkYXRlUGVyaW9kOiBkZXNpcmVkIGludGVydmFsIGJldHdlZW4gdXBkYXRlcyAoaW4gc2Vjb25kcylcbiAqIEByZXR1cm5zOiB0aW1lUmVtYWluaW5nVW50aWxVcGRhdGUgKGluIHNlY29uZHMpXG4gKi9cbmZ1bmN0aW9uIHRpbWVSZW1haW5pbmdVbnRpbFVwZGF0ZShub3csIGxhc3RVcGRhdGVUcywgdXBkYXRlUGVyaW9kKSB7XG4gICAgY29uc3QgdGltZVNpbmNlTGFzdFVwZGF0ZSA9IG5vdy5zdWIobGFzdFVwZGF0ZVRzKTtcbiAgICAvLyByb3VuZCBuZXh0IHVwZGF0ZSB0aW1lIHRvIGJlIGF2YWlsYWJsZSBvbiB0aGUgaG91clxuICAgIGxldCBuZXh0VXBkYXRlV2FpdCA9IHVwZGF0ZVBlcmlvZDtcbiAgICBpZiAodXBkYXRlUGVyaW9kLmd0KG5ldyBfXzEuQk4oMSkpKSB7XG4gICAgICAgIGNvbnN0IGxhc3RVcGRhdGVEZWxheSA9IGxhc3RVcGRhdGVUcy51bW9kKHVwZGF0ZVBlcmlvZCk7XG4gICAgICAgIGlmICghbGFzdFVwZGF0ZURlbGF5LmlzWmVybygpKSB7XG4gICAgICAgICAgICBjb25zdCBtYXhEZWxheUZvck5leHRQZXJpb2QgPSB1cGRhdGVQZXJpb2QuZGl2KG5ldyBfXzEuQk4oMykpO1xuICAgICAgICAgICAgY29uc3QgdHdvRnVuZGluZ1BlcmlvZHMgPSB1cGRhdGVQZXJpb2QubXVsKG5ldyBfXzEuQk4oMikpO1xuICAgICAgICAgICAgaWYgKGxhc3RVcGRhdGVEZWxheS5ndChtYXhEZWxheUZvck5leHRQZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgLy8gdG9vIGxhdGUgZm9yIG9uIHRoZSBob3VyIG5leHQgcGVyaW9kLCBkZWxheSB0byBmb2xsb3dpbmcgcGVyaW9kXG4gICAgICAgICAgICAgICAgbmV4dFVwZGF0ZVdhaXQgPSB0d29GdW5kaW5nUGVyaW9kcy5zdWIobGFzdFVwZGF0ZURlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGFsbG93IHVwZGF0ZSBvbiB0aGUgaG91clxuICAgICAgICAgICAgICAgIG5leHRVcGRhdGVXYWl0ID0gdXBkYXRlUGVyaW9kLnN1YihsYXN0VXBkYXRlRGVsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRVcGRhdGVXYWl0Lmd0KHR3b0Z1bmRpbmdQZXJpb2RzKSkge1xuICAgICAgICAgICAgICAgIG5leHRVcGRhdGVXYWl0ID0gbmV4dFVwZGF0ZVdhaXQuc3ViKHVwZGF0ZVBlcmlvZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdGltZVJlbWFpbmluZ1VudGlsVXBkYXRlID0gbmV4dFVwZGF0ZVdhaXRcbiAgICAgICAgLnN1Yih0aW1lU2luY2VMYXN0VXBkYXRlKVxuICAgICAgICAuaXNOZWcoKVxuICAgICAgICA/IF9fMS5aRVJPXG4gICAgICAgIDogbmV4dFVwZGF0ZVdhaXQuc3ViKHRpbWVTaW5jZUxhc3RVcGRhdGUpO1xuICAgIHJldHVybiB0aW1lUmVtYWluaW5nVW50aWxVcGRhdGU7XG59XG5leHBvcnRzLnRpbWVSZW1haW5pbmdVbnRpbFVwZGF0ZSA9IHRpbWVSZW1haW5pbmdVbnRpbFVwZGF0ZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRpbWVSZW1haW5pbmdVbnRpbFVwZGF0ZSIsInNpZ051bSIsImRpdkNlaWwiLCJzcXVhcmVSb290Qk4iLCJjbGFtcEJOIiwiX18xIiwicmVxdWlyZSIsIngiLCJtaW4iLCJtYXgiLCJCTiIsIm4iLCJsdCIsIkVycm9yIiwic21hbGxDYW5kIiwic2hybiIsInNobG4iLCJsYXJnZUNhbmQiLCJhZGQiLCJtdWwiLCJndCIsImEiLCJiIiwicXVvdGllbnQiLCJkaXYiLCJyZW1haW5kZXIiLCJtb2QiLCJaRVJPIiwiT05FIiwiaXNOZWciLCJub3ciLCJsYXN0VXBkYXRlVHMiLCJ1cGRhdGVQZXJpb2QiLCJ0aW1lU2luY2VMYXN0VXBkYXRlIiwic3ViIiwibmV4dFVwZGF0ZVdhaXQiLCJsYXN0VXBkYXRlRGVsYXkiLCJ1bW9kIiwiaXNaZXJvIiwibWF4RGVsYXlGb3JOZXh0UGVyaW9kIiwidHdvRnVuZGluZ1BlcmlvZHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/math/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/memcmp.js":
/*!****************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/memcmp.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getUserWithName = exports.getUserThatHasBeenLP = exports.getUserWithAuctionFilter = exports.getUserWithOrderFilter = exports.getNonIdleUserFilter = exports.getUserFilter = void 0;\nconst bs58_1 = __importDefault(__webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/index.js\"));\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst userName_1 = __webpack_require__(/*! ./userName */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/userName.js\");\nfunction getUserFilter() {\n    return {\n        memcmp: {\n            offset: 0,\n            bytes: bs58_1.default.encode(anchor_1.BorshAccountsCoder.accountDiscriminator(\"User\"))\n        }\n    };\n}\nexports.getUserFilter = getUserFilter;\nfunction getNonIdleUserFilter() {\n    return {\n        memcmp: {\n            offset: 4350,\n            bytes: bs58_1.default.encode(Uint8Array.from([\n                0\n            ]))\n        }\n    };\n}\nexports.getNonIdleUserFilter = getNonIdleUserFilter;\nfunction getUserWithOrderFilter() {\n    return {\n        memcmp: {\n            offset: 4352,\n            bytes: bs58_1.default.encode(Uint8Array.from([\n                1\n            ]))\n        }\n    };\n}\nexports.getUserWithOrderFilter = getUserWithOrderFilter;\nfunction getUserWithAuctionFilter() {\n    return {\n        memcmp: {\n            offset: 4354,\n            bytes: bs58_1.default.encode(Uint8Array.from([\n                1\n            ]))\n        }\n    };\n}\nexports.getUserWithAuctionFilter = getUserWithAuctionFilter;\nfunction getUserThatHasBeenLP() {\n    return {\n        memcmp: {\n            offset: 4267,\n            bytes: bs58_1.default.encode(Uint8Array.from([\n                99\n            ]))\n        }\n    };\n}\nexports.getUserThatHasBeenLP = getUserThatHasBeenLP;\nfunction getUserWithName(name) {\n    return {\n        memcmp: {\n            offset: 72,\n            bytes: bs58_1.default.encode(Uint8Array.from((0, userName_1.encodeName)(name)))\n        }\n    };\n}\nexports.getUserWithName = getUserWithName;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tZW1jbXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHQSw0QkFBNEIsR0FBR0EsZ0NBQWdDLEdBQUdBLDhCQUE4QixHQUFHQSw0QkFBNEIsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUN6TCxNQUFNUSxTQUFTYixnQkFBZ0JjLG1CQUFPQSxDQUFDLGdEQUFNO0FBQzdDLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLG1GQUFtQjtBQUM1QyxNQUFNRSxhQUFhRixtQkFBT0EsQ0FBQyx3RUFBWTtBQUN2QyxTQUFTRjtJQUNMLE9BQU87UUFDSEssUUFBUTtZQUNKQyxRQUFRO1lBQ1JDLE9BQU9OLE9BQU9PLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDTixTQUFTTyxrQkFBa0IsQ0FBQ0Msb0JBQW9CLENBQUM7UUFDbEY7SUFDSjtBQUNKO0FBQ0FsQixxQkFBcUIsR0FBR087QUFDeEIsU0FBU0Q7SUFDTCxPQUFPO1FBQ0hNLFFBQVE7WUFDSkMsUUFBUTtZQUNSQyxPQUFPTixPQUFPTyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0csV0FBV0MsSUFBSSxDQUFDO2dCQUFDO2FBQUU7UUFDcEQ7SUFDSjtBQUNKO0FBQ0FwQiw0QkFBNEIsR0FBR007QUFDL0IsU0FBU0Q7SUFDTCxPQUFPO1FBQ0hPLFFBQVE7WUFDSkMsUUFBUTtZQUNSQyxPQUFPTixPQUFPTyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0csV0FBV0MsSUFBSSxDQUFDO2dCQUFDO2FBQUU7UUFDcEQ7SUFDSjtBQUNKO0FBQ0FwQiw4QkFBOEIsR0FBR0s7QUFDakMsU0FBU0Q7SUFDTCxPQUFPO1FBQ0hRLFFBQVE7WUFDSkMsUUFBUTtZQUNSQyxPQUFPTixPQUFPTyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0csV0FBV0MsSUFBSSxDQUFDO2dCQUFDO2FBQUU7UUFDcEQ7SUFDSjtBQUNKO0FBQ0FwQixnQ0FBZ0MsR0FBR0k7QUFDbkMsU0FBU0Q7SUFDTCxPQUFPO1FBQ0hTLFFBQVE7WUFDSkMsUUFBUTtZQUNSQyxPQUFPTixPQUFPTyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0csV0FBV0MsSUFBSSxDQUFDO2dCQUFDO2FBQUc7UUFDckQ7SUFDSjtBQUNKO0FBQ0FwQiw0QkFBNEIsR0FBR0c7QUFDL0IsU0FBU0QsZ0JBQWdCbUIsSUFBSTtJQUN6QixPQUFPO1FBQ0hULFFBQVE7WUFDSkMsUUFBUTtZQUNSQyxPQUFPTixPQUFPTyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0csV0FBV0MsSUFBSSxDQUFDLENBQUMsR0FBR1QsV0FBV1csVUFBVSxFQUFFRDtRQUM1RTtJQUNKO0FBQ0o7QUFDQXJCLHVCQUF1QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9tZW1jbXAuanM/MTE0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VXNlcldpdGhOYW1lID0gZXhwb3J0cy5nZXRVc2VyVGhhdEhhc0JlZW5MUCA9IGV4cG9ydHMuZ2V0VXNlcldpdGhBdWN0aW9uRmlsdGVyID0gZXhwb3J0cy5nZXRVc2VyV2l0aE9yZGVyRmlsdGVyID0gZXhwb3J0cy5nZXROb25JZGxlVXNlckZpbHRlciA9IGV4cG9ydHMuZ2V0VXNlckZpbHRlciA9IHZvaWQgMDtcbmNvbnN0IGJzNThfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYnM1OFwiKSk7XG5jb25zdCBhbmNob3JfMSA9IHJlcXVpcmUoXCJAY29yYWwteHl6L2FuY2hvclwiKTtcbmNvbnN0IHVzZXJOYW1lXzEgPSByZXF1aXJlKFwiLi91c2VyTmFtZVwiKTtcbmZ1bmN0aW9uIGdldFVzZXJGaWx0ZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVtY21wOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICBieXRlczogYnM1OF8xLmRlZmF1bHQuZW5jb2RlKGFuY2hvcl8xLkJvcnNoQWNjb3VudHNDb2Rlci5hY2NvdW50RGlzY3JpbWluYXRvcignVXNlcicpKSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy5nZXRVc2VyRmlsdGVyID0gZ2V0VXNlckZpbHRlcjtcbmZ1bmN0aW9uIGdldE5vbklkbGVVc2VyRmlsdGVyKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1lbWNtcDoge1xuICAgICAgICAgICAgb2Zmc2V0OiA0MzUwLFxuICAgICAgICAgICAgYnl0ZXM6IGJzNThfMS5kZWZhdWx0LmVuY29kZShVaW50OEFycmF5LmZyb20oWzBdKSksXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0Tm9uSWRsZVVzZXJGaWx0ZXIgPSBnZXROb25JZGxlVXNlckZpbHRlcjtcbmZ1bmN0aW9uIGdldFVzZXJXaXRoT3JkZXJGaWx0ZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVtY21wOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IDQzNTIsXG4gICAgICAgICAgICBieXRlczogYnM1OF8xLmRlZmF1bHQuZW5jb2RlKFVpbnQ4QXJyYXkuZnJvbShbMV0pKSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy5nZXRVc2VyV2l0aE9yZGVyRmlsdGVyID0gZ2V0VXNlcldpdGhPcmRlckZpbHRlcjtcbmZ1bmN0aW9uIGdldFVzZXJXaXRoQXVjdGlvbkZpbHRlcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtZW1jbXA6IHtcbiAgICAgICAgICAgIG9mZnNldDogNDM1NCxcbiAgICAgICAgICAgIGJ5dGVzOiBiczU4XzEuZGVmYXVsdC5lbmNvZGUoVWludDhBcnJheS5mcm9tKFsxXSkpLFxuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLmdldFVzZXJXaXRoQXVjdGlvbkZpbHRlciA9IGdldFVzZXJXaXRoQXVjdGlvbkZpbHRlcjtcbmZ1bmN0aW9uIGdldFVzZXJUaGF0SGFzQmVlbkxQKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1lbWNtcDoge1xuICAgICAgICAgICAgb2Zmc2V0OiA0MjY3LFxuICAgICAgICAgICAgYnl0ZXM6IGJzNThfMS5kZWZhdWx0LmVuY29kZShVaW50OEFycmF5LmZyb20oWzk5XSkpLFxuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLmdldFVzZXJUaGF0SGFzQmVlbkxQID0gZ2V0VXNlclRoYXRIYXNCZWVuTFA7XG5mdW5jdGlvbiBnZXRVc2VyV2l0aE5hbWUobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1lbWNtcDoge1xuICAgICAgICAgICAgb2Zmc2V0OiA3MixcbiAgICAgICAgICAgIGJ5dGVzOiBiczU4XzEuZGVmYXVsdC5lbmNvZGUoVWludDhBcnJheS5mcm9tKCgwLCB1c2VyTmFtZV8xLmVuY29kZU5hbWUpKG5hbWUpKSksXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0VXNlcldpdGhOYW1lID0gZ2V0VXNlcldpdGhOYW1lO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFVzZXJXaXRoTmFtZSIsImdldFVzZXJUaGF0SGFzQmVlbkxQIiwiZ2V0VXNlcldpdGhBdWN0aW9uRmlsdGVyIiwiZ2V0VXNlcldpdGhPcmRlckZpbHRlciIsImdldE5vbklkbGVVc2VyRmlsdGVyIiwiZ2V0VXNlckZpbHRlciIsImJzNThfMSIsInJlcXVpcmUiLCJhbmNob3JfMSIsInVzZXJOYW1lXzEiLCJtZW1jbXAiLCJvZmZzZXQiLCJieXRlcyIsImRlZmF1bHQiLCJlbmNvZGUiLCJCb3JzaEFjY291bnRzQ29kZXIiLCJhY2NvdW50RGlzY3JpbWluYXRvciIsIlVpbnQ4QXJyYXkiLCJmcm9tIiwibmFtZSIsImVuY29kZU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/memcmp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/oracleClientCache.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/oracles/oracleClientCache.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OracleClientCache = void 0;\nconst oracleClient_1 = __webpack_require__(/*! ../factory/oracleClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/factory/oracleClient.js\");\nclass OracleClientCache {\n    constructor(){\n        this.cache = new Map();\n    }\n    get(oracleSource, connection) {\n        const key = Object.keys(oracleSource)[0];\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        const client = (0, oracleClient_1.getOracleClient)(oracleSource, connection);\n        this.cache.set(key, client);\n        return client;\n    }\n}\nexports.OracleClientCache = OracleClientCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9vcmFjbGVzL29yYWNsZUNsaWVudENhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx5QkFBeUIsR0FBRyxLQUFLO0FBQ2pDLE1BQU1HLGlCQUFpQkMsbUJBQU9BLENBQUMsaUdBQXlCO0FBQ3hELE1BQU1GO0lBQ0ZHLGFBQWM7UUFDVixJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJQztJQUNyQjtJQUNBQyxJQUFJQyxZQUFZLEVBQUVDLFVBQVUsRUFBRTtRQUMxQixNQUFNQyxNQUFNYixPQUFPYyxJQUFJLENBQUNILGFBQWEsQ0FBQyxFQUFFO1FBQ3hDLElBQUksSUFBSSxDQUFDSCxLQUFLLENBQUNPLEdBQUcsQ0FBQ0YsTUFBTTtZQUNyQixPQUFPLElBQUksQ0FBQ0wsS0FBSyxDQUFDRSxHQUFHLENBQUNHO1FBQzFCO1FBQ0EsTUFBTUcsU0FBUyxDQUFDLEdBQUdYLGVBQWVZLGVBQWUsRUFBRU4sY0FBY0M7UUFDakUsSUFBSSxDQUFDSixLQUFLLENBQUNVLEdBQUcsQ0FBQ0wsS0FBS0c7UUFDcEIsT0FBT0E7SUFDWDtBQUNKO0FBQ0FkLHlCQUF5QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9vcmFjbGVzL29yYWNsZUNsaWVudENhY2hlLmpzPzE2ZjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9yYWNsZUNsaWVudENhY2hlID0gdm9pZCAwO1xuY29uc3Qgb3JhY2xlQ2xpZW50XzEgPSByZXF1aXJlKFwiLi4vZmFjdG9yeS9vcmFjbGVDbGllbnRcIik7XG5jbGFzcyBPcmFjbGVDbGllbnRDYWNoZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGdldChvcmFjbGVTb3VyY2UsIGNvbm5lY3Rpb24pIHtcbiAgICAgICAgY29uc3Qga2V5ID0gT2JqZWN0LmtleXMob3JhY2xlU291cmNlKVswXTtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNsaWVudCA9ICgwLCBvcmFjbGVDbGllbnRfMS5nZXRPcmFjbGVDbGllbnQpKG9yYWNsZVNvdXJjZSwgY29ubmVjdGlvbik7XG4gICAgICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgY2xpZW50KTtcbiAgICAgICAgcmV0dXJuIGNsaWVudDtcbiAgICB9XG59XG5leHBvcnRzLk9yYWNsZUNsaWVudENhY2hlID0gT3JhY2xlQ2xpZW50Q2FjaGU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJPcmFjbGVDbGllbnRDYWNoZSIsIm9yYWNsZUNsaWVudF8xIiwicmVxdWlyZSIsImNvbnN0cnVjdG9yIiwiY2FjaGUiLCJNYXAiLCJnZXQiLCJvcmFjbGVTb3VyY2UiLCJjb25uZWN0aW9uIiwia2V5Iiwia2V5cyIsImhhcyIsImNsaWVudCIsImdldE9yYWNsZUNsaWVudCIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/oracleClientCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/pythClient.js":
/*!****************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/oracles/pythClient.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.convertPythPrice = exports.PythClient = void 0;\nconst client_1 = __webpack_require__(/*! @pythnetwork/client */ \"(ssr)/./node_modules/@pythnetwork/client/lib/index.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nclass PythClient {\n    constructor(connection, multiple = numericConstants_1.ONE, stableCoin = false){\n        this.connection = connection;\n        this.multiple = multiple;\n        this.stableCoin = stableCoin;\n    }\n    async getOraclePriceData(pricePublicKey) {\n        const accountInfo = await this.connection.getAccountInfo(pricePublicKey);\n        return this.getOraclePriceDataFromBuffer(accountInfo.data);\n    }\n    getOraclePriceDataFromBuffer(buffer) {\n        const priceData = (0, client_1.parsePriceData)(buffer);\n        const confidence = convertPythPrice(priceData.confidence, priceData.exponent, this.multiple);\n        let price = convertPythPrice(priceData.aggregate.price, priceData.exponent, this.multiple);\n        if (this.stableCoin) {\n            price = getStableCoinPrice(price, confidence);\n        }\n        return {\n            price,\n            slot: new anchor_1.BN(priceData.lastSlot.toString()),\n            confidence,\n            twap: convertPythPrice(priceData.twap.value, priceData.exponent, this.multiple),\n            twapConfidence: convertPythPrice(priceData.twac.value, priceData.exponent, this.multiple),\n            hasSufficientNumberOfDataPoints: true\n        };\n    }\n}\nexports.PythClient = PythClient;\nfunction convertPythPrice(price, exponent, multiple) {\n    exponent = Math.abs(exponent);\n    const pythPrecision = numericConstants_1.TEN.pow(new anchor_1.BN(exponent).abs()).div(multiple);\n    return new anchor_1.BN(price * Math.pow(10, exponent)).mul(numericConstants_1.PRICE_PRECISION).div(pythPrecision);\n}\nexports.convertPythPrice = convertPythPrice;\nconst fiveBPS = new anchor_1.BN(500);\nfunction getStableCoinPrice(price, confidence) {\n    if (price.sub(numericConstants_1.QUOTE_PRECISION).abs().lt(anchor_1.BN.min(confidence, fiveBPS))) {\n        return numericConstants_1.QUOTE_PRECISION;\n    } else {\n        return price;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9vcmFjbGVzL3B5dGhDbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHdCQUF3QixHQUFHQSxrQkFBa0IsR0FBRyxLQUFLO0FBQ3JELE1BQU1JLFdBQVdDLG1CQUFPQSxDQUFDLGtGQUFxQjtBQUM5QyxNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxtRkFBbUI7QUFDNUMsTUFBTUUscUJBQXFCRixtQkFBT0EsQ0FBQyw2R0FBK0I7QUFDbEUsTUFBTUY7SUFDRkssWUFBWUMsVUFBVSxFQUFFQyxXQUFXSCxtQkFBbUJJLEdBQUcsRUFBRUMsYUFBYSxLQUFLLENBQUU7UUFDM0UsSUFBSSxDQUFDSCxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNFLFVBQVUsR0FBR0E7SUFDdEI7SUFDQSxNQUFNQyxtQkFBbUJDLGNBQWMsRUFBRTtRQUNyQyxNQUFNQyxjQUFjLE1BQU0sSUFBSSxDQUFDTixVQUFVLENBQUNPLGNBQWMsQ0FBQ0Y7UUFDekQsT0FBTyxJQUFJLENBQUNHLDRCQUE0QixDQUFDRixZQUFZRyxJQUFJO0lBQzdEO0lBQ0FELDZCQUE2QkUsTUFBTSxFQUFFO1FBQ2pDLE1BQU1DLFlBQVksQ0FBQyxHQUFHaEIsU0FBU2lCLGNBQWMsRUFBRUY7UUFDL0MsTUFBTUcsYUFBYXBCLGlCQUFpQmtCLFVBQVVFLFVBQVUsRUFBRUYsVUFBVUcsUUFBUSxFQUFFLElBQUksQ0FBQ2IsUUFBUTtRQUMzRixJQUFJYyxRQUFRdEIsaUJBQWlCa0IsVUFBVUssU0FBUyxDQUFDRCxLQUFLLEVBQUVKLFVBQVVHLFFBQVEsRUFBRSxJQUFJLENBQUNiLFFBQVE7UUFDekYsSUFBSSxJQUFJLENBQUNFLFVBQVUsRUFBRTtZQUNqQlksUUFBUUUsbUJBQW1CRixPQUFPRjtRQUN0QztRQUNBLE9BQU87WUFDSEU7WUFDQUcsTUFBTSxJQUFJckIsU0FBU3NCLEVBQUUsQ0FBQ1IsVUFBVVMsUUFBUSxDQUFDQyxRQUFRO1lBQ2pEUjtZQUNBUyxNQUFNN0IsaUJBQWlCa0IsVUFBVVcsSUFBSSxDQUFDOUIsS0FBSyxFQUFFbUIsVUFBVUcsUUFBUSxFQUFFLElBQUksQ0FBQ2IsUUFBUTtZQUM5RXNCLGdCQUFnQjlCLGlCQUFpQmtCLFVBQVVhLElBQUksQ0FBQ2hDLEtBQUssRUFBRW1CLFVBQVVHLFFBQVEsRUFBRSxJQUFJLENBQUNiLFFBQVE7WUFDeEZ3QixpQ0FBaUM7UUFDckM7SUFDSjtBQUNKO0FBQ0FsQyxrQkFBa0IsR0FBR0c7QUFDckIsU0FBU0QsaUJBQWlCc0IsS0FBSyxFQUFFRCxRQUFRLEVBQUViLFFBQVE7SUFDL0NhLFdBQVdZLEtBQUtDLEdBQUcsQ0FBQ2I7SUFDcEIsTUFBTWMsZ0JBQWdCOUIsbUJBQW1CK0IsR0FBRyxDQUFDQyxHQUFHLENBQUMsSUFBSWpDLFNBQVNzQixFQUFFLENBQUNMLFVBQVVhLEdBQUcsSUFBSUksR0FBRyxDQUFDOUI7SUFDdEYsT0FBTyxJQUFJSixTQUFTc0IsRUFBRSxDQUFDSixRQUFRVyxLQUFLSSxHQUFHLENBQUMsSUFBSWhCLFdBQ3ZDa0IsR0FBRyxDQUFDbEMsbUJBQW1CbUMsZUFBZSxFQUN0Q0YsR0FBRyxDQUFDSDtBQUNiO0FBQ0FyQyx3QkFBd0IsR0FBR0U7QUFDM0IsTUFBTXlDLFVBQVUsSUFBSXJDLFNBQVNzQixFQUFFLENBQUM7QUFDaEMsU0FBU0YsbUJBQW1CRixLQUFLLEVBQUVGLFVBQVU7SUFDekMsSUFBSUUsTUFBTW9CLEdBQUcsQ0FBQ3JDLG1CQUFtQnNDLGVBQWUsRUFBRVQsR0FBRyxHQUFHVSxFQUFFLENBQUN4QyxTQUFTc0IsRUFBRSxDQUFDbUIsR0FBRyxDQUFDekIsWUFBWXFCLFdBQVc7UUFDOUYsT0FBT3BDLG1CQUFtQnNDLGVBQWU7SUFDN0MsT0FDSztRQUNELE9BQU9yQjtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvb3JhY2xlcy9weXRoQ2xpZW50LmpzP2I1YmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbnZlcnRQeXRoUHJpY2UgPSBleHBvcnRzLlB5dGhDbGllbnQgPSB2b2lkIDA7XG5jb25zdCBjbGllbnRfMSA9IHJlcXVpcmUoXCJAcHl0aG5ldHdvcmsvY2xpZW50XCIpO1xuY29uc3QgYW5jaG9yXzEgPSByZXF1aXJlKFwiQGNvcmFsLXh5ei9hbmNob3JcIik7XG5jb25zdCBudW1lcmljQ29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzL251bWVyaWNDb25zdGFudHNcIik7XG5jbGFzcyBQeXRoQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uLCBtdWx0aXBsZSA9IG51bWVyaWNDb25zdGFudHNfMS5PTkUsIHN0YWJsZUNvaW4gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgICAgICB0aGlzLm11bHRpcGxlID0gbXVsdGlwbGU7XG4gICAgICAgIHRoaXMuc3RhYmxlQ29pbiA9IHN0YWJsZUNvaW47XG4gICAgfVxuICAgIGFzeW5jIGdldE9yYWNsZVByaWNlRGF0YShwcmljZVB1YmxpY0tleSkge1xuICAgICAgICBjb25zdCBhY2NvdW50SW5mbyA9IGF3YWl0IHRoaXMuY29ubmVjdGlvbi5nZXRBY2NvdW50SW5mbyhwcmljZVB1YmxpY0tleSk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9yYWNsZVByaWNlRGF0YUZyb21CdWZmZXIoYWNjb3VudEluZm8uZGF0YSk7XG4gICAgfVxuICAgIGdldE9yYWNsZVByaWNlRGF0YUZyb21CdWZmZXIoYnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IHByaWNlRGF0YSA9ICgwLCBjbGllbnRfMS5wYXJzZVByaWNlRGF0YSkoYnVmZmVyKTtcbiAgICAgICAgY29uc3QgY29uZmlkZW5jZSA9IGNvbnZlcnRQeXRoUHJpY2UocHJpY2VEYXRhLmNvbmZpZGVuY2UsIHByaWNlRGF0YS5leHBvbmVudCwgdGhpcy5tdWx0aXBsZSk7XG4gICAgICAgIGxldCBwcmljZSA9IGNvbnZlcnRQeXRoUHJpY2UocHJpY2VEYXRhLmFnZ3JlZ2F0ZS5wcmljZSwgcHJpY2VEYXRhLmV4cG9uZW50LCB0aGlzLm11bHRpcGxlKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhYmxlQ29pbikge1xuICAgICAgICAgICAgcHJpY2UgPSBnZXRTdGFibGVDb2luUHJpY2UocHJpY2UsIGNvbmZpZGVuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcmljZSxcbiAgICAgICAgICAgIHNsb3Q6IG5ldyBhbmNob3JfMS5CTihwcmljZURhdGEubGFzdFNsb3QudG9TdHJpbmcoKSksXG4gICAgICAgICAgICBjb25maWRlbmNlLFxuICAgICAgICAgICAgdHdhcDogY29udmVydFB5dGhQcmljZShwcmljZURhdGEudHdhcC52YWx1ZSwgcHJpY2VEYXRhLmV4cG9uZW50LCB0aGlzLm11bHRpcGxlKSxcbiAgICAgICAgICAgIHR3YXBDb25maWRlbmNlOiBjb252ZXJ0UHl0aFByaWNlKHByaWNlRGF0YS50d2FjLnZhbHVlLCBwcmljZURhdGEuZXhwb25lbnQsIHRoaXMubXVsdGlwbGUpLFxuICAgICAgICAgICAgaGFzU3VmZmljaWVudE51bWJlck9mRGF0YVBvaW50czogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLlB5dGhDbGllbnQgPSBQeXRoQ2xpZW50O1xuZnVuY3Rpb24gY29udmVydFB5dGhQcmljZShwcmljZSwgZXhwb25lbnQsIG11bHRpcGxlKSB7XG4gICAgZXhwb25lbnQgPSBNYXRoLmFicyhleHBvbmVudCk7XG4gICAgY29uc3QgcHl0aFByZWNpc2lvbiA9IG51bWVyaWNDb25zdGFudHNfMS5URU4ucG93KG5ldyBhbmNob3JfMS5CTihleHBvbmVudCkuYWJzKCkpLmRpdihtdWx0aXBsZSk7XG4gICAgcmV0dXJuIG5ldyBhbmNob3JfMS5CTihwcmljZSAqIE1hdGgucG93KDEwLCBleHBvbmVudCkpXG4gICAgICAgIC5tdWwobnVtZXJpY0NvbnN0YW50c18xLlBSSUNFX1BSRUNJU0lPTilcbiAgICAgICAgLmRpdihweXRoUHJlY2lzaW9uKTtcbn1cbmV4cG9ydHMuY29udmVydFB5dGhQcmljZSA9IGNvbnZlcnRQeXRoUHJpY2U7XG5jb25zdCBmaXZlQlBTID0gbmV3IGFuY2hvcl8xLkJOKDUwMCk7XG5mdW5jdGlvbiBnZXRTdGFibGVDb2luUHJpY2UocHJpY2UsIGNvbmZpZGVuY2UpIHtcbiAgICBpZiAocHJpY2Uuc3ViKG51bWVyaWNDb25zdGFudHNfMS5RVU9URV9QUkVDSVNJT04pLmFicygpLmx0KGFuY2hvcl8xLkJOLm1pbihjb25maWRlbmNlLCBmaXZlQlBTKSkpIHtcbiAgICAgICAgcmV0dXJuIG51bWVyaWNDb25zdGFudHNfMS5RVU9URV9QUkVDSVNJT047XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gcHJpY2U7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29udmVydFB5dGhQcmljZSIsIlB5dGhDbGllbnQiLCJjbGllbnRfMSIsInJlcXVpcmUiLCJhbmNob3JfMSIsIm51bWVyaWNDb25zdGFudHNfMSIsImNvbnN0cnVjdG9yIiwiY29ubmVjdGlvbiIsIm11bHRpcGxlIiwiT05FIiwic3RhYmxlQ29pbiIsImdldE9yYWNsZVByaWNlRGF0YSIsInByaWNlUHVibGljS2V5IiwiYWNjb3VudEluZm8iLCJnZXRBY2NvdW50SW5mbyIsImdldE9yYWNsZVByaWNlRGF0YUZyb21CdWZmZXIiLCJkYXRhIiwiYnVmZmVyIiwicHJpY2VEYXRhIiwicGFyc2VQcmljZURhdGEiLCJjb25maWRlbmNlIiwiZXhwb25lbnQiLCJwcmljZSIsImFnZ3JlZ2F0ZSIsImdldFN0YWJsZUNvaW5QcmljZSIsInNsb3QiLCJCTiIsImxhc3RTbG90IiwidG9TdHJpbmciLCJ0d2FwIiwidHdhcENvbmZpZGVuY2UiLCJ0d2FjIiwiaGFzU3VmZmljaWVudE51bWJlck9mRGF0YVBvaW50cyIsIk1hdGgiLCJhYnMiLCJweXRoUHJlY2lzaW9uIiwiVEVOIiwicG93IiwiZGl2IiwibXVsIiwiUFJJQ0VfUFJFQ0lTSU9OIiwiZml2ZUJQUyIsInN1YiIsIlFVT1RFX1BSRUNJU0lPTiIsImx0IiwibWluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/pythClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/quoteAssetOracleClient.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/oracles/quoteAssetOracleClient.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.QuoteAssetOracleClient = exports.QUOTE_ORACLE_PRICE_DATA = void 0;\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nexports.QUOTE_ORACLE_PRICE_DATA = {\n    price: numericConstants_1.PRICE_PRECISION,\n    slot: new anchor_1.BN(0),\n    confidence: new anchor_1.BN(1),\n    hasSufficientNumberOfDataPoints: true\n};\nclass QuoteAssetOracleClient {\n    constructor(){}\n    async getOraclePriceData(_pricePublicKey) {\n        return Promise.resolve(exports.QUOTE_ORACLE_PRICE_DATA);\n    }\n    getOraclePriceDataFromBuffer(_buffer) {\n        return exports.QUOTE_ORACLE_PRICE_DATA;\n    }\n}\nexports.QuoteAssetOracleClient = QuoteAssetOracleClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9vcmFjbGVzL3F1b3RlQXNzZXRPcmFjbGVDbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDhCQUE4QixHQUFHQSwrQkFBK0IsR0FBRyxLQUFLO0FBQ3hFLE1BQU1JLFdBQVdDLG1CQUFPQSxDQUFDLG1GQUFtQjtBQUM1QyxNQUFNQyxxQkFBcUJELG1CQUFPQSxDQUFDLDZHQUErQjtBQUNsRUwsK0JBQStCLEdBQUc7SUFDOUJPLE9BQU9ELG1CQUFtQkUsZUFBZTtJQUN6Q0MsTUFBTSxJQUFJTCxTQUFTTSxFQUFFLENBQUM7SUFDdEJDLFlBQVksSUFBSVAsU0FBU00sRUFBRSxDQUFDO0lBQzVCRSxpQ0FBaUM7QUFDckM7QUFDQSxNQUFNVjtJQUNGVyxhQUFjLENBQUU7SUFDaEIsTUFBTUMsbUJBQW1CQyxlQUFlLEVBQUU7UUFDdEMsT0FBT0MsUUFBUUMsT0FBTyxDQUFDakIsUUFBUUcsdUJBQXVCO0lBQzFEO0lBQ0FlLDZCQUE2QkMsT0FBTyxFQUFFO1FBQ2xDLE9BQU9uQixRQUFRRyx1QkFBdUI7SUFDMUM7QUFDSjtBQUNBSCw4QkFBOEIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvb3JhY2xlcy9xdW90ZUFzc2V0T3JhY2xlQ2xpZW50LmpzPzBmYTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlF1b3RlQXNzZXRPcmFjbGVDbGllbnQgPSBleHBvcnRzLlFVT1RFX09SQUNMRV9QUklDRV9EQVRBID0gdm9pZCAwO1xuY29uc3QgYW5jaG9yXzEgPSByZXF1aXJlKFwiQGNvcmFsLXh5ei9hbmNob3JcIik7XG5jb25zdCBudW1lcmljQ29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzL251bWVyaWNDb25zdGFudHNcIik7XG5leHBvcnRzLlFVT1RFX09SQUNMRV9QUklDRV9EQVRBID0ge1xuICAgIHByaWNlOiBudW1lcmljQ29uc3RhbnRzXzEuUFJJQ0VfUFJFQ0lTSU9OLFxuICAgIHNsb3Q6IG5ldyBhbmNob3JfMS5CTigwKSxcbiAgICBjb25maWRlbmNlOiBuZXcgYW5jaG9yXzEuQk4oMSksXG4gICAgaGFzU3VmZmljaWVudE51bWJlck9mRGF0YVBvaW50czogdHJ1ZSxcbn07XG5jbGFzcyBRdW90ZUFzc2V0T3JhY2xlQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuICAgIGFzeW5jIGdldE9yYWNsZVByaWNlRGF0YShfcHJpY2VQdWJsaWNLZXkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShleHBvcnRzLlFVT1RFX09SQUNMRV9QUklDRV9EQVRBKTtcbiAgICB9XG4gICAgZ2V0T3JhY2xlUHJpY2VEYXRhRnJvbUJ1ZmZlcihfYnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLlFVT1RFX09SQUNMRV9QUklDRV9EQVRBO1xuICAgIH1cbn1cbmV4cG9ydHMuUXVvdGVBc3NldE9yYWNsZUNsaWVudCA9IFF1b3RlQXNzZXRPcmFjbGVDbGllbnQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJRdW90ZUFzc2V0T3JhY2xlQ2xpZW50IiwiUVVPVEVfT1JBQ0xFX1BSSUNFX0RBVEEiLCJhbmNob3JfMSIsInJlcXVpcmUiLCJudW1lcmljQ29uc3RhbnRzXzEiLCJwcmljZSIsIlBSSUNFX1BSRUNJU0lPTiIsInNsb3QiLCJCTiIsImNvbmZpZGVuY2UiLCJoYXNTdWZmaWNpZW50TnVtYmVyT2ZEYXRhUG9pbnRzIiwiY29uc3RydWN0b3IiLCJnZXRPcmFjbGVQcmljZURhdGEiLCJfcHJpY2VQdWJsaWNLZXkiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldE9yYWNsZVByaWNlRGF0YUZyb21CdWZmZXIiLCJfYnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/quoteAssetOracleClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/oracles/types.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9vcmFjbGVzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL29yYWNsZXMvdHlwZXMuanM/Y2VhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/oracles/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/orderParams.js":
/*!*********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/orderParams.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getOrderParams = exports.getMarketOrderParams = exports.getTriggerLimitOrderParams = exports.getTriggerMarketOrderParams = exports.getLimitOrderParams = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nfunction getLimitOrderParams(params) {\n    return Object.assign({}, params, {\n        orderType: types_1.OrderType.LIMIT\n    });\n}\nexports.getLimitOrderParams = getLimitOrderParams;\nfunction getTriggerMarketOrderParams(params) {\n    return Object.assign({}, params, {\n        orderType: types_1.OrderType.TRIGGER_MARKET\n    });\n}\nexports.getTriggerMarketOrderParams = getTriggerMarketOrderParams;\nfunction getTriggerLimitOrderParams(params) {\n    return Object.assign({}, params, {\n        orderType: types_1.OrderType.TRIGGER_LIMIT\n    });\n}\nexports.getTriggerLimitOrderParams = getTriggerLimitOrderParams;\nfunction getMarketOrderParams(params) {\n    return Object.assign({}, params, {\n        orderType: types_1.OrderType.MARKET\n    });\n}\nexports.getMarketOrderParams = getMarketOrderParams;\n/**\n * Creates an OrderParams object with the given OptionalOrderParams and any params to override.\n *\n * example:\n * ```\n * const orderParams = getOrderParams(optionalOrderParams, { marketType: MarketType.PERP });\n * ```\n *\n * @param optionalOrderParams\n * @param overridingParams\n * @returns\n */ function getOrderParams(optionalOrderParams, overridingParams = {}) {\n    return Object.assign({}, types_1.DefaultOrderParams, optionalOrderParams, overridingParams);\n}\nexports.getOrderParams = getOrderParams;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9vcmRlclBhcmFtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUdBLDRCQUE0QixHQUFHQSxrQ0FBa0MsR0FBR0EsbUNBQW1DLEdBQUdBLDJCQUEyQixHQUFHLEtBQUs7QUFDdEssTUFBTU8sVUFBVUMsbUJBQU9BLENBQUMsa0VBQVM7QUFDakMsU0FBU0Ysb0JBQW9CRyxNQUFNO0lBQy9CLE9BQU9YLE9BQU9ZLE1BQU0sQ0FBQyxDQUFDLEdBQUdELFFBQVE7UUFDN0JFLFdBQVdKLFFBQVFLLFNBQVMsQ0FBQ0MsS0FBSztJQUN0QztBQUNKO0FBQ0FiLDJCQUEyQixHQUFHTTtBQUM5QixTQUFTRCw0QkFBNEJJLE1BQU07SUFDdkMsT0FBT1gsT0FBT1ksTUFBTSxDQUFDLENBQUMsR0FBR0QsUUFBUTtRQUM3QkUsV0FBV0osUUFBUUssU0FBUyxDQUFDRSxjQUFjO0lBQy9DO0FBQ0o7QUFDQWQsbUNBQW1DLEdBQUdLO0FBQ3RDLFNBQVNELDJCQUEyQkssTUFBTTtJQUN0QyxPQUFPWCxPQUFPWSxNQUFNLENBQUMsQ0FBQyxHQUFHRCxRQUFRO1FBQzdCRSxXQUFXSixRQUFRSyxTQUFTLENBQUNHLGFBQWE7SUFDOUM7QUFDSjtBQUNBZixrQ0FBa0MsR0FBR0k7QUFDckMsU0FBU0QscUJBQXFCTSxNQUFNO0lBQ2hDLE9BQU9YLE9BQU9ZLE1BQU0sQ0FBQyxDQUFDLEdBQUdELFFBQVE7UUFDN0JFLFdBQVdKLFFBQVFLLFNBQVMsQ0FBQ0ksTUFBTTtJQUN2QztBQUNKO0FBQ0FoQiw0QkFBNEIsR0FBR0c7QUFDL0I7Ozs7Ozs7Ozs7O0NBV0MsR0FDRCxTQUFTRCxlQUFlZSxtQkFBbUIsRUFBRUMsbUJBQW1CLENBQUMsQ0FBQztJQUM5RCxPQUFPcEIsT0FBT1ksTUFBTSxDQUFDLENBQUMsR0FBR0gsUUFBUVksa0JBQWtCLEVBQUVGLHFCQUFxQkM7QUFDOUU7QUFDQWxCLHNCQUFzQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9vcmRlclBhcmFtcy5qcz8zMTBiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRPcmRlclBhcmFtcyA9IGV4cG9ydHMuZ2V0TWFya2V0T3JkZXJQYXJhbXMgPSBleHBvcnRzLmdldFRyaWdnZXJMaW1pdE9yZGVyUGFyYW1zID0gZXhwb3J0cy5nZXRUcmlnZ2VyTWFya2V0T3JkZXJQYXJhbXMgPSBleHBvcnRzLmdldExpbWl0T3JkZXJQYXJhbXMgPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5mdW5jdGlvbiBnZXRMaW1pdE9yZGVyUGFyYW1zKHBhcmFtcykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgb3JkZXJUeXBlOiB0eXBlc18xLk9yZGVyVHlwZS5MSU1JVCxcbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0TGltaXRPcmRlclBhcmFtcyA9IGdldExpbWl0T3JkZXJQYXJhbXM7XG5mdW5jdGlvbiBnZXRUcmlnZ2VyTWFya2V0T3JkZXJQYXJhbXMocGFyYW1zKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHBhcmFtcywge1xuICAgICAgICBvcmRlclR5cGU6IHR5cGVzXzEuT3JkZXJUeXBlLlRSSUdHRVJfTUFSS0VULFxuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRUcmlnZ2VyTWFya2V0T3JkZXJQYXJhbXMgPSBnZXRUcmlnZ2VyTWFya2V0T3JkZXJQYXJhbXM7XG5mdW5jdGlvbiBnZXRUcmlnZ2VyTGltaXRPcmRlclBhcmFtcyhwYXJhbXMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB7XG4gICAgICAgIG9yZGVyVHlwZTogdHlwZXNfMS5PcmRlclR5cGUuVFJJR0dFUl9MSU1JVCxcbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0VHJpZ2dlckxpbWl0T3JkZXJQYXJhbXMgPSBnZXRUcmlnZ2VyTGltaXRPcmRlclBhcmFtcztcbmZ1bmN0aW9uIGdldE1hcmtldE9yZGVyUGFyYW1zKHBhcmFtcykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgb3JkZXJUeXBlOiB0eXBlc18xLk9yZGVyVHlwZS5NQVJLRVQsXG4gICAgfSk7XG59XG5leHBvcnRzLmdldE1hcmtldE9yZGVyUGFyYW1zID0gZ2V0TWFya2V0T3JkZXJQYXJhbXM7XG4vKipcbiAqIENyZWF0ZXMgYW4gT3JkZXJQYXJhbXMgb2JqZWN0IHdpdGggdGhlIGdpdmVuIE9wdGlvbmFsT3JkZXJQYXJhbXMgYW5kIGFueSBwYXJhbXMgdG8gb3ZlcnJpZGUuXG4gKlxuICogZXhhbXBsZTpcbiAqIGBgYFxuICogY29uc3Qgb3JkZXJQYXJhbXMgPSBnZXRPcmRlclBhcmFtcyhvcHRpb25hbE9yZGVyUGFyYW1zLCB7IG1hcmtldFR5cGU6IE1hcmtldFR5cGUuUEVSUCB9KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvcHRpb25hbE9yZGVyUGFyYW1zXG4gKiBAcGFyYW0gb3ZlcnJpZGluZ1BhcmFtc1xuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gZ2V0T3JkZXJQYXJhbXMob3B0aW9uYWxPcmRlclBhcmFtcywgb3ZlcnJpZGluZ1BhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHR5cGVzXzEuRGVmYXVsdE9yZGVyUGFyYW1zLCBvcHRpb25hbE9yZGVyUGFyYW1zLCBvdmVycmlkaW5nUGFyYW1zKTtcbn1cbmV4cG9ydHMuZ2V0T3JkZXJQYXJhbXMgPSBnZXRPcmRlclBhcmFtcztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldE9yZGVyUGFyYW1zIiwiZ2V0TWFya2V0T3JkZXJQYXJhbXMiLCJnZXRUcmlnZ2VyTGltaXRPcmRlclBhcmFtcyIsImdldFRyaWdnZXJNYXJrZXRPcmRlclBhcmFtcyIsImdldExpbWl0T3JkZXJQYXJhbXMiLCJ0eXBlc18xIiwicmVxdWlyZSIsInBhcmFtcyIsImFzc2lnbiIsIm9yZGVyVHlwZSIsIk9yZGVyVHlwZSIsIkxJTUlUIiwiVFJJR0dFUl9NQVJLRVQiLCJUUklHR0VSX0xJTUlUIiwiTUFSS0VUIiwib3B0aW9uYWxPcmRlclBhcmFtcyIsIm92ZXJyaWRpbmdQYXJhbXMiLCJEZWZhdWx0T3JkZXJQYXJhbXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/orderParams.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/OrderSubscriber.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/orderSubscriber/OrderSubscriber.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OrderSubscriber = void 0;\nconst memcmp_1 = __webpack_require__(/*! ../memcmp */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/memcmp.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst DLOB_1 = __webpack_require__(/*! ../dlob/DLOB */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/DLOB.js\");\nconst PollingSubscription_1 = __webpack_require__(/*! ./PollingSubscription */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/PollingSubscription.js\");\nconst WebsocketSubscription_1 = __webpack_require__(/*! ./WebsocketSubscription */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/WebsocketSubscription.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nclass OrderSubscriber {\n    constructor(config){\n        this.usersAccounts = new Map();\n        this.driftClient = config.driftClient;\n        if (config.subscriptionConfig.type === \"polling\") {\n            this.subscription = new PollingSubscription_1.PollingSubscription({\n                orderSubscriber: this,\n                frequency: config.subscriptionConfig.frequency\n            });\n        } else {\n            this.subscription = new WebsocketSubscription_1.WebsocketSubscription({\n                orderSubscriber: this,\n                skipInitialLoad: config.subscriptionConfig.skipInitialLoad\n            });\n        }\n        this.eventEmitter = new events_1.EventEmitter();\n    }\n    async subscribe() {\n        await this.subscription.subscribe();\n    }\n    async fetch() {\n        if (this.fetchPromise) {\n            return this.fetchPromise;\n        }\n        this.fetchPromise = new Promise((resolver)=>{\n            this.fetchPromiseResolver = resolver;\n        });\n        try {\n            const rpcRequestArgs = [\n                this.driftClient.program.programId.toBase58(),\n                {\n                    commitment: this.driftClient.opts.commitment,\n                    filters: [\n                        (0, memcmp_1.getUserFilter)(),\n                        (0, memcmp_1.getUserWithOrderFilter)()\n                    ],\n                    encoding: \"base64\",\n                    withContext: true\n                }\n            ];\n            const rpcJSONResponse = // @ts-ignore\n            await this.driftClient.connection._rpcRequest(\"getProgramAccounts\", rpcRequestArgs);\n            const rpcResponseAndContext = rpcJSONResponse.result;\n            const slot = rpcResponseAndContext.context.slot;\n            const programAccountSet = new Set();\n            for (const programAccount of rpcResponseAndContext.value){\n                const key = programAccount.pubkey.toString();\n                // @ts-ignore\n                const buffer = buffer_1.Buffer.from(programAccount.account.data[0], programAccount.account.data[1]);\n                programAccountSet.add(key);\n                this.tryUpdateUserAccount(key, buffer, slot);\n            }\n            for (const key of this.usersAccounts.keys()){\n                if (!programAccountSet.has(key)) {\n                    this.usersAccounts.delete(key);\n                }\n            }\n        } catch (e) {\n            console.error(e);\n        } finally{\n            this.fetchPromiseResolver();\n            this.fetchPromise = undefined;\n        }\n    }\n    tryUpdateUserAccount(key, buffer, slot) {\n        const slotAndUserAccount = this.usersAccounts.get(key);\n        if (!slotAndUserAccount || slotAndUserAccount.slot < slot) {\n            const userAccount = this.driftClient.program.account.user.coder.accounts.decode(\"User\", buffer);\n            const newOrders = userAccount.orders.filter((order)=>{\n                var _a;\n                return order.slot.toNumber() > ((_a = slotAndUserAccount === null || slotAndUserAccount === void 0 ? void 0 : slotAndUserAccount.slot) !== null && _a !== void 0 ? _a : 0) && order.slot.toNumber() <= slot;\n            });\n            if (newOrders.length > 0) {\n                this.eventEmitter.emit(\"onUpdate\", userAccount, newOrders, new web3_js_1.PublicKey(key), slot);\n            }\n            if (userAccount.hasOpenOrder) {\n                this.usersAccounts.set(key, {\n                    slot,\n                    userAccount\n                });\n            } else {\n                this.usersAccounts.delete(key);\n            }\n        }\n    }\n    async getDLOB(slot) {\n        const dlob = new DLOB_1.DLOB();\n        for (const [key, { userAccount }] of this.usersAccounts.entries()){\n            const userAccountPubkey = new web3_js_1.PublicKey(key);\n            for (const order of userAccount.orders){\n                dlob.insertOrder(order, userAccountPubkey, slot);\n            }\n        }\n        return dlob;\n    }\n    async unsubscribe() {\n        await this.subscription.unsubscribe();\n    }\n}\nexports.OrderSubscriber = OrderSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/OrderSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/PollingSubscription.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/orderSubscriber/PollingSubscription.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PollingSubscription = void 0;\nclass PollingSubscription {\n    constructor({ orderSubscriber, frequency }){\n        this.orderSubscriber = orderSubscriber;\n        this.frequency = frequency;\n    }\n    async subscribe() {\n        if (this.intervalId) {\n            return;\n        }\n        this.intervalId = setInterval(this.orderSubscriber.fetch.bind(this.orderSubscriber), this.frequency);\n        await this.orderSubscriber.fetch();\n    }\n    async unsubscribe() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        }\n    }\n}\nexports.PollingSubscription = PollingSubscription;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9vcmRlclN1YnNjcmliZXIvUG9sbGluZ1N1YnNjcmlwdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMkJBQTJCLEdBQUcsS0FBSztBQUNuQyxNQUFNRTtJQUNGQyxZQUFZLEVBQUVDLGVBQWUsRUFBRUMsU0FBUyxFQUFHLENBQUU7UUFDekMsSUFBSSxDQUFDRCxlQUFlLEdBQUdBO1FBQ3ZCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQTtJQUNyQjtJQUNBLE1BQU1DLFlBQVk7UUFDZCxJQUFJLElBQUksQ0FBQ0MsVUFBVSxFQUFFO1lBQ2pCO1FBQ0o7UUFDQSxJQUFJLENBQUNBLFVBQVUsR0FBR0MsWUFBWSxJQUFJLENBQUNKLGVBQWUsQ0FBQ0ssS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDTixlQUFlLEdBQUcsSUFBSSxDQUFDQyxTQUFTO1FBQ25HLE1BQU0sSUFBSSxDQUFDRCxlQUFlLENBQUNLLEtBQUs7SUFDcEM7SUFDQSxNQUFNRSxjQUFjO1FBQ2hCLElBQUksSUFBSSxDQUFDSixVQUFVLEVBQUU7WUFDakJLLGNBQWMsSUFBSSxDQUFDTCxVQUFVO1lBQzdCLElBQUksQ0FBQ0EsVUFBVSxHQUFHTTtRQUN0QjtJQUNKO0FBQ0o7QUFDQWIsMkJBQTJCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL29yZGVyU3Vic2NyaWJlci9Qb2xsaW5nU3Vic2NyaXB0aW9uLmpzPzBhZTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBvbGxpbmdTdWJzY3JpcHRpb24gPSB2b2lkIDA7XG5jbGFzcyBQb2xsaW5nU3Vic2NyaXB0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih7IG9yZGVyU3Vic2NyaWJlciwgZnJlcXVlbmN5LCB9KSB7XG4gICAgICAgIHRoaXMub3JkZXJTdWJzY3JpYmVyID0gb3JkZXJTdWJzY3JpYmVyO1xuICAgICAgICB0aGlzLmZyZXF1ZW5jeSA9IGZyZXF1ZW5jeTtcbiAgICB9XG4gICAgYXN5bmMgc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAodGhpcy5pbnRlcnZhbElkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwodGhpcy5vcmRlclN1YnNjcmliZXIuZmV0Y2guYmluZCh0aGlzLm9yZGVyU3Vic2NyaWJlciksIHRoaXMuZnJlcXVlbmN5KTtcbiAgICAgICAgYXdhaXQgdGhpcy5vcmRlclN1YnNjcmliZXIuZmV0Y2goKTtcbiAgICB9XG4gICAgYXN5bmMgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICh0aGlzLmludGVydmFsSWQpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbElkKTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWxJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUG9sbGluZ1N1YnNjcmlwdGlvbiA9IFBvbGxpbmdTdWJzY3JpcHRpb247XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQb2xsaW5nU3Vic2NyaXB0aW9uIiwiY29uc3RydWN0b3IiLCJvcmRlclN1YnNjcmliZXIiLCJmcmVxdWVuY3kiLCJzdWJzY3JpYmUiLCJpbnRlcnZhbElkIiwic2V0SW50ZXJ2YWwiLCJmZXRjaCIsImJpbmQiLCJ1bnN1YnNjcmliZSIsImNsZWFySW50ZXJ2YWwiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/PollingSubscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/WebsocketSubscription.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/orderSubscriber/WebsocketSubscription.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebsocketSubscription = void 0;\nconst memcmp_1 = __webpack_require__(/*! ../memcmp */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/memcmp.js\");\nclass WebsocketSubscription {\n    constructor({ orderSubscriber, skipInitialLoad = false }){\n        this.orderSubscriber = orderSubscriber;\n        this.skipInitialLoad = skipInitialLoad;\n    }\n    async subscribe() {\n        if (this.websocketId) {\n            return;\n        }\n        this.websocketId = this.orderSubscriber.driftClient.connection.onProgramAccountChange(this.orderSubscriber.driftClient.program.programId, (keyAccountInfo, context)=>{\n            const userKey = keyAccountInfo.accountId.toBase58();\n            this.orderSubscriber.tryUpdateUserAccount(userKey, keyAccountInfo.accountInfo.data, context.slot);\n        }, this.orderSubscriber.driftClient.opts.commitment, [\n            (0, memcmp_1.getUserFilter)(),\n            (0, memcmp_1.getNonIdleUserFilter)()\n        ]);\n        if (!this.skipInitialLoad) {\n            await this.orderSubscriber.fetch();\n        }\n    }\n    async unsubscribe() {\n        if (this.websocketId) {\n            await this.orderSubscriber.driftClient.connection.removeProgramAccountChangeListener(this.websocketId);\n            this.websocketId = undefined;\n        }\n    }\n}\nexports.WebsocketSubscription = WebsocketSubscription;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9vcmRlclN1YnNjcmliZXIvV2Vic29ja2V0U3Vic2NyaXB0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBRyxLQUFLO0FBQ3JDLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLHFFQUFXO0FBQ3BDLE1BQU1GO0lBQ0ZHLFlBQVksRUFBRUMsZUFBZSxFQUFFQyxrQkFBa0IsS0FBSyxFQUFHLENBQUU7UUFDdkQsSUFBSSxDQUFDRCxlQUFlLEdBQUdBO1FBQ3ZCLElBQUksQ0FBQ0MsZUFBZSxHQUFHQTtJQUMzQjtJQUNBLE1BQU1DLFlBQVk7UUFDZCxJQUFJLElBQUksQ0FBQ0MsV0FBVyxFQUFFO1lBQ2xCO1FBQ0o7UUFDQSxJQUFJLENBQUNBLFdBQVcsR0FDWixJQUFJLENBQUNILGVBQWUsQ0FBQ0ksV0FBVyxDQUFDQyxVQUFVLENBQUNDLHNCQUFzQixDQUFDLElBQUksQ0FBQ04sZUFBZSxDQUFDSSxXQUFXLENBQUNHLE9BQU8sQ0FBQ0MsU0FBUyxFQUFFLENBQUNDLGdCQUFnQkM7WUFDcEksTUFBTUMsVUFBVUYsZUFBZUcsU0FBUyxDQUFDQyxRQUFRO1lBQ2pELElBQUksQ0FBQ2IsZUFBZSxDQUFDYyxvQkFBb0IsQ0FBQ0gsU0FBU0YsZUFBZU0sV0FBVyxDQUFDQyxJQUFJLEVBQUVOLFFBQVFPLElBQUk7UUFDcEcsR0FBRyxJQUFJLENBQUNqQixlQUFlLENBQUNJLFdBQVcsQ0FBQ2MsSUFBSSxDQUFDQyxVQUFVLEVBQUU7WUFBRSxJQUFHdEIsU0FBU3VCLGFBQWE7WUFBTSxJQUFHdkIsU0FBU3dCLG9CQUFvQjtTQUFJO1FBQzlILElBQUksQ0FBQyxJQUFJLENBQUNwQixlQUFlLEVBQUU7WUFDdkIsTUFBTSxJQUFJLENBQUNELGVBQWUsQ0FBQ3NCLEtBQUs7UUFDcEM7SUFDSjtJQUNBLE1BQU1DLGNBQWM7UUFDaEIsSUFBSSxJQUFJLENBQUNwQixXQUFXLEVBQUU7WUFDbEIsTUFBTSxJQUFJLENBQUNILGVBQWUsQ0FBQ0ksV0FBVyxDQUFDQyxVQUFVLENBQUNtQixrQ0FBa0MsQ0FBQyxJQUFJLENBQUNyQixXQUFXO1lBQ3JHLElBQUksQ0FBQ0EsV0FBVyxHQUFHc0I7UUFDdkI7SUFDSjtBQUNKO0FBQ0EvQiw2QkFBNkIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvb3JkZXJTdWJzY3JpYmVyL1dlYnNvY2tldFN1YnNjcmlwdGlvbi5qcz8yOWM4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XZWJzb2NrZXRTdWJzY3JpcHRpb24gPSB2b2lkIDA7XG5jb25zdCBtZW1jbXBfMSA9IHJlcXVpcmUoXCIuLi9tZW1jbXBcIik7XG5jbGFzcyBXZWJzb2NrZXRTdWJzY3JpcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHsgb3JkZXJTdWJzY3JpYmVyLCBza2lwSW5pdGlhbExvYWQgPSBmYWxzZSwgfSkge1xuICAgICAgICB0aGlzLm9yZGVyU3Vic2NyaWJlciA9IG9yZGVyU3Vic2NyaWJlcjtcbiAgICAgICAgdGhpcy5za2lwSW5pdGlhbExvYWQgPSBza2lwSW5pdGlhbExvYWQ7XG4gICAgfVxuICAgIGFzeW5jIHN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKHRoaXMud2Vic29ja2V0SWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndlYnNvY2tldElkID1cbiAgICAgICAgICAgIHRoaXMub3JkZXJTdWJzY3JpYmVyLmRyaWZ0Q2xpZW50LmNvbm5lY3Rpb24ub25Qcm9ncmFtQWNjb3VudENoYW5nZSh0aGlzLm9yZGVyU3Vic2NyaWJlci5kcmlmdENsaWVudC5wcm9ncmFtLnByb2dyYW1JZCwgKGtleUFjY291bnRJbmZvLCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlcktleSA9IGtleUFjY291bnRJbmZvLmFjY291bnRJZC50b0Jhc2U1OCgpO1xuICAgICAgICAgICAgICAgIHRoaXMub3JkZXJTdWJzY3JpYmVyLnRyeVVwZGF0ZVVzZXJBY2NvdW50KHVzZXJLZXksIGtleUFjY291bnRJbmZvLmFjY291bnRJbmZvLmRhdGEsIGNvbnRleHQuc2xvdCk7XG4gICAgICAgICAgICB9LCB0aGlzLm9yZGVyU3Vic2NyaWJlci5kcmlmdENsaWVudC5vcHRzLmNvbW1pdG1lbnQsIFsoMCwgbWVtY21wXzEuZ2V0VXNlckZpbHRlcikoKSwgKDAsIG1lbWNtcF8xLmdldE5vbklkbGVVc2VyRmlsdGVyKSgpXSk7XG4gICAgICAgIGlmICghdGhpcy5za2lwSW5pdGlhbExvYWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMub3JkZXJTdWJzY3JpYmVyLmZldGNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICh0aGlzLndlYnNvY2tldElkKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm9yZGVyU3Vic2NyaWJlci5kcmlmdENsaWVudC5jb25uZWN0aW9uLnJlbW92ZVByb2dyYW1BY2NvdW50Q2hhbmdlTGlzdGVuZXIodGhpcy53ZWJzb2NrZXRJZCk7XG4gICAgICAgICAgICB0aGlzLndlYnNvY2tldElkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5XZWJzb2NrZXRTdWJzY3JpcHRpb24gPSBXZWJzb2NrZXRTdWJzY3JpcHRpb247XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJXZWJzb2NrZXRTdWJzY3JpcHRpb24iLCJtZW1jbXBfMSIsInJlcXVpcmUiLCJjb25zdHJ1Y3RvciIsIm9yZGVyU3Vic2NyaWJlciIsInNraXBJbml0aWFsTG9hZCIsInN1YnNjcmliZSIsIndlYnNvY2tldElkIiwiZHJpZnRDbGllbnQiLCJjb25uZWN0aW9uIiwib25Qcm9ncmFtQWNjb3VudENoYW5nZSIsInByb2dyYW0iLCJwcm9ncmFtSWQiLCJrZXlBY2NvdW50SW5mbyIsImNvbnRleHQiLCJ1c2VyS2V5IiwiYWNjb3VudElkIiwidG9CYXNlNTgiLCJ0cnlVcGRhdGVVc2VyQWNjb3VudCIsImFjY291bnRJbmZvIiwiZGF0YSIsInNsb3QiLCJvcHRzIiwiY29tbWl0bWVudCIsImdldFVzZXJGaWx0ZXIiLCJnZXROb25JZGxlVXNlckZpbHRlciIsImZldGNoIiwidW5zdWJzY3JpYmUiLCJyZW1vdmVQcm9ncmFtQWNjb3VudENoYW5nZUxpc3RlbmVyIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/WebsocketSubscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/orderSubscriber/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./OrderSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/OrderSubscriber.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9vcmRlclN1YnNjcmliZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVNaLENBQUMsRUFBRWEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtkLEVBQUcsSUFBSWMsTUFBTSxhQUFhLENBQUNqQixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWxCLGdCQUFnQmlCLFVBQVNiLEdBQUdjO0FBQzNIO0FBQ0FqQiw4Q0FBNkM7SUFBRXFCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0ROLGFBQWFPLG1CQUFPQSxDQUFDLHNHQUFtQixHQUFHTjtBQUMzQ0QsYUFBYU8sbUJBQU9BLENBQUMsa0ZBQVMsR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvb3JkZXJTdWJzY3JpYmVyL2luZGV4LmpzPzc1NmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9PcmRlclN1YnNjcmliZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/types.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/orderSubscriber/types.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9vcmRlclN1YnNjcmliZXIvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvb3JkZXJTdWJzY3JpYmVyL3R5cGVzLmpzPzBiZjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/orderSubscriber/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/phoenix/phoenixFulfillmentConfigMap.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/phoenix/phoenixFulfillmentConfigMap.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PhoenixFulfillmentConfigMap = void 0;\nclass PhoenixFulfillmentConfigMap {\n    constructor(driftClient){\n        this.map = new Map();\n        this.driftClient = driftClient;\n    }\n    async add(marketIndex, phoenixMarketAddress) {\n        const account = await this.driftClient.getPhoenixV1FulfillmentConfig(phoenixMarketAddress);\n        this.map.set(marketIndex, account);\n    }\n    get(marketIndex) {\n        return this.map.get(marketIndex);\n    }\n}\nexports.PhoenixFulfillmentConfigMap = PhoenixFulfillmentConfigMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9waG9lbml4L3Bob2VuaXhGdWxmaWxsbWVudENvbmZpZ01hcC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUNBQW1DLEdBQUcsS0FBSztBQUMzQyxNQUFNRTtJQUNGQyxZQUFZQyxXQUFXLENBQUU7UUFDckIsSUFBSSxDQUFDQyxHQUFHLEdBQUcsSUFBSUM7UUFDZixJQUFJLENBQUNGLFdBQVcsR0FBR0E7SUFDdkI7SUFDQSxNQUFNRyxJQUFJQyxXQUFXLEVBQUVDLG9CQUFvQixFQUFFO1FBQ3pDLE1BQU1DLFVBQVUsTUFBTSxJQUFJLENBQUNOLFdBQVcsQ0FBQ08sNkJBQTZCLENBQUNGO1FBQ3JFLElBQUksQ0FBQ0osR0FBRyxDQUFDTyxHQUFHLENBQUNKLGFBQWFFO0lBQzlCO0lBQ0FHLElBQUlMLFdBQVcsRUFBRTtRQUNiLE9BQU8sSUFBSSxDQUFDSCxHQUFHLENBQUNRLEdBQUcsQ0FBQ0w7SUFDeEI7QUFDSjtBQUNBUixtQ0FBbUMsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvcGhvZW5peC9waG9lbml4RnVsZmlsbG1lbnRDb25maWdNYXAuanM/OGY5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGhvZW5peEZ1bGZpbGxtZW50Q29uZmlnTWFwID0gdm9pZCAwO1xuY2xhc3MgUGhvZW5peEZ1bGZpbGxtZW50Q29uZmlnTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihkcmlmdENsaWVudCkge1xuICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5kcmlmdENsaWVudCA9IGRyaWZ0Q2xpZW50O1xuICAgIH1cbiAgICBhc3luYyBhZGQobWFya2V0SW5kZXgsIHBob2VuaXhNYXJrZXRBZGRyZXNzKSB7XG4gICAgICAgIGNvbnN0IGFjY291bnQgPSBhd2FpdCB0aGlzLmRyaWZ0Q2xpZW50LmdldFBob2VuaXhWMUZ1bGZpbGxtZW50Q29uZmlnKHBob2VuaXhNYXJrZXRBZGRyZXNzKTtcbiAgICAgICAgdGhpcy5tYXAuc2V0KG1hcmtldEluZGV4LCBhY2NvdW50KTtcbiAgICB9XG4gICAgZ2V0KG1hcmtldEluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXQobWFya2V0SW5kZXgpO1xuICAgIH1cbn1cbmV4cG9ydHMuUGhvZW5peEZ1bGZpbGxtZW50Q29uZmlnTWFwID0gUGhvZW5peEZ1bGZpbGxtZW50Q29uZmlnTWFwO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUGhvZW5peEZ1bGZpbGxtZW50Q29uZmlnTWFwIiwiY29uc3RydWN0b3IiLCJkcmlmdENsaWVudCIsIm1hcCIsIk1hcCIsImFkZCIsIm1hcmtldEluZGV4IiwicGhvZW5peE1hcmtldEFkZHJlc3MiLCJhY2NvdW50IiwiZ2V0UGhvZW5peFYxRnVsZmlsbG1lbnRDb25maWciLCJzZXQiLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/phoenix/phoenixFulfillmentConfigMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/phoenix/phoenixSubscriber.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/phoenix/phoenixSubscriber.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PhoenixSubscriber = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst phoenix_sdk_1 = __webpack_require__(/*! @ellipsis-labs/phoenix-sdk */ \"(ssr)/./node_modules/@ellipsis-labs/phoenix-sdk/dist/index.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nclass PhoenixSubscriber {\n    constructor(config){\n        this.connection = config.connection;\n        this.programId = config.programId;\n        this.marketAddress = config.marketAddress;\n        if (config.accountSubscription.type === \"polling\") {\n            this.subscriptionType = \"polling\";\n            this.accountLoader = config.accountSubscription.accountLoader;\n        } else {\n            this.subscriptionType = \"websocket\";\n        }\n        this.lastSlot = 0;\n        this.lastUnixTimestamp = 0;\n    }\n    async subscribe() {\n        if (this.subscribed) {\n            return;\n        }\n        this.market = await phoenix_sdk_1.Market.loadFromAddress({\n            connection: this.connection,\n            address: this.marketAddress\n        });\n        const clock = (0, phoenix_sdk_1.deserializeClockData)((await this.connection.getAccountInfo(web3_js_1.SYSVAR_CLOCK_PUBKEY, \"confirmed\")).data);\n        this.lastUnixTimestamp = (0, phoenix_sdk_1.toNum)(clock.unixTimestamp);\n        if (this.subscriptionType === \"websocket\") {\n            this.marketCallbackId = this.connection.onAccountChange(this.marketAddress, (accountInfo, _ctx)=>{\n                try {\n                    this.market = this.market.reload(accountInfo.data);\n                } catch  {\n                    console.error(\"Failed to reload Phoenix market data\");\n                }\n            });\n            this.clockCallbackId = this.connection.onAccountChange(web3_js_1.SYSVAR_CLOCK_PUBKEY, (accountInfo, ctx)=>{\n                try {\n                    this.lastSlot = ctx.slot;\n                    const clock = (0, phoenix_sdk_1.deserializeClockData)(accountInfo.data);\n                    this.lastUnixTimestamp = (0, phoenix_sdk_1.toNum)(clock.unixTimestamp);\n                } catch  {\n                    console.error(\"Failed to reload clock data\");\n                }\n            });\n        } else {\n            this.marketCallbackId = await this.accountLoader.addAccount(this.marketAddress, (buffer, slot)=>{\n                try {\n                    this.lastSlot = slot;\n                    if (buffer) {\n                        this.market = this.market.reload(buffer);\n                    }\n                } catch  {\n                    console.error(\"Failed to reload Phoenix market data\");\n                }\n            });\n            this.clockCallbackId = await this.accountLoader.addAccount(web3_js_1.SYSVAR_CLOCK_PUBKEY, (buffer, slot)=>{\n                try {\n                    this.lastSlot = slot;\n                    const clock = (0, phoenix_sdk_1.deserializeClockData)(buffer);\n                    this.lastUnixTimestamp = (0, phoenix_sdk_1.toNum)(clock.unixTimestamp);\n                } catch  {\n                    console.error(\"Failed to reload clock data\");\n                }\n            });\n        }\n        this.subscribed = true;\n    }\n    getBestBid() {\n        const ladder = (0, phoenix_sdk_1.getMarketUiLadder)(this.market, this.lastSlot, this.lastUnixTimestamp, 1);\n        const bestBid = ladder.bids[0];\n        if (!bestBid) {\n            return undefined;\n        }\n        return new anchor_1.BN(Math.floor(bestBid.price * numericConstants_1.PRICE_PRECISION.toNumber()));\n    }\n    getBestAsk() {\n        const ladder = (0, phoenix_sdk_1.getMarketUiLadder)(this.market, this.lastSlot, this.lastUnixTimestamp, 1);\n        const bestAsk = ladder.asks[0];\n        if (!bestAsk) {\n            return undefined;\n        }\n        return new anchor_1.BN(Math.floor(bestAsk.price * numericConstants_1.PRICE_PRECISION.toNumber()));\n    }\n    getL2Bids() {\n        return this.getL2Levels(\"bids\");\n    }\n    getL2Asks() {\n        return this.getL2Levels(\"asks\");\n    }\n    *getL2Levels(side) {\n        const basePrecision = Math.pow(10, this.market.data.header.baseParams.decimals);\n        const pricePrecision = numericConstants_1.PRICE_PRECISION.toNumber();\n        const ladder = (0, phoenix_sdk_1.getMarketUiLadder)(this.market, this.lastSlot, this.lastUnixTimestamp, 20);\n        for(let i = 0; i < ladder[side].length; i++){\n            const { price, quantity } = ladder[side][i];\n            const size = new anchor_1.BN(Math.floor(quantity * basePrecision));\n            yield {\n                price: new anchor_1.BN(Math.floor(price * pricePrecision)),\n                size,\n                sources: {\n                    phoenix: size\n                }\n            };\n        }\n    }\n    async unsubscribe() {\n        if (!this.subscribed) {\n            return;\n        }\n        // remove listeners\n        if (this.subscriptionType === \"websocket\") {\n            await this.connection.removeAccountChangeListener(this.marketCallbackId);\n            await this.connection.removeAccountChangeListener(this.clockCallbackId);\n        } else {\n            this.accountLoader.removeAccount(this.marketAddress, this.marketCallbackId);\n            this.accountLoader.removeAccount(web3_js_1.SYSVAR_CLOCK_PUBKEY, this.clockCallbackId);\n        }\n        this.subscribed = false;\n    }\n}\nexports.PhoenixSubscriber = PhoenixSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/phoenix/phoenixSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/serum/serumFulfillmentConfigMap.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/serum/serumFulfillmentConfigMap.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SerumFulfillmentConfigMap = void 0;\nclass SerumFulfillmentConfigMap {\n    constructor(driftClient){\n        this.map = new Map();\n        this.driftClient = driftClient;\n    }\n    async add(marketIndex, serumMarketAddress) {\n        const account = await this.driftClient.getSerumV3FulfillmentConfig(serumMarketAddress);\n        this.map.set(marketIndex, account);\n    }\n    get(marketIndex) {\n        return this.map.get(marketIndex);\n    }\n}\nexports.SerumFulfillmentConfigMap = SerumFulfillmentConfigMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9zZXJ1bS9zZXJ1bUZ1bGZpbGxtZW50Q29uZmlnTWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQ0FBaUMsR0FBRyxLQUFLO0FBQ3pDLE1BQU1FO0lBQ0ZDLFlBQVlDLFdBQVcsQ0FBRTtRQUNyQixJQUFJLENBQUNDLEdBQUcsR0FBRyxJQUFJQztRQUNmLElBQUksQ0FBQ0YsV0FBVyxHQUFHQTtJQUN2QjtJQUNBLE1BQU1HLElBQUlDLFdBQVcsRUFBRUMsa0JBQWtCLEVBQUU7UUFDdkMsTUFBTUMsVUFBVSxNQUFNLElBQUksQ0FBQ04sV0FBVyxDQUFDTywyQkFBMkIsQ0FBQ0Y7UUFDbkUsSUFBSSxDQUFDSixHQUFHLENBQUNPLEdBQUcsQ0FBQ0osYUFBYUU7SUFDOUI7SUFDQUcsSUFBSUwsV0FBVyxFQUFFO1FBQ2IsT0FBTyxJQUFJLENBQUNILEdBQUcsQ0FBQ1EsR0FBRyxDQUFDTDtJQUN4QjtBQUNKO0FBQ0FSLGlDQUFpQyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9zZXJ1bS9zZXJ1bUZ1bGZpbGxtZW50Q29uZmlnTWFwLmpzPzQzZGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlcnVtRnVsZmlsbG1lbnRDb25maWdNYXAgPSB2b2lkIDA7XG5jbGFzcyBTZXJ1bUZ1bGZpbGxtZW50Q29uZmlnTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihkcmlmdENsaWVudCkge1xuICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5kcmlmdENsaWVudCA9IGRyaWZ0Q2xpZW50O1xuICAgIH1cbiAgICBhc3luYyBhZGQobWFya2V0SW5kZXgsIHNlcnVtTWFya2V0QWRkcmVzcykge1xuICAgICAgICBjb25zdCBhY2NvdW50ID0gYXdhaXQgdGhpcy5kcmlmdENsaWVudC5nZXRTZXJ1bVYzRnVsZmlsbG1lbnRDb25maWcoc2VydW1NYXJrZXRBZGRyZXNzKTtcbiAgICAgICAgdGhpcy5tYXAuc2V0KG1hcmtldEluZGV4LCBhY2NvdW50KTtcbiAgICB9XG4gICAgZ2V0KG1hcmtldEluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXQobWFya2V0SW5kZXgpO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydW1GdWxmaWxsbWVudENvbmZpZ01hcCA9IFNlcnVtRnVsZmlsbG1lbnRDb25maWdNYXA7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTZXJ1bUZ1bGZpbGxtZW50Q29uZmlnTWFwIiwiY29uc3RydWN0b3IiLCJkcmlmdENsaWVudCIsIm1hcCIsIk1hcCIsImFkZCIsIm1hcmtldEluZGV4Iiwic2VydW1NYXJrZXRBZGRyZXNzIiwiYWNjb3VudCIsImdldFNlcnVtVjNGdWxmaWxsbWVudENvbmZpZyIsInNldCIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/serum/serumFulfillmentConfigMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/serum/serumSubscriber.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/serum/serumSubscriber.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SerumSubscriber = void 0;\nconst serum_1 = __webpack_require__(/*! @project-serum/serum */ \"(ssr)/./node_modules/@project-serum/serum/lib/index.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst numericConstants_1 = __webpack_require__(/*! ../constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nclass SerumSubscriber {\n    constructor(config){\n        this.connection = config.connection;\n        this.programId = config.programId;\n        this.marketAddress = config.marketAddress;\n        if (config.accountSubscription.type === \"polling\") {\n            this.subscriptionType = \"polling\";\n            this.accountLoader = config.accountSubscription.accountLoader;\n        } else {\n            this.subscriptionType = \"websocket\";\n        }\n    }\n    async subscribe() {\n        if (this.subscribed) {\n            return;\n        }\n        this.market = await serum_1.Market.load(this.connection, this.marketAddress, undefined, this.programId);\n        this.asksAddress = this.market.asksAddress;\n        this.asks = await this.market.loadAsks(this.connection);\n        if (this.subscriptionType === \"websocket\") {\n            this.asksCallbackId = this.connection.onAccountChange(this.asksAddress, (accountInfo, ctx)=>{\n                this.lastAsksSlot = ctx.slot;\n                this.asks = serum_1.Orderbook.decode(this.market, accountInfo.data);\n            });\n        } else {\n            this.asksCallbackId = await this.accountLoader.addAccount(this.asksAddress, (buffer, slot)=>{\n                this.lastAsksSlot = slot;\n                this.asks = serum_1.Orderbook.decode(this.market, buffer);\n            });\n        }\n        this.bidsAddress = this.market.bidsAddress;\n        this.bids = await this.market.loadBids(this.connection);\n        if (this.subscriptionType === \"websocket\") {\n            this.bidsCallbackId = this.connection.onAccountChange(this.bidsAddress, (accountInfo, ctx)=>{\n                this.lastBidsSlot = ctx.slot;\n                this.bids = serum_1.Orderbook.decode(this.market, accountInfo.data);\n            });\n        } else {\n            this.bidsCallbackId = await this.accountLoader.addAccount(this.bidsAddress, (buffer, slot)=>{\n                this.lastBidsSlot = slot;\n                this.bids = serum_1.Orderbook.decode(this.market, buffer);\n            });\n        }\n        this.subscribed = true;\n    }\n    getBestBid() {\n        const bestBid = this.bids.getL2(1)[0];\n        if (!bestBid) {\n            return undefined;\n        }\n        return new anchor_1.BN(bestBid[0] * numericConstants_1.PRICE_PRECISION.toNumber());\n    }\n    getBestAsk() {\n        const bestAsk = this.asks.getL2(1)[0];\n        if (!bestAsk) {\n            return undefined;\n        }\n        return new anchor_1.BN(bestAsk[0] * numericConstants_1.PRICE_PRECISION.toNumber());\n    }\n    getL2Bids() {\n        return this.getL2Levels(\"bids\");\n    }\n    getL2Asks() {\n        return this.getL2Levels(\"asks\");\n    }\n    *getL2Levels(side) {\n        // @ts-ignore\n        const basePrecision = Math.pow(10, this.market._baseSplTokenDecimals);\n        const pricePrecision = numericConstants_1.PRICE_PRECISION.toNumber();\n        for (const { price: priceNum, size: sizeNum } of this[side].items(side === \"bids\")){\n            const price = new anchor_1.BN(priceNum * pricePrecision);\n            const size = new anchor_1.BN(sizeNum * basePrecision);\n            yield {\n                price,\n                size,\n                sources: {\n                    serum: size\n                }\n            };\n        }\n    }\n    async unsubscribe() {\n        if (!this.subscribed) {\n            return;\n        }\n        // remove listeners\n        if (this.subscriptionType === \"websocket\") {\n            await this.connection.removeAccountChangeListener(this.asksCallbackId);\n            await this.connection.removeAccountChangeListener(this.bidsCallbackId);\n        } else {\n            this.accountLoader.removeAccount(this.asksAddress, this.asksCallbackId);\n            this.accountLoader.removeAccount(this.bidsAddress, this.bidsCallbackId);\n        }\n        this.subscribed = false;\n    }\n}\nexports.SerumSubscriber = SerumSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/serum/serumSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/slot/SlotSubscriber.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/slot/SlotSubscriber.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SlotSubscriber = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nclass SlotSubscriber {\n    constructor(connection, _config){\n        this.connection = connection;\n        this.eventEmitter = new events_1.EventEmitter();\n    }\n    async subscribe() {\n        if (this.subscriptionId) {\n            return;\n        }\n        this.currentSlot = await this.connection.getSlot(\"confirmed\");\n        this.subscriptionId = this.connection.onSlotChange((slotInfo)=>{\n            this.currentSlot = slotInfo.slot;\n            this.eventEmitter.emit(\"newSlot\", slotInfo.slot);\n        });\n    }\n    getSlot() {\n        return this.currentSlot;\n    }\n    async unsubscribe() {\n        if (this.subscriptionId) {\n            await this.connection.removeSlotChangeListener(this.subscriptionId);\n        }\n    }\n}\nexports.SlotSubscriber = SlotSubscriber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9zbG90L1Nsb3RTdWJzY3JpYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBRyxLQUFLO0FBQzlCLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1GO0lBQ0ZHLFlBQVlDLFVBQVUsRUFBRUMsT0FBTyxDQUFFO1FBQzdCLElBQUksQ0FBQ0QsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNFLFlBQVksR0FBRyxJQUFJTCxTQUFTTSxZQUFZO0lBQ2pEO0lBQ0EsTUFBTUMsWUFBWTtRQUNkLElBQUksSUFBSSxDQUFDQyxjQUFjLEVBQUU7WUFDckI7UUFDSjtRQUNBLElBQUksQ0FBQ0MsV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDTixVQUFVLENBQUNPLE9BQU8sQ0FBQztRQUNqRCxJQUFJLENBQUNGLGNBQWMsR0FBRyxJQUFJLENBQUNMLFVBQVUsQ0FBQ1EsWUFBWSxDQUFDLENBQUNDO1lBQ2hELElBQUksQ0FBQ0gsV0FBVyxHQUFHRyxTQUFTQyxJQUFJO1lBQ2hDLElBQUksQ0FBQ1IsWUFBWSxDQUFDUyxJQUFJLENBQUMsV0FBV0YsU0FBU0MsSUFBSTtRQUNuRDtJQUNKO0lBQ0FILFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQ0QsV0FBVztJQUMzQjtJQUNBLE1BQU1NLGNBQWM7UUFDaEIsSUFBSSxJQUFJLENBQUNQLGNBQWMsRUFBRTtZQUNyQixNQUFNLElBQUksQ0FBQ0wsVUFBVSxDQUFDYSx3QkFBd0IsQ0FBQyxJQUFJLENBQUNSLGNBQWM7UUFDdEU7SUFDSjtBQUNKO0FBQ0FYLHNCQUFzQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi9zbG90L1Nsb3RTdWJzY3JpYmVyLmpzP2E3MGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNsb3RTdWJzY3JpYmVyID0gdm9pZCAwO1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY2xhc3MgU2xvdFN1YnNjcmliZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb24sIF9jb25maWcpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRXZlbnRFbWl0dGVyKCk7XG4gICAgfVxuICAgIGFzeW5jIHN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uSWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRTbG90ID0gYXdhaXQgdGhpcy5jb25uZWN0aW9uLmdldFNsb3QoJ2NvbmZpcm1lZCcpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbklkID0gdGhpcy5jb25uZWN0aW9uLm9uU2xvdENoYW5nZSgoc2xvdEluZm8pID0+IHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFNsb3QgPSBzbG90SW5mby5zbG90O1xuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdCgnbmV3U2xvdCcsIHNsb3RJbmZvLnNsb3QpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0U2xvdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFNsb3Q7XG4gICAgfVxuICAgIGFzeW5jIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25JZCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jb25uZWN0aW9uLnJlbW92ZVNsb3RDaGFuZ2VMaXN0ZW5lcih0aGlzLnN1YnNjcmlwdGlvbklkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuU2xvdFN1YnNjcmliZXIgPSBTbG90U3Vic2NyaWJlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNsb3RTdWJzY3JpYmVyIiwiZXZlbnRzXzEiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJjb25uZWN0aW9uIiwiX2NvbmZpZyIsImV2ZW50RW1pdHRlciIsIkV2ZW50RW1pdHRlciIsInN1YnNjcmliZSIsInN1YnNjcmlwdGlvbklkIiwiY3VycmVudFNsb3QiLCJnZXRTbG90Iiwib25TbG90Q2hhbmdlIiwic2xvdEluZm8iLCJzbG90IiwiZW1pdCIsInVuc3Vic2NyaWJlIiwicmVtb3ZlU2xvdENoYW5nZUxpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/slot/SlotSubscriber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/testClient.js":
/*!********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/testClient.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TestClient = void 0;\nconst adminClient_1 = __webpack_require__(/*! ./adminClient */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/adminClient.js\");\nclass TestClient extends adminClient_1.AdminClient {\n    constructor(config){\n        if (config.accountSubscription.type !== \"polling\") {\n            throw new Error(\"Test client must be polling\");\n        }\n        super(config);\n    }\n    async sendTransaction(tx, additionalSigners, opts, preSigned) {\n        const { txSig, slot } = await super.sendTransaction(tx, additionalSigners, opts, preSigned);\n        let lastFetchedSlot = this.accountSubscriber.accountLoader.mostRecentSlot;\n        while(lastFetchedSlot < slot){\n            await this.fetchAccounts();\n            lastFetchedSlot = this.accountSubscriber.accountLoader.mostRecentSlot;\n        }\n        return {\n            txSig,\n            slot\n        };\n    }\n}\nexports.TestClient = TestClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi90ZXN0Q2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLGdCQUFnQkMsbUJBQU9BLENBQUMsOEVBQWU7QUFDN0MsTUFBTUYsbUJBQW1CQyxjQUFjRSxXQUFXO0lBQzlDQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsSUFBSUEsT0FBT0MsbUJBQW1CLENBQUNDLElBQUksS0FBSyxXQUFXO1lBQy9DLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLEtBQUssQ0FBQ0g7SUFDVjtJQUNBLE1BQU1JLGdCQUFnQkMsRUFBRSxFQUFFQyxpQkFBaUIsRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUU7UUFDMUQsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU0sS0FBSyxDQUFDTixnQkFBZ0JDLElBQUlDLG1CQUFtQkMsTUFBTUM7UUFDakYsSUFBSUcsa0JBQWtCLElBQUksQ0FBQ0MsaUJBQWlCLENBQUNDLGFBQWEsQ0FBQ0MsY0FBYztRQUN6RSxNQUFPSCxrQkFBa0JELEtBQU07WUFDM0IsTUFBTSxJQUFJLENBQUNLLGFBQWE7WUFDeEJKLGtCQUFrQixJQUFJLENBQUNDLGlCQUFpQixDQUFDQyxhQUFhLENBQUNDLGNBQWM7UUFDekU7UUFDQSxPQUFPO1lBQUVMO1lBQU9DO1FBQUs7SUFDekI7QUFDSjtBQUNBakIsa0JBQWtCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL3Rlc3RDbGllbnQuanM/YWIwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGVzdENsaWVudCA9IHZvaWQgMDtcbmNvbnN0IGFkbWluQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9hZG1pbkNsaWVudFwiKTtcbmNsYXNzIFRlc3RDbGllbnQgZXh0ZW5kcyBhZG1pbkNsaWVudF8xLkFkbWluQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5hY2NvdW50U3Vic2NyaXB0aW9uLnR5cGUgIT09ICdwb2xsaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXN0IGNsaWVudCBtdXN0IGJlIHBvbGxpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihjb25maWcpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kVHJhbnNhY3Rpb24odHgsIGFkZGl0aW9uYWxTaWduZXJzLCBvcHRzLCBwcmVTaWduZWQpIHtcbiAgICAgICAgY29uc3QgeyB0eFNpZywgc2xvdCB9ID0gYXdhaXQgc3VwZXIuc2VuZFRyYW5zYWN0aW9uKHR4LCBhZGRpdGlvbmFsU2lnbmVycywgb3B0cywgcHJlU2lnbmVkKTtcbiAgICAgICAgbGV0IGxhc3RGZXRjaGVkU2xvdCA9IHRoaXMuYWNjb3VudFN1YnNjcmliZXIuYWNjb3VudExvYWRlci5tb3N0UmVjZW50U2xvdDtcbiAgICAgICAgd2hpbGUgKGxhc3RGZXRjaGVkU2xvdCA8IHNsb3QpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZmV0Y2hBY2NvdW50cygpO1xuICAgICAgICAgICAgbGFzdEZldGNoZWRTbG90ID0gdGhpcy5hY2NvdW50U3Vic2NyaWJlci5hY2NvdW50TG9hZGVyLm1vc3RSZWNlbnRTbG90O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHR4U2lnLCBzbG90IH07XG4gICAgfVxufVxuZXhwb3J0cy5UZXN0Q2xpZW50ID0gVGVzdENsaWVudDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlRlc3RDbGllbnQiLCJhZG1pbkNsaWVudF8xIiwicmVxdWlyZSIsIkFkbWluQ2xpZW50IiwiY29uc3RydWN0b3IiLCJjb25maWciLCJhY2NvdW50U3Vic2NyaXB0aW9uIiwidHlwZSIsIkVycm9yIiwic2VuZFRyYW5zYWN0aW9uIiwidHgiLCJhZGRpdGlvbmFsU2lnbmVycyIsIm9wdHMiLCJwcmVTaWduZWQiLCJ0eFNpZyIsInNsb3QiLCJsYXN0RmV0Y2hlZFNsb3QiLCJhY2NvdW50U3Vic2NyaWJlciIsImFjY291bnRMb2FkZXIiLCJtb3N0UmVjZW50U2xvdCIsImZldGNoQWNjb3VudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/testClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/token/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/token/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseTokenAccount = void 0;\nconst spl_token_1 = __webpack_require__(/*! @solana/spl-token */ \"(ssr)/./node_modules/@solana/spl-token/lib/cjs/index.js\");\nfunction parseTokenAccount(data, pubkey) {\n    // mock AccountInfo so unpackAccount can be used\n    const accountInfo = {\n        data,\n        owner: spl_token_1.TOKEN_PROGRAM_ID,\n        executable: false,\n        lamports: 0\n    };\n    return (0, spl_token_1.unpackAccount)(pubkey, accountInfo, spl_token_1.TOKEN_PROGRAM_ID);\n}\nexports.parseTokenAccount = parseTokenAccount;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi90b2tlbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQseUJBQXlCLEdBQUcsS0FBSztBQUNqQyxNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQyxrRkFBbUI7QUFDL0MsU0FBU0Ysa0JBQWtCRyxJQUFJLEVBQUVDLE1BQU07SUFDbkMsZ0RBQWdEO0lBQ2hELE1BQU1DLGNBQWM7UUFDaEJGO1FBQ0FHLE9BQU9MLFlBQVlNLGdCQUFnQjtRQUNuQ0MsWUFBWTtRQUNaQyxVQUFVO0lBQ2Q7SUFDQSxPQUFPLENBQUMsR0FBR1IsWUFBWVMsYUFBYSxFQUFFTixRQUFRQyxhQUFhSixZQUFZTSxnQkFBZ0I7QUFDM0Y7QUFDQVQseUJBQXlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL3Rva2VuL2luZGV4LmpzP2FkNWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlVG9rZW5BY2NvdW50ID0gdm9pZCAwO1xuY29uc3Qgc3BsX3Rva2VuXzEgPSByZXF1aXJlKFwiQHNvbGFuYS9zcGwtdG9rZW5cIik7XG5mdW5jdGlvbiBwYXJzZVRva2VuQWNjb3VudChkYXRhLCBwdWJrZXkpIHtcbiAgICAvLyBtb2NrIEFjY291bnRJbmZvIHNvIHVucGFja0FjY291bnQgY2FuIGJlIHVzZWRcbiAgICBjb25zdCBhY2NvdW50SW5mbyA9IHtcbiAgICAgICAgZGF0YSxcbiAgICAgICAgb3duZXI6IHNwbF90b2tlbl8xLlRPS0VOX1BST0dSQU1fSUQsXG4gICAgICAgIGV4ZWN1dGFibGU6IGZhbHNlLFxuICAgICAgICBsYW1wb3J0czogMCxcbiAgICB9O1xuICAgIHJldHVybiAoMCwgc3BsX3Rva2VuXzEudW5wYWNrQWNjb3VudCkocHVia2V5LCBhY2NvdW50SW5mbywgc3BsX3Rva2VuXzEuVE9LRU5fUFJPR1JBTV9JRCk7XG59XG5leHBvcnRzLnBhcnNlVG9rZW5BY2NvdW50ID0gcGFyc2VUb2tlbkFjY291bnQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZVRva2VuQWNjb3VudCIsInNwbF90b2tlbl8xIiwicmVxdWlyZSIsImRhdGEiLCJwdWJrZXkiLCJhY2NvdW50SW5mbyIsIm93bmVyIiwiVE9LRU5fUFJPR1JBTV9JRCIsImV4ZWN1dGFibGUiLCJsYW1wb3J0cyIsInVucGFja0FjY291bnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/token/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/tokenFaucet.js":
/*!*********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/tokenFaucet.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TokenFaucet = void 0;\nconst anchor = __importStar(__webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\"));\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst spl_token_1 = __webpack_require__(/*! @solana/spl-token */ \"(ssr)/./node_modules/@solana/spl-token/lib/cjs/index.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst token_faucet_json_1 = __importDefault(__webpack_require__(/*! ./idl/token_faucet.json */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/idl/token_faucet.json\"));\nclass TokenFaucet {\n    constructor(connection, wallet, programId, mint, opts){\n        this.connection = connection;\n        this.wallet = wallet;\n        this.opts = opts || anchor_1.AnchorProvider.defaultOptions();\n        const provider = new anchor_1.AnchorProvider(connection, wallet, this.opts);\n        this.provider = provider;\n        this.program = new anchor_1.Program(token_faucet_json_1.default, programId, provider);\n        this.mint = mint;\n    }\n    async getFaucetConfigPublicKeyAndNonce() {\n        return anchor.web3.PublicKey.findProgramAddress([\n            Buffer.from(anchor.utils.bytes.utf8.encode(\"faucet_config\")),\n            this.mint.toBuffer()\n        ], this.program.programId);\n    }\n    async getMintAuthority() {\n        return (await anchor.web3.PublicKey.findProgramAddress([\n            Buffer.from(anchor.utils.bytes.utf8.encode(\"mint_authority\")),\n            this.mint.toBuffer()\n        ], this.program.programId))[0];\n    }\n    async getFaucetConfigPublicKey() {\n        return (await this.getFaucetConfigPublicKeyAndNonce())[0];\n    }\n    async initialize() {\n        const [faucetConfigPublicKey] = await this.getFaucetConfigPublicKeyAndNonce();\n        return await this.program.rpc.initialize({\n            accounts: {\n                faucetConfig: faucetConfigPublicKey,\n                admin: this.wallet.publicKey,\n                mintAccount: this.mint,\n                rent: web3_js_1.SYSVAR_RENT_PUBKEY,\n                systemProgram: anchor.web3.SystemProgram.programId,\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            }\n        });\n    }\n    async fetchState() {\n        return await this.program.account.faucetConfig.fetch(await this.getFaucetConfigPublicKey());\n    }\n    async mintToUserIx(userTokenAccount, amount) {\n        return this.program.instruction.mintToUser(amount, {\n            accounts: {\n                faucetConfig: await this.getFaucetConfigPublicKey(),\n                mintAccount: this.mint,\n                userTokenAccount,\n                mintAuthority: await this.getMintAuthority(),\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID\n            }\n        });\n    }\n    async mintToUser(userTokenAccount, amount) {\n        const mintIx = await this.mintToUserIx(userTokenAccount, amount);\n        const tx = new web3_js_1.Transaction().add(mintIx);\n        const txSig = await this.program.provider.sendAndConfirm(tx, [], this.opts);\n        return txSig;\n    }\n    async transferMintAuthority() {\n        return await this.program.rpc.transferMintAuthority({\n            accounts: {\n                faucetConfig: await this.getFaucetConfigPublicKey(),\n                mintAccount: this.mint,\n                mintAuthority: await this.getMintAuthority(),\n                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,\n                admin: this.wallet.publicKey\n            }\n        });\n    }\n    async createAssociatedTokenAccountAndMintTo(userPublicKey, amount) {\n        const tx = new web3_js_1.Transaction();\n        const [associatedTokenPublicKey, createAssociatedAccountIx, mintToTx] = await this.createAssociatedTokenAccountAndMintToInstructions(userPublicKey, amount);\n        let associatedTokenAccountExists = false;\n        try {\n            const assosciatedTokenAccount = await this.connection.getAccountInfo(associatedTokenPublicKey);\n            associatedTokenAccountExists = !!assosciatedTokenAccount;\n        } catch (e) {\n            // token account doesn't exist\n            associatedTokenAccountExists = false;\n        }\n        const skipAccountCreation = associatedTokenAccountExists;\n        if (!skipAccountCreation) tx.add(createAssociatedAccountIx);\n        tx.add(mintToTx);\n        const txSig = await this.program.provider.sendAndConfirm(tx, [], this.opts);\n        return [\n            associatedTokenPublicKey,\n            txSig\n        ];\n    }\n    async createAssociatedTokenAccountAndMintToInstructions(userPublicKey, amount) {\n        const state = await this.fetchState();\n        const associateTokenPublicKey = await this.getAssosciatedMockUSDMintAddress({\n            userPubKey: userPublicKey\n        });\n        const createAssociatedAccountIx = (0, spl_token_1.createAssociatedTokenAccountInstruction)(this.wallet.publicKey, associateTokenPublicKey, userPublicKey, state.mint);\n        const mintToIx = await this.mintToUserIx(associateTokenPublicKey, amount);\n        return [\n            associateTokenPublicKey,\n            createAssociatedAccountIx,\n            mintToIx\n        ];\n    }\n    async getAssosciatedMockUSDMintAddress(props) {\n        const state = await this.fetchState();\n        return (0, spl_token_1.getAssociatedTokenAddress)(state.mint, props.userPubKey);\n    }\n    async getTokenAccountInfo(props) {\n        const associatedKey = await this.getAssosciatedMockUSDMintAddress(props);\n        return await (0, spl_token_1.getAccount)(this.connection, associatedKey);\n    }\n    async subscribeToTokenAccount(props) {\n        try {\n            const tokenAccountKey = await this.getAssosciatedMockUSDMintAddress(props);\n            props.callback(await this.getTokenAccountInfo(props));\n            // Couldn't find a way to do it using anchor framework subscription, someone on serum discord recommended this way\n            this.connection.onAccountChange(tokenAccountKey, async (_accountInfo /* accountInfo is a buffer which we don't know how to deserialize */ )=>{\n                props.callback(await this.getTokenAccountInfo(props));\n            });\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n}\nexports.TokenFaucet = TokenFaucet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/tokenFaucet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/tx/baseTxSender.js":
/*!*************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/tx/baseTxSender.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseTxSender = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst assert_1 = __importDefault(__webpack_require__(/*! assert */ \"assert\"));\nconst bs58_1 = __importDefault(__webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/index.js\"));\nconst DEFAULT_TIMEOUT = 35000;\nclass BaseTxSender {\n    constructor({ connection, wallet, opts = anchor_1.AnchorProvider.defaultOptions(), timeout = DEFAULT_TIMEOUT, additionalConnections = new Array() }){\n        this.timeoutCount = 0;\n        this.connection = connection;\n        this.wallet = wallet;\n        this.opts = opts;\n        this.timeout = timeout;\n        this.additionalConnections = additionalConnections;\n    }\n    async send(tx, additionalSigners, opts, preSigned) {\n        if (additionalSigners === undefined) {\n            additionalSigners = [];\n        }\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const signedTx = preSigned ? tx : await this.prepareTx(tx, additionalSigners, opts);\n        return this.sendRawTransaction(signedTx.serialize(), opts);\n    }\n    async prepareTx(tx, additionalSigners, opts) {\n        tx.feePayer = this.wallet.publicKey;\n        tx.recentBlockhash = (await this.connection.getLatestBlockhash(opts.preflightCommitment)).blockhash;\n        additionalSigners.filter((s)=>s !== undefined).forEach((kp)=>{\n            tx.partialSign(kp);\n        });\n        const signedTx = await this.wallet.signTransaction(tx);\n        return signedTx;\n    }\n    async getVersionedTransaction(ixs, lookupTableAccounts, additionalSigners, opts) {\n        if (additionalSigners === undefined) {\n            additionalSigners = [];\n        }\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const message = new web3_js_1.TransactionMessage({\n            payerKey: this.wallet.publicKey,\n            recentBlockhash: (await this.connection.getLatestBlockhash(opts.preflightCommitment)).blockhash,\n            instructions: ixs\n        }).compileToV0Message(lookupTableAccounts);\n        const tx = new web3_js_1.VersionedTransaction(message);\n        return tx;\n    }\n    async sendVersionedTransaction(tx, additionalSigners, opts, preSigned) {\n        let signedTx;\n        if (preSigned) {\n            signedTx = tx;\n        // @ts-ignore\n        } else if (this.wallet.payer) {\n            // @ts-ignore\n            tx.sign((additionalSigners !== null && additionalSigners !== void 0 ? additionalSigners : []).concat(this.wallet.payer));\n            signedTx = tx;\n        } else {\n            additionalSigners === null || additionalSigners === void 0 ? void 0 : additionalSigners.filter((s)=>s !== undefined).forEach((kp)=>{\n                tx.sign([\n                    kp\n                ]);\n            });\n            // @ts-ignore\n            signedTx = await this.wallet.signTransaction(tx);\n        }\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        return this.sendRawTransaction(signedTx.serialize(), opts);\n    }\n    async sendRawTransaction(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    rawTransaction, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    opts) {\n        throw new Error(\"Must be implemented by subclass\");\n    }\n    async confirmTransaction(signature, commitment) {\n        let decodedSignature;\n        try {\n            decodedSignature = bs58_1.default.decode(signature);\n        } catch (err) {\n            throw new Error(\"signature must be base58 encoded: \" + signature);\n        }\n        (0, assert_1.default)(decodedSignature.length === 64, \"signature has invalid length\");\n        const start = Date.now();\n        const subscriptionCommitment = commitment || this.opts.commitment;\n        const subscriptionIds = new Array();\n        const connections = [\n            this.connection,\n            ...this.additionalConnections\n        ];\n        let response = null;\n        const promises = connections.map((connection, i)=>{\n            let subscriptionId;\n            const confirmPromise = new Promise((resolve, reject)=>{\n                try {\n                    subscriptionId = connection.onSignature(signature, (result, context)=>{\n                        subscriptionIds[i] = undefined;\n                        response = {\n                            context,\n                            value: result\n                        };\n                        resolve(null);\n                    }, subscriptionCommitment);\n                } catch (err) {\n                    reject(err);\n                }\n            });\n            subscriptionIds.push(subscriptionId);\n            return confirmPromise;\n        });\n        try {\n            await this.promiseTimeout(promises, this.timeout);\n        } finally{\n            for (const [i, subscriptionId] of subscriptionIds.entries()){\n                if (subscriptionId) {\n                    connections[i].removeSignatureListener(subscriptionId);\n                }\n            }\n        }\n        if (response === null) {\n            this.timeoutCount += 1;\n            const duration = (Date.now() - start) / 1000;\n            throw new Error(`Transaction was not confirmed in ${duration.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`);\n        }\n        return response;\n    }\n    getTimestamp() {\n        return new Date().getTime();\n    }\n    promiseTimeout(promises, timeoutMs) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve)=>{\n            timeoutId = setTimeout(()=>resolve(null), timeoutMs);\n        });\n        return Promise.race([\n            ...promises,\n            timeoutPromise\n        ]).then((result)=>{\n            clearTimeout(timeoutId);\n            return result;\n        });\n    }\n    sendToAdditionalConnections(rawTx, opts) {\n        this.additionalConnections.map((connection)=>{\n            connection.sendRawTransaction(rawTx, opts).catch((e)=>{\n                console.error(// @ts-ignore\n                `error sending tx to additional connection ${connection._rpcEndpoint}`);\n                console.error(e);\n            });\n        });\n    }\n    addAdditionalConnection(newConnection) {\n        const alreadyUsingConnection = this.additionalConnections.filter((connection)=>{\n            // @ts-ignore\n            return connection._rpcEndpoint === newConnection.rpcEndpoint;\n        }).length > 0;\n        if (!alreadyUsingConnection) {\n            this.additionalConnections.push(newConnection);\n        }\n    }\n    getTimeoutCount() {\n        return this.timeoutCount;\n    }\n}\nexports.BaseTxSender = BaseTxSender;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/tx/baseTxSender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/tx/fastSingleTxSender.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/tx/fastSingleTxSender.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FastSingleTxSender = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst baseTxSender_1 = __webpack_require__(/*! ./baseTxSender */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/tx/baseTxSender.js\");\nconst DEFAULT_TIMEOUT = 35000;\nconst DEFAULT_BLOCKHASH_REFRESH = 10000;\nclass FastSingleTxSender extends baseTxSender_1.BaseTxSender {\n    constructor({ connection, wallet, opts = anchor_1.AnchorProvider.defaultOptions(), timeout = DEFAULT_TIMEOUT, blockhashRefreshInterval = DEFAULT_BLOCKHASH_REFRESH, additionalConnections = new Array() }){\n        super({\n            connection,\n            wallet,\n            opts,\n            timeout,\n            additionalConnections\n        });\n        this.timoutCount = 0;\n        this.connection = connection;\n        this.wallet = wallet;\n        this.opts = opts;\n        this.timeout = timeout;\n        this.blockhashRefreshInterval = blockhashRefreshInterval;\n        this.additionalConnections = additionalConnections;\n        this.startBlockhashRefreshLoop();\n    }\n    startBlockhashRefreshLoop() {\n        setInterval(async ()=>{\n            this.recentBlockhash = (await this.connection.getLatestBlockhash(this.opts)).blockhash;\n        }, this.blockhashRefreshInterval);\n    }\n    async prepareTx(tx, additionalSigners, opts) {\n        var _a;\n        tx.feePayer = this.wallet.publicKey;\n        tx.recentBlockhash = (_a = this.recentBlockhash) !== null && _a !== void 0 ? _a : (await this.connection.getLatestBlockhash(opts.preflightCommitment)).blockhash;\n        additionalSigners.filter((s)=>s !== undefined).forEach((kp)=>{\n            tx.partialSign(kp);\n        });\n        const signedTx = await this.wallet.signTransaction(tx);\n        return signedTx;\n    }\n    async getVersionedTransaction(ixs, lookupTableAccounts, additionalSigners, opts) {\n        var _a;\n        if (additionalSigners === undefined) {\n            additionalSigners = [];\n        }\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const message = new web3_js_1.TransactionMessage({\n            payerKey: this.wallet.publicKey,\n            recentBlockhash: (_a = this.recentBlockhash) !== null && _a !== void 0 ? _a : (await this.connection.getLatestBlockhash(opts.preflightCommitment)).blockhash,\n            instructions: ixs\n        }).compileToV0Message(lookupTableAccounts);\n        const tx = new web3_js_1.VersionedTransaction(message);\n        return tx;\n    }\n    async sendRawTransaction(rawTransaction, opts) {\n        let txid;\n        try {\n            txid = await this.connection.sendRawTransaction(rawTransaction, opts);\n            this.sendToAdditionalConnections(rawTransaction, opts);\n        } catch (e) {\n            console.error(e);\n            throw e;\n        }\n        this.connection.sendRawTransaction(rawTransaction, opts).catch((e)=>{\n            console.error(e);\n        });\n        this.sendToAdditionalConnections(rawTransaction, opts);\n        let slot;\n        try {\n            const result = await this.confirmTransaction(txid, opts.commitment);\n            slot = result.context.slot;\n        } catch (e) {\n            console.error(e);\n            throw e;\n        }\n        return {\n            txSig: txid,\n            slot\n        };\n    }\n}\nexports.FastSingleTxSender = FastSingleTxSender;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/tx/fastSingleTxSender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/tx/retryTxSender.js":
/*!**************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/tx/retryTxSender.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RetryTxSender = void 0;\nconst anchor_1 = __webpack_require__(/*! @coral-xyz/anchor */ \"(ssr)/./node_modules/@coral-xyz/anchor/dist/esm/index.js\");\nconst baseTxSender_1 = __webpack_require__(/*! ./baseTxSender */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/tx/baseTxSender.js\");\nconst DEFAULT_TIMEOUT = 35000;\nconst DEFAULT_RETRY = 8000;\nclass RetryTxSender extends baseTxSender_1.BaseTxSender {\n    constructor({ connection, wallet, opts = anchor_1.AnchorProvider.defaultOptions(), timeout = DEFAULT_TIMEOUT, retrySleep = DEFAULT_RETRY, additionalConnections = new Array() }){\n        super({\n            connection,\n            wallet,\n            opts,\n            timeout,\n            additionalConnections\n        });\n        this.timoutCount = 0;\n        this.connection = connection;\n        this.wallet = wallet;\n        this.opts = opts;\n        this.timeout = timeout;\n        this.retrySleep = retrySleep;\n        this.additionalConnections = additionalConnections;\n    }\n    async sleep(reference) {\n        return new Promise((resolve)=>{\n            reference.resolve = resolve;\n            setTimeout(resolve, this.retrySleep);\n        });\n    }\n    async sendRawTransaction(rawTransaction, opts) {\n        const startTime = this.getTimestamp();\n        let txid;\n        try {\n            txid = await this.connection.sendRawTransaction(rawTransaction, opts);\n            this.sendToAdditionalConnections(rawTransaction, opts);\n        } catch (e) {\n            console.error(e);\n            throw e;\n        }\n        let done = false;\n        const resolveReference = {\n            resolve: undefined\n        };\n        const stopWaiting = ()=>{\n            done = true;\n            if (resolveReference.resolve) {\n                resolveReference.resolve();\n            }\n        };\n        (async ()=>{\n            while(!done && this.getTimestamp() - startTime < this.timeout){\n                await this.sleep(resolveReference);\n                if (!done) {\n                    this.connection.sendRawTransaction(rawTransaction, opts).catch((e)=>{\n                        console.error(e);\n                        stopWaiting();\n                    });\n                    this.sendToAdditionalConnections(rawTransaction, opts);\n                }\n            }\n        })();\n        let slot;\n        try {\n            const result = await this.confirmTransaction(txid, opts.commitment);\n            slot = result.context.slot;\n        } catch (e) {\n            console.error(e);\n            throw e;\n        } finally{\n            stopWaiting();\n        }\n        return {\n            txSig: txid,\n            slot\n        };\n    }\n}\nexports.RetryTxSender = RetryTxSender;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi90eC9yZXRyeVR4U2VuZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLG1GQUFtQjtBQUM1QyxNQUFNQyxpQkFBaUJELG1CQUFPQSxDQUFDLG1GQUFnQjtBQUMvQyxNQUFNRSxrQkFBa0I7QUFDeEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1MLHNCQUFzQkcsZUFBZUcsWUFBWTtJQUNuREMsWUFBWSxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sRUFBRUMsT0FBT1QsU0FBU1UsY0FBYyxDQUFDQyxjQUFjLEVBQUUsRUFBRUMsVUFBVVQsZUFBZSxFQUFFVSxhQUFhVCxhQUFhLEVBQUVVLHdCQUF3QixJQUFJQyxPQUFPLEVBQUcsQ0FBRTtRQUM5SyxLQUFLLENBQUM7WUFBRVI7WUFBWUM7WUFBUUM7WUFBTUc7WUFBU0U7UUFBc0I7UUFDakUsSUFBSSxDQUFDRSxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDVCxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0csT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNDLHFCQUFxQixHQUFHQTtJQUNqQztJQUNBLE1BQU1HLE1BQU1DLFNBQVMsRUFBRTtRQUNuQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0M7WUFDaEJGLFVBQVVFLE9BQU8sR0FBR0E7WUFDcEJDLFdBQVdELFNBQVMsSUFBSSxDQUFDUCxVQUFVO1FBQ3ZDO0lBQ0o7SUFDQSxNQUFNUyxtQkFBbUJDLGNBQWMsRUFBRWQsSUFBSSxFQUFFO1FBQzNDLE1BQU1lLFlBQVksSUFBSSxDQUFDQyxZQUFZO1FBQ25DLElBQUlDO1FBQ0osSUFBSTtZQUNBQSxPQUFPLE1BQU0sSUFBSSxDQUFDbkIsVUFBVSxDQUFDZSxrQkFBa0IsQ0FBQ0MsZ0JBQWdCZDtZQUNoRSxJQUFJLENBQUNrQiwyQkFBMkIsQ0FBQ0osZ0JBQWdCZDtRQUNyRCxFQUNBLE9BQU9tQixHQUFHO1lBQ05DLFFBQVFDLEtBQUssQ0FBQ0Y7WUFDZCxNQUFNQTtRQUNWO1FBQ0EsSUFBSUcsT0FBTztRQUNYLE1BQU1DLG1CQUFtQjtZQUNyQlosU0FBU2E7UUFDYjtRQUNBLE1BQU1DLGNBQWM7WUFDaEJILE9BQU87WUFDUCxJQUFJQyxpQkFBaUJaLE9BQU8sRUFBRTtnQkFDMUJZLGlCQUFpQlosT0FBTztZQUM1QjtRQUNKO1FBQ0M7WUFDRyxNQUFPLENBQUNXLFFBQVEsSUFBSSxDQUFDTixZQUFZLEtBQUtELFlBQVksSUFBSSxDQUFDWixPQUFPLENBQUU7Z0JBQzVELE1BQU0sSUFBSSxDQUFDSyxLQUFLLENBQUNlO2dCQUNqQixJQUFJLENBQUNELE1BQU07b0JBQ1AsSUFBSSxDQUFDeEIsVUFBVSxDQUNWZSxrQkFBa0IsQ0FBQ0MsZ0JBQWdCZCxNQUNuQzBCLEtBQUssQ0FBQyxDQUFDUDt3QkFDUkMsUUFBUUMsS0FBSyxDQUFDRjt3QkFDZE07b0JBQ0o7b0JBQ0EsSUFBSSxDQUFDUCwyQkFBMkIsQ0FBQ0osZ0JBQWdCZDtnQkFDckQ7WUFDSjtRQUNKO1FBQ0EsSUFBSTJCO1FBQ0osSUFBSTtZQUNBLE1BQU1DLFNBQVMsTUFBTSxJQUFJLENBQUNDLGtCQUFrQixDQUFDWixNQUFNakIsS0FBSzhCLFVBQVU7WUFDbEVILE9BQU9DLE9BQU9HLE9BQU8sQ0FBQ0osSUFBSTtRQUM5QixFQUNBLE9BQU9SLEdBQUc7WUFDTkMsUUFBUUMsS0FBSyxDQUFDRjtZQUNkLE1BQU1BO1FBQ1YsU0FDUTtZQUNKTTtRQUNKO1FBQ0EsT0FBTztZQUFFTyxPQUFPZjtZQUFNVTtRQUFLO0lBQy9CO0FBQ0o7QUFDQXZDLHFCQUFxQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi90eC9yZXRyeVR4U2VuZGVyLmpzPzBkNDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJldHJ5VHhTZW5kZXIgPSB2b2lkIDA7XG5jb25zdCBhbmNob3JfMSA9IHJlcXVpcmUoXCJAY29yYWwteHl6L2FuY2hvclwiKTtcbmNvbnN0IGJhc2VUeFNlbmRlcl8xID0gcmVxdWlyZShcIi4vYmFzZVR4U2VuZGVyXCIpO1xuY29uc3QgREVGQVVMVF9USU1FT1VUID0gMzUwMDA7XG5jb25zdCBERUZBVUxUX1JFVFJZID0gODAwMDtcbmNsYXNzIFJldHJ5VHhTZW5kZXIgZXh0ZW5kcyBiYXNlVHhTZW5kZXJfMS5CYXNlVHhTZW5kZXIge1xuICAgIGNvbnN0cnVjdG9yKHsgY29ubmVjdGlvbiwgd2FsbGV0LCBvcHRzID0gYW5jaG9yXzEuQW5jaG9yUHJvdmlkZXIuZGVmYXVsdE9wdGlvbnMoKSwgdGltZW91dCA9IERFRkFVTFRfVElNRU9VVCwgcmV0cnlTbGVlcCA9IERFRkFVTFRfUkVUUlksIGFkZGl0aW9uYWxDb25uZWN0aW9ucyA9IG5ldyBBcnJheSgpLCB9KSB7XG4gICAgICAgIHN1cGVyKHsgY29ubmVjdGlvbiwgd2FsbGV0LCBvcHRzLCB0aW1lb3V0LCBhZGRpdGlvbmFsQ29ubmVjdGlvbnMgfSk7XG4gICAgICAgIHRoaXMudGltb3V0Q291bnQgPSAwO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgICAgICB0aGlzLndhbGxldCA9IHdhbGxldDtcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgICAgICAgdGhpcy5yZXRyeVNsZWVwID0gcmV0cnlTbGVlcDtcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsQ29ubmVjdGlvbnMgPSBhZGRpdGlvbmFsQ29ubmVjdGlvbnM7XG4gICAgfVxuICAgIGFzeW5jIHNsZWVwKHJlZmVyZW5jZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHJlZmVyZW5jZS5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgdGhpcy5yZXRyeVNsZWVwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHNlbmRSYXdUcmFuc2FjdGlvbihyYXdUcmFuc2FjdGlvbiwgb3B0cykge1xuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSB0aGlzLmdldFRpbWVzdGFtcCgpO1xuICAgICAgICBsZXQgdHhpZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4aWQgPSBhd2FpdCB0aGlzLmNvbm5lY3Rpb24uc2VuZFJhd1RyYW5zYWN0aW9uKHJhd1RyYW5zYWN0aW9uLCBvcHRzKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZFRvQWRkaXRpb25hbENvbm5lY3Rpb25zKHJhd1RyYW5zYWN0aW9uLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgcmVzb2x2ZVJlZmVyZW5jZSA9IHtcbiAgICAgICAgICAgIHJlc29sdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3RvcFdhaXRpbmcgPSAoKSA9PiB7XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChyZXNvbHZlUmVmZXJlbmNlLnJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlUmVmZXJlbmNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHdoaWxlICghZG9uZSAmJiB0aGlzLmdldFRpbWVzdGFtcCgpIC0gc3RhcnRUaW1lIDwgdGhpcy50aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zbGVlcChyZXNvbHZlUmVmZXJlbmNlKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2VuZFJhd1RyYW5zYWN0aW9uKHJhd1RyYW5zYWN0aW9uLCBvcHRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcFdhaXRpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFRvQWRkaXRpb25hbENvbm5lY3Rpb25zKHJhd1RyYW5zYWN0aW9uLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgICAgIGxldCBzbG90O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jb25maXJtVHJhbnNhY3Rpb24odHhpZCwgb3B0cy5jb21taXRtZW50KTtcbiAgICAgICAgICAgIHNsb3QgPSByZXN1bHQuY29udGV4dC5zbG90O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHN0b3BXYWl0aW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdHhTaWc6IHR4aWQsIHNsb3QgfTtcbiAgICB9XG59XG5leHBvcnRzLlJldHJ5VHhTZW5kZXIgPSBSZXRyeVR4U2VuZGVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUmV0cnlUeFNlbmRlciIsImFuY2hvcl8xIiwicmVxdWlyZSIsImJhc2VUeFNlbmRlcl8xIiwiREVGQVVMVF9USU1FT1VUIiwiREVGQVVMVF9SRVRSWSIsIkJhc2VUeFNlbmRlciIsImNvbnN0cnVjdG9yIiwiY29ubmVjdGlvbiIsIndhbGxldCIsIm9wdHMiLCJBbmNob3JQcm92aWRlciIsImRlZmF1bHRPcHRpb25zIiwidGltZW91dCIsInJldHJ5U2xlZXAiLCJhZGRpdGlvbmFsQ29ubmVjdGlvbnMiLCJBcnJheSIsInRpbW91dENvdW50Iiwic2xlZXAiLCJyZWZlcmVuY2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJzZW5kUmF3VHJhbnNhY3Rpb24iLCJyYXdUcmFuc2FjdGlvbiIsInN0YXJ0VGltZSIsImdldFRpbWVzdGFtcCIsInR4aWQiLCJzZW5kVG9BZGRpdGlvbmFsQ29ubmVjdGlvbnMiLCJlIiwiY29uc29sZSIsImVycm9yIiwiZG9uZSIsInJlc29sdmVSZWZlcmVuY2UiLCJ1bmRlZmluZWQiLCJzdG9wV2FpdGluZyIsImNhdGNoIiwic2xvdCIsInJlc3VsdCIsImNvbmZpcm1UcmFuc2FjdGlvbiIsImNvbW1pdG1lbnQiLCJjb250ZXh0IiwidHhTaWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/tx/retryTxSender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/tx/types.js":
/*!******************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/tx/types.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi90eC90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi90eC90eXBlcy5qcz8yNDI3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/tx/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/tx/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/tx/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.wrapInTx = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst COMPUTE_UNITS_DEFAULT = 200000;\nfunction wrapInTx(instruction, computeUnits = 600000, computeUnitsPrice = 0) {\n    const tx = new web3_js_1.Transaction();\n    if (computeUnits != COMPUTE_UNITS_DEFAULT) {\n        tx.add(web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({\n            units: computeUnits\n        }));\n    }\n    if (computeUnitsPrice != 0) {\n        tx.add(web3_js_1.ComputeBudgetProgram.setComputeUnitPrice({\n            microLamports: computeUnitsPrice\n        }));\n    }\n    return tx.add(instruction);\n}\nexports.wrapInTx = wrapInTx;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi90eC91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUcsS0FBSztBQUN4QixNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQyw4RUFBaUI7QUFDM0MsTUFBTUMsd0JBQXdCO0FBQzlCLFNBQVNILFNBQVNJLFdBQVcsRUFBRUMsZUFBZSxNQUFNLEVBQUVDLG9CQUFvQixDQUFDO0lBQ3ZFLE1BQU1DLEtBQUssSUFBSU4sVUFBVU8sV0FBVztJQUNwQyxJQUFJSCxnQkFBZ0JGLHVCQUF1QjtRQUN2Q0ksR0FBR0UsR0FBRyxDQUFDUixVQUFVUyxvQkFBb0IsQ0FBQ0MsbUJBQW1CLENBQUM7WUFDdERDLE9BQU9QO1FBQ1g7SUFDSjtJQUNBLElBQUlDLHFCQUFxQixHQUFHO1FBQ3hCQyxHQUFHRSxHQUFHLENBQUNSLFVBQVVTLG9CQUFvQixDQUFDRyxtQkFBbUIsQ0FBQztZQUN0REMsZUFBZVI7UUFDbkI7SUFDSjtJQUNBLE9BQU9DLEdBQUdFLEdBQUcsQ0FBQ0w7QUFDbEI7QUFDQU4sZ0JBQWdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL3R4L3V0aWxzLmpzP2MyMGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndyYXBJblR4ID0gdm9pZCAwO1xuY29uc3Qgd2ViM19qc18xID0gcmVxdWlyZShcIkBzb2xhbmEvd2ViMy5qc1wiKTtcbmNvbnN0IENPTVBVVEVfVU5JVFNfREVGQVVMVCA9IDIwMDAwMDtcbmZ1bmN0aW9uIHdyYXBJblR4KGluc3RydWN0aW9uLCBjb21wdXRlVW5pdHMgPSA2MDAwMDAsIGNvbXB1dGVVbml0c1ByaWNlID0gMCkge1xuICAgIGNvbnN0IHR4ID0gbmV3IHdlYjNfanNfMS5UcmFuc2FjdGlvbigpO1xuICAgIGlmIChjb21wdXRlVW5pdHMgIT0gQ09NUFVURV9VTklUU19ERUZBVUxUKSB7XG4gICAgICAgIHR4LmFkZCh3ZWIzX2pzXzEuQ29tcHV0ZUJ1ZGdldFByb2dyYW0uc2V0Q29tcHV0ZVVuaXRMaW1pdCh7XG4gICAgICAgICAgICB1bml0czogY29tcHV0ZVVuaXRzLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChjb21wdXRlVW5pdHNQcmljZSAhPSAwKSB7XG4gICAgICAgIHR4LmFkZCh3ZWIzX2pzXzEuQ29tcHV0ZUJ1ZGdldFByb2dyYW0uc2V0Q29tcHV0ZVVuaXRQcmljZSh7XG4gICAgICAgICAgICBtaWNyb0xhbXBvcnRzOiBjb21wdXRlVW5pdHNQcmljZSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gdHguYWRkKGluc3RydWN0aW9uKTtcbn1cbmV4cG9ydHMud3JhcEluVHggPSB3cmFwSW5UeDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIndyYXBJblR4Iiwid2ViM19qc18xIiwicmVxdWlyZSIsIkNPTVBVVEVfVU5JVFNfREVGQVVMVCIsImluc3RydWN0aW9uIiwiY29tcHV0ZVVuaXRzIiwiY29tcHV0ZVVuaXRzUHJpY2UiLCJ0eCIsIlRyYW5zYWN0aW9uIiwiYWRkIiwiQ29tcHV0ZUJ1ZGdldFByb2dyYW0iLCJzZXRDb21wdXRlVW5pdExpbWl0IiwidW5pdHMiLCJzZXRDb21wdXRlVW5pdFByaWNlIiwibWljcm9MYW1wb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/tx/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/types.js":
/*!***************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/types.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SwapReduceOnly = exports.DefaultOrderParams = exports.ModifyOrderPolicy = exports.PostOnlyParams = exports.LiquidationType = exports.LPAction = exports.TradeSide = exports.getVariant = exports.isOneOfVariant = exports.isVariant = exports.StakeAction = exports.SpotFulfillmentConfigStatus = exports.SettlePnlExplanation = exports.DepositExplanation = exports.SpotFulfillmentStatus = exports.SpotFulfillmentType = exports.OrderTriggerCondition = exports.OrderActionExplanation = exports.OrderAction = exports.OrderStatus = exports.MarketType = exports.OrderType = exports.OracleSource = exports.DepositDirection = exports.PositionDirection = exports.SpotBalanceType = exports.SwapDirection = exports.AssetTier = exports.ContractTier = exports.ContractType = exports.UserStatus = exports.MarketStatus = exports.ExchangeStatus = void 0;\nconst _1 = __webpack_require__(/*! . */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\n// # Utility Types / Enums / Constants\nvar ExchangeStatus;\n(function(ExchangeStatus) {\n    ExchangeStatus[ExchangeStatus[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ExchangeStatus[ExchangeStatus[\"DEPOSIT_PAUSED\"] = 1] = \"DEPOSIT_PAUSED\";\n    ExchangeStatus[ExchangeStatus[\"WITHDRAW_PAUSED\"] = 2] = \"WITHDRAW_PAUSED\";\n    ExchangeStatus[ExchangeStatus[\"AMM_PAUSED\"] = 4] = \"AMM_PAUSED\";\n    ExchangeStatus[ExchangeStatus[\"FILL_PAUSED\"] = 8] = \"FILL_PAUSED\";\n    ExchangeStatus[ExchangeStatus[\"LIQ_PAUSED\"] = 16] = \"LIQ_PAUSED\";\n    ExchangeStatus[ExchangeStatus[\"FUNDING_PAUSED\"] = 32] = \"FUNDING_PAUSED\";\n    ExchangeStatus[ExchangeStatus[\"SETTLE_PNL_PAUSED\"] = 64] = \"SETTLE_PNL_PAUSED\";\n    ExchangeStatus[ExchangeStatus[\"PAUSED\"] = 127] = \"PAUSED\";\n})(ExchangeStatus = exports.ExchangeStatus || (exports.ExchangeStatus = {}));\nclass MarketStatus {\n}\nexports.MarketStatus = MarketStatus;\nMarketStatus.INITIALIZED = {\n    initialized: {}\n};\nMarketStatus.ACTIVE = {\n    active: {}\n};\nMarketStatus.FUNDING_PAUSED = {\n    fundingPaused: {}\n};\nMarketStatus.AMM_PAUSED = {\n    ammPaused: {}\n};\nMarketStatus.FILL_PAUSED = {\n    fillPaused: {}\n};\nMarketStatus.WITHDRAW_PAUSED = {\n    withdrawPaused: {}\n};\nMarketStatus.REDUCE_ONLY = {\n    reduceOnly: {}\n};\nMarketStatus.SETTLEMENT = {\n    settlement: {}\n};\nMarketStatus.DELISTED = {\n    delisted: {}\n};\nclass UserStatus {\n}\nexports.UserStatus = UserStatus;\nUserStatus.ACTIVE = {\n    active: {}\n};\nUserStatus.BEING_LIQUIDATED = {\n    beingLiquidated: {}\n};\nUserStatus.BANKRUPT = {\n    bankrupt: {}\n};\nUserStatus.REDUCE_ONLY = {\n    reduceOnly: {}\n};\nclass ContractType {\n}\nexports.ContractType = ContractType;\nContractType.PERPETUAL = {\n    perpetual: {}\n};\nContractType.FUTURE = {\n    future: {}\n};\nclass ContractTier {\n}\nexports.ContractTier = ContractTier;\nContractTier.A = {\n    a: {}\n};\nContractTier.B = {\n    b: {}\n};\nContractTier.C = {\n    c: {}\n};\nContractTier.SPECULATIVE = {\n    speculative: {}\n};\nContractTier.ISOLATED = {\n    isolated: {}\n};\nclass AssetTier {\n}\nexports.AssetTier = AssetTier;\nAssetTier.COLLATERAL = {\n    collateral: {}\n};\nAssetTier.PROTECTED = {\n    protected: {}\n};\nAssetTier.CROSS = {\n    cross: {}\n};\nAssetTier.ISOLATED = {\n    isolated: {}\n};\nAssetTier.UNLISTED = {\n    unlisted: {}\n};\nclass SwapDirection {\n}\nexports.SwapDirection = SwapDirection;\nSwapDirection.ADD = {\n    add: {}\n};\nSwapDirection.REMOVE = {\n    remove: {}\n};\nclass SpotBalanceType {\n}\nexports.SpotBalanceType = SpotBalanceType;\nSpotBalanceType.DEPOSIT = {\n    deposit: {}\n};\nSpotBalanceType.BORROW = {\n    borrow: {}\n};\nclass PositionDirection {\n}\nexports.PositionDirection = PositionDirection;\nPositionDirection.LONG = {\n    long: {}\n};\nPositionDirection.SHORT = {\n    short: {}\n};\nclass DepositDirection {\n}\nexports.DepositDirection = DepositDirection;\nDepositDirection.DEPOSIT = {\n    deposit: {}\n};\nDepositDirection.WITHDRAW = {\n    withdraw: {}\n};\nclass OracleSource {\n}\nexports.OracleSource = OracleSource;\nOracleSource.PYTH = {\n    pyth: {}\n};\nOracleSource.PYTH_1K = {\n    pyth1K: {}\n};\nOracleSource.PYTH_1M = {\n    pyth1M: {}\n};\n// static readonly SWITCHBOARD = { switchboard: {} };\nOracleSource.QUOTE_ASSET = {\n    quoteAsset: {}\n};\nOracleSource.PYTH_STABLE_COIN = {\n    pythStableCoin: {}\n};\nclass OrderType {\n}\nexports.OrderType = OrderType;\nOrderType.LIMIT = {\n    limit: {}\n};\nOrderType.TRIGGER_MARKET = {\n    triggerMarket: {}\n};\nOrderType.TRIGGER_LIMIT = {\n    triggerLimit: {}\n};\nOrderType.MARKET = {\n    market: {}\n};\nOrderType.ORACLE = {\n    oracle: {}\n};\nclass MarketType {\n}\nexports.MarketType = MarketType;\nMarketType.SPOT = {\n    spot: {}\n};\nMarketType.PERP = {\n    perp: {}\n};\nclass OrderStatus {\n}\nexports.OrderStatus = OrderStatus;\nOrderStatus.INIT = {\n    init: {}\n};\nOrderStatus.OPEN = {\n    open: {}\n};\nclass OrderAction {\n}\nexports.OrderAction = OrderAction;\nOrderAction.PLACE = {\n    place: {}\n};\nOrderAction.CANCEL = {\n    cancel: {}\n};\nOrderAction.EXPIRE = {\n    expire: {}\n};\nOrderAction.FILL = {\n    fill: {}\n};\nOrderAction.TRIGGER = {\n    trigger: {}\n};\nclass OrderActionExplanation {\n}\nexports.OrderActionExplanation = OrderActionExplanation;\nOrderActionExplanation.NONE = {\n    none: {}\n};\nOrderActionExplanation.INSUFFICIENT_FREE_COLLATERAL = {\n    insufficientFreeCollateral: {}\n};\nOrderActionExplanation.ORACLE_PRICE_BREACHED_LIMIT_PRICE = {\n    oraclePriceBreachedLimitPrice: {}\n};\nOrderActionExplanation.MARKET_ORDER_FILLED_TO_LIMIT_PRICE = {\n    marketOrderFilledToLimitPrice: {}\n};\nOrderActionExplanation.ORDER_EXPIRED = {\n    orderExpired: {}\n};\nOrderActionExplanation.LIQUIDATION = {\n    liquidation: {}\n};\nOrderActionExplanation.ORDER_FILLED_WITH_AMM = {\n    orderFilledWithAmm: {}\n};\nOrderActionExplanation.ORDER_FILLED_WITH_AMM_JIT = {\n    orderFilledWithAmmJit: {}\n};\nOrderActionExplanation.ORDER_FILLED_WITH_AMM_JIT_LP_SPLIT = {\n    orderFilledWithAmmJitLpSplit: {}\n};\nOrderActionExplanation.ORDER_FILLED_WITH_LP_JIT = {\n    orderFilledWithLpJit: {}\n};\nOrderActionExplanation.ORDER_FILLED_WITH_MATCH = {\n    orderFilledWithMatch: {}\n};\nOrderActionExplanation.ORDER_FILLED_WITH_MATCH_JIT = {\n    orderFilledWithMatchJit: {}\n};\nOrderActionExplanation.MARKET_EXPIRED = {\n    marketExpired: {}\n};\nOrderActionExplanation.RISK_INCREASING_ORDER = {\n    riskingIncreasingOrder: {}\n};\nOrderActionExplanation.ORDER_FILLED_WITH_SERUM = {\n    orderFillWithSerum: {}\n};\nOrderActionExplanation.REDUCE_ONLY_ORDER_INCREASED_POSITION = {\n    reduceOnlyOrderIncreasedPosition: {}\n};\nclass OrderTriggerCondition {\n}\nexports.OrderTriggerCondition = OrderTriggerCondition;\nOrderTriggerCondition.ABOVE = {\n    above: {}\n};\nOrderTriggerCondition.BELOW = {\n    below: {}\n};\nOrderTriggerCondition.TRIGGERED_ABOVE = {\n    triggeredAbove: {}\n}; // above condition has been triggered\nOrderTriggerCondition.TRIGGERED_BELOW = {\n    triggeredBelow: {}\n}; // below condition has been triggered\nclass SpotFulfillmentType {\n}\nexports.SpotFulfillmentType = SpotFulfillmentType;\nSpotFulfillmentType.EXTERNAL = {\n    external: {}\n};\nSpotFulfillmentType.MATCH = {\n    match: {}\n};\nclass SpotFulfillmentStatus {\n}\nexports.SpotFulfillmentStatus = SpotFulfillmentStatus;\nSpotFulfillmentStatus.ENABLED = {\n    enabled: {}\n};\nSpotFulfillmentStatus.DISABLED = {\n    disabled: {}\n};\nclass DepositExplanation {\n}\nexports.DepositExplanation = DepositExplanation;\nDepositExplanation.NONE = {\n    none: {}\n};\nDepositExplanation.TRANSFER = {\n    transfer: {}\n};\nclass SettlePnlExplanation {\n}\nexports.SettlePnlExplanation = SettlePnlExplanation;\nSettlePnlExplanation.NONE = {\n    none: {}\n};\nSettlePnlExplanation.EXPIRED_POSITION = {\n    expiredPosition: {}\n};\nclass SpotFulfillmentConfigStatus {\n}\nexports.SpotFulfillmentConfigStatus = SpotFulfillmentConfigStatus;\nSpotFulfillmentConfigStatus.ENABLED = {\n    enabled: {}\n};\nSpotFulfillmentConfigStatus.DISABLED = {\n    disabled: {}\n};\nclass StakeAction {\n}\nexports.StakeAction = StakeAction;\nStakeAction.STAKE = {\n    stake: {}\n};\nStakeAction.UNSTAKE_REQUEST = {\n    unstakeRequest: {}\n};\nStakeAction.UNSTAKE_CANCEL_REQUEST = {\n    unstakeCancelRequest: {}\n};\nStakeAction.UNSTAKE = {\n    unstake: {}\n};\nfunction isVariant(object, type) {\n    return object.hasOwnProperty(type);\n}\nexports.isVariant = isVariant;\nfunction isOneOfVariant(object, types) {\n    return types.reduce((result, type)=>{\n        return result || object.hasOwnProperty(type);\n    }, false);\n}\nexports.isOneOfVariant = isOneOfVariant;\nfunction getVariant(object) {\n    return Object.keys(object)[0];\n}\nexports.getVariant = getVariant;\nvar TradeSide;\n(function(TradeSide) {\n    TradeSide[TradeSide[\"None\"] = 0] = \"None\";\n    TradeSide[TradeSide[\"Buy\"] = 1] = \"Buy\";\n    TradeSide[TradeSide[\"Sell\"] = 2] = \"Sell\";\n})(TradeSide = exports.TradeSide || (exports.TradeSide = {}));\nclass LPAction {\n}\nexports.LPAction = LPAction;\nLPAction.ADD_LIQUIDITY = {\n    addLiquidity: {}\n};\nLPAction.REMOVE_LIQUIDITY = {\n    removeLiquidity: {}\n};\nLPAction.SETTLE_LIQUIDITY = {\n    settleLiquidity: {}\n};\nclass LiquidationType {\n}\nexports.LiquidationType = LiquidationType;\nLiquidationType.LIQUIDATE_PERP = {\n    liquidatePerp: {}\n};\nLiquidationType.LIQUIDATE_BORROW_FOR_PERP_PNL = {\n    liquidateBorrowForPerpPnl: {}\n};\nLiquidationType.LIQUIDATE_PERP_PNL_FOR_DEPOSIT = {\n    liquidatePerpPnlForDeposit: {}\n};\nLiquidationType.PERP_BANKRUPTCY = {\n    perpBankruptcy: {}\n};\nLiquidationType.SPOT_BANKRUPTCY = {\n    spotBankruptcy: {}\n};\nLiquidationType.LIQUIDATE_SPOT = {\n    liquidateSpot: {}\n};\nclass PostOnlyParams {\n}\nexports.PostOnlyParams = PostOnlyParams;\nPostOnlyParams.NONE = {\n    none: {}\n};\nPostOnlyParams.MUST_POST_ONLY = {\n    mustPostOnly: {}\n}; // Tx fails if order can't be post only\nPostOnlyParams.TRY_POST_ONLY = {\n    tryPostOnly: {}\n}; // Tx succeeds and order not placed if can't be post only\nPostOnlyParams.SLIDE = {\n    slide: {}\n}; // Modify price to be post only if can't be post only\nclass ModifyOrderPolicy {\n}\nexports.ModifyOrderPolicy = ModifyOrderPolicy;\nModifyOrderPolicy.MUST_MODIFY = {\n    mustModify: {}\n};\nModifyOrderPolicy.TRY_MODIFY = {\n    tryModify: {}\n};\nexports.DefaultOrderParams = {\n    orderType: OrderType.MARKET,\n    marketType: MarketType.PERP,\n    userOrderId: 0,\n    direction: PositionDirection.LONG,\n    baseAssetAmount: _1.ZERO,\n    price: _1.ZERO,\n    marketIndex: 0,\n    reduceOnly: false,\n    postOnly: PostOnlyParams.NONE,\n    immediateOrCancel: false,\n    triggerPrice: null,\n    triggerCondition: OrderTriggerCondition.ABOVE,\n    oraclePriceOffset: null,\n    auctionDuration: null,\n    maxTs: null,\n    auctionStartPrice: null,\n    auctionEndPrice: null\n};\nclass SwapReduceOnly {\n}\nexports.SwapReduceOnly = SwapReduceOnly;\nSwapReduceOnly.In = {\n    in: {}\n};\nSwapReduceOnly.Out = {\n    out: {}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUdBLDBCQUEwQixHQUFHQSx5QkFBeUIsR0FBR0Esc0JBQXNCLEdBQUdBLHVCQUF1QixHQUFHQSxnQkFBZ0IsR0FBR0EsaUJBQWlCLEdBQUdBLGtCQUFrQixHQUFHQSxzQkFBc0IsR0FBR0EsaUJBQWlCLEdBQUdBLG1CQUFtQixHQUFHQSxtQ0FBbUMsR0FBR0EsNEJBQTRCLEdBQUdBLDBCQUEwQixHQUFHQSw2QkFBNkIsR0FBR0EsMkJBQTJCLEdBQUdBLDZCQUE2QixHQUFHQSw4QkFBOEIsR0FBR0EsbUJBQW1CLEdBQUdBLG1CQUFtQixHQUFHQSxrQkFBa0IsR0FBR0EsaUJBQWlCLEdBQUdBLG9CQUFvQixHQUFHQSx3QkFBd0IsR0FBR0EseUJBQXlCLEdBQUdBLHVCQUF1QixHQUFHQSxxQkFBcUIsR0FBR0EsaUJBQWlCLEdBQUdBLG9CQUFvQixHQUFHQSxvQkFBb0IsR0FBR0Esa0JBQWtCLEdBQUdBLG9CQUFvQixHQUFHQSxzQkFBc0IsR0FBRyxLQUFLO0FBQ3QwQixNQUFNbUMsS0FBS0MsbUJBQU9BLENBQUMsNERBQUc7QUFDdEIsc0NBQXNDO0FBQ3RDLElBQUlGO0FBQ0gsVUFBVUEsY0FBYztJQUNyQkEsY0FBYyxDQUFDQSxjQUFjLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUMvQ0EsY0FBYyxDQUFDQSxjQUFjLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxHQUFHO0lBQ3ZEQSxjQUFjLENBQUNBLGNBQWMsQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLEdBQUc7SUFDeERBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDbkRBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLGNBQWMsR0FBRyxFQUFFLEdBQUc7SUFDcERBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLGFBQWEsR0FBRyxHQUFHLEdBQUc7SUFDcERBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLGlCQUFpQixHQUFHLEdBQUcsR0FBRztJQUN4REEsY0FBYyxDQUFDQSxjQUFjLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxHQUFHO0lBQzNEQSxjQUFjLENBQUNBLGNBQWMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxHQUFHO0FBQ3JELEdBQUdBLGlCQUFpQmxDLFFBQVFrQyxjQUFjLElBQUtsQyxDQUFBQSxzQkFBc0IsR0FBRyxDQUFDO0FBQ3pFLE1BQU1pQztBQUNOO0FBQ0FqQyxvQkFBb0IsR0FBR2lDO0FBQ3ZCQSxhQUFhSSxXQUFXLEdBQUc7SUFBRUMsYUFBYSxDQUFDO0FBQUU7QUFDN0NMLGFBQWFNLE1BQU0sR0FBRztJQUFFQyxRQUFRLENBQUM7QUFBRTtBQUNuQ1AsYUFBYVEsY0FBYyxHQUFHO0lBQUVDLGVBQWUsQ0FBQztBQUFFO0FBQ2xEVCxhQUFhVSxVQUFVLEdBQUc7SUFBRUMsV0FBVyxDQUFDO0FBQUU7QUFDMUNYLGFBQWFZLFdBQVcsR0FBRztJQUFFQyxZQUFZLENBQUM7QUFBRTtBQUM1Q2IsYUFBYWMsZUFBZSxHQUFHO0lBQUVDLGdCQUFnQixDQUFDO0FBQUU7QUFDcERmLGFBQWFnQixXQUFXLEdBQUc7SUFBRUMsWUFBWSxDQUFDO0FBQUU7QUFDNUNqQixhQUFha0IsVUFBVSxHQUFHO0lBQUVDLFlBQVksQ0FBQztBQUFFO0FBQzNDbkIsYUFBYW9CLFFBQVEsR0FBRztJQUFFQyxVQUFVLENBQUM7QUFBRTtBQUN2QyxNQUFNdEI7QUFDTjtBQUNBaEMsa0JBQWtCLEdBQUdnQztBQUNyQkEsV0FBV08sTUFBTSxHQUFHO0lBQUVDLFFBQVEsQ0FBQztBQUFFO0FBQ2pDUixXQUFXdUIsZ0JBQWdCLEdBQUc7SUFBRUMsaUJBQWlCLENBQUM7QUFBRTtBQUNwRHhCLFdBQVd5QixRQUFRLEdBQUc7SUFBRUMsVUFBVSxDQUFDO0FBQUU7QUFDckMxQixXQUFXaUIsV0FBVyxHQUFHO0lBQUVDLFlBQVksQ0FBQztBQUFFO0FBQzFDLE1BQU1uQjtBQUNOO0FBQ0EvQixvQkFBb0IsR0FBRytCO0FBQ3ZCQSxhQUFhNEIsU0FBUyxHQUFHO0lBQUVDLFdBQVcsQ0FBQztBQUFFO0FBQ3pDN0IsYUFBYThCLE1BQU0sR0FBRztJQUFFQyxRQUFRLENBQUM7QUFBRTtBQUNuQyxNQUFNaEM7QUFDTjtBQUNBOUIsb0JBQW9CLEdBQUc4QjtBQUN2QkEsYUFBYWlDLENBQUMsR0FBRztJQUFFQyxHQUFHLENBQUM7QUFBRTtBQUN6QmxDLGFBQWFtQyxDQUFDLEdBQUc7SUFBRUMsR0FBRyxDQUFDO0FBQUU7QUFDekJwQyxhQUFhcUMsQ0FBQyxHQUFHO0lBQUVDLEdBQUcsQ0FBQztBQUFFO0FBQ3pCdEMsYUFBYXVDLFdBQVcsR0FBRztJQUFFQyxhQUFhLENBQUM7QUFBRTtBQUM3Q3hDLGFBQWF5QyxRQUFRLEdBQUc7SUFBRUMsVUFBVSxDQUFDO0FBQUU7QUFDdkMsTUFBTTNDO0FBQ047QUFDQTdCLGlCQUFpQixHQUFHNkI7QUFDcEJBLFVBQVU0QyxVQUFVLEdBQUc7SUFBRUMsWUFBWSxDQUFDO0FBQUU7QUFDeEM3QyxVQUFVOEMsU0FBUyxHQUFHO0lBQUVDLFdBQVcsQ0FBQztBQUFFO0FBQ3RDL0MsVUFBVWdELEtBQUssR0FBRztJQUFFQyxPQUFPLENBQUM7QUFBRTtBQUM5QmpELFVBQVUwQyxRQUFRLEdBQUc7SUFBRUMsVUFBVSxDQUFDO0FBQUU7QUFDcEMzQyxVQUFVa0QsUUFBUSxHQUFHO0lBQUVDLFVBQVUsQ0FBQztBQUFFO0FBQ3BDLE1BQU1wRDtBQUNOO0FBQ0E1QixxQkFBcUIsR0FBRzRCO0FBQ3hCQSxjQUFjcUQsR0FBRyxHQUFHO0lBQUVDLEtBQUssQ0FBQztBQUFFO0FBQzlCdEQsY0FBY3VELE1BQU0sR0FBRztJQUFFQyxRQUFRLENBQUM7QUFBRTtBQUNwQyxNQUFNekQ7QUFDTjtBQUNBM0IsdUJBQXVCLEdBQUcyQjtBQUMxQkEsZ0JBQWdCMEQsT0FBTyxHQUFHO0lBQUVDLFNBQVMsQ0FBQztBQUFFO0FBQ3hDM0QsZ0JBQWdCNEQsTUFBTSxHQUFHO0lBQUVDLFFBQVEsQ0FBQztBQUFFO0FBQ3RDLE1BQU05RDtBQUNOO0FBQ0ExQix5QkFBeUIsR0FBRzBCO0FBQzVCQSxrQkFBa0IrRCxJQUFJLEdBQUc7SUFBRUMsTUFBTSxDQUFDO0FBQUU7QUFDcENoRSxrQkFBa0JpRSxLQUFLLEdBQUc7SUFBRUMsT0FBTyxDQUFDO0FBQUU7QUFDdEMsTUFBTW5FO0FBQ047QUFDQXpCLHdCQUF3QixHQUFHeUI7QUFDM0JBLGlCQUFpQjRELE9BQU8sR0FBRztJQUFFQyxTQUFTLENBQUM7QUFBRTtBQUN6QzdELGlCQUFpQm9FLFFBQVEsR0FBRztJQUFFQyxVQUFVLENBQUM7QUFBRTtBQUMzQyxNQUFNdEU7QUFDTjtBQUNBeEIsb0JBQW9CLEdBQUd3QjtBQUN2QkEsYUFBYXVFLElBQUksR0FBRztJQUFFQyxNQUFNLENBQUM7QUFBRTtBQUMvQnhFLGFBQWF5RSxPQUFPLEdBQUc7SUFBRUMsUUFBUSxDQUFDO0FBQUU7QUFDcEMxRSxhQUFhMkUsT0FBTyxHQUFHO0lBQUVDLFFBQVEsQ0FBQztBQUFFO0FBQ3BDLHFEQUFxRDtBQUNyRDVFLGFBQWE2RSxXQUFXLEdBQUc7SUFBRUMsWUFBWSxDQUFDO0FBQUU7QUFDNUM5RSxhQUFhK0UsZ0JBQWdCLEdBQUc7SUFBRUMsZ0JBQWdCLENBQUM7QUFBRTtBQUNyRCxNQUFNakY7QUFDTjtBQUNBdkIsaUJBQWlCLEdBQUd1QjtBQUNwQkEsVUFBVWtGLEtBQUssR0FBRztJQUFFQyxPQUFPLENBQUM7QUFBRTtBQUM5Qm5GLFVBQVVvRixjQUFjLEdBQUc7SUFBRUMsZUFBZSxDQUFDO0FBQUU7QUFDL0NyRixVQUFVc0YsYUFBYSxHQUFHO0lBQUVDLGNBQWMsQ0FBQztBQUFFO0FBQzdDdkYsVUFBVXdGLE1BQU0sR0FBRztJQUFFQyxRQUFRLENBQUM7QUFBRTtBQUNoQ3pGLFVBQVUwRixNQUFNLEdBQUc7SUFBRUMsUUFBUSxDQUFDO0FBQUU7QUFDaEMsTUFBTTVGO0FBQ047QUFDQXRCLGtCQUFrQixHQUFHc0I7QUFDckJBLFdBQVc2RixJQUFJLEdBQUc7SUFBRUMsTUFBTSxDQUFDO0FBQUU7QUFDN0I5RixXQUFXK0YsSUFBSSxHQUFHO0lBQUVDLE1BQU0sQ0FBQztBQUFFO0FBQzdCLE1BQU1qRztBQUNOO0FBQ0FyQixtQkFBbUIsR0FBR3FCO0FBQ3RCQSxZQUFZa0csSUFBSSxHQUFHO0lBQUVDLE1BQU0sQ0FBQztBQUFFO0FBQzlCbkcsWUFBWW9HLElBQUksR0FBRztJQUFFQyxNQUFNLENBQUM7QUFBRTtBQUM5QixNQUFNdEc7QUFDTjtBQUNBcEIsbUJBQW1CLEdBQUdvQjtBQUN0QkEsWUFBWXVHLEtBQUssR0FBRztJQUFFQyxPQUFPLENBQUM7QUFBRTtBQUNoQ3hHLFlBQVl5RyxNQUFNLEdBQUc7SUFBRUMsUUFBUSxDQUFDO0FBQUU7QUFDbEMxRyxZQUFZMkcsTUFBTSxHQUFHO0lBQUVDLFFBQVEsQ0FBQztBQUFFO0FBQ2xDNUcsWUFBWTZHLElBQUksR0FBRztJQUFFQyxNQUFNLENBQUM7QUFBRTtBQUM5QjlHLFlBQVkrRyxPQUFPLEdBQUc7SUFBRUMsU0FBUyxDQUFDO0FBQUU7QUFDcEMsTUFBTWpIO0FBQ047QUFDQW5CLDhCQUE4QixHQUFHbUI7QUFDakNBLHVCQUF1QmtILElBQUksR0FBRztJQUFFQyxNQUFNLENBQUM7QUFBRTtBQUN6Q25ILHVCQUF1Qm9ILDRCQUE0QixHQUFHO0lBQ2xEQyw0QkFBNEIsQ0FBQztBQUNqQztBQUNBckgsdUJBQXVCc0gsaUNBQWlDLEdBQUc7SUFDdkRDLCtCQUErQixDQUFDO0FBQ3BDO0FBQ0F2SCx1QkFBdUJ3SCxrQ0FBa0MsR0FBRztJQUN4REMsK0JBQStCLENBQUM7QUFDcEM7QUFDQXpILHVCQUF1QjBILGFBQWEsR0FBRztJQUNuQ0MsY0FBYyxDQUFDO0FBQ25CO0FBQ0EzSCx1QkFBdUI0SCxXQUFXLEdBQUc7SUFDakNDLGFBQWEsQ0FBQztBQUNsQjtBQUNBN0gsdUJBQXVCOEgscUJBQXFCLEdBQUc7SUFDM0NDLG9CQUFvQixDQUFDO0FBQ3pCO0FBQ0EvSCx1QkFBdUJnSSx5QkFBeUIsR0FBRztJQUMvQ0MsdUJBQXVCLENBQUM7QUFDNUI7QUFDQWpJLHVCQUF1QmtJLGtDQUFrQyxHQUFHO0lBQ3hEQyw4QkFBOEIsQ0FBQztBQUNuQztBQUNBbkksdUJBQXVCb0ksd0JBQXdCLEdBQUc7SUFDOUNDLHNCQUFzQixDQUFDO0FBQzNCO0FBQ0FySSx1QkFBdUJzSSx1QkFBdUIsR0FBRztJQUM3Q0Msc0JBQXNCLENBQUM7QUFDM0I7QUFDQXZJLHVCQUF1QndJLDJCQUEyQixHQUFHO0lBQ2pEQyx5QkFBeUIsQ0FBQztBQUM5QjtBQUNBekksdUJBQXVCMEksY0FBYyxHQUFHO0lBQ3BDQyxlQUFlLENBQUM7QUFDcEI7QUFDQTNJLHVCQUF1QjRJLHFCQUFxQixHQUFHO0lBQzNDQyx3QkFBd0IsQ0FBQztBQUM3QjtBQUNBN0ksdUJBQXVCOEksdUJBQXVCLEdBQUc7SUFDN0NDLG9CQUFvQixDQUFDO0FBQ3pCO0FBQ0EvSSx1QkFBdUJnSixvQ0FBb0MsR0FBRztJQUMxREMsa0NBQWtDLENBQUM7QUFDdkM7QUFDQSxNQUFNbEo7QUFDTjtBQUNBbEIsNkJBQTZCLEdBQUdrQjtBQUNoQ0Esc0JBQXNCbUosS0FBSyxHQUFHO0lBQUVDLE9BQU8sQ0FBQztBQUFFO0FBQzFDcEosc0JBQXNCcUosS0FBSyxHQUFHO0lBQUVDLE9BQU8sQ0FBQztBQUFFO0FBQzFDdEosc0JBQXNCdUosZUFBZSxHQUFHO0lBQUVDLGdCQUFnQixDQUFDO0FBQUUsR0FBRyxxQ0FBcUM7QUFDckd4SixzQkFBc0J5SixlQUFlLEdBQUc7SUFBRUMsZ0JBQWdCLENBQUM7QUFBRSxHQUFHLHFDQUFxQztBQUNyRyxNQUFNM0o7QUFDTjtBQUNBakIsMkJBQTJCLEdBQUdpQjtBQUM5QkEsb0JBQW9CNEosUUFBUSxHQUFHO0lBQUVDLFVBQVUsQ0FBQztBQUFFO0FBQzlDN0osb0JBQW9COEosS0FBSyxHQUFHO0lBQUVDLE9BQU8sQ0FBQztBQUFFO0FBQ3hDLE1BQU1oSztBQUNOO0FBQ0FoQiw2QkFBNkIsR0FBR2dCO0FBQ2hDQSxzQkFBc0JpSyxPQUFPLEdBQUc7SUFBRUMsU0FBUyxDQUFDO0FBQUU7QUFDOUNsSyxzQkFBc0JtSyxRQUFRLEdBQUc7SUFBRUMsVUFBVSxDQUFDO0FBQUU7QUFDaEQsTUFBTXJLO0FBQ047QUFDQWYsMEJBQTBCLEdBQUdlO0FBQzdCQSxtQkFBbUJzSCxJQUFJLEdBQUc7SUFBRUMsTUFBTSxDQUFDO0FBQUU7QUFDckN2SCxtQkFBbUJzSyxRQUFRLEdBQUc7SUFBRUMsVUFBVSxDQUFDO0FBQUU7QUFDN0MsTUFBTXhLO0FBQ047QUFDQWQsNEJBQTRCLEdBQUdjO0FBQy9CQSxxQkFBcUJ1SCxJQUFJLEdBQUc7SUFBRUMsTUFBTSxDQUFDO0FBQUU7QUFDdkN4SCxxQkFBcUJ5SyxnQkFBZ0IsR0FBRztJQUFFQyxpQkFBaUIsQ0FBQztBQUFFO0FBQzlELE1BQU0zSztBQUNOO0FBQ0FiLG1DQUFtQyxHQUFHYTtBQUN0Q0EsNEJBQTRCb0ssT0FBTyxHQUFHO0lBQUVDLFNBQVMsQ0FBQztBQUFFO0FBQ3BEckssNEJBQTRCc0ssUUFBUSxHQUFHO0lBQUVDLFVBQVUsQ0FBQztBQUFFO0FBQ3RELE1BQU14SztBQUNOO0FBQ0FaLG1CQUFtQixHQUFHWTtBQUN0QkEsWUFBWTZLLEtBQUssR0FBRztJQUFFQyxPQUFPLENBQUM7QUFBRTtBQUNoQzlLLFlBQVkrSyxlQUFlLEdBQUc7SUFBRUMsZ0JBQWdCLENBQUM7QUFBRTtBQUNuRGhMLFlBQVlpTCxzQkFBc0IsR0FBRztJQUFFQyxzQkFBc0IsQ0FBQztBQUFFO0FBQ2hFbEwsWUFBWW1MLE9BQU8sR0FBRztJQUFFQyxTQUFTLENBQUM7QUFBRTtBQUNwQyxTQUFTckwsVUFBVXNMLE1BQU0sRUFBRUMsSUFBSTtJQUMzQixPQUFPRCxPQUFPRSxjQUFjLENBQUNEO0FBQ2pDO0FBQ0FsTSxpQkFBaUIsR0FBR1c7QUFDcEIsU0FBU0QsZUFBZXVMLE1BQU0sRUFBRUcsS0FBSztJQUNqQyxPQUFPQSxNQUFNQyxNQUFNLENBQUMsQ0FBQ0MsUUFBUUo7UUFDekIsT0FBT0ksVUFBVUwsT0FBT0UsY0FBYyxDQUFDRDtJQUMzQyxHQUFHO0FBQ1A7QUFDQWxNLHNCQUFzQixHQUFHVTtBQUN6QixTQUFTRCxXQUFXd0wsTUFBTTtJQUN0QixPQUFPbk0sT0FBT3lNLElBQUksQ0FBQ04sT0FBTyxDQUFDLEVBQUU7QUFDakM7QUFDQWpNLGtCQUFrQixHQUFHUztBQUNyQixJQUFJRDtBQUNILFVBQVVBLFNBQVM7SUFDaEJBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDbkNBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUc7SUFDbENBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7QUFDdkMsR0FBR0EsWUFBWVIsUUFBUVEsU0FBUyxJQUFLUixDQUFBQSxpQkFBaUIsR0FBRyxDQUFDO0FBQzFELE1BQU1PO0FBQ047QUFDQVAsZ0JBQWdCLEdBQUdPO0FBQ25CQSxTQUFTaU0sYUFBYSxHQUFHO0lBQUVDLGNBQWMsQ0FBQztBQUFFO0FBQzVDbE0sU0FBU21NLGdCQUFnQixHQUFHO0lBQUVDLGlCQUFpQixDQUFDO0FBQUU7QUFDbERwTSxTQUFTcU0sZ0JBQWdCLEdBQUc7SUFBRUMsaUJBQWlCLENBQUM7QUFBRTtBQUNsRCxNQUFNdk07QUFDTjtBQUNBTix1QkFBdUIsR0FBR007QUFDMUJBLGdCQUFnQndNLGNBQWMsR0FBRztJQUFFQyxlQUFlLENBQUM7QUFBRTtBQUNyRHpNLGdCQUFnQjBNLDZCQUE2QixHQUFHO0lBQzVDQywyQkFBMkIsQ0FBQztBQUNoQztBQUNBM00sZ0JBQWdCNE0sOEJBQThCLEdBQUc7SUFDN0NDLDRCQUE0QixDQUFDO0FBQ2pDO0FBQ0E3TSxnQkFBZ0I4TSxlQUFlLEdBQUc7SUFDOUJDLGdCQUFnQixDQUFDO0FBQ3JCO0FBQ0EvTSxnQkFBZ0JnTixlQUFlLEdBQUc7SUFDOUJDLGdCQUFnQixDQUFDO0FBQ3JCO0FBQ0FqTixnQkFBZ0JrTixjQUFjLEdBQUc7SUFDN0JDLGVBQWUsQ0FBQztBQUNwQjtBQUNBLE1BQU1wTjtBQUNOO0FBQ0FMLHNCQUFzQixHQUFHSztBQUN6QkEsZUFBZWdJLElBQUksR0FBRztJQUFFQyxNQUFNLENBQUM7QUFBRTtBQUNqQ2pJLGVBQWVxTixjQUFjLEdBQUc7SUFBRUMsY0FBYyxDQUFDO0FBQUUsR0FBRyx1Q0FBdUM7QUFDN0Z0TixlQUFldU4sYUFBYSxHQUFHO0lBQUVDLGFBQWEsQ0FBQztBQUFFLEdBQUcseURBQXlEO0FBQzdHeE4sZUFBZXlOLEtBQUssR0FBRztJQUFFQyxPQUFPLENBQUM7QUFBRSxHQUFHLHFEQUFxRDtBQUMzRixNQUFNM047QUFDTjtBQUNBSix5QkFBeUIsR0FBR0k7QUFDNUJBLGtCQUFrQjROLFdBQVcsR0FBRztJQUFFQyxZQUFZLENBQUM7QUFBRTtBQUNqRDdOLGtCQUFrQjhOLFVBQVUsR0FBRztJQUFFQyxXQUFXLENBQUM7QUFBRTtBQUMvQ25PLDBCQUEwQixHQUFHO0lBQ3pCb08sV0FBVzdNLFVBQVV3RixNQUFNO0lBQzNCc0gsWUFBWS9NLFdBQVcrRixJQUFJO0lBQzNCaUgsYUFBYTtJQUNiQyxXQUFXN00sa0JBQWtCK0QsSUFBSTtJQUNqQytJLGlCQUFpQnJNLEdBQUdzTSxJQUFJO0lBQ3hCQyxPQUFPdk0sR0FBR3NNLElBQUk7SUFDZEUsYUFBYTtJQUNiekwsWUFBWTtJQUNaMEwsVUFBVXZPLGVBQWVnSSxJQUFJO0lBQzdCd0csbUJBQW1CO0lBQ25CQyxjQUFjO0lBQ2RDLGtCQUFrQjdOLHNCQUFzQm1KLEtBQUs7SUFDN0MyRSxtQkFBbUI7SUFDbkJDLGlCQUFpQjtJQUNqQkMsT0FBTztJQUNQQyxtQkFBbUI7SUFDbkJDLGlCQUFpQjtBQUNyQjtBQUNBLE1BQU1sUDtBQUNOO0FBQ0FGLHNCQUFzQixHQUFHRTtBQUN6QkEsZUFBZW1QLEVBQUUsR0FBRztJQUFFQyxJQUFJLENBQUM7QUFBRTtBQUM3QnBQLGVBQWVxUCxHQUFHLEdBQUc7SUFBRUMsS0FBSyxDQUFDO0FBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvdHlwZXMuanM/YTc2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3dhcFJlZHVjZU9ubHkgPSBleHBvcnRzLkRlZmF1bHRPcmRlclBhcmFtcyA9IGV4cG9ydHMuTW9kaWZ5T3JkZXJQb2xpY3kgPSBleHBvcnRzLlBvc3RPbmx5UGFyYW1zID0gZXhwb3J0cy5MaXF1aWRhdGlvblR5cGUgPSBleHBvcnRzLkxQQWN0aW9uID0gZXhwb3J0cy5UcmFkZVNpZGUgPSBleHBvcnRzLmdldFZhcmlhbnQgPSBleHBvcnRzLmlzT25lT2ZWYXJpYW50ID0gZXhwb3J0cy5pc1ZhcmlhbnQgPSBleHBvcnRzLlN0YWtlQWN0aW9uID0gZXhwb3J0cy5TcG90RnVsZmlsbG1lbnRDb25maWdTdGF0dXMgPSBleHBvcnRzLlNldHRsZVBubEV4cGxhbmF0aW9uID0gZXhwb3J0cy5EZXBvc2l0RXhwbGFuYXRpb24gPSBleHBvcnRzLlNwb3RGdWxmaWxsbWVudFN0YXR1cyA9IGV4cG9ydHMuU3BvdEZ1bGZpbGxtZW50VHlwZSA9IGV4cG9ydHMuT3JkZXJUcmlnZ2VyQ29uZGl0aW9uID0gZXhwb3J0cy5PcmRlckFjdGlvbkV4cGxhbmF0aW9uID0gZXhwb3J0cy5PcmRlckFjdGlvbiA9IGV4cG9ydHMuT3JkZXJTdGF0dXMgPSBleHBvcnRzLk1hcmtldFR5cGUgPSBleHBvcnRzLk9yZGVyVHlwZSA9IGV4cG9ydHMuT3JhY2xlU291cmNlID0gZXhwb3J0cy5EZXBvc2l0RGlyZWN0aW9uID0gZXhwb3J0cy5Qb3NpdGlvbkRpcmVjdGlvbiA9IGV4cG9ydHMuU3BvdEJhbGFuY2VUeXBlID0gZXhwb3J0cy5Td2FwRGlyZWN0aW9uID0gZXhwb3J0cy5Bc3NldFRpZXIgPSBleHBvcnRzLkNvbnRyYWN0VGllciA9IGV4cG9ydHMuQ29udHJhY3RUeXBlID0gZXhwb3J0cy5Vc2VyU3RhdHVzID0gZXhwb3J0cy5NYXJrZXRTdGF0dXMgPSBleHBvcnRzLkV4Y2hhbmdlU3RhdHVzID0gdm9pZCAwO1xuY29uc3QgXzEgPSByZXF1aXJlKFwiLlwiKTtcbi8vICMgVXRpbGl0eSBUeXBlcyAvIEVudW1zIC8gQ29uc3RhbnRzXG52YXIgRXhjaGFuZ2VTdGF0dXM7XG4oZnVuY3Rpb24gKEV4Y2hhbmdlU3RhdHVzKSB7XG4gICAgRXhjaGFuZ2VTdGF0dXNbRXhjaGFuZ2VTdGF0dXNbXCJBQ1RJVkVcIl0gPSAwXSA9IFwiQUNUSVZFXCI7XG4gICAgRXhjaGFuZ2VTdGF0dXNbRXhjaGFuZ2VTdGF0dXNbXCJERVBPU0lUX1BBVVNFRFwiXSA9IDFdID0gXCJERVBPU0lUX1BBVVNFRFwiO1xuICAgIEV4Y2hhbmdlU3RhdHVzW0V4Y2hhbmdlU3RhdHVzW1wiV0lUSERSQVdfUEFVU0VEXCJdID0gMl0gPSBcIldJVEhEUkFXX1BBVVNFRFwiO1xuICAgIEV4Y2hhbmdlU3RhdHVzW0V4Y2hhbmdlU3RhdHVzW1wiQU1NX1BBVVNFRFwiXSA9IDRdID0gXCJBTU1fUEFVU0VEXCI7XG4gICAgRXhjaGFuZ2VTdGF0dXNbRXhjaGFuZ2VTdGF0dXNbXCJGSUxMX1BBVVNFRFwiXSA9IDhdID0gXCJGSUxMX1BBVVNFRFwiO1xuICAgIEV4Y2hhbmdlU3RhdHVzW0V4Y2hhbmdlU3RhdHVzW1wiTElRX1BBVVNFRFwiXSA9IDE2XSA9IFwiTElRX1BBVVNFRFwiO1xuICAgIEV4Y2hhbmdlU3RhdHVzW0V4Y2hhbmdlU3RhdHVzW1wiRlVORElOR19QQVVTRURcIl0gPSAzMl0gPSBcIkZVTkRJTkdfUEFVU0VEXCI7XG4gICAgRXhjaGFuZ2VTdGF0dXNbRXhjaGFuZ2VTdGF0dXNbXCJTRVRUTEVfUE5MX1BBVVNFRFwiXSA9IDY0XSA9IFwiU0VUVExFX1BOTF9QQVVTRURcIjtcbiAgICBFeGNoYW5nZVN0YXR1c1tFeGNoYW5nZVN0YXR1c1tcIlBBVVNFRFwiXSA9IDEyN10gPSBcIlBBVVNFRFwiO1xufSkoRXhjaGFuZ2VTdGF0dXMgPSBleHBvcnRzLkV4Y2hhbmdlU3RhdHVzIHx8IChleHBvcnRzLkV4Y2hhbmdlU3RhdHVzID0ge30pKTtcbmNsYXNzIE1hcmtldFN0YXR1cyB7XG59XG5leHBvcnRzLk1hcmtldFN0YXR1cyA9IE1hcmtldFN0YXR1cztcbk1hcmtldFN0YXR1cy5JTklUSUFMSVpFRCA9IHsgaW5pdGlhbGl6ZWQ6IHt9IH07XG5NYXJrZXRTdGF0dXMuQUNUSVZFID0geyBhY3RpdmU6IHt9IH07XG5NYXJrZXRTdGF0dXMuRlVORElOR19QQVVTRUQgPSB7IGZ1bmRpbmdQYXVzZWQ6IHt9IH07XG5NYXJrZXRTdGF0dXMuQU1NX1BBVVNFRCA9IHsgYW1tUGF1c2VkOiB7fSB9O1xuTWFya2V0U3RhdHVzLkZJTExfUEFVU0VEID0geyBmaWxsUGF1c2VkOiB7fSB9O1xuTWFya2V0U3RhdHVzLldJVEhEUkFXX1BBVVNFRCA9IHsgd2l0aGRyYXdQYXVzZWQ6IHt9IH07XG5NYXJrZXRTdGF0dXMuUkVEVUNFX09OTFkgPSB7IHJlZHVjZU9ubHk6IHt9IH07XG5NYXJrZXRTdGF0dXMuU0VUVExFTUVOVCA9IHsgc2V0dGxlbWVudDoge30gfTtcbk1hcmtldFN0YXR1cy5ERUxJU1RFRCA9IHsgZGVsaXN0ZWQ6IHt9IH07XG5jbGFzcyBVc2VyU3RhdHVzIHtcbn1cbmV4cG9ydHMuVXNlclN0YXR1cyA9IFVzZXJTdGF0dXM7XG5Vc2VyU3RhdHVzLkFDVElWRSA9IHsgYWN0aXZlOiB7fSB9O1xuVXNlclN0YXR1cy5CRUlOR19MSVFVSURBVEVEID0geyBiZWluZ0xpcXVpZGF0ZWQ6IHt9IH07XG5Vc2VyU3RhdHVzLkJBTktSVVBUID0geyBiYW5rcnVwdDoge30gfTtcblVzZXJTdGF0dXMuUkVEVUNFX09OTFkgPSB7IHJlZHVjZU9ubHk6IHt9IH07XG5jbGFzcyBDb250cmFjdFR5cGUge1xufVxuZXhwb3J0cy5Db250cmFjdFR5cGUgPSBDb250cmFjdFR5cGU7XG5Db250cmFjdFR5cGUuUEVSUEVUVUFMID0geyBwZXJwZXR1YWw6IHt9IH07XG5Db250cmFjdFR5cGUuRlVUVVJFID0geyBmdXR1cmU6IHt9IH07XG5jbGFzcyBDb250cmFjdFRpZXIge1xufVxuZXhwb3J0cy5Db250cmFjdFRpZXIgPSBDb250cmFjdFRpZXI7XG5Db250cmFjdFRpZXIuQSA9IHsgYToge30gfTtcbkNvbnRyYWN0VGllci5CID0geyBiOiB7fSB9O1xuQ29udHJhY3RUaWVyLkMgPSB7IGM6IHt9IH07XG5Db250cmFjdFRpZXIuU1BFQ1VMQVRJVkUgPSB7IHNwZWN1bGF0aXZlOiB7fSB9O1xuQ29udHJhY3RUaWVyLklTT0xBVEVEID0geyBpc29sYXRlZDoge30gfTtcbmNsYXNzIEFzc2V0VGllciB7XG59XG5leHBvcnRzLkFzc2V0VGllciA9IEFzc2V0VGllcjtcbkFzc2V0VGllci5DT0xMQVRFUkFMID0geyBjb2xsYXRlcmFsOiB7fSB9O1xuQXNzZXRUaWVyLlBST1RFQ1RFRCA9IHsgcHJvdGVjdGVkOiB7fSB9O1xuQXNzZXRUaWVyLkNST1NTID0geyBjcm9zczoge30gfTtcbkFzc2V0VGllci5JU09MQVRFRCA9IHsgaXNvbGF0ZWQ6IHt9IH07XG5Bc3NldFRpZXIuVU5MSVNURUQgPSB7IHVubGlzdGVkOiB7fSB9O1xuY2xhc3MgU3dhcERpcmVjdGlvbiB7XG59XG5leHBvcnRzLlN3YXBEaXJlY3Rpb24gPSBTd2FwRGlyZWN0aW9uO1xuU3dhcERpcmVjdGlvbi5BREQgPSB7IGFkZDoge30gfTtcblN3YXBEaXJlY3Rpb24uUkVNT1ZFID0geyByZW1vdmU6IHt9IH07XG5jbGFzcyBTcG90QmFsYW5jZVR5cGUge1xufVxuZXhwb3J0cy5TcG90QmFsYW5jZVR5cGUgPSBTcG90QmFsYW5jZVR5cGU7XG5TcG90QmFsYW5jZVR5cGUuREVQT1NJVCA9IHsgZGVwb3NpdDoge30gfTtcblNwb3RCYWxhbmNlVHlwZS5CT1JST1cgPSB7IGJvcnJvdzoge30gfTtcbmNsYXNzIFBvc2l0aW9uRGlyZWN0aW9uIHtcbn1cbmV4cG9ydHMuUG9zaXRpb25EaXJlY3Rpb24gPSBQb3NpdGlvbkRpcmVjdGlvbjtcblBvc2l0aW9uRGlyZWN0aW9uLkxPTkcgPSB7IGxvbmc6IHt9IH07XG5Qb3NpdGlvbkRpcmVjdGlvbi5TSE9SVCA9IHsgc2hvcnQ6IHt9IH07XG5jbGFzcyBEZXBvc2l0RGlyZWN0aW9uIHtcbn1cbmV4cG9ydHMuRGVwb3NpdERpcmVjdGlvbiA9IERlcG9zaXREaXJlY3Rpb247XG5EZXBvc2l0RGlyZWN0aW9uLkRFUE9TSVQgPSB7IGRlcG9zaXQ6IHt9IH07XG5EZXBvc2l0RGlyZWN0aW9uLldJVEhEUkFXID0geyB3aXRoZHJhdzoge30gfTtcbmNsYXNzIE9yYWNsZVNvdXJjZSB7XG59XG5leHBvcnRzLk9yYWNsZVNvdXJjZSA9IE9yYWNsZVNvdXJjZTtcbk9yYWNsZVNvdXJjZS5QWVRIID0geyBweXRoOiB7fSB9O1xuT3JhY2xlU291cmNlLlBZVEhfMUsgPSB7IHB5dGgxSzoge30gfTtcbk9yYWNsZVNvdXJjZS5QWVRIXzFNID0geyBweXRoMU06IHt9IH07XG4vLyBzdGF0aWMgcmVhZG9ubHkgU1dJVENIQk9BUkQgPSB7IHN3aXRjaGJvYXJkOiB7fSB9O1xuT3JhY2xlU291cmNlLlFVT1RFX0FTU0VUID0geyBxdW90ZUFzc2V0OiB7fSB9O1xuT3JhY2xlU291cmNlLlBZVEhfU1RBQkxFX0NPSU4gPSB7IHB5dGhTdGFibGVDb2luOiB7fSB9O1xuY2xhc3MgT3JkZXJUeXBlIHtcbn1cbmV4cG9ydHMuT3JkZXJUeXBlID0gT3JkZXJUeXBlO1xuT3JkZXJUeXBlLkxJTUlUID0geyBsaW1pdDoge30gfTtcbk9yZGVyVHlwZS5UUklHR0VSX01BUktFVCA9IHsgdHJpZ2dlck1hcmtldDoge30gfTtcbk9yZGVyVHlwZS5UUklHR0VSX0xJTUlUID0geyB0cmlnZ2VyTGltaXQ6IHt9IH07XG5PcmRlclR5cGUuTUFSS0VUID0geyBtYXJrZXQ6IHt9IH07XG5PcmRlclR5cGUuT1JBQ0xFID0geyBvcmFjbGU6IHt9IH07XG5jbGFzcyBNYXJrZXRUeXBlIHtcbn1cbmV4cG9ydHMuTWFya2V0VHlwZSA9IE1hcmtldFR5cGU7XG5NYXJrZXRUeXBlLlNQT1QgPSB7IHNwb3Q6IHt9IH07XG5NYXJrZXRUeXBlLlBFUlAgPSB7IHBlcnA6IHt9IH07XG5jbGFzcyBPcmRlclN0YXR1cyB7XG59XG5leHBvcnRzLk9yZGVyU3RhdHVzID0gT3JkZXJTdGF0dXM7XG5PcmRlclN0YXR1cy5JTklUID0geyBpbml0OiB7fSB9O1xuT3JkZXJTdGF0dXMuT1BFTiA9IHsgb3Blbjoge30gfTtcbmNsYXNzIE9yZGVyQWN0aW9uIHtcbn1cbmV4cG9ydHMuT3JkZXJBY3Rpb24gPSBPcmRlckFjdGlvbjtcbk9yZGVyQWN0aW9uLlBMQUNFID0geyBwbGFjZToge30gfTtcbk9yZGVyQWN0aW9uLkNBTkNFTCA9IHsgY2FuY2VsOiB7fSB9O1xuT3JkZXJBY3Rpb24uRVhQSVJFID0geyBleHBpcmU6IHt9IH07XG5PcmRlckFjdGlvbi5GSUxMID0geyBmaWxsOiB7fSB9O1xuT3JkZXJBY3Rpb24uVFJJR0dFUiA9IHsgdHJpZ2dlcjoge30gfTtcbmNsYXNzIE9yZGVyQWN0aW9uRXhwbGFuYXRpb24ge1xufVxuZXhwb3J0cy5PcmRlckFjdGlvbkV4cGxhbmF0aW9uID0gT3JkZXJBY3Rpb25FeHBsYW5hdGlvbjtcbk9yZGVyQWN0aW9uRXhwbGFuYXRpb24uTk9ORSA9IHsgbm9uZToge30gfTtcbk9yZGVyQWN0aW9uRXhwbGFuYXRpb24uSU5TVUZGSUNJRU5UX0ZSRUVfQ09MTEFURVJBTCA9IHtcbiAgICBpbnN1ZmZpY2llbnRGcmVlQ29sbGF0ZXJhbDoge30sXG59O1xuT3JkZXJBY3Rpb25FeHBsYW5hdGlvbi5PUkFDTEVfUFJJQ0VfQlJFQUNIRURfTElNSVRfUFJJQ0UgPSB7XG4gICAgb3JhY2xlUHJpY2VCcmVhY2hlZExpbWl0UHJpY2U6IHt9LFxufTtcbk9yZGVyQWN0aW9uRXhwbGFuYXRpb24uTUFSS0VUX09SREVSX0ZJTExFRF9UT19MSU1JVF9QUklDRSA9IHtcbiAgICBtYXJrZXRPcmRlckZpbGxlZFRvTGltaXRQcmljZToge30sXG59O1xuT3JkZXJBY3Rpb25FeHBsYW5hdGlvbi5PUkRFUl9FWFBJUkVEID0ge1xuICAgIG9yZGVyRXhwaXJlZDoge30sXG59O1xuT3JkZXJBY3Rpb25FeHBsYW5hdGlvbi5MSVFVSURBVElPTiA9IHtcbiAgICBsaXF1aWRhdGlvbjoge30sXG59O1xuT3JkZXJBY3Rpb25FeHBsYW5hdGlvbi5PUkRFUl9GSUxMRURfV0lUSF9BTU0gPSB7XG4gICAgb3JkZXJGaWxsZWRXaXRoQW1tOiB7fSxcbn07XG5PcmRlckFjdGlvbkV4cGxhbmF0aW9uLk9SREVSX0ZJTExFRF9XSVRIX0FNTV9KSVQgPSB7XG4gICAgb3JkZXJGaWxsZWRXaXRoQW1tSml0OiB7fSxcbn07XG5PcmRlckFjdGlvbkV4cGxhbmF0aW9uLk9SREVSX0ZJTExFRF9XSVRIX0FNTV9KSVRfTFBfU1BMSVQgPSB7XG4gICAgb3JkZXJGaWxsZWRXaXRoQW1tSml0THBTcGxpdDoge30sXG59O1xuT3JkZXJBY3Rpb25FeHBsYW5hdGlvbi5PUkRFUl9GSUxMRURfV0lUSF9MUF9KSVQgPSB7XG4gICAgb3JkZXJGaWxsZWRXaXRoTHBKaXQ6IHt9LFxufTtcbk9yZGVyQWN0aW9uRXhwbGFuYXRpb24uT1JERVJfRklMTEVEX1dJVEhfTUFUQ0ggPSB7XG4gICAgb3JkZXJGaWxsZWRXaXRoTWF0Y2g6IHt9LFxufTtcbk9yZGVyQWN0aW9uRXhwbGFuYXRpb24uT1JERVJfRklMTEVEX1dJVEhfTUFUQ0hfSklUID0ge1xuICAgIG9yZGVyRmlsbGVkV2l0aE1hdGNoSml0OiB7fSxcbn07XG5PcmRlckFjdGlvbkV4cGxhbmF0aW9uLk1BUktFVF9FWFBJUkVEID0ge1xuICAgIG1hcmtldEV4cGlyZWQ6IHt9LFxufTtcbk9yZGVyQWN0aW9uRXhwbGFuYXRpb24uUklTS19JTkNSRUFTSU5HX09SREVSID0ge1xuICAgIHJpc2tpbmdJbmNyZWFzaW5nT3JkZXI6IHt9LFxufTtcbk9yZGVyQWN0aW9uRXhwbGFuYXRpb24uT1JERVJfRklMTEVEX1dJVEhfU0VSVU0gPSB7XG4gICAgb3JkZXJGaWxsV2l0aFNlcnVtOiB7fSxcbn07XG5PcmRlckFjdGlvbkV4cGxhbmF0aW9uLlJFRFVDRV9PTkxZX09SREVSX0lOQ1JFQVNFRF9QT1NJVElPTiA9IHtcbiAgICByZWR1Y2VPbmx5T3JkZXJJbmNyZWFzZWRQb3NpdGlvbjoge30sXG59O1xuY2xhc3MgT3JkZXJUcmlnZ2VyQ29uZGl0aW9uIHtcbn1cbmV4cG9ydHMuT3JkZXJUcmlnZ2VyQ29uZGl0aW9uID0gT3JkZXJUcmlnZ2VyQ29uZGl0aW9uO1xuT3JkZXJUcmlnZ2VyQ29uZGl0aW9uLkFCT1ZFID0geyBhYm92ZToge30gfTtcbk9yZGVyVHJpZ2dlckNvbmRpdGlvbi5CRUxPVyA9IHsgYmVsb3c6IHt9IH07XG5PcmRlclRyaWdnZXJDb25kaXRpb24uVFJJR0dFUkVEX0FCT1ZFID0geyB0cmlnZ2VyZWRBYm92ZToge30gfTsgLy8gYWJvdmUgY29uZGl0aW9uIGhhcyBiZWVuIHRyaWdnZXJlZFxuT3JkZXJUcmlnZ2VyQ29uZGl0aW9uLlRSSUdHRVJFRF9CRUxPVyA9IHsgdHJpZ2dlcmVkQmVsb3c6IHt9IH07IC8vIGJlbG93IGNvbmRpdGlvbiBoYXMgYmVlbiB0cmlnZ2VyZWRcbmNsYXNzIFNwb3RGdWxmaWxsbWVudFR5cGUge1xufVxuZXhwb3J0cy5TcG90RnVsZmlsbG1lbnRUeXBlID0gU3BvdEZ1bGZpbGxtZW50VHlwZTtcblNwb3RGdWxmaWxsbWVudFR5cGUuRVhURVJOQUwgPSB7IGV4dGVybmFsOiB7fSB9O1xuU3BvdEZ1bGZpbGxtZW50VHlwZS5NQVRDSCA9IHsgbWF0Y2g6IHt9IH07XG5jbGFzcyBTcG90RnVsZmlsbG1lbnRTdGF0dXMge1xufVxuZXhwb3J0cy5TcG90RnVsZmlsbG1lbnRTdGF0dXMgPSBTcG90RnVsZmlsbG1lbnRTdGF0dXM7XG5TcG90RnVsZmlsbG1lbnRTdGF0dXMuRU5BQkxFRCA9IHsgZW5hYmxlZDoge30gfTtcblNwb3RGdWxmaWxsbWVudFN0YXR1cy5ESVNBQkxFRCA9IHsgZGlzYWJsZWQ6IHt9IH07XG5jbGFzcyBEZXBvc2l0RXhwbGFuYXRpb24ge1xufVxuZXhwb3J0cy5EZXBvc2l0RXhwbGFuYXRpb24gPSBEZXBvc2l0RXhwbGFuYXRpb247XG5EZXBvc2l0RXhwbGFuYXRpb24uTk9ORSA9IHsgbm9uZToge30gfTtcbkRlcG9zaXRFeHBsYW5hdGlvbi5UUkFOU0ZFUiA9IHsgdHJhbnNmZXI6IHt9IH07XG5jbGFzcyBTZXR0bGVQbmxFeHBsYW5hdGlvbiB7XG59XG5leHBvcnRzLlNldHRsZVBubEV4cGxhbmF0aW9uID0gU2V0dGxlUG5sRXhwbGFuYXRpb247XG5TZXR0bGVQbmxFeHBsYW5hdGlvbi5OT05FID0geyBub25lOiB7fSB9O1xuU2V0dGxlUG5sRXhwbGFuYXRpb24uRVhQSVJFRF9QT1NJVElPTiA9IHsgZXhwaXJlZFBvc2l0aW9uOiB7fSB9O1xuY2xhc3MgU3BvdEZ1bGZpbGxtZW50Q29uZmlnU3RhdHVzIHtcbn1cbmV4cG9ydHMuU3BvdEZ1bGZpbGxtZW50Q29uZmlnU3RhdHVzID0gU3BvdEZ1bGZpbGxtZW50Q29uZmlnU3RhdHVzO1xuU3BvdEZ1bGZpbGxtZW50Q29uZmlnU3RhdHVzLkVOQUJMRUQgPSB7IGVuYWJsZWQ6IHt9IH07XG5TcG90RnVsZmlsbG1lbnRDb25maWdTdGF0dXMuRElTQUJMRUQgPSB7IGRpc2FibGVkOiB7fSB9O1xuY2xhc3MgU3Rha2VBY3Rpb24ge1xufVxuZXhwb3J0cy5TdGFrZUFjdGlvbiA9IFN0YWtlQWN0aW9uO1xuU3Rha2VBY3Rpb24uU1RBS0UgPSB7IHN0YWtlOiB7fSB9O1xuU3Rha2VBY3Rpb24uVU5TVEFLRV9SRVFVRVNUID0geyB1bnN0YWtlUmVxdWVzdDoge30gfTtcblN0YWtlQWN0aW9uLlVOU1RBS0VfQ0FOQ0VMX1JFUVVFU1QgPSB7IHVuc3Rha2VDYW5jZWxSZXF1ZXN0OiB7fSB9O1xuU3Rha2VBY3Rpb24uVU5TVEFLRSA9IHsgdW5zdGFrZToge30gfTtcbmZ1bmN0aW9uIGlzVmFyaWFudChvYmplY3QsIHR5cGUpIHtcbiAgICByZXR1cm4gb2JqZWN0Lmhhc093blByb3BlcnR5KHR5cGUpO1xufVxuZXhwb3J0cy5pc1ZhcmlhbnQgPSBpc1ZhcmlhbnQ7XG5mdW5jdGlvbiBpc09uZU9mVmFyaWFudChvYmplY3QsIHR5cGVzKSB7XG4gICAgcmV0dXJuIHR5cGVzLnJlZHVjZSgocmVzdWx0LCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiByZXN1bHQgfHwgb2JqZWN0Lmhhc093blByb3BlcnR5KHR5cGUpO1xuICAgIH0sIGZhbHNlKTtcbn1cbmV4cG9ydHMuaXNPbmVPZlZhcmlhbnQgPSBpc09uZU9mVmFyaWFudDtcbmZ1bmN0aW9uIGdldFZhcmlhbnQob2JqZWN0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdClbMF07XG59XG5leHBvcnRzLmdldFZhcmlhbnQgPSBnZXRWYXJpYW50O1xudmFyIFRyYWRlU2lkZTtcbihmdW5jdGlvbiAoVHJhZGVTaWRlKSB7XG4gICAgVHJhZGVTaWRlW1RyYWRlU2lkZVtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIFRyYWRlU2lkZVtUcmFkZVNpZGVbXCJCdXlcIl0gPSAxXSA9IFwiQnV5XCI7XG4gICAgVHJhZGVTaWRlW1RyYWRlU2lkZVtcIlNlbGxcIl0gPSAyXSA9IFwiU2VsbFwiO1xufSkoVHJhZGVTaWRlID0gZXhwb3J0cy5UcmFkZVNpZGUgfHwgKGV4cG9ydHMuVHJhZGVTaWRlID0ge30pKTtcbmNsYXNzIExQQWN0aW9uIHtcbn1cbmV4cG9ydHMuTFBBY3Rpb24gPSBMUEFjdGlvbjtcbkxQQWN0aW9uLkFERF9MSVFVSURJVFkgPSB7IGFkZExpcXVpZGl0eToge30gfTtcbkxQQWN0aW9uLlJFTU9WRV9MSVFVSURJVFkgPSB7IHJlbW92ZUxpcXVpZGl0eToge30gfTtcbkxQQWN0aW9uLlNFVFRMRV9MSVFVSURJVFkgPSB7IHNldHRsZUxpcXVpZGl0eToge30gfTtcbmNsYXNzIExpcXVpZGF0aW9uVHlwZSB7XG59XG5leHBvcnRzLkxpcXVpZGF0aW9uVHlwZSA9IExpcXVpZGF0aW9uVHlwZTtcbkxpcXVpZGF0aW9uVHlwZS5MSVFVSURBVEVfUEVSUCA9IHsgbGlxdWlkYXRlUGVycDoge30gfTtcbkxpcXVpZGF0aW9uVHlwZS5MSVFVSURBVEVfQk9SUk9XX0ZPUl9QRVJQX1BOTCA9IHtcbiAgICBsaXF1aWRhdGVCb3Jyb3dGb3JQZXJwUG5sOiB7fSxcbn07XG5MaXF1aWRhdGlvblR5cGUuTElRVUlEQVRFX1BFUlBfUE5MX0ZPUl9ERVBPU0lUID0ge1xuICAgIGxpcXVpZGF0ZVBlcnBQbmxGb3JEZXBvc2l0OiB7fSxcbn07XG5MaXF1aWRhdGlvblR5cGUuUEVSUF9CQU5LUlVQVENZID0ge1xuICAgIHBlcnBCYW5rcnVwdGN5OiB7fSxcbn07XG5MaXF1aWRhdGlvblR5cGUuU1BPVF9CQU5LUlVQVENZID0ge1xuICAgIHNwb3RCYW5rcnVwdGN5OiB7fSxcbn07XG5MaXF1aWRhdGlvblR5cGUuTElRVUlEQVRFX1NQT1QgPSB7XG4gICAgbGlxdWlkYXRlU3BvdDoge30sXG59O1xuY2xhc3MgUG9zdE9ubHlQYXJhbXMge1xufVxuZXhwb3J0cy5Qb3N0T25seVBhcmFtcyA9IFBvc3RPbmx5UGFyYW1zO1xuUG9zdE9ubHlQYXJhbXMuTk9ORSA9IHsgbm9uZToge30gfTtcblBvc3RPbmx5UGFyYW1zLk1VU1RfUE9TVF9PTkxZID0geyBtdXN0UG9zdE9ubHk6IHt9IH07IC8vIFR4IGZhaWxzIGlmIG9yZGVyIGNhbid0IGJlIHBvc3Qgb25seVxuUG9zdE9ubHlQYXJhbXMuVFJZX1BPU1RfT05MWSA9IHsgdHJ5UG9zdE9ubHk6IHt9IH07IC8vIFR4IHN1Y2NlZWRzIGFuZCBvcmRlciBub3QgcGxhY2VkIGlmIGNhbid0IGJlIHBvc3Qgb25seVxuUG9zdE9ubHlQYXJhbXMuU0xJREUgPSB7IHNsaWRlOiB7fSB9OyAvLyBNb2RpZnkgcHJpY2UgdG8gYmUgcG9zdCBvbmx5IGlmIGNhbid0IGJlIHBvc3Qgb25seVxuY2xhc3MgTW9kaWZ5T3JkZXJQb2xpY3kge1xufVxuZXhwb3J0cy5Nb2RpZnlPcmRlclBvbGljeSA9IE1vZGlmeU9yZGVyUG9saWN5O1xuTW9kaWZ5T3JkZXJQb2xpY3kuTVVTVF9NT0RJRlkgPSB7IG11c3RNb2RpZnk6IHt9IH07XG5Nb2RpZnlPcmRlclBvbGljeS5UUllfTU9ESUZZID0geyB0cnlNb2RpZnk6IHt9IH07XG5leHBvcnRzLkRlZmF1bHRPcmRlclBhcmFtcyA9IHtcbiAgICBvcmRlclR5cGU6IE9yZGVyVHlwZS5NQVJLRVQsXG4gICAgbWFya2V0VHlwZTogTWFya2V0VHlwZS5QRVJQLFxuICAgIHVzZXJPcmRlcklkOiAwLFxuICAgIGRpcmVjdGlvbjogUG9zaXRpb25EaXJlY3Rpb24uTE9ORyxcbiAgICBiYXNlQXNzZXRBbW91bnQ6IF8xLlpFUk8sXG4gICAgcHJpY2U6IF8xLlpFUk8sXG4gICAgbWFya2V0SW5kZXg6IDAsXG4gICAgcmVkdWNlT25seTogZmFsc2UsXG4gICAgcG9zdE9ubHk6IFBvc3RPbmx5UGFyYW1zLk5PTkUsXG4gICAgaW1tZWRpYXRlT3JDYW5jZWw6IGZhbHNlLFxuICAgIHRyaWdnZXJQcmljZTogbnVsbCxcbiAgICB0cmlnZ2VyQ29uZGl0aW9uOiBPcmRlclRyaWdnZXJDb25kaXRpb24uQUJPVkUsXG4gICAgb3JhY2xlUHJpY2VPZmZzZXQ6IG51bGwsXG4gICAgYXVjdGlvbkR1cmF0aW9uOiBudWxsLFxuICAgIG1heFRzOiBudWxsLFxuICAgIGF1Y3Rpb25TdGFydFByaWNlOiBudWxsLFxuICAgIGF1Y3Rpb25FbmRQcmljZTogbnVsbCxcbn07XG5jbGFzcyBTd2FwUmVkdWNlT25seSB7XG59XG5leHBvcnRzLlN3YXBSZWR1Y2VPbmx5ID0gU3dhcFJlZHVjZU9ubHk7XG5Td2FwUmVkdWNlT25seS5JbiA9IHsgaW46IHt9IH07XG5Td2FwUmVkdWNlT25seS5PdXQgPSB7IG91dDoge30gfTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlN3YXBSZWR1Y2VPbmx5IiwiRGVmYXVsdE9yZGVyUGFyYW1zIiwiTW9kaWZ5T3JkZXJQb2xpY3kiLCJQb3N0T25seVBhcmFtcyIsIkxpcXVpZGF0aW9uVHlwZSIsIkxQQWN0aW9uIiwiVHJhZGVTaWRlIiwiZ2V0VmFyaWFudCIsImlzT25lT2ZWYXJpYW50IiwiaXNWYXJpYW50IiwiU3Rha2VBY3Rpb24iLCJTcG90RnVsZmlsbG1lbnRDb25maWdTdGF0dXMiLCJTZXR0bGVQbmxFeHBsYW5hdGlvbiIsIkRlcG9zaXRFeHBsYW5hdGlvbiIsIlNwb3RGdWxmaWxsbWVudFN0YXR1cyIsIlNwb3RGdWxmaWxsbWVudFR5cGUiLCJPcmRlclRyaWdnZXJDb25kaXRpb24iLCJPcmRlckFjdGlvbkV4cGxhbmF0aW9uIiwiT3JkZXJBY3Rpb24iLCJPcmRlclN0YXR1cyIsIk1hcmtldFR5cGUiLCJPcmRlclR5cGUiLCJPcmFjbGVTb3VyY2UiLCJEZXBvc2l0RGlyZWN0aW9uIiwiUG9zaXRpb25EaXJlY3Rpb24iLCJTcG90QmFsYW5jZVR5cGUiLCJTd2FwRGlyZWN0aW9uIiwiQXNzZXRUaWVyIiwiQ29udHJhY3RUaWVyIiwiQ29udHJhY3RUeXBlIiwiVXNlclN0YXR1cyIsIk1hcmtldFN0YXR1cyIsIkV4Y2hhbmdlU3RhdHVzIiwiXzEiLCJyZXF1aXJlIiwiSU5JVElBTElaRUQiLCJpbml0aWFsaXplZCIsIkFDVElWRSIsImFjdGl2ZSIsIkZVTkRJTkdfUEFVU0VEIiwiZnVuZGluZ1BhdXNlZCIsIkFNTV9QQVVTRUQiLCJhbW1QYXVzZWQiLCJGSUxMX1BBVVNFRCIsImZpbGxQYXVzZWQiLCJXSVRIRFJBV19QQVVTRUQiLCJ3aXRoZHJhd1BhdXNlZCIsIlJFRFVDRV9PTkxZIiwicmVkdWNlT25seSIsIlNFVFRMRU1FTlQiLCJzZXR0bGVtZW50IiwiREVMSVNURUQiLCJkZWxpc3RlZCIsIkJFSU5HX0xJUVVJREFURUQiLCJiZWluZ0xpcXVpZGF0ZWQiLCJCQU5LUlVQVCIsImJhbmtydXB0IiwiUEVSUEVUVUFMIiwicGVycGV0dWFsIiwiRlVUVVJFIiwiZnV0dXJlIiwiQSIsImEiLCJCIiwiYiIsIkMiLCJjIiwiU1BFQ1VMQVRJVkUiLCJzcGVjdWxhdGl2ZSIsIklTT0xBVEVEIiwiaXNvbGF0ZWQiLCJDT0xMQVRFUkFMIiwiY29sbGF0ZXJhbCIsIlBST1RFQ1RFRCIsInByb3RlY3RlZCIsIkNST1NTIiwiY3Jvc3MiLCJVTkxJU1RFRCIsInVubGlzdGVkIiwiQUREIiwiYWRkIiwiUkVNT1ZFIiwicmVtb3ZlIiwiREVQT1NJVCIsImRlcG9zaXQiLCJCT1JST1ciLCJib3Jyb3ciLCJMT05HIiwibG9uZyIsIlNIT1JUIiwic2hvcnQiLCJXSVRIRFJBVyIsIndpdGhkcmF3IiwiUFlUSCIsInB5dGgiLCJQWVRIXzFLIiwicHl0aDFLIiwiUFlUSF8xTSIsInB5dGgxTSIsIlFVT1RFX0FTU0VUIiwicXVvdGVBc3NldCIsIlBZVEhfU1RBQkxFX0NPSU4iLCJweXRoU3RhYmxlQ29pbiIsIkxJTUlUIiwibGltaXQiLCJUUklHR0VSX01BUktFVCIsInRyaWdnZXJNYXJrZXQiLCJUUklHR0VSX0xJTUlUIiwidHJpZ2dlckxpbWl0IiwiTUFSS0VUIiwibWFya2V0IiwiT1JBQ0xFIiwib3JhY2xlIiwiU1BPVCIsInNwb3QiLCJQRVJQIiwicGVycCIsIklOSVQiLCJpbml0IiwiT1BFTiIsIm9wZW4iLCJQTEFDRSIsInBsYWNlIiwiQ0FOQ0VMIiwiY2FuY2VsIiwiRVhQSVJFIiwiZXhwaXJlIiwiRklMTCIsImZpbGwiLCJUUklHR0VSIiwidHJpZ2dlciIsIk5PTkUiLCJub25lIiwiSU5TVUZGSUNJRU5UX0ZSRUVfQ09MTEFURVJBTCIsImluc3VmZmljaWVudEZyZWVDb2xsYXRlcmFsIiwiT1JBQ0xFX1BSSUNFX0JSRUFDSEVEX0xJTUlUX1BSSUNFIiwib3JhY2xlUHJpY2VCcmVhY2hlZExpbWl0UHJpY2UiLCJNQVJLRVRfT1JERVJfRklMTEVEX1RPX0xJTUlUX1BSSUNFIiwibWFya2V0T3JkZXJGaWxsZWRUb0xpbWl0UHJpY2UiLCJPUkRFUl9FWFBJUkVEIiwib3JkZXJFeHBpcmVkIiwiTElRVUlEQVRJT04iLCJsaXF1aWRhdGlvbiIsIk9SREVSX0ZJTExFRF9XSVRIX0FNTSIsIm9yZGVyRmlsbGVkV2l0aEFtbSIsIk9SREVSX0ZJTExFRF9XSVRIX0FNTV9KSVQiLCJvcmRlckZpbGxlZFdpdGhBbW1KaXQiLCJPUkRFUl9GSUxMRURfV0lUSF9BTU1fSklUX0xQX1NQTElUIiwib3JkZXJGaWxsZWRXaXRoQW1tSml0THBTcGxpdCIsIk9SREVSX0ZJTExFRF9XSVRIX0xQX0pJVCIsIm9yZGVyRmlsbGVkV2l0aExwSml0IiwiT1JERVJfRklMTEVEX1dJVEhfTUFUQ0giLCJvcmRlckZpbGxlZFdpdGhNYXRjaCIsIk9SREVSX0ZJTExFRF9XSVRIX01BVENIX0pJVCIsIm9yZGVyRmlsbGVkV2l0aE1hdGNoSml0IiwiTUFSS0VUX0VYUElSRUQiLCJtYXJrZXRFeHBpcmVkIiwiUklTS19JTkNSRUFTSU5HX09SREVSIiwicmlza2luZ0luY3JlYXNpbmdPcmRlciIsIk9SREVSX0ZJTExFRF9XSVRIX1NFUlVNIiwib3JkZXJGaWxsV2l0aFNlcnVtIiwiUkVEVUNFX09OTFlfT1JERVJfSU5DUkVBU0VEX1BPU0lUSU9OIiwicmVkdWNlT25seU9yZGVySW5jcmVhc2VkUG9zaXRpb24iLCJBQk9WRSIsImFib3ZlIiwiQkVMT1ciLCJiZWxvdyIsIlRSSUdHRVJFRF9BQk9WRSIsInRyaWdnZXJlZEFib3ZlIiwiVFJJR0dFUkVEX0JFTE9XIiwidHJpZ2dlcmVkQmVsb3ciLCJFWFRFUk5BTCIsImV4dGVybmFsIiwiTUFUQ0giLCJtYXRjaCIsIkVOQUJMRUQiLCJlbmFibGVkIiwiRElTQUJMRUQiLCJkaXNhYmxlZCIsIlRSQU5TRkVSIiwidHJhbnNmZXIiLCJFWFBJUkVEX1BPU0lUSU9OIiwiZXhwaXJlZFBvc2l0aW9uIiwiU1RBS0UiLCJzdGFrZSIsIlVOU1RBS0VfUkVRVUVTVCIsInVuc3Rha2VSZXF1ZXN0IiwiVU5TVEFLRV9DQU5DRUxfUkVRVUVTVCIsInVuc3Rha2VDYW5jZWxSZXF1ZXN0IiwiVU5TVEFLRSIsInVuc3Rha2UiLCJvYmplY3QiLCJ0eXBlIiwiaGFzT3duUHJvcGVydHkiLCJ0eXBlcyIsInJlZHVjZSIsInJlc3VsdCIsImtleXMiLCJBRERfTElRVUlESVRZIiwiYWRkTGlxdWlkaXR5IiwiUkVNT1ZFX0xJUVVJRElUWSIsInJlbW92ZUxpcXVpZGl0eSIsIlNFVFRMRV9MSVFVSURJVFkiLCJzZXR0bGVMaXF1aWRpdHkiLCJMSVFVSURBVEVfUEVSUCIsImxpcXVpZGF0ZVBlcnAiLCJMSVFVSURBVEVfQk9SUk9XX0ZPUl9QRVJQX1BOTCIsImxpcXVpZGF0ZUJvcnJvd0ZvclBlcnBQbmwiLCJMSVFVSURBVEVfUEVSUF9QTkxfRk9SX0RFUE9TSVQiLCJsaXF1aWRhdGVQZXJwUG5sRm9yRGVwb3NpdCIsIlBFUlBfQkFOS1JVUFRDWSIsInBlcnBCYW5rcnVwdGN5IiwiU1BPVF9CQU5LUlVQVENZIiwic3BvdEJhbmtydXB0Y3kiLCJMSVFVSURBVEVfU1BPVCIsImxpcXVpZGF0ZVNwb3QiLCJNVVNUX1BPU1RfT05MWSIsIm11c3RQb3N0T25seSIsIlRSWV9QT1NUX09OTFkiLCJ0cnlQb3N0T25seSIsIlNMSURFIiwic2xpZGUiLCJNVVNUX01PRElGWSIsIm11c3RNb2RpZnkiLCJUUllfTU9ESUZZIiwidHJ5TW9kaWZ5Iiwib3JkZXJUeXBlIiwibWFya2V0VHlwZSIsInVzZXJPcmRlcklkIiwiZGlyZWN0aW9uIiwiYmFzZUFzc2V0QW1vdW50IiwiWkVSTyIsInByaWNlIiwibWFya2V0SW5kZXgiLCJwb3N0T25seSIsImltbWVkaWF0ZU9yQ2FuY2VsIiwidHJpZ2dlclByaWNlIiwidHJpZ2dlckNvbmRpdGlvbiIsIm9yYWNsZVByaWNlT2Zmc2V0IiwiYXVjdGlvbkR1cmF0aW9uIiwibWF4VHMiLCJhdWN0aW9uU3RhcnRQcmljZSIsImF1Y3Rpb25FbmRQcmljZSIsIkluIiwiaW4iLCJPdXQiLCJvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/user.js":
/*!**************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/user.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.User = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/types.js\");\nconst position_1 = __webpack_require__(/*! ./math/position */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/position.js\");\nconst numericConstants_1 = __webpack_require__(/*! ./constants/numericConstants */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/constants/numericConstants.js\");\nconst _1 = __webpack_require__(/*! . */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nconst spotBalance_1 = __webpack_require__(/*! ./math/spotBalance */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotBalance.js\");\nconst amm_1 = __webpack_require__(/*! ./math/amm */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/amm.js\");\nconst margin_1 = __webpack_require__(/*! ./math/margin */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/margin.js\");\nconst pollingUserAccountSubscriber_1 = __webpack_require__(/*! ./accounts/pollingUserAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingUserAccountSubscriber.js\");\nconst webSocketUserAccountSubscriber_1 = __webpack_require__(/*! ./accounts/webSocketUserAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketUserAccountSubscriber.js\");\nconst spotPosition_1 = __webpack_require__(/*! ./math/spotPosition */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/spotPosition.js\");\nconst oracles_1 = __webpack_require__(/*! ./math/oracles */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/oracles.js\");\nconst tiers_1 = __webpack_require__(/*! ./math/tiers */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/math/tiers.js\");\nclass User {\n    get isSubscribed() {\n        return this._isSubscribed && this.accountSubscriber.isSubscribed;\n    }\n    set isSubscribed(val) {\n        this._isSubscribed = val;\n    }\n    constructor(config){\n        var _a, _b;\n        this._isSubscribed = false;\n        this.driftClient = config.driftClient;\n        this.userAccountPublicKey = config.userAccountPublicKey;\n        if (((_a = config.accountSubscription) === null || _a === void 0 ? void 0 : _a.type) === \"polling\") {\n            this.accountSubscriber = new pollingUserAccountSubscriber_1.PollingUserAccountSubscriber(config.driftClient.program, config.userAccountPublicKey, config.accountSubscription.accountLoader);\n        } else if (((_b = config.accountSubscription) === null || _b === void 0 ? void 0 : _b.type) === \"custom\") {\n            this.accountSubscriber = config.accountSubscription.userAccountSubscriber;\n        } else {\n            this.accountSubscriber = new webSocketUserAccountSubscriber_1.WebSocketUserAccountSubscriber(config.driftClient.program, config.userAccountPublicKey);\n        }\n        this.eventEmitter = this.accountSubscriber.eventEmitter;\n    }\n    /**\n     * Subscribe to User state accounts\n     * @returns SusbcriptionSuccess result\n     */ async subscribe(userAccount) {\n        this.isSubscribed = await this.accountSubscriber.subscribe(userAccount);\n        return this.isSubscribed;\n    }\n    /**\n     *\tForces the accountSubscriber to fetch account updates from rpc\n     */ async fetchAccounts() {\n        await this.accountSubscriber.fetch();\n    }\n    async unsubscribe() {\n        await this.accountSubscriber.unsubscribe();\n        this.isSubscribed = false;\n    }\n    getUserAccount() {\n        return this.accountSubscriber.getUserAccountAndSlot().data;\n    }\n    async forceGetUserAccount() {\n        await this.fetchAccounts();\n        return this.accountSubscriber.getUserAccountAndSlot().data;\n    }\n    getUserAccountAndSlot() {\n        return this.accountSubscriber.getUserAccountAndSlot();\n    }\n    getPerpPositionForUserAccount(userAccount, marketIndex) {\n        return userAccount.perpPositions.find((position)=>position.marketIndex === marketIndex);\n    }\n    /**\n     * Gets the user's current position for a given perp market. If the user has no position returns undefined\n     * @param marketIndex\n     * @returns userPerpPosition\n     */ getPerpPosition(marketIndex) {\n        const userAccount = this.getUserAccount();\n        return this.getPerpPositionForUserAccount(userAccount, marketIndex);\n    }\n    getPerpPositionAndSlot(marketIndex) {\n        const userAccount = this.getUserAccountAndSlot();\n        const perpPosition = this.getPerpPositionForUserAccount(userAccount.data, marketIndex);\n        return {\n            data: perpPosition,\n            slot: userAccount.slot\n        };\n    }\n    getSpotPositionForUserAccount(userAccount, marketIndex) {\n        return userAccount.spotPositions.find((position)=>position.marketIndex === marketIndex);\n    }\n    /**\n     * Gets the user's current position for a given spot market. If the user has no position returns undefined\n     * @param marketIndex\n     * @returns userSpotPosition\n     */ getSpotPosition(marketIndex) {\n        const userAccount = this.getUserAccount();\n        return this.getSpotPositionForUserAccount(userAccount, marketIndex);\n    }\n    getSpotPositionAndSlot(marketIndex) {\n        const userAccount = this.getUserAccountAndSlot();\n        const spotPosition = this.getSpotPositionForUserAccount(userAccount.data, marketIndex);\n        return {\n            data: spotPosition,\n            slot: userAccount.slot\n        };\n    }\n    getEmptySpotPosition(marketIndex) {\n        return {\n            marketIndex,\n            scaledBalance: numericConstants_1.ZERO,\n            balanceType: _1.SpotBalanceType.DEPOSIT,\n            cumulativeDeposits: numericConstants_1.ZERO,\n            openAsks: numericConstants_1.ZERO,\n            openBids: numericConstants_1.ZERO,\n            openOrders: 0\n        };\n    }\n    /**\n     * Returns the token amount for a given market. The spot market precision is based on the token mint decimals.\n     * Positive if it is a deposit, negative if it is a borrow.\n     *\n     * @param marketIndex\n     */ getTokenAmount(marketIndex) {\n        const spotPosition = this.getSpotPosition(marketIndex);\n        if (spotPosition === undefined) {\n            return numericConstants_1.ZERO;\n        }\n        const spotMarket = this.driftClient.getSpotMarketAccount(marketIndex);\n        return (0, _1.getSignedTokenAmount)((0, spotBalance_1.getTokenAmount)(spotPosition.scaledBalance, spotMarket, spotPosition.balanceType), spotPosition.balanceType);\n    }\n    getEmptyPosition(marketIndex) {\n        return {\n            baseAssetAmount: numericConstants_1.ZERO,\n            remainderBaseAssetAmount: 0,\n            lastCumulativeFundingRate: numericConstants_1.ZERO,\n            marketIndex,\n            quoteAssetAmount: numericConstants_1.ZERO,\n            quoteEntryAmount: numericConstants_1.ZERO,\n            quoteBreakEvenAmount: numericConstants_1.ZERO,\n            openOrders: 0,\n            openBids: numericConstants_1.ZERO,\n            openAsks: numericConstants_1.ZERO,\n            settledPnl: numericConstants_1.ZERO,\n            lpShares: numericConstants_1.ZERO,\n            lastBaseAssetAmountPerLp: numericConstants_1.ZERO,\n            lastQuoteAssetAmountPerLp: numericConstants_1.ZERO,\n            perLpBase: 0\n        };\n    }\n    getClonedPosition(position) {\n        const clonedPosition = Object.assign({}, position);\n        return clonedPosition;\n    }\n    getOrderForUserAccount(userAccount, orderId) {\n        return userAccount.orders.find((order)=>order.orderId === orderId);\n    }\n    /**\n     * @param orderId\n     * @returns Order\n     */ getOrder(orderId) {\n        const userAccount = this.getUserAccount();\n        return this.getOrderForUserAccount(userAccount, orderId);\n    }\n    getOrderAndSlot(orderId) {\n        const userAccount = this.getUserAccountAndSlot();\n        const order = this.getOrderForUserAccount(userAccount.data, orderId);\n        return {\n            data: order,\n            slot: userAccount.slot\n        };\n    }\n    getOrderByUserIdForUserAccount(userAccount, userOrderId) {\n        return userAccount.orders.find((order)=>order.userOrderId === userOrderId);\n    }\n    /**\n     * @param userOrderId\n     * @returns Order\n     */ getOrderByUserOrderId(userOrderId) {\n        const userAccount = this.getUserAccount();\n        return this.getOrderByUserIdForUserAccount(userAccount, userOrderId);\n    }\n    getOrderByUserOrderIdAndSlot(userOrderId) {\n        const userAccount = this.getUserAccountAndSlot();\n        const order = this.getOrderByUserIdForUserAccount(userAccount.data, userOrderId);\n        return {\n            data: order,\n            slot: userAccount.slot\n        };\n    }\n    getOpenOrdersForUserAccount(userAccount) {\n        return userAccount === null || userAccount === void 0 ? void 0 : userAccount.orders.filter((order)=>(0, types_1.isVariant)(order.status, \"open\"));\n    }\n    getOpenOrders() {\n        const userAccount = this.getUserAccount();\n        return this.getOpenOrdersForUserAccount(userAccount);\n    }\n    getOpenOrdersAndSlot() {\n        const userAccount = this.getUserAccountAndSlot();\n        const openOrders = this.getOpenOrdersForUserAccount(userAccount.data);\n        return {\n            data: openOrders,\n            slot: userAccount.slot\n        };\n    }\n    getUserAccountPublicKey() {\n        return this.userAccountPublicKey;\n    }\n    async exists() {\n        const userAccountRPCResponse = await this.driftClient.connection.getParsedAccountInfo(this.userAccountPublicKey);\n        return userAccountRPCResponse.value !== null;\n    }\n    /**\n     * calculates the total open bids/asks in a perp market (including lps)\n     * @returns : open bids\n     * @returns : open asks\n     */ getPerpBidAsks(marketIndex) {\n        const position = this.getPerpPosition(marketIndex);\n        const [lpOpenBids, lpOpenAsks] = this.getLPBidAsks(marketIndex);\n        const totalOpenBids = lpOpenBids.add(position.openBids);\n        const totalOpenAsks = lpOpenAsks.add(position.openAsks);\n        return [\n            totalOpenBids,\n            totalOpenAsks\n        ];\n    }\n    /**\n     * calculates the open bids and asks for an lp\n     * @returns : lp open bids\n     * @returns : lp open asks\n     */ getLPBidAsks(marketIndex) {\n        const position = this.getPerpPosition(marketIndex);\n        if (position === undefined || position.lpShares.eq(numericConstants_1.ZERO)) {\n            return [\n                numericConstants_1.ZERO,\n                numericConstants_1.ZERO\n            ];\n        }\n        const market = this.driftClient.getPerpMarketAccount(marketIndex);\n        const [marketOpenBids, marketOpenAsks] = (0, amm_1.calculateMarketOpenBidAsk)(market.amm.baseAssetReserve, market.amm.minBaseAssetReserve, market.amm.maxBaseAssetReserve, market.amm.orderStepSize);\n        const lpOpenBids = marketOpenBids.mul(position.lpShares).div(market.amm.sqrtK);\n        const lpOpenAsks = marketOpenAsks.mul(position.lpShares).div(market.amm.sqrtK);\n        return [\n            lpOpenBids,\n            lpOpenAsks\n        ];\n    }\n    /**\n     * calculates the market position if the lp position was settled\n     * @returns : the settled userPosition\n     * @returns : the dust base asset amount (ie, < stepsize)\n     * @returns : pnl from settle\n     */ getPerpPositionWithLPSettle(marketIndex, originalPosition, burnLpShares = false) {\n        var _a;\n        originalPosition = (_a = originalPosition !== null && originalPosition !== void 0 ? originalPosition : this.getPerpPosition(marketIndex)) !== null && _a !== void 0 ? _a : this.getEmptyPosition(marketIndex);\n        if (originalPosition.lpShares.eq(numericConstants_1.ZERO)) {\n            return [\n                originalPosition,\n                numericConstants_1.ZERO,\n                numericConstants_1.ZERO\n            ];\n        }\n        const position = this.getClonedPosition(originalPosition);\n        const market = this.driftClient.getPerpMarketAccount(position.marketIndex);\n        if (market.amm.perLpBase != position.perLpBase) {\n            // perLpBase = 1 => per 10 LP shares, perLpBase = -1 => per 0.1 LP shares\n            const expoDiff = market.amm.perLpBase - position.perLpBase;\n            const marketPerLpRebaseScalar = new _1.BN(10 ** Math.abs(expoDiff));\n            if (expoDiff > 0) {\n                position.lastBaseAssetAmountPerLp = position.lastBaseAssetAmountPerLp.mul(marketPerLpRebaseScalar);\n                position.lastQuoteAssetAmountPerLp = position.lastQuoteAssetAmountPerLp.mul(marketPerLpRebaseScalar);\n            } else {\n                position.lastBaseAssetAmountPerLp = position.lastBaseAssetAmountPerLp.div(marketPerLpRebaseScalar);\n                position.lastQuoteAssetAmountPerLp = position.lastQuoteAssetAmountPerLp.div(marketPerLpRebaseScalar);\n            }\n            position.perLpBase = position.perLpBase + expoDiff;\n        }\n        const nShares = position.lpShares;\n        // incorp unsettled funding on pre settled position\n        const quoteFundingPnl = (0, _1.calculatePositionFundingPNL)(market, position);\n        let baseUnit = numericConstants_1.AMM_RESERVE_PRECISION;\n        if (market.amm.perLpBase == position.perLpBase) {\n            if (position.perLpBase >= 0 && position.perLpBase <= numericConstants_1.AMM_RESERVE_PRECISION_EXP.toNumber()) {\n                const marketPerLpRebase = new _1.BN(10 ** market.amm.perLpBase);\n                baseUnit = baseUnit.mul(marketPerLpRebase);\n            } else if (position.perLpBase < 0 && position.perLpBase >= -numericConstants_1.AMM_RESERVE_PRECISION_EXP.toNumber()) {\n                const marketPerLpRebase = new _1.BN(10 ** Math.abs(market.amm.perLpBase));\n                baseUnit = baseUnit.div(marketPerLpRebase);\n            } else {\n                throw \"cannot calc\";\n            }\n        } else {\n            throw \"market.amm.perLpBase != position.perLpBase\";\n        }\n        const deltaBaa = market.amm.baseAssetAmountPerLp.sub(position.lastBaseAssetAmountPerLp).mul(nShares).div(baseUnit);\n        const deltaQaa = market.amm.quoteAssetAmountPerLp.sub(position.lastQuoteAssetAmountPerLp).mul(nShares).div(baseUnit);\n        function sign(v) {\n            return v.isNeg() ? new _1.BN(-1) : new _1.BN(1);\n        }\n        function standardize(amount, stepSize) {\n            const remainder = amount.abs().mod(stepSize).mul(sign(amount));\n            const standardizedAmount = amount.sub(remainder);\n            return [\n                standardizedAmount,\n                remainder\n            ];\n        }\n        const [standardizedBaa, remainderBaa] = standardize(deltaBaa, market.amm.orderStepSize);\n        position.remainderBaseAssetAmount += remainderBaa.toNumber();\n        if (Math.abs(position.remainderBaseAssetAmount) > market.amm.orderStepSize.toNumber()) {\n            const [newStandardizedBaa, newRemainderBaa] = standardize(new _1.BN(position.remainderBaseAssetAmount), market.amm.orderStepSize);\n            position.baseAssetAmount = position.baseAssetAmount.add(newStandardizedBaa);\n            position.remainderBaseAssetAmount = newRemainderBaa.toNumber();\n        }\n        let dustBaseAssetValue = numericConstants_1.ZERO;\n        if (burnLpShares && position.remainderBaseAssetAmount != 0) {\n            const oraclePriceData = this.driftClient.getOracleDataForPerpMarket(position.marketIndex);\n            dustBaseAssetValue = new _1.BN(Math.abs(position.remainderBaseAssetAmount)).mul(oraclePriceData.price).div(numericConstants_1.AMM_RESERVE_PRECISION).add(numericConstants_1.ONE);\n        }\n        let updateType;\n        if (position.baseAssetAmount.eq(numericConstants_1.ZERO)) {\n            updateType = \"open\";\n        } else if (sign(position.baseAssetAmount).eq(sign(deltaBaa))) {\n            updateType = \"increase\";\n        } else if (position.baseAssetAmount.abs().gt(deltaBaa.abs())) {\n            updateType = \"reduce\";\n        } else if (position.baseAssetAmount.abs().eq(deltaBaa.abs())) {\n            updateType = \"close\";\n        } else {\n            updateType = \"flip\";\n        }\n        let newQuoteEntry;\n        let pnl;\n        if (updateType == \"open\" || updateType == \"increase\") {\n            newQuoteEntry = position.quoteEntryAmount.add(deltaQaa);\n            pnl = numericConstants_1.ZERO;\n        } else if (updateType == \"reduce\" || updateType == \"close\") {\n            newQuoteEntry = position.quoteEntryAmount.sub(position.quoteEntryAmount.mul(deltaBaa.abs()).div(position.baseAssetAmount.abs()));\n            pnl = position.quoteEntryAmount.sub(newQuoteEntry).add(deltaQaa);\n        } else {\n            newQuoteEntry = deltaQaa.sub(deltaQaa.mul(position.baseAssetAmount.abs()).div(deltaBaa.abs()));\n            pnl = position.quoteEntryAmount.add(deltaQaa.sub(newQuoteEntry));\n        }\n        position.quoteEntryAmount = newQuoteEntry;\n        position.baseAssetAmount = position.baseAssetAmount.add(standardizedBaa);\n        position.quoteAssetAmount = position.quoteAssetAmount.add(deltaQaa).add(quoteFundingPnl).sub(dustBaseAssetValue);\n        position.quoteBreakEvenAmount = position.quoteBreakEvenAmount.add(deltaQaa).add(quoteFundingPnl).sub(dustBaseAssetValue);\n        // update open bids/asks\n        const [marketOpenBids, marketOpenAsks] = (0, amm_1.calculateMarketOpenBidAsk)(market.amm.baseAssetReserve, market.amm.minBaseAssetReserve, market.amm.maxBaseAssetReserve, market.amm.orderStepSize);\n        const lpOpenBids = marketOpenBids.mul(position.lpShares).div(market.amm.sqrtK);\n        const lpOpenAsks = marketOpenAsks.mul(position.lpShares).div(market.amm.sqrtK);\n        position.openBids = lpOpenBids.add(position.openBids);\n        position.openAsks = lpOpenAsks.add(position.openAsks);\n        // eliminate counting funding on settled position\n        if (position.baseAssetAmount.gt(numericConstants_1.ZERO)) {\n            position.lastCumulativeFundingRate = market.amm.cumulativeFundingRateLong;\n        } else if (position.baseAssetAmount.lt(numericConstants_1.ZERO)) {\n            position.lastCumulativeFundingRate = market.amm.cumulativeFundingRateShort;\n        } else {\n            position.lastCumulativeFundingRate = numericConstants_1.ZERO;\n        }\n        return [\n            position,\n            remainderBaa,\n            pnl\n        ];\n    }\n    /**\n     * calculates Buying Power = free collateral / initial margin ratio\n     * @returns : Precision QUOTE_PRECISION\n     */ getPerpBuyingPower(marketIndex, collateralBuffer = numericConstants_1.ZERO) {\n        const perpPosition = this.getPerpPositionWithLPSettle(marketIndex, undefined, true)[0];\n        const worstCaseBaseAssetAmount = perpPosition ? (0, margin_1.calculateWorstCaseBaseAssetAmount)(perpPosition) : numericConstants_1.ZERO;\n        const freeCollateral = this.getFreeCollateral().sub(collateralBuffer);\n        return this.getPerpBuyingPowerFromFreeCollateralAndBaseAssetAmount(marketIndex, freeCollateral, worstCaseBaseAssetAmount);\n    }\n    getPerpBuyingPowerFromFreeCollateralAndBaseAssetAmount(marketIndex, freeCollateral, baseAssetAmount) {\n        const marginRatio = (0, _1.calculateMarketMarginRatio)(this.driftClient.getPerpMarketAccount(marketIndex), baseAssetAmount, \"Initial\");\n        return freeCollateral.mul(numericConstants_1.MARGIN_PRECISION).div(new _1.BN(marginRatio));\n    }\n    /**\n     * calculates Free Collateral = Total collateral - margin requirement\n     * @returns : Precision QUOTE_PRECISION\n     */ getFreeCollateral(marginCategory = \"Initial\") {\n        const totalCollateral = this.getTotalCollateral(marginCategory, true);\n        const marginRequirement = marginCategory === \"Initial\" ? this.getInitialMarginRequirement() : this.getMaintenanceMarginRequirement();\n        const freeCollateral = totalCollateral.sub(marginRequirement);\n        return freeCollateral.gte(numericConstants_1.ZERO) ? freeCollateral : numericConstants_1.ZERO;\n    }\n    /**\n     * @returns The margin requirement of a certain type (Initial or Maintenance) in USDC. : QUOTE_PRECISION\n     */ getMarginRequirement(marginCategory, liquidationBuffer, strict = false) {\n        return this.getTotalPerpPositionValue(marginCategory, liquidationBuffer, true, strict).add(this.getSpotMarketLiabilityValue(undefined, marginCategory, liquidationBuffer, true, strict));\n    }\n    /**\n     * @returns The initial margin requirement in USDC. : QUOTE_PRECISION\n     */ getInitialMarginRequirement() {\n        return this.getMarginRequirement(\"Initial\", undefined, true);\n    }\n    /**\n     * @returns The maintenance margin requirement in USDC. : QUOTE_PRECISION\n     */ getMaintenanceMarginRequirement(liquidationBuffer) {\n        return this.getMarginRequirement(\"Maintenance\", liquidationBuffer);\n    }\n    getActivePerpPositionsForUserAccount(userAccount) {\n        return userAccount.perpPositions.filter((pos)=>!pos.baseAssetAmount.eq(numericConstants_1.ZERO) || !pos.quoteAssetAmount.eq(numericConstants_1.ZERO) || !(pos.openOrders == 0) || !pos.lpShares.eq(numericConstants_1.ZERO));\n    }\n    getActivePerpPositions() {\n        const userAccount = this.getUserAccount();\n        return this.getActivePerpPositionsForUserAccount(userAccount);\n    }\n    getActivePerpPositionsAndSlot() {\n        const userAccount = this.getUserAccountAndSlot();\n        const positions = this.getActivePerpPositionsForUserAccount(userAccount.data);\n        return {\n            data: positions,\n            slot: userAccount.slot\n        };\n    }\n    getActiveSpotPositionsForUserAccount(userAccount) {\n        return userAccount.spotPositions.filter((pos)=>!(0, spotPosition_1.isSpotPositionAvailable)(pos));\n    }\n    getActiveSpotPositions() {\n        const userAccount = this.getUserAccount();\n        return this.getActiveSpotPositionsForUserAccount(userAccount);\n    }\n    getActiveSpotPositionsAndSlot() {\n        const userAccount = this.getUserAccountAndSlot();\n        const positions = this.getActiveSpotPositionsForUserAccount(userAccount.data);\n        return {\n            data: positions,\n            slot: userAccount.slot\n        };\n    }\n    /**\n     * calculates unrealized position price pnl\n     * @returns : Precision QUOTE_PRECISION\n     */ getUnrealizedPNL(withFunding, marketIndex, withWeightMarginCategory, strict = false) {\n        return this.getActivePerpPositions().filter((pos)=>marketIndex ? pos.marketIndex === marketIndex : true).reduce((unrealizedPnl, perpPosition)=>{\n            const market = this.driftClient.getPerpMarketAccount(perpPosition.marketIndex);\n            const oraclePriceData = this.getOracleDataForPerpMarket(market.marketIndex);\n            const quoteSpotMarket = this.driftClient.getSpotMarketAccount(market.quoteSpotMarketIndex);\n            const quoteOraclePriceData = this.getOracleDataForSpotMarket(market.quoteSpotMarketIndex);\n            if (perpPosition.lpShares.gt(numericConstants_1.ZERO)) {\n                perpPosition = this.getPerpPositionWithLPSettle(perpPosition.marketIndex, undefined, !!withWeightMarginCategory)[0];\n            }\n            let positionUnrealizedPnl = (0, _1.calculatePositionPNL)(market, perpPosition, withFunding, oraclePriceData);\n            let quotePrice;\n            if (strict && positionUnrealizedPnl.gt(numericConstants_1.ZERO)) {\n                quotePrice = _1.BN.min(quoteOraclePriceData.price, quoteSpotMarket.historicalOracleData.lastOraclePriceTwap5Min);\n            } else if (strict && positionUnrealizedPnl.lt(numericConstants_1.ZERO)) {\n                quotePrice = _1.BN.max(quoteOraclePriceData.price, quoteSpotMarket.historicalOracleData.lastOraclePriceTwap5Min);\n            } else {\n                quotePrice = quoteOraclePriceData.price;\n            }\n            positionUnrealizedPnl = positionUnrealizedPnl.mul(quotePrice).div(numericConstants_1.PRICE_PRECISION);\n            if (withWeightMarginCategory !== undefined) {\n                if (positionUnrealizedPnl.gt(numericConstants_1.ZERO)) {\n                    positionUnrealizedPnl = positionUnrealizedPnl.mul((0, _1.calculateUnrealizedAssetWeight)(market, quoteSpotMarket, positionUnrealizedPnl, withWeightMarginCategory, oraclePriceData)).div(new _1.BN(numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION));\n                }\n            }\n            return unrealizedPnl.add(positionUnrealizedPnl);\n        }, numericConstants_1.ZERO);\n    }\n    /**\n     * calculates unrealized funding payment pnl\n     * @returns : Precision QUOTE_PRECISION\n     */ getUnrealizedFundingPNL(marketIndex) {\n        return this.getUserAccount().perpPositions.filter((pos)=>marketIndex ? pos.marketIndex === marketIndex : true).reduce((pnl, perpPosition)=>{\n            const market = this.driftClient.getPerpMarketAccount(perpPosition.marketIndex);\n            return pnl.add((0, _1.calculatePositionFundingPNL)(market, perpPosition));\n        }, numericConstants_1.ZERO);\n    }\n    getSpotMarketAssetAndLiabilityValue(marketIndex, marginCategory, liquidationBuffer, includeOpenOrders, strict = false, now) {\n        now = now || new _1.BN(new Date().getTime() / 1000);\n        let netQuoteValue = numericConstants_1.ZERO;\n        let totalAssetValue = numericConstants_1.ZERO;\n        let totalLiabilityValue = numericConstants_1.ZERO;\n        for (const spotPosition of this.getUserAccount().spotPositions){\n            const countForBase = marketIndex === undefined || spotPosition.marketIndex === marketIndex;\n            const countForQuote = marketIndex === undefined || marketIndex === numericConstants_1.QUOTE_SPOT_MARKET_INDEX || includeOpenOrders && spotPosition.openOrders !== 0;\n            if ((0, spotPosition_1.isSpotPositionAvailable)(spotPosition) || !countForBase && !countForQuote) {\n                continue;\n            }\n            const spotMarketAccount = this.driftClient.getSpotMarketAccount(spotPosition.marketIndex);\n            const oraclePriceData = this.getOracleDataForSpotMarket(spotPosition.marketIndex);\n            if (spotPosition.marketIndex === numericConstants_1.QUOTE_SPOT_MARKET_INDEX && countForQuote) {\n                const tokenAmount = (0, _1.getSignedTokenAmount)((0, spotBalance_1.getTokenAmount)(spotPosition.scaledBalance, spotMarketAccount, spotPosition.balanceType), spotPosition.balanceType);\n                if ((0, types_1.isVariant)(spotPosition.balanceType, \"borrow\")) {\n                    const weightedTokenValue = this.getSpotLiabilityValue(tokenAmount, oraclePriceData, spotMarketAccount, marginCategory, liquidationBuffer, strict, now).abs();\n                    netQuoteValue = netQuoteValue.sub(weightedTokenValue);\n                } else {\n                    const weightedTokenValue = this.getSpotAssetValue(tokenAmount, oraclePriceData, spotMarketAccount, marginCategory, strict, now);\n                    netQuoteValue = netQuoteValue.add(weightedTokenValue);\n                }\n                continue;\n            }\n            if (!includeOpenOrders && countForBase) {\n                if ((0, types_1.isVariant)(spotPosition.balanceType, \"borrow\")) {\n                    const tokenAmount = (0, _1.getSignedTokenAmount)((0, spotBalance_1.getTokenAmount)(spotPosition.scaledBalance, spotMarketAccount, spotPosition.balanceType), _1.SpotBalanceType.BORROW);\n                    const liabilityValue = this.getSpotLiabilityValue(tokenAmount, oraclePriceData, spotMarketAccount, marginCategory, liquidationBuffer, strict, now).abs();\n                    totalLiabilityValue = totalLiabilityValue.add(liabilityValue);\n                    continue;\n                } else {\n                    const tokenAmount = (0, spotBalance_1.getTokenAmount)(spotPosition.scaledBalance, spotMarketAccount, spotPosition.balanceType);\n                    const assetValue = this.getSpotAssetValue(tokenAmount, oraclePriceData, spotMarketAccount, marginCategory, strict, now);\n                    totalAssetValue = totalAssetValue.add(assetValue);\n                    continue;\n                }\n            }\n            const [worstCaseTokenAmount, worstCaseQuoteTokenAmount] = (0, spotPosition_1.getWorstCaseTokenAmounts)(spotPosition, spotMarketAccount, this.getOracleDataForSpotMarket(spotPosition.marketIndex));\n            if (worstCaseTokenAmount.gt(numericConstants_1.ZERO) && countForBase) {\n                const baseAssetValue = this.getSpotAssetValue(worstCaseTokenAmount, oraclePriceData, spotMarketAccount, marginCategory, strict, now);\n                totalAssetValue = totalAssetValue.add(baseAssetValue);\n            }\n            if (worstCaseTokenAmount.lt(numericConstants_1.ZERO) && countForBase) {\n                const baseLiabilityValue = this.getSpotLiabilityValue(worstCaseTokenAmount, oraclePriceData, spotMarketAccount, marginCategory, liquidationBuffer, strict, now).abs();\n                totalLiabilityValue = totalLiabilityValue.add(baseLiabilityValue);\n            }\n            if (worstCaseQuoteTokenAmount.gt(numericConstants_1.ZERO) && countForQuote) {\n                netQuoteValue = netQuoteValue.add(worstCaseQuoteTokenAmount);\n            }\n            if (worstCaseQuoteTokenAmount.lt(numericConstants_1.ZERO) && countForQuote) {\n                let weight = numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION;\n                if (marginCategory === \"Initial\") {\n                    weight = _1.BN.max(weight, new _1.BN(this.getUserAccount().maxMarginRatio));\n                }\n                const weightedTokenValue = worstCaseQuoteTokenAmount.abs().mul(weight).div(numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION);\n                netQuoteValue = netQuoteValue.sub(weightedTokenValue);\n            }\n            totalLiabilityValue = totalLiabilityValue.add(new _1.BN(spotPosition.openOrders).mul(numericConstants_1.OPEN_ORDER_MARGIN_REQUIREMENT));\n        }\n        if (marketIndex === undefined || marketIndex === numericConstants_1.QUOTE_SPOT_MARKET_INDEX) {\n            if (netQuoteValue.gt(numericConstants_1.ZERO)) {\n                totalAssetValue = totalAssetValue.add(netQuoteValue);\n            } else {\n                totalLiabilityValue = totalLiabilityValue.add(netQuoteValue.abs());\n            }\n        }\n        return {\n            totalAssetValue,\n            totalLiabilityValue\n        };\n    }\n    getSpotMarketLiabilityValue(marketIndex, marginCategory, liquidationBuffer, includeOpenOrders, strict = false, now) {\n        const { totalLiabilityValue } = this.getSpotMarketAssetAndLiabilityValue(marketIndex, marginCategory, liquidationBuffer, includeOpenOrders, strict, now);\n        return totalLiabilityValue;\n    }\n    getSpotLiabilityValue(tokenAmount, oraclePriceData, spotMarketAccount, marginCategory, liquidationBuffer, strict = false, now) {\n        let liabilityValue = null;\n        if (strict) {\n            const estOracleTwap = (0, oracles_1.calculateLiveOracleTwap)(spotMarketAccount.historicalOracleData, oraclePriceData, now, numericConstants_1.FIVE_MINUTE // 5MIN\n            );\n            liabilityValue = (0, _1.getStrictTokenValue)(tokenAmount, spotMarketAccount.decimals, oraclePriceData, estOracleTwap);\n        } else {\n            liabilityValue = (0, _1.getTokenValue)(tokenAmount, spotMarketAccount.decimals, oraclePriceData);\n        }\n        if (marginCategory !== undefined) {\n            let weight = (0, spotBalance_1.calculateLiabilityWeight)(tokenAmount, spotMarketAccount, marginCategory);\n            if (marginCategory === \"Initial\") {\n                weight = _1.BN.max(weight, new _1.BN(this.getUserAccount().maxMarginRatio));\n            }\n            if (liquidationBuffer !== undefined) {\n                weight = weight.add(liquidationBuffer);\n            }\n            liabilityValue = liabilityValue.mul(weight).div(numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION);\n        }\n        return liabilityValue;\n    }\n    getSpotMarketAssetValue(marketIndex, marginCategory, includeOpenOrders, strict = false, now) {\n        const { totalAssetValue } = this.getSpotMarketAssetAndLiabilityValue(marketIndex, marginCategory, undefined, includeOpenOrders, strict, now);\n        return totalAssetValue;\n    }\n    getSpotAssetValue(tokenAmount, oraclePriceData, spotMarketAccount, marginCategory, strict = false, now) {\n        let assetValue = null;\n        if (strict) {\n            const estOracleTwap = (0, oracles_1.calculateLiveOracleTwap)(spotMarketAccount.historicalOracleData, oraclePriceData, now, numericConstants_1.FIVE_MINUTE // 5MIN\n            );\n            assetValue = (0, _1.getStrictTokenValue)(tokenAmount, spotMarketAccount.decimals, oraclePriceData, estOracleTwap);\n        } else {\n            assetValue = (0, _1.getTokenValue)(tokenAmount, spotMarketAccount.decimals, oraclePriceData);\n        }\n        if (marginCategory !== undefined) {\n            const weight = (0, spotBalance_1.calculateAssetWeight)(tokenAmount, spotMarketAccount, marginCategory);\n            assetValue = assetValue.mul(weight).div(numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION);\n        }\n        return assetValue;\n    }\n    getSpotPositionValue(marketIndex, marginCategory, includeOpenOrders, strict = false, now) {\n        const { totalAssetValue, totalLiabilityValue } = this.getSpotMarketAssetAndLiabilityValue(marketIndex, marginCategory, undefined, includeOpenOrders, strict, now);\n        return totalAssetValue.sub(totalLiabilityValue);\n    }\n    getNetSpotMarketValue(withWeightMarginCategory) {\n        const { totalAssetValue, totalLiabilityValue } = this.getSpotMarketAssetAndLiabilityValue(undefined, withWeightMarginCategory);\n        return totalAssetValue.sub(totalLiabilityValue);\n    }\n    /**\n     * calculates TotalCollateral: collateral + unrealized pnl\n     * @returns : Precision QUOTE_PRECISION\n     */ getTotalCollateral(marginCategory = \"Initial\", strict = false) {\n        return this.getSpotMarketAssetValue(undefined, marginCategory, true, strict).add(this.getUnrealizedPNL(true, undefined, marginCategory, strict));\n    }\n    /**\n     * calculates User Health by comparing total collateral and maint. margin requirement\n     * @returns : number (value from [0, 100])\n     */ getHealth() {\n        const userAccount = this.getUserAccount();\n        if ((0, types_1.isVariant)(userAccount.status, \"beingLiquidated\") || (0, types_1.isVariant)(userAccount.status, \"bankrupt\")) {\n            return 0;\n        }\n        const totalCollateral = this.getTotalCollateral(\"Maintenance\");\n        const maintenanceMarginReq = this.getMaintenanceMarginRequirement();\n        let health;\n        if (maintenanceMarginReq.eq(numericConstants_1.ZERO) && totalCollateral.gte(numericConstants_1.ZERO)) {\n            health = 100;\n        } else if (totalCollateral.lte(numericConstants_1.ZERO)) {\n            health = 0;\n        } else {\n            health = Math.round(Math.min(100, Math.max(0, (1 - maintenanceMarginReq.toNumber() / totalCollateral.toNumber()) * 100)));\n        }\n        return health;\n    }\n    calculateWeightedPerpPositionValue(perpPosition, marginCategory, liquidationBuffer, includeOpenOrders, strict = false) {\n        const market = this.driftClient.getPerpMarketAccount(perpPosition.marketIndex);\n        if (perpPosition.lpShares.gt(numericConstants_1.ZERO)) {\n            // is an lp, clone so we dont mutate the position\n            perpPosition = this.getPerpPositionWithLPSettle(market.marketIndex, this.getClonedPosition(perpPosition), !!marginCategory)[0];\n        }\n        let valuationPrice = this.getOracleDataForPerpMarket(market.marketIndex).price;\n        if ((0, types_1.isVariant)(market.status, \"settlement\")) {\n            valuationPrice = market.expiryPrice;\n        }\n        const baseAssetAmount = includeOpenOrders ? (0, margin_1.calculateWorstCaseBaseAssetAmount)(perpPosition) : perpPosition.baseAssetAmount;\n        let baseAssetValue = baseAssetAmount.abs().mul(valuationPrice).div(numericConstants_1.BASE_PRECISION);\n        if (marginCategory) {\n            let marginRatio = new _1.BN((0, _1.calculateMarketMarginRatio)(market, baseAssetAmount.abs(), marginCategory));\n            if (marginCategory === \"Initial\") {\n                marginRatio = _1.BN.max(marginRatio, new _1.BN(this.getUserAccount().maxMarginRatio));\n            }\n            if (liquidationBuffer !== undefined) {\n                marginRatio = marginRatio.add(liquidationBuffer);\n            }\n            if ((0, types_1.isVariant)(market.status, \"settlement\")) {\n                marginRatio = numericConstants_1.ZERO;\n            }\n            const quoteSpotMarket = this.driftClient.getSpotMarketAccount(market.quoteSpotMarketIndex);\n            const quoteOraclePriceData = this.driftClient.getOraclePriceDataAndSlot(quoteSpotMarket.oracle).data;\n            let quotePrice;\n            if (strict) {\n                quotePrice = _1.BN.max(quoteOraclePriceData.price, quoteSpotMarket.historicalOracleData.lastOraclePriceTwap5Min);\n            } else {\n                quotePrice = quoteOraclePriceData.price;\n            }\n            baseAssetValue = baseAssetValue.mul(quotePrice).div(numericConstants_1.PRICE_PRECISION).mul(marginRatio).div(numericConstants_1.MARGIN_PRECISION);\n            if (includeOpenOrders) {\n                baseAssetValue = baseAssetValue.add(new _1.BN(perpPosition.openOrders).mul(numericConstants_1.OPEN_ORDER_MARGIN_REQUIREMENT));\n                if (perpPosition.lpShares.gt(numericConstants_1.ZERO)) {\n                    baseAssetValue = baseAssetValue.add(_1.BN.max(numericConstants_1.QUOTE_PRECISION, valuationPrice.mul(market.amm.orderStepSize).mul(numericConstants_1.QUOTE_PRECISION).div(numericConstants_1.AMM_RESERVE_PRECISION).div(numericConstants_1.PRICE_PRECISION)));\n                }\n            }\n        }\n        return baseAssetValue;\n    }\n    /**\n     * calculates position value of a single perp market in margin system\n     * @returns : Precision QUOTE_PRECISION\n     */ getPerpMarketLiabilityValue(marketIndex, marginCategory, liquidationBuffer, includeOpenOrders, strict = false) {\n        const perpPosition = this.getPerpPosition(marketIndex);\n        return this.calculateWeightedPerpPositionValue(perpPosition, marginCategory, liquidationBuffer, includeOpenOrders, strict);\n    }\n    /**\n     * calculates sum of position value across all positions in margin system\n     * @returns : Precision QUOTE_PRECISION\n     */ getTotalPerpPositionValue(marginCategory, liquidationBuffer, includeOpenOrders, strict = false) {\n        return this.getActivePerpPositions().reduce((totalPerpValue, perpPosition)=>{\n            const baseAssetValue = this.calculateWeightedPerpPositionValue(perpPosition, marginCategory, liquidationBuffer, includeOpenOrders, strict);\n            return totalPerpValue.add(baseAssetValue);\n        }, numericConstants_1.ZERO);\n    }\n    /**\n     * calculates position value in margin system\n     * @returns : Precision QUOTE_PRECISION\n     */ getPerpPositionValue(marketIndex, oraclePriceData, includeOpenOrders = false) {\n        const userPosition = this.getPerpPositionWithLPSettle(marketIndex)[0] || this.getEmptyPosition(marketIndex);\n        const market = this.driftClient.getPerpMarketAccount(userPosition.marketIndex);\n        return (0, margin_1.calculateBaseAssetValueWithOracle)(market, userPosition, oraclePriceData, includeOpenOrders);\n    }\n    getPositionSide(currentPosition) {\n        if (currentPosition.baseAssetAmount.gt(numericConstants_1.ZERO)) {\n            return _1.PositionDirection.LONG;\n        } else if (currentPosition.baseAssetAmount.lt(numericConstants_1.ZERO)) {\n            return _1.PositionDirection.SHORT;\n        } else {\n            return undefined;\n        }\n    }\n    /**\n     * calculates average exit price (optionally for closing up to 100% of position)\n     * @returns : Precision PRICE_PRECISION\n     */ getPositionEstimatedExitPriceAndPnl(position, amountToClose, useAMMClose = false) {\n        const market = this.driftClient.getPerpMarketAccount(position.marketIndex);\n        const entryPrice = (0, position_1.calculateEntryPrice)(position);\n        const oraclePriceData = this.getOracleDataForPerpMarket(position.marketIndex);\n        if (amountToClose) {\n            if (amountToClose.eq(numericConstants_1.ZERO)) {\n                return [\n                    (0, _1.calculateReservePrice)(market, oraclePriceData),\n                    numericConstants_1.ZERO\n                ];\n            }\n            position = {\n                baseAssetAmount: amountToClose,\n                lastCumulativeFundingRate: position.lastCumulativeFundingRate,\n                marketIndex: position.marketIndex,\n                quoteAssetAmount: position.quoteAssetAmount\n            };\n        }\n        let baseAssetValue;\n        if (useAMMClose) {\n            baseAssetValue = (0, _1.calculateBaseAssetValue)(market, position, oraclePriceData);\n        } else {\n            baseAssetValue = (0, margin_1.calculateBaseAssetValueWithOracle)(market, position, oraclePriceData);\n        }\n        if (position.baseAssetAmount.eq(numericConstants_1.ZERO)) {\n            return [\n                numericConstants_1.ZERO,\n                numericConstants_1.ZERO\n            ];\n        }\n        const exitPrice = baseAssetValue.mul(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO).mul(numericConstants_1.PRICE_PRECISION).div(position.baseAssetAmount.abs());\n        const pnlPerBase = exitPrice.sub(entryPrice);\n        const pnl = pnlPerBase.mul(position.baseAssetAmount).div(numericConstants_1.PRICE_PRECISION).div(numericConstants_1.AMM_TO_QUOTE_PRECISION_RATIO);\n        return [\n            exitPrice,\n            pnl\n        ];\n    }\n    /**\n     * calculates current user leverage which is (total liability size) / (net asset value)\n     * @returns : Precision TEN_THOUSAND\n     */ getLeverage() {\n        return this.calculateLeverageFromComponents(this.getLeverageComponents());\n    }\n    calculateLeverageFromComponents({ perpLiabilityValue, perpPnl, spotAssetValue, spotLiabilityValue }) {\n        const totalLiabilityValue = perpLiabilityValue.add(spotLiabilityValue);\n        const totalAssetValue = spotAssetValue.add(perpPnl);\n        const netAssetValue = totalAssetValue.sub(spotLiabilityValue);\n        if (netAssetValue.eq(numericConstants_1.ZERO)) {\n            return numericConstants_1.ZERO;\n        }\n        return totalLiabilityValue.mul(numericConstants_1.TEN_THOUSAND).div(netAssetValue);\n    }\n    getLeverageComponents() {\n        const perpLiability = this.getTotalPerpPositionValue(undefined, undefined, true);\n        const perpPnl = this.getUnrealizedPNL(true);\n        const { totalAssetValue: spotAssetValue, totalLiabilityValue: spotLiabilityValue } = this.getSpotMarketAssetAndLiabilityValue(undefined, undefined, undefined, true);\n        return {\n            perpLiabilityValue: perpLiability,\n            perpPnl,\n            spotAssetValue,\n            spotLiabilityValue\n        };\n    }\n    getTotalLiabilityValue(marginCategory) {\n        return this.getTotalPerpPositionValue(marginCategory, undefined, true).add(this.getSpotMarketLiabilityValue(undefined, marginCategory, undefined, true));\n    }\n    getTotalAssetValue(marginCategory) {\n        return this.getSpotMarketAssetValue(undefined, marginCategory, true).add(this.getUnrealizedPNL(true, undefined, marginCategory));\n    }\n    /**\n     * Calculates the all time P&L of the user.\n     *\n     * Net withdraws + Net spot market value + Net unrealized P&L -\n     */ getTotalAllTimePnl() {\n        const netBankValue = this.getNetSpotMarketValue();\n        const unrealizedPnl = this.getUnrealizedPNL(true, undefined, undefined);\n        const netUsdValue = netBankValue.add(unrealizedPnl);\n        const totalDeposits = this.getUserAccount().totalDeposits;\n        const totalWithdraws = this.getUserAccount().totalWithdraws;\n        const totalPnl = netUsdValue.add(totalWithdraws).sub(totalDeposits);\n        return totalPnl;\n    }\n    /**\n     * calculates max allowable leverage exceeding hitting requirement category\n     * for large sizes where imf factor activates, result is a lower bound\n     * @param marginCategory {Initial, Maintenance}\n     * @param isLp if calculating max leveraging for adding lp, need to add buffer\n     * @returns : Precision TEN_THOUSAND\n     */ getMaxLeverageForPerp(perpMarketIndex, marginCategory = \"Initial\", isLp = false) {\n        const market = this.driftClient.getPerpMarketAccount(perpMarketIndex);\n        const marketPrice = this.driftClient.getOracleDataForPerpMarket(perpMarketIndex).price;\n        const { perpLiabilityValue, perpPnl, spotAssetValue, spotLiabilityValue } = this.getLeverageComponents();\n        const totalAssetValue = spotAssetValue.add(perpPnl);\n        const netAssetValue = totalAssetValue.sub(spotLiabilityValue);\n        if (netAssetValue.eq(numericConstants_1.ZERO)) {\n            return numericConstants_1.ZERO;\n        }\n        const totalLiabilityValue = perpLiabilityValue.add(spotLiabilityValue);\n        const lpBuffer = isLp ? marketPrice.mul(market.amm.orderStepSize).div(numericConstants_1.AMM_RESERVE_PRECISION) : numericConstants_1.ZERO;\n        const freeCollateral = this.getFreeCollateral().sub(lpBuffer);\n        let rawMarginRatio;\n        switch(marginCategory){\n            case \"Initial\":\n                rawMarginRatio = market.marginRatioInitial;\n                break;\n            case \"Maintenance\":\n                rawMarginRatio = market.marginRatioMaintenance;\n                break;\n            default:\n                rawMarginRatio = market.marginRatioInitial;\n                break;\n        }\n        // absolute max fesible size (upper bound)\n        const maxSize = _1.BN.max(numericConstants_1.ZERO, freeCollateral.mul(numericConstants_1.MARGIN_PRECISION).div(new _1.BN(rawMarginRatio)).mul(numericConstants_1.PRICE_PRECISION).div(marketPrice));\n        // margin ratio incorporting upper bound on size\n        let marginRatio = (0, _1.calculateMarketMarginRatio)(market, maxSize, marginCategory);\n        // use more fesible size since imf factor activated\n        let attempts = 0;\n        while(marginRatio > rawMarginRatio + 1e-4 && attempts < 10){\n            // more fesible size (upper bound)\n            const targetSize = _1.BN.max(numericConstants_1.ZERO, freeCollateral.mul(numericConstants_1.MARGIN_PRECISION).div(new _1.BN(marginRatio)).mul(numericConstants_1.PRICE_PRECISION).div(marketPrice));\n            // margin ratio incorporting more fesible target size\n            marginRatio = (0, _1.calculateMarketMarginRatio)(market, targetSize, marginCategory);\n            attempts += 1;\n        }\n        // how much more liabilities can be opened w remaining free collateral\n        const additionalLiabilities = freeCollateral.mul(numericConstants_1.MARGIN_PRECISION).div(new _1.BN(marginRatio));\n        return totalLiabilityValue.add(additionalLiabilities).mul(numericConstants_1.TEN_THOUSAND).div(netAssetValue);\n    }\n    /**\n     * calculates max allowable leverage exceeding hitting requirement category\n     * @param spotMarketIndex\n     * @param direction\n     * @returns : Precision TEN_THOUSAND\n     */ getMaxLeverageForSpot(spotMarketIndex, direction) {\n        const { perpLiabilityValue, perpPnl, spotAssetValue, spotLiabilityValue } = this.getLeverageComponents();\n        const totalLiabilityValue = perpLiabilityValue.add(spotLiabilityValue);\n        const totalAssetValue = spotAssetValue.add(perpPnl);\n        const netAssetValue = totalAssetValue.sub(spotLiabilityValue);\n        if (netAssetValue.eq(numericConstants_1.ZERO)) {\n            return numericConstants_1.ZERO;\n        }\n        const currentQuoteAssetValue = this.getSpotMarketAssetValue(numericConstants_1.QUOTE_SPOT_MARKET_INDEX);\n        const currentQuoteLiabilityValue = this.getSpotMarketLiabilityValue(numericConstants_1.QUOTE_SPOT_MARKET_INDEX);\n        const currentQuoteValue = currentQuoteAssetValue.sub(currentQuoteLiabilityValue);\n        const currentSpotMarketAssetValue = this.getSpotMarketAssetValue(spotMarketIndex);\n        const currentSpotMarketLiabilityValue = this.getSpotMarketLiabilityValue(spotMarketIndex);\n        const currentSpotMarketNetValue = currentSpotMarketAssetValue.sub(currentSpotMarketLiabilityValue);\n        const tradeQuoteAmount = this.getMaxTradeSizeUSDCForSpot(spotMarketIndex, direction, currentQuoteAssetValue, currentSpotMarketNetValue);\n        let assetValueToAdd = numericConstants_1.ZERO;\n        let liabilityValueToAdd = numericConstants_1.ZERO;\n        const newQuoteNetValue = (0, types_1.isVariant)(direction, \"short\") ? currentQuoteValue.add(tradeQuoteAmount) : currentQuoteValue.sub(tradeQuoteAmount);\n        const newQuoteAssetValue = _1.BN.max(newQuoteNetValue, numericConstants_1.ZERO);\n        const newQuoteLiabilityValue = _1.BN.min(newQuoteNetValue, numericConstants_1.ZERO).abs();\n        assetValueToAdd = assetValueToAdd.add(newQuoteAssetValue.sub(currentQuoteAssetValue));\n        liabilityValueToAdd = liabilityValueToAdd.add(newQuoteLiabilityValue.sub(currentQuoteLiabilityValue));\n        const newSpotMarketNetValue = (0, types_1.isVariant)(direction, \"long\") ? currentSpotMarketNetValue.add(tradeQuoteAmount) : currentSpotMarketNetValue.sub(tradeQuoteAmount);\n        const newSpotMarketAssetValue = _1.BN.max(newSpotMarketNetValue, numericConstants_1.ZERO);\n        const newSpotMarketLiabilityValue = _1.BN.min(newSpotMarketNetValue, numericConstants_1.ZERO).abs();\n        assetValueToAdd = assetValueToAdd.add(newSpotMarketAssetValue.sub(currentSpotMarketAssetValue));\n        liabilityValueToAdd = liabilityValueToAdd.add(newSpotMarketLiabilityValue.sub(currentSpotMarketLiabilityValue));\n        const finalTotalAssetValue = totalAssetValue.add(assetValueToAdd);\n        const finalTotalSpotLiability = spotLiabilityValue.add(liabilityValueToAdd);\n        const finalTotalLiabilityValue = totalLiabilityValue.add(liabilityValueToAdd);\n        const finalNetAssetValue = finalTotalAssetValue.sub(finalTotalSpotLiability);\n        return finalTotalLiabilityValue.mul(numericConstants_1.TEN_THOUSAND).div(finalNetAssetValue);\n    }\n    /**\n     * calculates margin ratio: 1 / leverage\n     * @returns : Precision TEN_THOUSAND\n     */ getMarginRatio() {\n        const { perpLiabilityValue, perpPnl, spotAssetValue, spotLiabilityValue } = this.getLeverageComponents();\n        const totalLiabilityValue = perpLiabilityValue.add(spotLiabilityValue);\n        const totalAssetValue = spotAssetValue.add(perpPnl);\n        if (totalLiabilityValue.eq(numericConstants_1.ZERO)) {\n            return numericConstants_1.BN_MAX;\n        }\n        const netAssetValue = totalAssetValue.sub(spotLiabilityValue);\n        return netAssetValue.mul(numericConstants_1.TEN_THOUSAND).div(totalLiabilityValue);\n    }\n    canBeLiquidated() {\n        const totalCollateral = this.getTotalCollateral(\"Maintenance\");\n        // if user being liq'd, can continue to be liq'd until total collateral above the margin requirement plus buffer\n        let liquidationBuffer = undefined;\n        if (this.isBeingLiquidated()) {\n            liquidationBuffer = new _1.BN(this.driftClient.getStateAccount().liquidationMarginBufferRatio);\n        }\n        const marginRequirement = this.getMaintenanceMarginRequirement(liquidationBuffer);\n        const canBeLiquidated = totalCollateral.lt(marginRequirement);\n        return {\n            canBeLiquidated,\n            marginRequirement,\n            totalCollateral\n        };\n    }\n    isBeingLiquidated() {\n        return (0, types_1.isOneOfVariant)(this.getUserAccount().status, [\n            \"beingLiquidated\",\n            \"bankrupt\"\n        ]);\n    }\n    isBankrupt() {\n        return (0, types_1.isVariant)(this.getUserAccount().status, \"bankrupt\");\n    }\n    /**\n     * Checks if any user position cumulative funding differs from respective market cumulative funding\n     * @returns\n     */ needsToSettleFundingPayment() {\n        for (const userPosition of this.getUserAccount().perpPositions){\n            if (userPosition.baseAssetAmount.eq(numericConstants_1.ZERO)) {\n                continue;\n            }\n            const market = this.driftClient.getPerpMarketAccount(userPosition.marketIndex);\n            if (market.amm.cumulativeFundingRateLong.eq(userPosition.lastCumulativeFundingRate) || market.amm.cumulativeFundingRateShort.eq(userPosition.lastCumulativeFundingRate)) {\n                continue;\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Calculate the liquidation price of a spot position\n     * @param marketIndex\n     * @returns Precision : PRICE_PRECISION\n     */ spotLiquidationPrice(marketIndex, positionBaseSizeChange = numericConstants_1.ZERO) {\n        const currentSpotPosition = this.getSpotPosition(marketIndex);\n        if (!currentSpotPosition) {\n            return new _1.BN(-1);\n        }\n        const totalCollateral = this.getTotalCollateral(\"Maintenance\");\n        const maintenanceMarginRequirement = this.getMaintenanceMarginRequirement();\n        const freeCollateral = _1.BN.max(numericConstants_1.ZERO, totalCollateral.sub(maintenanceMarginRequirement));\n        const market = this.driftClient.getSpotMarketAccount(marketIndex);\n        let signedTokenAmount = (0, _1.getSignedTokenAmount)((0, spotBalance_1.getTokenAmount)(currentSpotPosition.scaledBalance, market, currentSpotPosition.balanceType), currentSpotPosition.balanceType);\n        signedTokenAmount = signedTokenAmount.add(positionBaseSizeChange);\n        if (signedTokenAmount.eq(numericConstants_1.ZERO)) {\n            return new _1.BN(-1);\n        }\n        let freeCollateralDelta = this.calculateFreeCollateralDeltaForSpot(market, signedTokenAmount);\n        const oracle = market.oracle;\n        const perpMarketWithSameOracle = this.driftClient.getPerpMarketAccounts().find((market)=>market.amm.oracle.equals(oracle));\n        if (perpMarketWithSameOracle) {\n            const perpPosition = this.getPerpPositionWithLPSettle(perpMarketWithSameOracle.marketIndex, undefined, true)[0];\n            if (perpPosition) {\n                const freeCollateralDeltaForPerp = this.calculateFreeCollateralDeltaForPerp(perpMarketWithSameOracle, perpPosition, numericConstants_1.ZERO);\n                freeCollateralDelta = freeCollateralDelta.add(freeCollateralDeltaForPerp || numericConstants_1.ZERO);\n            }\n        }\n        if (freeCollateralDelta.eq(numericConstants_1.ZERO)) {\n            return new _1.BN(-1);\n        }\n        const oraclePrice = this.driftClient.getOracleDataForSpotMarket(marketIndex).price;\n        const liqPriceDelta = freeCollateral.mul(numericConstants_1.QUOTE_PRECISION).div(freeCollateralDelta);\n        const liqPrice = oraclePrice.sub(liqPriceDelta);\n        if (liqPrice.lt(numericConstants_1.ZERO)) {\n            return new _1.BN(-1);\n        }\n        return liqPrice;\n    }\n    /**\n     * Calculate the liquidation price of a perp position, with optional parameter to calculate the liquidation price after a trade\n     * @param marketIndex\n     * @param positionBaseSizeChange // change in position size to calculate liquidation price for : Precision 10^13\n     * @returns Precision : PRICE_PRECISION\n     */ liquidationPrice(marketIndex, positionBaseSizeChange = numericConstants_1.ZERO) {\n        const totalCollateral = this.getTotalCollateral(\"Maintenance\");\n        const maintenanceMarginRequirement = this.getMaintenanceMarginRequirement();\n        const freeCollateral = _1.BN.max(numericConstants_1.ZERO, totalCollateral.sub(maintenanceMarginRequirement));\n        const market = this.driftClient.getPerpMarketAccount(marketIndex);\n        const currentPerpPosition = this.getPerpPositionWithLPSettle(marketIndex, undefined, true)[0] || this.getEmptyPosition(marketIndex);\n        let freeCollateralDelta = this.calculateFreeCollateralDeltaForPerp(market, currentPerpPosition, positionBaseSizeChange);\n        if (!freeCollateralDelta) {\n            return new _1.BN(-1);\n        }\n        const oracle = this.driftClient.getPerpMarketAccount(marketIndex).amm.oracle;\n        const spotMarketWithSameOracle = this.driftClient.getSpotMarketAccounts().find((market)=>market.oracle.equals(oracle));\n        if (spotMarketWithSameOracle) {\n            const spotPosition = this.getSpotPosition(spotMarketWithSameOracle.marketIndex);\n            if (spotPosition) {\n                const signedTokenAmount = (0, _1.getSignedTokenAmount)((0, spotBalance_1.getTokenAmount)(spotPosition.scaledBalance, spotMarketWithSameOracle, spotPosition.balanceType), spotPosition.balanceType);\n                const spotFreeCollateralDelta = this.calculateFreeCollateralDeltaForSpot(spotMarketWithSameOracle, signedTokenAmount);\n                freeCollateralDelta = freeCollateralDelta.add(spotFreeCollateralDelta || numericConstants_1.ZERO);\n            }\n        }\n        if (freeCollateralDelta.eq(numericConstants_1.ZERO)) {\n            return new _1.BN(-1);\n        }\n        const oraclePrice = this.driftClient.getOracleDataForPerpMarket(marketIndex).price;\n        const liqPriceDelta = freeCollateral.mul(numericConstants_1.QUOTE_PRECISION).div(freeCollateralDelta);\n        const liqPrice = oraclePrice.sub(liqPriceDelta);\n        if (liqPrice.lt(numericConstants_1.ZERO)) {\n            return new _1.BN(-1);\n        }\n        return liqPrice;\n    }\n    calculateFreeCollateralDeltaForPerp(market, perpPosition, positionBaseSizeChange) {\n        const currentBaseAssetAmount = perpPosition.baseAssetAmount;\n        const worstCaseBaseAssetAmount = (0, margin_1.calculateWorstCaseBaseAssetAmount)(perpPosition);\n        const orderBaseAssetAmount = worstCaseBaseAssetAmount.sub(currentBaseAssetAmount);\n        const proposedBaseAssetAmount = currentBaseAssetAmount.add(positionBaseSizeChange);\n        const proposedWorstCaseBaseAssetAmount = worstCaseBaseAssetAmount.add(positionBaseSizeChange);\n        const marginRatio = (0, _1.calculateMarketMarginRatio)(market, proposedWorstCaseBaseAssetAmount.abs(), \"Maintenance\");\n        const marginRatioQuotePrecision = new _1.BN(marginRatio).mul(numericConstants_1.QUOTE_PRECISION).div(numericConstants_1.MARGIN_PRECISION);\n        if (proposedWorstCaseBaseAssetAmount.eq(numericConstants_1.ZERO)) {\n            return undefined;\n        }\n        let freeCollateralDelta = numericConstants_1.ZERO;\n        if (proposedBaseAssetAmount.gt(numericConstants_1.ZERO)) {\n            freeCollateralDelta = numericConstants_1.QUOTE_PRECISION.sub(marginRatioQuotePrecision).mul(proposedBaseAssetAmount).div(numericConstants_1.BASE_PRECISION);\n        } else {\n            freeCollateralDelta = numericConstants_1.QUOTE_PRECISION.neg().sub(marginRatioQuotePrecision).mul(proposedBaseAssetAmount.abs()).div(numericConstants_1.BASE_PRECISION);\n        }\n        if (!orderBaseAssetAmount.eq(numericConstants_1.ZERO)) {\n            freeCollateralDelta = freeCollateralDelta.sub(marginRatioQuotePrecision.mul(orderBaseAssetAmount.abs()).div(numericConstants_1.BASE_PRECISION));\n        }\n        return freeCollateralDelta;\n    }\n    calculateFreeCollateralDeltaForSpot(market, signedTokenAmount) {\n        const tokenPrecision = new _1.BN(Math.pow(10, market.decimals));\n        if (signedTokenAmount.gt(numericConstants_1.ZERO)) {\n            const assetWeight = (0, spotBalance_1.calculateAssetWeight)(signedTokenAmount, market, \"Maintenance\");\n            return numericConstants_1.QUOTE_PRECISION.mul(assetWeight).div(numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION).mul(signedTokenAmount).div(tokenPrecision);\n        } else {\n            const liabilityWeight = (0, spotBalance_1.calculateLiabilityWeight)(signedTokenAmount.abs(), market, \"Maintenance\");\n            return numericConstants_1.QUOTE_PRECISION.neg().mul(liabilityWeight).div(numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION).mul(signedTokenAmount.abs()).div(tokenPrecision);\n        }\n    }\n    /**\n     * Calculates the estimated liquidation price for a position after closing a quote amount of the position.\n     * @param positionMarketIndex\n     * @param closeQuoteAmount\n     * @returns : Precision PRICE_PRECISION\n     */ liquidationPriceAfterClose(positionMarketIndex, closeQuoteAmount) {\n        const currentPosition = this.getPerpPositionWithLPSettle(positionMarketIndex, undefined, true)[0] || this.getEmptyPosition(positionMarketIndex);\n        const closeBaseAmount = currentPosition.baseAssetAmount.mul(closeQuoteAmount).div(currentPosition.quoteAssetAmount.abs()).add(currentPosition.baseAssetAmount.mul(closeQuoteAmount).mod(currentPosition.quoteAssetAmount.abs())).neg();\n        return this.liquidationPrice(positionMarketIndex, closeBaseAmount);\n    }\n    /**\n     * Get the maximum trade size for a given market, taking into account the user's current leverage, positions, collateral, etc.\n     *\n     * To Calculate Max Quote Available:\n     *\n     * Case 1: SameSide\n     * \t=> Remaining quote to get to maxLeverage\n     *\n     * Case 2: NOT SameSide && currentLeverage <= maxLeverage\n     * \t=> Current opposite position x2 + remaining to get to maxLeverage\n     *\n     * Case 3: NOT SameSide && currentLeverage > maxLeverage && otherPositions - currentPosition > maxLeverage\n     * \t=> strictly reduce current position size\n     *\n     * Case 4: NOT SameSide && currentLeverage > maxLeverage && otherPositions - currentPosition < maxLeverage\n     * \t=> current position + remaining to get to maxLeverage\n     *\n     * @param targetMarketIndex\n     * @param tradeSide\n     * @returns tradeSizeAllowed : Precision QUOTE_PRECISION\n     */ getMaxTradeSizeUSDCForPerp(targetMarketIndex, tradeSide, isLp = false) {\n        const currentPosition = this.getPerpPositionWithLPSettle(targetMarketIndex, undefined, true)[0] || this.getEmptyPosition(targetMarketIndex);\n        const targetSide = (0, types_1.isVariant)(tradeSide, \"short\") ? \"short\" : \"long\";\n        const currentPositionSide = (currentPosition === null || currentPosition === void 0 ? void 0 : currentPosition.baseAssetAmount.isNeg()) ? \"short\" : \"long\";\n        const targetingSameSide = !currentPosition ? true : targetSide === currentPositionSide;\n        const oracleData = this.getOracleDataForPerpMarket(targetMarketIndex);\n        const marketAccount = this.driftClient.getPerpMarketAccount(targetMarketIndex);\n        const lpBuffer = isLp ? oracleData.price.mul(marketAccount.amm.orderStepSize).div(numericConstants_1.AMM_RESERVE_PRECISION) : numericConstants_1.ZERO;\n        // add any position we have on the opposite side of the current trade, because we can \"flip\" the size of this position without taking any extra leverage.\n        const oppositeSizeValueUSDC = targetingSameSide ? numericConstants_1.ZERO : this.getPerpPositionValue(targetMarketIndex, oracleData);\n        let maxPositionSize = this.getPerpBuyingPower(targetMarketIndex, lpBuffer);\n        if (maxPositionSize.gte(numericConstants_1.ZERO)) {\n            if (oppositeSizeValueUSDC.eq(numericConstants_1.ZERO)) {\n            // case 1 : Regular trade where current total position less than max, and no opposite position to account for\n            // do nothing\n            } else {\n                // case 2 : trade where current total position less than max, but need to account for flipping the current position over to the other side\n                maxPositionSize = maxPositionSize.add(oppositeSizeValueUSDC.mul(new _1.BN(2)));\n            }\n        } else {\n            // current leverage is greater than max leverage - can only reduce position size\n            if (!targetingSameSide) {\n                const market = this.driftClient.getPerpMarketAccount(targetMarketIndex);\n                const perpPositionValue = this.getPerpPositionValue(targetMarketIndex, oracleData);\n                const totalCollateral = this.getTotalCollateral();\n                const marginRequirement = this.getInitialMarginRequirement();\n                const marginFreedByClosing = perpPositionValue.mul(new _1.BN(market.marginRatioInitial)).div(numericConstants_1.MARGIN_PRECISION);\n                const marginRequirementAfterClosing = marginRequirement.sub(marginFreedByClosing);\n                if (marginRequirementAfterClosing.gt(totalCollateral)) {\n                    maxPositionSize = perpPositionValue;\n                } else {\n                    const freeCollateralAfterClose = totalCollateral.sub(marginRequirementAfterClosing);\n                    const buyingPowerAfterClose = this.getPerpBuyingPowerFromFreeCollateralAndBaseAssetAmount(targetMarketIndex, freeCollateralAfterClose, numericConstants_1.ZERO);\n                    maxPositionSize = perpPositionValue.add(buyingPowerAfterClose);\n                }\n            } else {\n            // do nothing if targetting same side\n            }\n        }\n        return maxPositionSize;\n    }\n    /**\n     * Get the maximum trade size for a given market, taking into account the user's current leverage, positions, collateral, etc.\n     *\n     * @param targetMarketIndex\n     * @param direction\n     * @param currentQuoteAssetValue\n     * @param currentSpotMarketNetValue\n     * @returns tradeSizeAllowed : Precision QUOTE_PRECISION\n     */ getMaxTradeSizeUSDCForSpot(targetMarketIndex, direction, currentQuoteAssetValue, currentSpotMarketNetValue) {\n        const market = this.driftClient.getSpotMarketAccount(targetMarketIndex);\n        currentQuoteAssetValue = this.getSpotMarketAssetValue(numericConstants_1.QUOTE_SPOT_MARKET_INDEX);\n        currentSpotMarketNetValue = currentSpotMarketNetValue !== null && currentSpotMarketNetValue !== void 0 ? currentSpotMarketNetValue : this.getSpotPositionValue(targetMarketIndex);\n        let freeCollateral = this.getFreeCollateral();\n        const marginRatio = (0, _1.calculateSpotMarketMarginRatio)(market, \"Initial\", numericConstants_1.ZERO, (0, types_1.isVariant)(direction, \"long\") ? _1.SpotBalanceType.DEPOSIT : _1.SpotBalanceType.BORROW);\n        let tradeAmount = numericConstants_1.ZERO;\n        if (this.getUserAccount().isMarginTradingEnabled) {\n            // if the user is buying/selling and already short/long, need to account for closing out short/long\n            if ((0, types_1.isVariant)(direction, \"long\") && currentSpotMarketNetValue.lt(numericConstants_1.ZERO)) {\n                tradeAmount = currentSpotMarketNetValue.abs();\n                const marginRatio = (0, _1.calculateSpotMarketMarginRatio)(market, \"Initial\", this.getTokenAmount(targetMarketIndex).abs(), _1.SpotBalanceType.BORROW);\n                freeCollateral = freeCollateral.add(tradeAmount.mul(new _1.BN(marginRatio)).div(numericConstants_1.MARGIN_PRECISION));\n            } else if ((0, types_1.isVariant)(direction, \"short\") && currentSpotMarketNetValue.gt(numericConstants_1.ZERO)) {\n                tradeAmount = currentSpotMarketNetValue;\n                const marginRatio = (0, _1.calculateSpotMarketMarginRatio)(market, \"Initial\", this.getTokenAmount(targetMarketIndex), _1.SpotBalanceType.DEPOSIT);\n                freeCollateral = freeCollateral.add(tradeAmount.mul(new _1.BN(marginRatio)).div(numericConstants_1.MARGIN_PRECISION));\n            }\n            tradeAmount = tradeAmount.add(freeCollateral.mul(numericConstants_1.MARGIN_PRECISION).div(new _1.BN(marginRatio)));\n        } else if ((0, types_1.isVariant)(direction, \"long\")) {\n            tradeAmount = _1.BN.min(currentQuoteAssetValue, freeCollateral.mul(numericConstants_1.MARGIN_PRECISION).div(new _1.BN(marginRatio)));\n        } else {\n            tradeAmount = _1.BN.max(numericConstants_1.ZERO, currentSpotMarketNetValue);\n        }\n        return tradeAmount;\n    }\n    /**\n     * Calculates the max amount of token that can be swapped from inMarket to outMarket\n     * Assumes swap happens at oracle price\n     *\n     * @param inMarketIndex\n     * @param outMarketIndex\n     * @param calculateSwap function to similate in to out swa\n     * @param iterationLimit how long to run appromixation before erroring out\n     */ getMaxSwapAmount({ inMarketIndex, outMarketIndex, calculateSwap, iterationLimit = 1000 }) {\n        const inMarket = this.driftClient.getSpotMarketAccount(inMarketIndex);\n        const outMarket = this.driftClient.getSpotMarketAccount(outMarketIndex);\n        const inOraclePrice = this.getOracleDataForSpotMarket(inMarketIndex).price;\n        const outOraclePrice = this.getOracleDataForSpotMarket(outMarketIndex).price;\n        const inPrecision = new _1.BN(10 ** inMarket.decimals);\n        const outPrecision = new _1.BN(10 ** outMarket.decimals);\n        const inSpotPosition = this.getSpotPosition(inMarketIndex) || this.getEmptySpotPosition(inMarketIndex);\n        const outSpotPosition = this.getSpotPosition(outMarketIndex) || this.getEmptySpotPosition(outMarketIndex);\n        const freeCollateral = this.getFreeCollateral();\n        const inContributionInitial = this.calculateSpotPositionFreeCollateralContribution(inSpotPosition);\n        const { totalAssetValue: inTotalAssetValueInitial, totalLiabilityValue: inTotalLiabilityValueInitial } = this.calculateSpotPositionLeverageContribution(inSpotPosition);\n        const outContributionInitial = this.calculateSpotPositionFreeCollateralContribution(outSpotPosition);\n        const { totalAssetValue: outTotalAssetValueInitial, totalLiabilityValue: outTotalLiabilityValueInitial } = this.calculateSpotPositionLeverageContribution(outSpotPosition);\n        const initialContribution = inContributionInitial.add(outContributionInitial);\n        const { perpLiabilityValue, perpPnl, spotAssetValue, spotLiabilityValue } = this.getLeverageComponents();\n        if (!calculateSwap) {\n            calculateSwap = (inSwap)=>{\n                return inSwap.mul(outPrecision).mul(inOraclePrice).div(outOraclePrice).div(inPrecision);\n            };\n        }\n        let inSwap = numericConstants_1.ZERO;\n        let outSwap = numericConstants_1.ZERO;\n        const inTokenAmount = this.getTokenAmount(inMarketIndex);\n        const outTokenAmount = this.getTokenAmount(outMarketIndex);\n        const outSaferThanIn = // selling asset to close borrow\n        inTokenAmount.gt(numericConstants_1.ZERO) && outTokenAmount.lt(numericConstants_1.ZERO) || // buying asset with higher initial asset weight\n        inMarket.initialAssetWeight < outMarket.initialAssetWeight;\n        if (freeCollateral.lt(numericConstants_1.ONE)) {\n            if (outSaferThanIn && inTokenAmount.gt(numericConstants_1.ZERO)) {\n                inSwap = inTokenAmount;\n                outSwap = calculateSwap(inSwap);\n            }\n        } else {\n            let minSwap = numericConstants_1.ZERO;\n            let maxSwap = _1.BN.max(freeCollateral.mul(inPrecision).mul(new _1.BN(100)).div(inOraclePrice), inTokenAmount.abs().mul(new _1.BN(10)) // 10x current position\n            );\n            inSwap = maxSwap.div(numericConstants_1.TWO);\n            const error = freeCollateral.div(new _1.BN(10000));\n            let i = 0;\n            let freeCollateralAfter = freeCollateral;\n            while(freeCollateralAfter.gt(error) || freeCollateralAfter.isNeg()){\n                outSwap = calculateSwap(inSwap);\n                const inPositionAfter = this.cloneAndUpdateSpotPosition(inSpotPosition, inSwap.neg(), inMarket);\n                const outPositionAfter = this.cloneAndUpdateSpotPosition(outSpotPosition, outSwap, outMarket);\n                const inContributionAfter = this.calculateSpotPositionFreeCollateralContribution(inPositionAfter);\n                const outContributionAfter = this.calculateSpotPositionFreeCollateralContribution(outPositionAfter);\n                const contributionAfter = inContributionAfter.add(outContributionAfter);\n                const contributionDelta = contributionAfter.sub(initialContribution);\n                freeCollateralAfter = freeCollateral.add(contributionDelta);\n                if (freeCollateralAfter.gt(error)) {\n                    minSwap = inSwap;\n                    inSwap = minSwap.add(maxSwap).div(numericConstants_1.TWO);\n                } else if (freeCollateralAfter.isNeg()) {\n                    maxSwap = inSwap;\n                    inSwap = minSwap.add(maxSwap).div(numericConstants_1.TWO);\n                }\n                if (i++ > iterationLimit) {\n                    console.log(\"getMaxSwapAmount iteration limit reached\");\n                    break;\n                }\n            }\n        }\n        const inPositionAfter = this.cloneAndUpdateSpotPosition(inSpotPosition, inSwap.neg(), inMarket);\n        const outPositionAfter = this.cloneAndUpdateSpotPosition(outSpotPosition, outSwap, outMarket);\n        const { totalAssetValue: inTotalAssetValueAfter, totalLiabilityValue: inTotalLiabilityValueAfter } = this.calculateSpotPositionLeverageContribution(inPositionAfter);\n        const { totalAssetValue: outTotalAssetValueAfter, totalLiabilityValue: outTotalLiabilityValueAfter } = this.calculateSpotPositionLeverageContribution(outPositionAfter);\n        const spotAssetValueDelta = inTotalAssetValueAfter.add(outTotalAssetValueAfter).sub(inTotalAssetValueInitial).sub(outTotalAssetValueInitial);\n        const spotLiabilityValueDelta = inTotalLiabilityValueAfter.add(outTotalLiabilityValueAfter).sub(inTotalLiabilityValueInitial).sub(outTotalLiabilityValueInitial);\n        const spotAssetValueAfter = spotAssetValue.add(spotAssetValueDelta);\n        const spotLiabilityValueAfter = spotLiabilityValue.add(spotLiabilityValueDelta);\n        const leverage = this.calculateLeverageFromComponents({\n            perpLiabilityValue,\n            perpPnl,\n            spotAssetValue: spotAssetValueAfter,\n            spotLiabilityValue: spotLiabilityValueAfter\n        });\n        return {\n            inAmount: inSwap,\n            outAmount: outSwap,\n            leverage\n        };\n    }\n    cloneAndUpdateSpotPosition(position, tokenAmount, market) {\n        const clonedPosition = Object.assign({}, position);\n        if (tokenAmount.eq(numericConstants_1.ZERO)) {\n            return clonedPosition;\n        }\n        const preTokenAmount = (0, _1.getSignedTokenAmount)((0, spotBalance_1.getTokenAmount)(position.scaledBalance, market, position.balanceType), position.balanceType);\n        if ((0, _1.sigNum)(preTokenAmount).eq((0, _1.sigNum)(tokenAmount))) {\n            const scaledBalanceDelta = (0, _1.getBalance)(tokenAmount.abs(), market, position.balanceType);\n            clonedPosition.scaledBalance = clonedPosition.scaledBalance.add(scaledBalanceDelta);\n            return clonedPosition;\n        }\n        const updateDirection = tokenAmount.isNeg() ? _1.SpotBalanceType.BORROW : _1.SpotBalanceType.DEPOSIT;\n        if (tokenAmount.abs().gte(preTokenAmount.abs())) {\n            clonedPosition.scaledBalance = (0, _1.getBalance)(tokenAmount.abs().sub(preTokenAmount.abs()), market, updateDirection);\n            clonedPosition.balanceType = updateDirection;\n        } else {\n            const scaledBalanceDelta = (0, _1.getBalance)(tokenAmount.abs(), market, position.balanceType);\n            clonedPosition.scaledBalance = clonedPosition.scaledBalance.sub(scaledBalanceDelta);\n        }\n        return clonedPosition;\n    }\n    calculateSpotPositionFreeCollateralContribution(spotPosition) {\n        let freeCollateralContribution = numericConstants_1.ZERO;\n        const now = new _1.BN(new Date().getTime() / 1000);\n        const strict = true;\n        const marginCategory = \"Initial\";\n        const spotMarketAccount = this.driftClient.getSpotMarketAccount(spotPosition.marketIndex);\n        const oraclePriceData = this.getOracleDataForSpotMarket(spotPosition.marketIndex);\n        const [worstCaseTokenAmount, worstCaseQuoteTokenAmount] = (0, spotPosition_1.getWorstCaseTokenAmounts)(spotPosition, spotMarketAccount, oraclePriceData);\n        if (worstCaseTokenAmount.gt(numericConstants_1.ZERO)) {\n            const baseAssetValue = this.getSpotAssetValue(worstCaseTokenAmount, oraclePriceData, spotMarketAccount, marginCategory, strict, now);\n            freeCollateralContribution = freeCollateralContribution.add(baseAssetValue);\n        } else {\n            const baseLiabilityValue = this.getSpotLiabilityValue(worstCaseTokenAmount, oraclePriceData, spotMarketAccount, marginCategory, undefined, strict, now).abs();\n            freeCollateralContribution = freeCollateralContribution.sub(baseLiabilityValue);\n        }\n        freeCollateralContribution.add(worstCaseQuoteTokenAmount);\n        return freeCollateralContribution;\n    }\n    calculateSpotPositionLeverageContribution(spotPosition) {\n        let totalAssetValue = numericConstants_1.ZERO;\n        let totalLiabilityValue = numericConstants_1.ZERO;\n        const now = new _1.BN(new Date().getTime() / 1000);\n        const spotMarketAccount = this.driftClient.getSpotMarketAccount(spotPosition.marketIndex);\n        const oraclePriceData = this.getOracleDataForSpotMarket(spotPosition.marketIndex);\n        const [worstCaseTokenAmount, worstCaseQuoteTokenAmount] = (0, spotPosition_1.getWorstCaseTokenAmounts)(spotPosition, spotMarketAccount, oraclePriceData);\n        if (worstCaseTokenAmount.gt(numericConstants_1.ZERO)) {\n            totalAssetValue = this.getSpotAssetValue(worstCaseTokenAmount, oraclePriceData, spotMarketAccount, undefined, false, now);\n        } else {\n            totalLiabilityValue = this.getSpotLiabilityValue(worstCaseTokenAmount, oraclePriceData, spotMarketAccount, undefined, undefined, false, now).abs();\n        }\n        if (worstCaseQuoteTokenAmount.gt(numericConstants_1.ZERO)) {\n            totalAssetValue = totalAssetValue.add(worstCaseQuoteTokenAmount);\n        } else {\n            totalLiabilityValue = totalLiabilityValue.add(worstCaseQuoteTokenAmount.abs());\n        }\n        return {\n            totalAssetValue,\n            totalLiabilityValue\n        };\n    }\n    /**\n     * Estimates what the user leverage will be after swap\n     * @param inMarketIndex\n     * @param outMarketIndex\n     * @param inAmount\n     * @param outAmount\n     */ accountLeverageAfterSwap({ inMarketIndex, outMarketIndex, inAmount, outAmount }) {\n        const inMarket = this.driftClient.getSpotMarketAccount(inMarketIndex);\n        const outMarket = this.driftClient.getSpotMarketAccount(outMarketIndex);\n        const inSpotPosition = this.getSpotPosition(inMarketIndex) || this.getEmptySpotPosition(inMarketIndex);\n        const outSpotPosition = this.getSpotPosition(outMarketIndex) || this.getEmptySpotPosition(outMarketIndex);\n        const { totalAssetValue: inTotalAssetValueInitial, totalLiabilityValue: inTotalLiabilityValueInitial } = this.calculateSpotPositionLeverageContribution(inSpotPosition);\n        const { totalAssetValue: outTotalAssetValueInitial, totalLiabilityValue: outTotalLiabilityValueInitial } = this.calculateSpotPositionLeverageContribution(outSpotPosition);\n        const { perpLiabilityValue, perpPnl, spotAssetValue, spotLiabilityValue } = this.getLeverageComponents();\n        const inPositionAfter = this.cloneAndUpdateSpotPosition(inSpotPosition, inAmount.abs().neg(), inMarket);\n        const outPositionAfter = this.cloneAndUpdateSpotPosition(outSpotPosition, outAmount.abs(), outMarket);\n        const { totalAssetValue: inTotalAssetValueAfter, totalLiabilityValue: inTotalLiabilityValueAfter } = this.calculateSpotPositionLeverageContribution(inPositionAfter);\n        const { totalAssetValue: outTotalAssetValueAfter, totalLiabilityValue: outTotalLiabilityValueAfter } = this.calculateSpotPositionLeverageContribution(outPositionAfter);\n        const spotAssetValueDelta = inTotalAssetValueAfter.add(outTotalAssetValueAfter).sub(inTotalAssetValueInitial).sub(outTotalAssetValueInitial);\n        const spotLiabilityValueDelta = inTotalLiabilityValueAfter.add(outTotalLiabilityValueAfter).sub(inTotalLiabilityValueInitial).sub(outTotalLiabilityValueInitial);\n        const spotAssetValueAfter = spotAssetValue.add(spotAssetValueDelta);\n        const spotLiabilityValueAfter = spotLiabilityValue.add(spotLiabilityValueDelta);\n        return this.calculateLeverageFromComponents({\n            perpLiabilityValue,\n            perpPnl,\n            spotAssetValue: spotAssetValueAfter,\n            spotLiabilityValue: spotLiabilityValueAfter\n        });\n    }\n    // TODO - should this take the price impact of the trade into account for strict accuracy?\n    /**\n     * Returns the leverage ratio for the account after adding (or subtracting) the given quote size to the given position\n     * @param targetMarketIndex\n     * @param: targetMarketType\n     * @param tradeQuoteAmount\n     * @param tradeSide\n     * @param includeOpenOrders\n     * @returns leverageRatio : Precision TEN_THOUSAND\n     */ accountLeverageRatioAfterTrade(targetMarketIndex, targetMarketType, tradeQuoteAmount, tradeSide, includeOpenOrders = true) {\n        const tradeIsPerp = (0, types_1.isVariant)(targetMarketType, \"perp\");\n        if (!tradeIsPerp) {\n            // calculate new asset/liability values for base and quote market to find new account leverage\n            const totalLiabilityValue = this.getTotalLiabilityValue();\n            const totalAssetValue = this.getTotalAssetValue();\n            const spotLiabilityValue = this.getSpotMarketLiabilityValue(undefined, undefined, undefined, includeOpenOrders);\n            const currentQuoteAssetValue = this.getSpotMarketAssetValue(numericConstants_1.QUOTE_SPOT_MARKET_INDEX, undefined, includeOpenOrders);\n            const currentQuoteLiabilityValue = this.getSpotMarketLiabilityValue(numericConstants_1.QUOTE_SPOT_MARKET_INDEX, undefined, undefined, includeOpenOrders);\n            const currentQuoteValue = currentQuoteAssetValue.sub(currentQuoteLiabilityValue);\n            const currentSpotMarketAssetValue = this.getSpotMarketAssetValue(targetMarketIndex, undefined, includeOpenOrders);\n            const currentSpotMarketLiabilityValue = this.getSpotMarketLiabilityValue(targetMarketIndex, undefined, undefined, includeOpenOrders);\n            const currentSpotMarketNetValue = currentSpotMarketAssetValue.sub(currentSpotMarketLiabilityValue);\n            let assetValueToAdd = numericConstants_1.ZERO;\n            let liabilityValueToAdd = numericConstants_1.ZERO;\n            const newQuoteNetValue = tradeSide == _1.PositionDirection.SHORT ? currentQuoteValue.add(tradeQuoteAmount) : currentQuoteValue.sub(tradeQuoteAmount);\n            const newQuoteAssetValue = _1.BN.max(newQuoteNetValue, numericConstants_1.ZERO);\n            const newQuoteLiabilityValue = _1.BN.min(newQuoteNetValue, numericConstants_1.ZERO).abs();\n            assetValueToAdd = assetValueToAdd.add(newQuoteAssetValue.sub(currentQuoteAssetValue));\n            liabilityValueToAdd = liabilityValueToAdd.add(newQuoteLiabilityValue.sub(currentQuoteLiabilityValue));\n            const newSpotMarketNetValue = tradeSide == _1.PositionDirection.LONG ? currentSpotMarketNetValue.add(tradeQuoteAmount) : currentSpotMarketNetValue.sub(tradeQuoteAmount);\n            const newSpotMarketAssetValue = _1.BN.max(newSpotMarketNetValue, numericConstants_1.ZERO);\n            const newSpotMarketLiabilityValue = _1.BN.min(newSpotMarketNetValue, numericConstants_1.ZERO).abs();\n            assetValueToAdd = assetValueToAdd.add(newSpotMarketAssetValue.sub(currentSpotMarketAssetValue));\n            liabilityValueToAdd = liabilityValueToAdd.add(newSpotMarketLiabilityValue.sub(currentSpotMarketLiabilityValue));\n            const totalAssetValueAfterTrade = totalAssetValue.add(assetValueToAdd);\n            const totalSpotLiabilityValueAfterTrade = spotLiabilityValue.add(liabilityValueToAdd);\n            const totalLiabilityValueAfterTrade = totalLiabilityValue.add(liabilityValueToAdd);\n            const netAssetValueAfterTrade = totalAssetValueAfterTrade.sub(totalSpotLiabilityValueAfterTrade);\n            if (netAssetValueAfterTrade.eq(numericConstants_1.ZERO)) {\n                return numericConstants_1.ZERO;\n            }\n            const newLeverage = totalLiabilityValueAfterTrade.mul(numericConstants_1.TEN_THOUSAND).div(netAssetValueAfterTrade);\n            return newLeverage;\n        }\n        const currentPosition = this.getPerpPositionWithLPSettle(targetMarketIndex)[0] || this.getEmptyPosition(targetMarketIndex);\n        const oracleData = this.getOracleDataForPerpMarket(targetMarketIndex);\n        let currentPositionQuoteAmount = this.getPerpPositionValue(targetMarketIndex, oracleData, includeOpenOrders);\n        const currentSide = currentPosition && currentPosition.baseAssetAmount.isNeg() ? _1.PositionDirection.SHORT : _1.PositionDirection.LONG;\n        if (currentSide === _1.PositionDirection.SHORT) currentPositionQuoteAmount = currentPositionQuoteAmount.neg();\n        if (tradeSide === _1.PositionDirection.SHORT) tradeQuoteAmount = tradeQuoteAmount.neg();\n        const currentPerpPositionAfterTrade = currentPositionQuoteAmount.add(tradeQuoteAmount).abs();\n        const totalPositionAfterTradeExcludingTargetMarket = this.getTotalPerpPositionValueExcludingMarket(targetMarketIndex, undefined, undefined, includeOpenOrders);\n        const totalAssetValue = this.getTotalAssetValue();\n        const totalPerpPositionLiability = currentPerpPositionAfterTrade.add(totalPositionAfterTradeExcludingTargetMarket).abs();\n        const totalSpotLiability = this.getSpotMarketLiabilityValue(undefined, undefined, undefined, includeOpenOrders);\n        const totalLiabilitiesAfterTrade = totalPerpPositionLiability.add(totalSpotLiability);\n        const netAssetValue = totalAssetValue.sub(totalSpotLiability);\n        if (netAssetValue.eq(numericConstants_1.ZERO)) {\n            return numericConstants_1.ZERO;\n        }\n        const newLeverage = totalLiabilitiesAfterTrade.mul(numericConstants_1.TEN_THOUSAND).div(netAssetValue);\n        return newLeverage;\n    }\n    /**\n     * Calculates how much fee will be taken for a given sized trade\n     * @param quoteAmount\n     * @returns feeForQuote : Precision QUOTE_PRECISION\n     */ calculateFeeForQuoteAmount(quoteAmount) {\n        const feeTier = this.driftClient.getStateAccount().perpFeeStructure.feeTiers[0];\n        return quoteAmount.mul(new _1.BN(feeTier.feeNumerator)).div(new _1.BN(feeTier.feeDenominator));\n    }\n    /**\n     * Calculates a user's max withdrawal amounts for a spot market. If reduceOnly is true,\n     * it will return the max withdrawal amount without opening a liability for the user\n     * @param marketIndex\n     * @returns withdrawalLimit : Precision is the token precision for the chosen SpotMarket\n     */ getWithdrawalLimit(marketIndex, reduceOnly) {\n        const nowTs = new _1.BN(Math.floor(Date.now() / 1000));\n        const spotMarket = this.driftClient.getSpotMarketAccount(marketIndex);\n        // eslint-disable-next-line prefer-const\n        let { borrowLimit, withdrawLimit } = (0, spotBalance_1.calculateWithdrawLimit)(spotMarket, nowTs);\n        const freeCollateral = this.getFreeCollateral();\n        const oracleData = this.getOracleDataForSpotMarket(marketIndex);\n        const precisionIncrease = numericConstants_1.TEN.pow(new _1.BN(spotMarket.decimals - 6));\n        const { canBypass, depositAmount: userDepositAmount } = this.canBypassWithdrawLimits(marketIndex);\n        if (canBypass) {\n            withdrawLimit = _1.BN.max(withdrawLimit, userDepositAmount);\n        }\n        const assetWeight = (0, spotBalance_1.calculateAssetWeight)(userDepositAmount, spotMarket, \"Initial\");\n        const amountWithdrawable = assetWeight.eq(numericConstants_1.ZERO) ? userDepositAmount : freeCollateral.mul(numericConstants_1.MARGIN_PRECISION).div(assetWeight).mul(numericConstants_1.PRICE_PRECISION).div(oracleData.price).mul(precisionIncrease);\n        const maxWithdrawValue = _1.BN.min(_1.BN.min(amountWithdrawable, userDepositAmount), withdrawLimit.abs());\n        if (reduceOnly) {\n            return _1.BN.max(maxWithdrawValue, numericConstants_1.ZERO);\n        } else {\n            const weightedAssetValue = this.getSpotMarketAssetValue(marketIndex, \"Initial\", false);\n            const freeCollatAfterWithdraw = userDepositAmount.gt(numericConstants_1.ZERO) ? freeCollateral.sub(weightedAssetValue) : freeCollateral;\n            const maxLiabilityAllowed = freeCollatAfterWithdraw.mul(numericConstants_1.MARGIN_PRECISION).div(new _1.BN(spotMarket.initialLiabilityWeight)).mul(numericConstants_1.PRICE_PRECISION).div(oracleData.price).mul(precisionIncrease);\n            const maxBorrowValue = _1.BN.min(maxWithdrawValue.add(maxLiabilityAllowed), borrowLimit.abs());\n            return _1.BN.max(maxBorrowValue, numericConstants_1.ZERO);\n        }\n    }\n    canBypassWithdrawLimits(marketIndex) {\n        const spotMarket = this.driftClient.getSpotMarketAccount(marketIndex);\n        const maxDepositAmount = spotMarket.withdrawGuardThreshold.div(new _1.BN(10));\n        const position = this.getSpotPosition(marketIndex);\n        const netDeposits = this.getUserAccount().totalDeposits.sub(this.getUserAccount().totalWithdraws);\n        if (!position) {\n            return {\n                canBypass: false,\n                maxDepositAmount,\n                depositAmount: numericConstants_1.ZERO,\n                netDeposits\n            };\n        }\n        if ((0, types_1.isVariant)(position.balanceType, \"borrow\")) {\n            return {\n                canBypass: false,\n                maxDepositAmount,\n                netDeposits,\n                depositAmount: numericConstants_1.ZERO\n            };\n        }\n        const depositAmount = (0, spotBalance_1.getTokenAmount)(position.scaledBalance, spotMarket, _1.SpotBalanceType.DEPOSIT);\n        if (netDeposits.lt(numericConstants_1.ZERO)) {\n            return {\n                canBypass: false,\n                maxDepositAmount,\n                depositAmount,\n                netDeposits\n            };\n        }\n        return {\n            canBypass: depositAmount.lt(maxDepositAmount),\n            maxDepositAmount,\n            netDeposits,\n            depositAmount\n        };\n    }\n    canMakeIdle(slot, slotsBeforeIdle) {\n        const userAccount = this.getUserAccount();\n        if (userAccount.idle) {\n            return false;\n        }\n        const userLastActiveSlot = userAccount.lastActiveSlot;\n        const slotsSinceLastActive = slot.sub(userLastActiveSlot);\n        if (slotsSinceLastActive.lt(slotsBeforeIdle)) {\n            return false;\n        }\n        if (this.isBeingLiquidated()) {\n            return false;\n        }\n        for (const perpPosition of userAccount.perpPositions){\n            if (!(0, position_1.positionIsAvailable)(perpPosition)) {\n                return false;\n            }\n        }\n        for (const spotPosition of userAccount.spotPositions){\n            if ((0, types_1.isVariant)(spotPosition.balanceType, \"borrow\") && spotPosition.scaledBalance.gt(numericConstants_1.ZERO)) {\n                return false;\n            }\n            if (spotPosition.openOrders !== 0) {\n                return false;\n            }\n        }\n        for (const order of userAccount.orders){\n            if (!(0, types_1.isVariant)(order.status, \"init\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n    getSafestTiers() {\n        let safestPerpTier = 4;\n        let safestSpotTier = 4;\n        for (const perpPosition of this.getActivePerpPositions()){\n            safestPerpTier = Math.min(safestPerpTier, (0, tiers_1.getPerpMarketTierNumber)(this.driftClient.getPerpMarketAccount(perpPosition.marketIndex)));\n        }\n        for (const spotPosition of this.getActiveSpotPositions()){\n            if ((0, types_1.isVariant)(spotPosition.balanceType, \"deposit\")) {\n                continue;\n            }\n            safestSpotTier = Math.min(safestSpotTier, (0, tiers_1.getSpotMarketTierNumber)(this.driftClient.getSpotMarketAccount(spotPosition.marketIndex)));\n        }\n        return {\n            perpTier: safestPerpTier,\n            spotTier: safestSpotTier\n        };\n    }\n    getHealthComponents({ marginCategory }) {\n        const healthComponents = {\n            deposits: [],\n            borrows: [],\n            perpPositions: [],\n            perpPnl: []\n        };\n        for (const perpPosition of this.getActivePerpPositions()){\n            const perpMarket = this.driftClient.getPerpMarketAccount(perpPosition.marketIndex);\n            const oraclePriceData = this.driftClient.getOraclePriceDataAndSlot(perpMarket.amm.oracle).data;\n            const oraclePrice = oraclePriceData.price;\n            const worstCaseBaseAmount = (0, margin_1.calculateWorstCaseBaseAssetAmount)(perpPosition);\n            const marginRatio = new _1.BN((0, _1.calculateMarketMarginRatio)(perpMarket, worstCaseBaseAmount.abs(), marginCategory));\n            const quoteSpotMarket = this.driftClient.getSpotMarketAccount(perpMarket.quoteSpotMarketIndex);\n            const quoteOraclePriceData = this.driftClient.getOraclePriceDataAndSlot(quoteSpotMarket.oracle).data;\n            const baseAssetValue = worstCaseBaseAmount.abs().mul(oraclePrice).div(numericConstants_1.BASE_PRECISION);\n            let marginRequirement = baseAssetValue.mul(quoteOraclePriceData.price).div(numericConstants_1.PRICE_PRECISION).mul(marginRatio).div(numericConstants_1.MARGIN_PRECISION);\n            marginRequirement = marginRequirement.add(new _1.BN(perpPosition.openOrders).mul(numericConstants_1.OPEN_ORDER_MARGIN_REQUIREMENT));\n            if (perpPosition.lpShares.gt(numericConstants_1.ZERO)) {\n                marginRequirement = marginRequirement.add(_1.BN.max(numericConstants_1.QUOTE_PRECISION, oraclePrice.mul(perpMarket.amm.orderStepSize).mul(numericConstants_1.QUOTE_PRECISION).div(numericConstants_1.AMM_RESERVE_PRECISION).div(numericConstants_1.PRICE_PRECISION)));\n            }\n            healthComponents.perpPositions.push({\n                marketIndex: perpMarket.marketIndex,\n                size: worstCaseBaseAmount,\n                value: baseAssetValue,\n                weight: marginRatio,\n                weightedValue: marginRequirement\n            });\n            const settledPerpPosition = this.getPerpPositionWithLPSettle(perpPosition.marketIndex, perpPosition)[0];\n            const positionUnrealizedPnl = (0, _1.calculatePositionPNL)(perpMarket, settledPerpPosition, true, oraclePriceData);\n            let pnlWeight;\n            if (positionUnrealizedPnl.gt(numericConstants_1.ZERO)) {\n                pnlWeight = (0, _1.calculateUnrealizedAssetWeight)(perpMarket, quoteSpotMarket, positionUnrealizedPnl, marginCategory, oraclePriceData);\n            } else {\n                pnlWeight = numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION;\n            }\n            const pnlValue = positionUnrealizedPnl.mul(quoteOraclePriceData.price).div(numericConstants_1.PRICE_PRECISION);\n            const wegithedPnlValue = pnlValue.mul(pnlWeight).div(numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION);\n            healthComponents.perpPnl.push({\n                marketIndex: perpMarket.marketIndex,\n                size: positionUnrealizedPnl,\n                value: pnlValue,\n                weight: pnlWeight,\n                weightedValue: wegithedPnlValue\n            });\n        }\n        let netQuoteValue = numericConstants_1.ZERO;\n        for (const spotPosition of this.getActiveSpotPositions()){\n            const spotMarketAccount = this.driftClient.getSpotMarketAccount(spotPosition.marketIndex);\n            const oraclePriceData = this.getOracleDataForSpotMarket(spotPosition.marketIndex);\n            if (spotPosition.marketIndex === numericConstants_1.QUOTE_SPOT_MARKET_INDEX) {\n                const tokenAmount = (0, _1.getSignedTokenAmount)((0, spotBalance_1.getTokenAmount)(spotPosition.scaledBalance, spotMarketAccount, spotPosition.balanceType), spotPosition.balanceType);\n                netQuoteValue = netQuoteValue.add(tokenAmount);\n                continue;\n            }\n            const [worstCaseTokenAmount, worstCaseQuoteTokenAmount] = (0, spotPosition_1.getWorstCaseTokenAmounts)(spotPosition, spotMarketAccount, oraclePriceData);\n            netQuoteValue = netQuoteValue.add(worstCaseQuoteTokenAmount);\n            const baseAssetValue = (0, _1.getTokenValue)(worstCaseTokenAmount.abs(), spotMarketAccount.decimals, oraclePriceData);\n            const isLiability = (0, types_1.isVariant)(spotPosition.balanceType, \"borrow\");\n            let weight;\n            if (isLiability) {\n                weight = (0, spotBalance_1.calculateLiabilityWeight)(worstCaseTokenAmount.abs(), spotMarketAccount, marginCategory);\n            } else {\n                weight = (0, spotBalance_1.calculateAssetWeight)(worstCaseTokenAmount, spotMarketAccount, marginCategory);\n            }\n            const weightedValue = baseAssetValue.mul(weight).div(numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION);\n            if (isLiability) {\n                healthComponents.borrows.push({\n                    marketIndex: spotMarketAccount.marketIndex,\n                    size: worstCaseTokenAmount,\n                    value: baseAssetValue,\n                    weight: weight,\n                    weightedValue: weightedValue\n                });\n            } else {\n                healthComponents.deposits.push({\n                    marketIndex: spotMarketAccount.marketIndex,\n                    size: worstCaseTokenAmount,\n                    value: baseAssetValue,\n                    weight: weight,\n                    weightedValue: weightedValue\n                });\n            }\n        }\n        if (!netQuoteValue.eq(numericConstants_1.ZERO)) {\n            const spotMarketAccount = this.driftClient.getQuoteSpotMarketAccount();\n            const oraclePriceData = this.getOracleDataForSpotMarket(numericConstants_1.QUOTE_SPOT_MARKET_INDEX);\n            const baseAssetValue = (0, _1.getTokenValue)(netQuoteValue.abs(), spotMarketAccount.decimals, oraclePriceData);\n            const isLiability = netQuoteValue.lt(numericConstants_1.ZERO);\n            let weight;\n            if (isLiability) {\n                weight = (0, spotBalance_1.calculateLiabilityWeight)(netQuoteValue.abs(), spotMarketAccount, marginCategory);\n            } else {\n                weight = (0, spotBalance_1.calculateAssetWeight)(netQuoteValue, spotMarketAccount, marginCategory);\n            }\n            const weightedValue = baseAssetValue.mul(weight).div(numericConstants_1.SPOT_MARKET_WEIGHT_PRECISION);\n            if (isLiability) {\n                healthComponents.borrows.push({\n                    marketIndex: spotMarketAccount.marketIndex,\n                    size: netQuoteValue,\n                    value: baseAssetValue,\n                    weight: weight,\n                    weightedValue: weightedValue\n                });\n            } else {\n                healthComponents.deposits.push({\n                    marketIndex: spotMarketAccount.marketIndex,\n                    size: netQuoteValue,\n                    value: baseAssetValue,\n                    weight: weight,\n                    weightedValue: weightedValue\n                });\n            }\n        }\n        return healthComponents;\n    }\n    /**\n     * Get the total position value, excluding any position coming from the given target market\n     * @param marketToIgnore\n     * @returns positionValue : Precision QUOTE_PRECISION\n     */ getTotalPerpPositionValueExcludingMarket(marketToIgnore, marginCategory, liquidationBuffer, includeOpenOrders) {\n        const currentPerpPosition = this.getPerpPositionWithLPSettle(marketToIgnore, undefined, !!marginCategory)[0] || this.getEmptyPosition(marketToIgnore);\n        const oracleData = this.getOracleDataForPerpMarket(marketToIgnore);\n        let currentPerpPositionValueUSDC = numericConstants_1.ZERO;\n        if (currentPerpPosition) {\n            currentPerpPositionValueUSDC = this.getPerpPositionValue(marketToIgnore, oracleData, includeOpenOrders);\n        }\n        return this.getTotalPerpPositionValue(marginCategory, liquidationBuffer, includeOpenOrders).sub(currentPerpPositionValueUSDC);\n    }\n    getOracleDataForPerpMarket(marketIndex) {\n        const oracleKey = this.driftClient.getPerpMarketAccount(marketIndex).amm.oracle;\n        const oracleData = this.driftClient.getOraclePriceDataAndSlot(oracleKey).data;\n        return oracleData;\n    }\n    getOracleDataForSpotMarket(marketIndex) {\n        const oracleKey = this.driftClient.getSpotMarketAccount(marketIndex).oracle;\n        const oracleData = this.driftClient.getOraclePriceDataAndSlot(oracleKey).data;\n        return oracleData;\n    }\n}\nexports.User = User;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/user.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/userConfig.js":
/*!********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/userConfig.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi91c2VyQ29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL3VzZXJDb25maWcuanM/Y2YxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/userConfig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/userMap/userMap.js":
/*!*************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/userMap/userMap.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UserMap = void 0;\nconst __1 = __webpack_require__(/*! .. */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst memcmp_1 = __webpack_require__(/*! ../memcmp */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/memcmp.js\");\nclass UserMap {\n    /**\n     *\n     * @param driftClient\n     * @param accountSubscription\n     * @param includeIdle whether idle users are subscribed to. defaults to false to decrease # of user subscriptions\n     */ constructor(driftClient, accountSubscription, includeIdle = false){\n        this.userMap = new Map();\n        this.syncCallback = async (state)=>{\n            if (state.numberOfSubAccounts !== this.lastNumberOfSubAccounts) {\n                await this.sync();\n                this.lastNumberOfSubAccounts = state.numberOfSubAccounts;\n            }\n        };\n        this.driftClient = driftClient;\n        this.accountSubscription = accountSubscription;\n        this.includeIdle = includeIdle;\n    }\n    async subscribe() {\n        if (this.size() > 0) {\n            return;\n        }\n        await this.driftClient.subscribe();\n        this.lastNumberOfSubAccounts = this.driftClient.getStateAccount().numberOfSubAccounts;\n        this.driftClient.eventEmitter.on(\"stateAccountUpdate\", this.syncCallback);\n        await this.sync();\n    }\n    async addPubkey(userAccountPublicKey, userAccount) {\n        const user = new __1.User({\n            driftClient: this.driftClient,\n            userAccountPublicKey,\n            accountSubscription: this.accountSubscription\n        });\n        await user.subscribe(userAccount);\n        this.userMap.set(userAccountPublicKey.toString(), user);\n    }\n    has(key) {\n        return this.userMap.has(key);\n    }\n    /**\n     * gets the User for a particular userAccountPublicKey, if no User exists, undefined is returned\n     * @param key userAccountPublicKey to get User for\n     * @returns user User | undefined\n     */ get(key) {\n        return this.userMap.get(key);\n    }\n    /**\n     * gets the User for a particular userAccountPublicKey, if no User exists, new one is created\n     * @param key userAccountPublicKey to get User for\n     * @returns  User\n     */ async mustGet(key) {\n        if (!this.has(key)) {\n            await this.addPubkey(new web3_js_1.PublicKey(key));\n        }\n        const user = this.userMap.get(key);\n        return user;\n    }\n    /**\n     * gets the Authority for a particular userAccountPublicKey, if no User exists, undefined is returned\n     * @param key userAccountPublicKey to get User for\n     * @returns authority PublicKey | undefined\n     */ getUserAuthority(key) {\n        const chUser = this.userMap.get(key);\n        if (!chUser) {\n            return undefined;\n        }\n        return chUser.getUserAccount().authority;\n    }\n    /**\n     * implements the {@link DLOBSource} interface\n     * create a DLOB from all the subscribed users\n     * @param slot\n     */ async getDLOB(slot) {\n        const dlob = new __1.DLOB();\n        await dlob.initFromUserMap(this, slot);\n        return dlob;\n    }\n    async updateWithOrderRecord(record) {\n        if (!this.has(record.user.toString())) {\n            await this.addPubkey(record.user);\n        }\n    }\n    async updateWithEventRecord(record) {\n        if (record.eventType === \"DepositRecord\") {\n            const depositRecord = record;\n            await this.mustGet(depositRecord.user.toString());\n        } else if (record.eventType === \"FundingPaymentRecord\") {\n            const fundingPaymentRecord = record;\n            await this.mustGet(fundingPaymentRecord.user.toString());\n        } else if (record.eventType === \"LiquidationRecord\") {\n            const liqRecord = record;\n            await this.mustGet(liqRecord.user.toString());\n            await this.mustGet(liqRecord.liquidator.toString());\n        } else if (record.eventType === \"OrderRecord\") {\n            const orderRecord = record;\n            await this.updateWithOrderRecord(orderRecord);\n        } else if (record.eventType === \"OrderActionRecord\") {\n            const actionRecord = record;\n            if (actionRecord.taker) {\n                await this.mustGet(actionRecord.taker.toString());\n            }\n            if (actionRecord.maker) {\n                await this.mustGet(actionRecord.maker.toString());\n            }\n        } else if (record.eventType === \"SettlePnlRecord\") {\n            const settlePnlRecord = record;\n            await this.mustGet(settlePnlRecord.user.toString());\n        } else if (record.eventType === \"NewUserRecord\") {\n            const newUserRecord = record;\n            await this.mustGet(newUserRecord.user.toString());\n        } else if (record.eventType === \"LPRecord\") {\n            const lpRecord = record;\n            await this.mustGet(lpRecord.user.toString());\n        }\n    }\n    values() {\n        return this.userMap.values();\n    }\n    size() {\n        return this.userMap.size;\n    }\n    async sync() {\n        const filters = [\n            (0, memcmp_1.getUserFilter)()\n        ];\n        if (!this.includeIdle) {\n            filters.push((0, memcmp_1.getNonIdleUserFilter)());\n        }\n        const rpcRequestArgs = [\n            this.driftClient.program.programId.toBase58(),\n            {\n                commitment: this.driftClient.connection.commitment,\n                filters,\n                encoding: \"base64\",\n                withContext: true\n            }\n        ];\n        // @ts-ignore\n        const rpcJSONResponse = await this.driftClient.connection._rpcRequest(\"getProgramAccounts\", rpcRequestArgs);\n        const rpcResponseAndContext = rpcJSONResponse.result;\n        const slot = rpcResponseAndContext.context.slot;\n        const programAccountBufferMap = new Map();\n        for (const programAccount of rpcResponseAndContext.value){\n            programAccountBufferMap.set(programAccount.pubkey.toString(), // @ts-ignore\n            buffer_1.Buffer.from(programAccount.account.data[0], programAccount.account.data[1]));\n        }\n        for (const [key, buffer] of programAccountBufferMap.entries()){\n            if (!this.has(key)) {\n                const userAccount = this.driftClient.program.account.user.coder.accounts.decode(\"User\", buffer);\n                await this.addPubkey(new web3_js_1.PublicKey(key), userAccount);\n            }\n        }\n        for (const [key, user] of this.userMap.entries()){\n            if (!programAccountBufferMap.has(key)) {\n                await user.unsubscribe();\n                this.userMap.delete(key);\n            } else {\n                const userAccount = this.driftClient.program.account.user.coder.accounts.decode(\"User\", programAccountBufferMap.get(key));\n                user.accountSubscriber.updateData(userAccount, slot);\n            }\n        }\n    }\n    async unsubscribe() {\n        for (const [key, user] of this.userMap.entries()){\n            await user.unsubscribe();\n            this.userMap.delete(key);\n        }\n        if (this.lastNumberOfSubAccounts) {\n            this.driftClient.eventEmitter.removeListener(\"stateAccountUpdate\", this.syncCallback);\n            this.lastNumberOfSubAccounts = undefined;\n        }\n    }\n}\nexports.UserMap = UserMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/userMap/userMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/userMap/userStatsMap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/userMap/userStatsMap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UserStatsMap = void 0;\nconst __1 = __webpack_require__(/*! .. */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/index.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nclass UserStatsMap {\n    constructor(driftClient, accountSubscription){\n        /**\n         * map from authority pubkey to UserStats\n         */ this.userStatsMap = new Map();\n        this.syncCallback = async (state)=>{\n            if (state.numberOfAuthorities !== this.lastNumberOfAuthorities) {\n                await this.sync();\n                this.lastNumberOfAuthorities = state.numberOfAuthorities;\n            }\n        };\n        this.driftClient = driftClient;\n        this.accountSubscription = accountSubscription;\n    }\n    async subscribe() {\n        if (this.size() > 0) {\n            return;\n        }\n        await this.driftClient.subscribe();\n        this.lastNumberOfAuthorities = this.driftClient.getStateAccount().numberOfAuthorities;\n        this.driftClient.eventEmitter.on(\"stateAccountUpdate\", this.syncCallback);\n        await this.sync();\n    }\n    async addUserStat(authority, userStatsAccount) {\n        const userStat = new __1.UserStats({\n            driftClient: this.driftClient,\n            userStatsAccountPublicKey: (0, __1.getUserStatsAccountPublicKey)(this.driftClient.program.programId, authority),\n            accountSubscription: this.accountSubscription\n        });\n        await userStat.subscribe(userStatsAccount);\n        this.userStatsMap.set(authority.toString(), userStat);\n    }\n    async updateWithOrderRecord(record, userMap) {\n        const user = await userMap.mustGet(record.user.toString());\n        if (!this.has(user.getUserAccount().authority.toString())) {\n            await this.addUserStat(user.getUserAccount().authority);\n        }\n    }\n    async updateWithEventRecord(record, userMap) {\n        if (record.eventType === \"DepositRecord\") {\n            const depositRecord = record;\n            await this.mustGet(depositRecord.userAuthority.toString());\n        } else if (record.eventType === \"FundingPaymentRecord\") {\n            const fundingPaymentRecord = record;\n            await this.mustGet(fundingPaymentRecord.userAuthority.toString());\n        } else if (record.eventType === \"LiquidationRecord\") {\n            if (!userMap) {\n                return;\n            }\n            const liqRecord = record;\n            const user = await userMap.mustGet(liqRecord.user.toString());\n            await this.mustGet(user.getUserAccount().authority.toString());\n            const liquidatorUser = await userMap.mustGet(liqRecord.liquidator.toString());\n            await this.mustGet(liquidatorUser.getUserAccount().authority.toString());\n        } else if (record.eventType === \"OrderRecord\") {\n            if (!userMap) {\n                return;\n            }\n            const orderRecord = record;\n            await userMap.updateWithOrderRecord(orderRecord);\n        } else if (record.eventType === \"OrderActionRecord\") {\n            if (!userMap) {\n                return;\n            }\n            const actionRecord = record;\n            if (actionRecord.taker) {\n                const taker = await userMap.mustGet(actionRecord.taker.toString());\n                await this.mustGet(taker.getUserAccount().authority.toString());\n            }\n            if (actionRecord.maker) {\n                const maker = await userMap.mustGet(actionRecord.maker.toString());\n                await this.mustGet(maker.getUserAccount().authority.toString());\n            }\n        } else if (record.eventType === \"SettlePnlRecord\") {\n            if (!userMap) {\n                return;\n            }\n            const settlePnlRecord = record;\n            const user = await userMap.mustGet(settlePnlRecord.user.toString());\n            await this.mustGet(user.getUserAccount().authority.toString());\n        } else if (record.eventType === \"NewUserRecord\") {\n            const newUserRecord = record;\n            await this.mustGet(newUserRecord.userAuthority.toString());\n        } else if (record.eventType === \"LPRecord\") {\n            if (!userMap) {\n                return;\n            }\n            const lpRecord = record;\n            const user = await userMap.mustGet(lpRecord.user.toString());\n            await this.mustGet(user.getUserAccount().authority.toString());\n        } else if (record.eventType === \"InsuranceFundStakeRecord\") {\n            const ifStakeRecord = record;\n            await this.mustGet(ifStakeRecord.userAuthority.toString());\n        }\n    }\n    has(authorityPublicKey) {\n        return this.userStatsMap.has(authorityPublicKey);\n    }\n    get(authorityPublicKey) {\n        return this.userStatsMap.get(authorityPublicKey);\n    }\n    async mustGet(authorityPublicKey) {\n        if (!this.has(authorityPublicKey)) {\n            await this.addUserStat(new web3_js_1.PublicKey(authorityPublicKey));\n        }\n        return this.get(authorityPublicKey);\n    }\n    values() {\n        return this.userStatsMap.values();\n    }\n    size() {\n        return this.userStatsMap.size;\n    }\n    async sync() {\n        const programAccounts = await this.driftClient.connection.getProgramAccounts(this.driftClient.program.programId, {\n            commitment: this.driftClient.connection.commitment,\n            filters: [\n                {\n                    memcmp: this.driftClient.program.coder.accounts.memcmp(\"UserStats\")\n                }\n            ]\n        });\n        const programAccountMap = new Map();\n        for (const programAccount of programAccounts){\n            programAccountMap.set(new web3_js_1.PublicKey(programAccount.account.data.slice(8, 40)).toString(), programAccount.account);\n        }\n        for (const key of programAccountMap.keys()){\n            if (!this.has(key)) {\n                const userStatsAccount = this.driftClient.program.account.userStats.coder.accounts.decode(\"UserStats\", programAccountMap.get(key).data);\n                await this.addUserStat(new web3_js_1.PublicKey(key), userStatsAccount);\n            }\n        }\n    }\n    async unsubscribe() {\n        for (const [key, userStats] of this.userStatsMap.entries()){\n            await userStats.unsubscribe();\n            this.userStatsMap.delete(key);\n        }\n        if (this.lastNumberOfAuthorities) {\n            this.driftClient.eventEmitter.removeListener(\"stateAccountUpdate\", this.syncCallback);\n            this.lastNumberOfAuthorities = undefined;\n        }\n    }\n}\nexports.UserStatsMap = UserStatsMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/userMap/userStatsMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/userName.js":
/*!******************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/userName.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeName = exports.encodeName = exports.DEFAULT_MARKET_NAME = exports.DEFAULT_USER_NAME = exports.MAX_NAME_LENGTH = void 0;\nexports.MAX_NAME_LENGTH = 32;\nexports.DEFAULT_USER_NAME = \"Main Account\";\nexports.DEFAULT_MARKET_NAME = \"Default Market Name\";\nfunction encodeName(name) {\n    if (name.length > exports.MAX_NAME_LENGTH) {\n        throw Error(`Name (${name}) longer than 32 characters`);\n    }\n    const buffer = Buffer.alloc(32);\n    buffer.fill(name);\n    buffer.fill(\" \", name.length);\n    return Array(...buffer);\n}\nexports.encodeName = encodeName;\nfunction decodeName(bytes) {\n    const buffer = Buffer.from(bytes);\n    return buffer.toString(\"utf8\").trim();\n}\nexports.decodeName = decodeName;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi91c2VyTmFtZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWtCLEdBQUdBLGtCQUFrQixHQUFHQSwyQkFBMkIsR0FBR0EseUJBQXlCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDbklBLHVCQUF1QixHQUFHO0FBQzFCQSx5QkFBeUIsR0FBRztBQUM1QkEsMkJBQTJCLEdBQUc7QUFDOUIsU0FBU0csV0FBV0ksSUFBSTtJQUNwQixJQUFJQSxLQUFLQyxNQUFNLEdBQUdSLFFBQVFNLGVBQWUsRUFBRTtRQUN2QyxNQUFNRyxNQUFNLENBQUMsTUFBTSxFQUFFRixLQUFLLDJCQUEyQixDQUFDO0lBQzFEO0lBQ0EsTUFBTUcsU0FBU0MsT0FBT0MsS0FBSyxDQUFDO0lBQzVCRixPQUFPRyxJQUFJLENBQUNOO0lBQ1pHLE9BQU9HLElBQUksQ0FBQyxLQUFLTixLQUFLQyxNQUFNO0lBQzVCLE9BQU9NLFNBQVNKO0FBQ3BCO0FBQ0FWLGtCQUFrQixHQUFHRztBQUNyQixTQUFTRCxXQUFXYSxLQUFLO0lBQ3JCLE1BQU1MLFNBQVNDLE9BQU9LLElBQUksQ0FBQ0Q7SUFDM0IsT0FBT0wsT0FBT08sUUFBUSxDQUFDLFFBQVFDLElBQUk7QUFDdkM7QUFDQWxCLGtCQUFrQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi91c2VyTmFtZS5qcz8wY2E0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVOYW1lID0gZXhwb3J0cy5lbmNvZGVOYW1lID0gZXhwb3J0cy5ERUZBVUxUX01BUktFVF9OQU1FID0gZXhwb3J0cy5ERUZBVUxUX1VTRVJfTkFNRSA9IGV4cG9ydHMuTUFYX05BTUVfTEVOR1RIID0gdm9pZCAwO1xuZXhwb3J0cy5NQVhfTkFNRV9MRU5HVEggPSAzMjtcbmV4cG9ydHMuREVGQVVMVF9VU0VSX05BTUUgPSAnTWFpbiBBY2NvdW50JztcbmV4cG9ydHMuREVGQVVMVF9NQVJLRVRfTkFNRSA9ICdEZWZhdWx0IE1hcmtldCBOYW1lJztcbmZ1bmN0aW9uIGVuY29kZU5hbWUobmFtZSkge1xuICAgIGlmIChuYW1lLmxlbmd0aCA+IGV4cG9ydHMuTUFYX05BTUVfTEVOR1RIKSB7XG4gICAgICAgIHRocm93IEVycm9yKGBOYW1lICgke25hbWV9KSBsb25nZXIgdGhhbiAzMiBjaGFyYWN0ZXJzYCk7XG4gICAgfVxuICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygzMik7XG4gICAgYnVmZmVyLmZpbGwobmFtZSk7XG4gICAgYnVmZmVyLmZpbGwoJyAnLCBuYW1lLmxlbmd0aCk7XG4gICAgcmV0dXJuIEFycmF5KC4uLmJ1ZmZlcik7XG59XG5leHBvcnRzLmVuY29kZU5hbWUgPSBlbmNvZGVOYW1lO1xuZnVuY3Rpb24gZGVjb2RlTmFtZShieXRlcykge1xuICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGJ5dGVzKTtcbiAgICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKCd1dGY4JykudHJpbSgpO1xufVxuZXhwb3J0cy5kZWNvZGVOYW1lID0gZGVjb2RlTmFtZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlY29kZU5hbWUiLCJlbmNvZGVOYW1lIiwiREVGQVVMVF9NQVJLRVRfTkFNRSIsIkRFRkFVTFRfVVNFUl9OQU1FIiwiTUFYX05BTUVfTEVOR1RIIiwibmFtZSIsImxlbmd0aCIsIkVycm9yIiwiYnVmZmVyIiwiQnVmZmVyIiwiYWxsb2MiLCJmaWxsIiwiQXJyYXkiLCJieXRlcyIsImZyb20iLCJ0b1N0cmluZyIsInRyaW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/userName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/userStats.js":
/*!*******************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/userStats.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UserStats = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst pollingUserStatsAccountSubscriber_1 = __webpack_require__(/*! ./accounts/pollingUserStatsAccountSubscriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/pollingUserStatsAccountSubscriber.js\");\nconst webSocketUserStatsAccountSubsriber_1 = __webpack_require__(/*! ./accounts/webSocketUserStatsAccountSubsriber */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/accounts/webSocketUserStatsAccountSubsriber.js\");\nconst pda_1 = __webpack_require__(/*! ./addresses/pda */ \"(ssr)/./node_modules/@drift-labs/sdk/lib/addresses/pda.js\");\nclass UserStats {\n    constructor(config){\n        var _a, _b;\n        this.driftClient = config.driftClient;\n        this.userStatsAccountPublicKey = config.userStatsAccountPublicKey;\n        if (((_a = config.accountSubscription) === null || _a === void 0 ? void 0 : _a.type) === \"polling\") {\n            this.accountSubscriber = new pollingUserStatsAccountSubscriber_1.PollingUserStatsAccountSubscriber(config.driftClient.program, config.userStatsAccountPublicKey, config.accountSubscription.accountLoader);\n        } else if (((_b = config.accountSubscription) === null || _b === void 0 ? void 0 : _b.type) === \"custom\") {\n            throw new Error(\"Custom account subscription not yet implemented for user stats\");\n        } else {\n            this.accountSubscriber = new webSocketUserStatsAccountSubsriber_1.WebSocketUserStatsAccountSubscriber(config.driftClient.program, config.userStatsAccountPublicKey);\n        }\n    }\n    async subscribe(userStatsAccount) {\n        this.isSubscribed = await this.accountSubscriber.subscribe(userStatsAccount);\n        return this.isSubscribed;\n    }\n    async fetchAccounts() {\n        await this.accountSubscriber.fetch();\n    }\n    async unsubscribe() {\n        await this.accountSubscriber.unsubscribe();\n        this.isSubscribed = false;\n    }\n    getAccountAndSlot() {\n        return this.accountSubscriber.getUserStatsAccountAndSlot();\n    }\n    getAccount() {\n        return this.accountSubscriber.getUserStatsAccountAndSlot().data;\n    }\n    getReferrerInfo() {\n        if (this.getAccount().referrer.equals(web3_js_1.PublicKey.default)) {\n            return undefined;\n        } else {\n            return {\n                referrer: (0, pda_1.getUserAccountPublicKeySync)(this.driftClient.program.programId, this.getAccount().referrer, 0),\n                referrerStats: (0, pda_1.getUserStatsAccountPublicKey)(this.driftClient.program.programId, this.getAccount().referrer)\n            };\n        }\n    }\n}\nexports.UserStats = UserStats;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi91c2VyU3RhdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMsOEVBQWlCO0FBQzNDLE1BQU1DLHNDQUFzQ0QsbUJBQU9BLENBQUMsNElBQThDO0FBQ2xHLE1BQU1FLHVDQUF1Q0YsbUJBQU9BLENBQUMsOElBQStDO0FBQ3BHLE1BQU1HLFFBQVFILG1CQUFPQSxDQUFDLGtGQUFpQjtBQUN2QyxNQUFNRjtJQUNGTSxZQUFZQyxNQUFNLENBQUU7UUFDaEIsSUFBSUMsSUFBSUM7UUFDUixJQUFJLENBQUNDLFdBQVcsR0FBR0gsT0FBT0csV0FBVztRQUNyQyxJQUFJLENBQUNDLHlCQUF5QixHQUFHSixPQUFPSSx5QkFBeUI7UUFDakUsSUFBSSxDQUFDLENBQUNILEtBQUtELE9BQU9LLG1CQUFtQixNQUFNLFFBQVFKLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0ssSUFBSSxNQUFNLFdBQVc7WUFDaEcsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxJQUFJWCxvQ0FBb0NZLGlDQUFpQyxDQUFDUixPQUFPRyxXQUFXLENBQUNNLE9BQU8sRUFBRVQsT0FBT0kseUJBQXlCLEVBQUVKLE9BQU9LLG1CQUFtQixDQUFDSyxhQUFhO1FBQzdNLE9BQ0ssSUFBSSxDQUFDLENBQUNSLEtBQUtGLE9BQU9LLG1CQUFtQixNQUFNLFFBQVFILE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0ksSUFBSSxNQUFNLFVBQVU7WUFDcEcsTUFBTSxJQUFJSyxNQUFNO1FBQ3BCLE9BQ0s7WUFDRCxJQUFJLENBQUNKLGlCQUFpQixHQUFHLElBQUlWLHFDQUFxQ2UsbUNBQW1DLENBQUNaLE9BQU9HLFdBQVcsQ0FBQ00sT0FBTyxFQUFFVCxPQUFPSSx5QkFBeUI7UUFDdEs7SUFDSjtJQUNBLE1BQU1TLFVBQVVDLGdCQUFnQixFQUFFO1FBQzlCLElBQUksQ0FBQ0MsWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDUixpQkFBaUIsQ0FBQ00sU0FBUyxDQUFDQztRQUMzRCxPQUFPLElBQUksQ0FBQ0MsWUFBWTtJQUM1QjtJQUNBLE1BQU1DLGdCQUFnQjtRQUNsQixNQUFNLElBQUksQ0FBQ1QsaUJBQWlCLENBQUNVLEtBQUs7SUFDdEM7SUFDQSxNQUFNQyxjQUFjO1FBQ2hCLE1BQU0sSUFBSSxDQUFDWCxpQkFBaUIsQ0FBQ1csV0FBVztRQUN4QyxJQUFJLENBQUNILFlBQVksR0FBRztJQUN4QjtJQUNBSSxvQkFBb0I7UUFDaEIsT0FBTyxJQUFJLENBQUNaLGlCQUFpQixDQUFDYSwwQkFBMEI7SUFDNUQ7SUFDQUMsYUFBYTtRQUNULE9BQU8sSUFBSSxDQUFDZCxpQkFBaUIsQ0FBQ2EsMEJBQTBCLEdBQUdFLElBQUk7SUFDbkU7SUFDQUMsa0JBQWtCO1FBQ2QsSUFBSSxJQUFJLENBQUNGLFVBQVUsR0FBR0csUUFBUSxDQUFDQyxNQUFNLENBQUMvQixVQUFVZ0MsU0FBUyxDQUFDQyxPQUFPLEdBQUc7WUFDaEUsT0FBT0M7UUFDWCxPQUNLO1lBQ0QsT0FBTztnQkFDSEosVUFBVSxDQUFDLEdBQUcxQixNQUFNK0IsMkJBQTJCLEVBQUUsSUFBSSxDQUFDMUIsV0FBVyxDQUFDTSxPQUFPLENBQUNxQixTQUFTLEVBQUUsSUFBSSxDQUFDVCxVQUFVLEdBQUdHLFFBQVEsRUFBRTtnQkFDakhPLGVBQWUsQ0FBQyxHQUFHakMsTUFBTWtDLDRCQUE0QixFQUFFLElBQUksQ0FBQzdCLFdBQVcsQ0FBQ00sT0FBTyxDQUFDcUIsU0FBUyxFQUFFLElBQUksQ0FBQ1QsVUFBVSxHQUFHRyxRQUFRO1lBQ3pIO1FBQ0o7SUFDSjtBQUNKO0FBQ0FqQyxpQkFBaUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvdXNlclN0YXRzLmpzP2JmYTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVzZXJTdGF0cyA9IHZvaWQgMDtcbmNvbnN0IHdlYjNfanNfMSA9IHJlcXVpcmUoXCJAc29sYW5hL3dlYjMuanNcIik7XG5jb25zdCBwb2xsaW5nVXNlclN0YXRzQWNjb3VudFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL2FjY291bnRzL3BvbGxpbmdVc2VyU3RhdHNBY2NvdW50U3Vic2NyaWJlclwiKTtcbmNvbnN0IHdlYlNvY2tldFVzZXJTdGF0c0FjY291bnRTdWJzcmliZXJfMSA9IHJlcXVpcmUoXCIuL2FjY291bnRzL3dlYlNvY2tldFVzZXJTdGF0c0FjY291bnRTdWJzcmliZXJcIik7XG5jb25zdCBwZGFfMSA9IHJlcXVpcmUoXCIuL2FkZHJlc3Nlcy9wZGFcIik7XG5jbGFzcyBVc2VyU3RhdHMge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLmRyaWZ0Q2xpZW50ID0gY29uZmlnLmRyaWZ0Q2xpZW50O1xuICAgICAgICB0aGlzLnVzZXJTdGF0c0FjY291bnRQdWJsaWNLZXkgPSBjb25maWcudXNlclN0YXRzQWNjb3VudFB1YmxpY0tleTtcbiAgICAgICAgaWYgKCgoX2EgPSBjb25maWcuYWNjb3VudFN1YnNjcmlwdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnR5cGUpID09PSAncG9sbGluZycpIHtcbiAgICAgICAgICAgIHRoaXMuYWNjb3VudFN1YnNjcmliZXIgPSBuZXcgcG9sbGluZ1VzZXJTdGF0c0FjY291bnRTdWJzY3JpYmVyXzEuUG9sbGluZ1VzZXJTdGF0c0FjY291bnRTdWJzY3JpYmVyKGNvbmZpZy5kcmlmdENsaWVudC5wcm9ncmFtLCBjb25maWcudXNlclN0YXRzQWNjb3VudFB1YmxpY0tleSwgY29uZmlnLmFjY291bnRTdWJzY3JpcHRpb24uYWNjb3VudExvYWRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKChfYiA9IGNvbmZpZy5hY2NvdW50U3Vic2NyaXB0aW9uKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudHlwZSkgPT09ICdjdXN0b20nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0N1c3RvbSBhY2NvdW50IHN1YnNjcmlwdGlvbiBub3QgeWV0IGltcGxlbWVudGVkIGZvciB1c2VyIHN0YXRzJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjY291bnRTdWJzY3JpYmVyID0gbmV3IHdlYlNvY2tldFVzZXJTdGF0c0FjY291bnRTdWJzcmliZXJfMS5XZWJTb2NrZXRVc2VyU3RhdHNBY2NvdW50U3Vic2NyaWJlcihjb25maWcuZHJpZnRDbGllbnQucHJvZ3JhbSwgY29uZmlnLnVzZXJTdGF0c0FjY291bnRQdWJsaWNLZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHN1YnNjcmliZSh1c2VyU3RhdHNBY2NvdW50KSB7XG4gICAgICAgIHRoaXMuaXNTdWJzY3JpYmVkID0gYXdhaXQgdGhpcy5hY2NvdW50U3Vic2NyaWJlci5zdWJzY3JpYmUodXNlclN0YXRzQWNjb3VudCk7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU3Vic2NyaWJlZDtcbiAgICB9XG4gICAgYXN5bmMgZmV0Y2hBY2NvdW50cygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5hY2NvdW50U3Vic2NyaWJlci5mZXRjaCgpO1xuICAgIH1cbiAgICBhc3luYyB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5hY2NvdW50U3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLmlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBnZXRBY2NvdW50QW5kU2xvdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNjb3VudFN1YnNjcmliZXIuZ2V0VXNlclN0YXRzQWNjb3VudEFuZFNsb3QoKTtcbiAgICB9XG4gICAgZ2V0QWNjb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNjb3VudFN1YnNjcmliZXIuZ2V0VXNlclN0YXRzQWNjb3VudEFuZFNsb3QoKS5kYXRhO1xuICAgIH1cbiAgICBnZXRSZWZlcnJlckluZm8oKSB7XG4gICAgICAgIGlmICh0aGlzLmdldEFjY291bnQoKS5yZWZlcnJlci5lcXVhbHMod2ViM19qc18xLlB1YmxpY0tleS5kZWZhdWx0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVmZXJyZXI6ICgwLCBwZGFfMS5nZXRVc2VyQWNjb3VudFB1YmxpY0tleVN5bmMpKHRoaXMuZHJpZnRDbGllbnQucHJvZ3JhbS5wcm9ncmFtSWQsIHRoaXMuZ2V0QWNjb3VudCgpLnJlZmVycmVyLCAwKSxcbiAgICAgICAgICAgICAgICByZWZlcnJlclN0YXRzOiAoMCwgcGRhXzEuZ2V0VXNlclN0YXRzQWNjb3VudFB1YmxpY0tleSkodGhpcy5kcmlmdENsaWVudC5wcm9ncmFtLnByb2dyYW1JZCwgdGhpcy5nZXRBY2NvdW50KCkucmVmZXJyZXIpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVXNlclN0YXRzID0gVXNlclN0YXRzO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVXNlclN0YXRzIiwid2ViM19qc18xIiwicmVxdWlyZSIsInBvbGxpbmdVc2VyU3RhdHNBY2NvdW50U3Vic2NyaWJlcl8xIiwid2ViU29ja2V0VXNlclN0YXRzQWNjb3VudFN1YnNyaWJlcl8xIiwicGRhXzEiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsIl9hIiwiX2IiLCJkcmlmdENsaWVudCIsInVzZXJTdGF0c0FjY291bnRQdWJsaWNLZXkiLCJhY2NvdW50U3Vic2NyaXB0aW9uIiwidHlwZSIsImFjY291bnRTdWJzY3JpYmVyIiwiUG9sbGluZ1VzZXJTdGF0c0FjY291bnRTdWJzY3JpYmVyIiwicHJvZ3JhbSIsImFjY291bnRMb2FkZXIiLCJFcnJvciIsIldlYlNvY2tldFVzZXJTdGF0c0FjY291bnRTdWJzY3JpYmVyIiwic3Vic2NyaWJlIiwidXNlclN0YXRzQWNjb3VudCIsImlzU3Vic2NyaWJlZCIsImZldGNoQWNjb3VudHMiLCJmZXRjaCIsInVuc3Vic2NyaWJlIiwiZ2V0QWNjb3VudEFuZFNsb3QiLCJnZXRVc2VyU3RhdHNBY2NvdW50QW5kU2xvdCIsImdldEFjY291bnQiLCJkYXRhIiwiZ2V0UmVmZXJyZXJJbmZvIiwicmVmZXJyZXIiLCJlcXVhbHMiLCJQdWJsaWNLZXkiLCJkZWZhdWx0IiwidW5kZWZpbmVkIiwiZ2V0VXNlckFjY291bnRQdWJsaWNLZXlTeW5jIiwicHJvZ3JhbUlkIiwicmVmZXJyZXJTdGF0cyIsImdldFVzZXJTdGF0c0FjY291bnRQdWJsaWNLZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/userStats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/userStatsConfig.js":
/*!*************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/userStatsConfig.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi91c2VyU3RhdHNDb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BkcmlmdC1sYWJzL3Nkay9saWIvdXNlclN0YXRzQ29uZmlnLmpzPzIyNDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/userStatsConfig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/util/computeUnits.js":
/*!***************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/util/computeUnits.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.findComputeUnitConsumption = void 0;\nasync function findComputeUnitConsumption(programId, connection, txSignature, commitment = \"confirmed\") {\n    const tx = await connection.getTransaction(txSignature, {\n        commitment\n    });\n    const computeUnits = [];\n    const regex = new RegExp(`Program ${programId.toString()} consumed ([0-9]{0,6}) of ([0-9]{0,7}) compute units`);\n    tx.meta.logMessages.forEach((logMessage)=>{\n        const match = logMessage.match(regex);\n        if (match && match[1]) {\n            computeUnits.push(match[1]);\n        }\n    });\n    return computeUnits;\n}\nexports.findComputeUnitConsumption = findComputeUnitConsumption;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi91dGlsL2NvbXB1dGVVbml0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0NBQWtDLEdBQUcsS0FBSztBQUMxQyxlQUFlRSwyQkFBMkJDLFNBQVMsRUFBRUMsVUFBVSxFQUFFQyxXQUFXLEVBQUVDLGFBQWEsV0FBVztJQUNsRyxNQUFNQyxLQUFLLE1BQU1ILFdBQVdJLGNBQWMsQ0FBQ0gsYUFBYTtRQUFFQztJQUFXO0lBQ3JFLE1BQU1HLGVBQWUsRUFBRTtJQUN2QixNQUFNQyxRQUFRLElBQUlDLE9BQU8sQ0FBQyxRQUFRLEVBQUVSLFVBQVVTLFFBQVEsR0FBRyxvREFBb0QsQ0FBQztJQUM5R0wsR0FBR00sSUFBSSxDQUFDQyxXQUFXLENBQUNDLE9BQU8sQ0FBQyxDQUFDQztRQUN6QixNQUFNQyxRQUFRRCxXQUFXQyxLQUFLLENBQUNQO1FBQy9CLElBQUlPLFNBQVNBLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDbkJSLGFBQWFTLElBQUksQ0FBQ0QsS0FBSyxDQUFDLEVBQUU7UUFDOUI7SUFDSjtJQUNBLE9BQU9SO0FBQ1g7QUFDQVQsa0NBQWtDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AZHJpZnQtbGFicy9zZGsvbGliL3V0aWwvY29tcHV0ZVVuaXRzLmpzPzNkOTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZpbmRDb21wdXRlVW5pdENvbnN1bXB0aW9uID0gdm9pZCAwO1xuYXN5bmMgZnVuY3Rpb24gZmluZENvbXB1dGVVbml0Q29uc3VtcHRpb24ocHJvZ3JhbUlkLCBjb25uZWN0aW9uLCB0eFNpZ25hdHVyZSwgY29tbWl0bWVudCA9ICdjb25maXJtZWQnKSB7XG4gICAgY29uc3QgdHggPSBhd2FpdCBjb25uZWN0aW9uLmdldFRyYW5zYWN0aW9uKHR4U2lnbmF0dXJlLCB7IGNvbW1pdG1lbnQgfSk7XG4gICAgY29uc3QgY29tcHV0ZVVuaXRzID0gW107XG4gICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBQcm9ncmFtICR7cHJvZ3JhbUlkLnRvU3RyaW5nKCl9IGNvbnN1bWVkIChbMC05XXswLDZ9KSBvZiAoWzAtOV17MCw3fSkgY29tcHV0ZSB1bml0c2ApO1xuICAgIHR4Lm1ldGEubG9nTWVzc2FnZXMuZm9yRWFjaCgobG9nTWVzc2FnZSkgPT4ge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGxvZ01lc3NhZ2UubWF0Y2gocmVnZXgpO1xuICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHtcbiAgICAgICAgICAgIGNvbXB1dGVVbml0cy5wdXNoKG1hdGNoWzFdKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjb21wdXRlVW5pdHM7XG59XG5leHBvcnRzLmZpbmRDb21wdXRlVW5pdENvbnN1bXB0aW9uID0gZmluZENvbXB1dGVVbml0Q29uc3VtcHRpb247XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmaW5kQ29tcHV0ZVVuaXRDb25zdW1wdGlvbiIsInByb2dyYW1JZCIsImNvbm5lY3Rpb24iLCJ0eFNpZ25hdHVyZSIsImNvbW1pdG1lbnQiLCJ0eCIsImdldFRyYW5zYWN0aW9uIiwiY29tcHV0ZVVuaXRzIiwicmVnZXgiLCJSZWdFeHAiLCJ0b1N0cmluZyIsIm1ldGEiLCJsb2dNZXNzYWdlcyIsImZvckVhY2giLCJsb2dNZXNzYWdlIiwibWF0Y2giLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/util/computeUnits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/util/promiseTimeout.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/util/promiseTimeout.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.promiseTimeout = void 0;\nfunction promiseTimeout(promise, timeoutMs) {\n    let timeoutId;\n    const timeoutPromise = new Promise((resolve)=>{\n        timeoutId = setTimeout(()=>resolve(null), timeoutMs);\n    });\n    return Promise.race([\n        promise,\n        timeoutPromise\n    ]).then((result)=>{\n        clearTimeout(timeoutId);\n        return result;\n    });\n}\nexports.promiseTimeout = promiseTimeout;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi91dGlsL3Byb21pc2VUaW1lb3V0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBRyxLQUFLO0FBQzlCLFNBQVNFLGVBQWVDLE9BQU8sRUFBRUMsU0FBUztJQUN0QyxJQUFJQztJQUNKLE1BQU1DLGlCQUFpQixJQUFJQyxRQUFRLENBQUNDO1FBQ2hDSCxZQUFZSSxXQUFXLElBQU1ELFFBQVEsT0FBT0o7SUFDaEQ7SUFDQSxPQUFPRyxRQUFRRyxJQUFJLENBQUM7UUFBQ1A7UUFBU0c7S0FBZSxFQUFFSyxJQUFJLENBQUMsQ0FBQ0M7UUFDakRDLGFBQWFSO1FBQ2IsT0FBT087SUFDWDtBQUNKO0FBQ0FaLHNCQUFzQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi91dGlsL3Byb21pc2VUaW1lb3V0LmpzPzE0NzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByb21pc2VUaW1lb3V0ID0gdm9pZCAwO1xuZnVuY3Rpb24gcHJvbWlzZVRpbWVvdXQocHJvbWlzZSwgdGltZW91dE1zKSB7XG4gICAgbGV0IHRpbWVvdXRJZDtcbiAgICBjb25zdCB0aW1lb3V0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZShudWxsKSwgdGltZW91dE1zKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtwcm9taXNlLCB0aW1lb3V0UHJvbWlzZV0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbn1cbmV4cG9ydHMucHJvbWlzZVRpbWVvdXQgPSBwcm9taXNlVGltZW91dDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInByb21pc2VUaW1lb3V0IiwicHJvbWlzZSIsInRpbWVvdXRNcyIsInRpbWVvdXRJZCIsInRpbWVvdXRQcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwicmFjZSIsInRoZW4iLCJyZXN1bHQiLCJjbGVhclRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/util/promiseTimeout.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/util/tps.js":
/*!******************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/util/tps.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.estimateTps = void 0;\nasync function estimateTps(programId, connection, failed) {\n    let signatures = await connection.getSignaturesForAddress(programId, undefined, \"finalized\");\n    if (failed) {\n        signatures = signatures.filter((signature)=>signature.err);\n    }\n    const numberOfSignatures = signatures.length;\n    if (numberOfSignatures === 0) {\n        return 0;\n    }\n    return numberOfSignatures / (signatures[0].blockTime - signatures[numberOfSignatures - 1].blockTime);\n}\nexports.estimateTps = estimateTps;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi91dGlsL3Rwcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixlQUFlRSxZQUFZQyxTQUFTLEVBQUVDLFVBQVUsRUFBRUMsTUFBTTtJQUNwRCxJQUFJQyxhQUFhLE1BQU1GLFdBQVdHLHVCQUF1QixDQUFDSixXQUFXSyxXQUFXO0lBQ2hGLElBQUlILFFBQVE7UUFDUkMsYUFBYUEsV0FBV0csTUFBTSxDQUFDLENBQUNDLFlBQWNBLFVBQVVDLEdBQUc7SUFDL0Q7SUFDQSxNQUFNQyxxQkFBcUJOLFdBQVdPLE1BQU07SUFDNUMsSUFBSUQsdUJBQXVCLEdBQUc7UUFDMUIsT0FBTztJQUNYO0lBQ0EsT0FBUUEscUJBQ0hOLENBQUFBLFVBQVUsQ0FBQyxFQUFFLENBQUNRLFNBQVMsR0FBR1IsVUFBVSxDQUFDTSxxQkFBcUIsRUFBRSxDQUFDRSxTQUFTO0FBQy9FO0FBQ0FkLG1CQUFtQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi91dGlsL3Rwcy5qcz82YzZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lc3RpbWF0ZVRwcyA9IHZvaWQgMDtcbmFzeW5jIGZ1bmN0aW9uIGVzdGltYXRlVHBzKHByb2dyYW1JZCwgY29ubmVjdGlvbiwgZmFpbGVkKSB7XG4gICAgbGV0IHNpZ25hdHVyZXMgPSBhd2FpdCBjb25uZWN0aW9uLmdldFNpZ25hdHVyZXNGb3JBZGRyZXNzKHByb2dyYW1JZCwgdW5kZWZpbmVkLCAnZmluYWxpemVkJyk7XG4gICAgaWYgKGZhaWxlZCkge1xuICAgICAgICBzaWduYXR1cmVzID0gc2lnbmF0dXJlcy5maWx0ZXIoKHNpZ25hdHVyZSkgPT4gc2lnbmF0dXJlLmVycik7XG4gICAgfVxuICAgIGNvbnN0IG51bWJlck9mU2lnbmF0dXJlcyA9IHNpZ25hdHVyZXMubGVuZ3RoO1xuICAgIGlmIChudW1iZXJPZlNpZ25hdHVyZXMgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiAobnVtYmVyT2ZTaWduYXR1cmVzIC9cbiAgICAgICAgKHNpZ25hdHVyZXNbMF0uYmxvY2tUaW1lIC0gc2lnbmF0dXJlc1tudW1iZXJPZlNpZ25hdHVyZXMgLSAxXS5ibG9ja1RpbWUpKTtcbn1cbmV4cG9ydHMuZXN0aW1hdGVUcHMgPSBlc3RpbWF0ZVRwcztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVzdGltYXRlVHBzIiwicHJvZ3JhbUlkIiwiY29ubmVjdGlvbiIsImZhaWxlZCIsInNpZ25hdHVyZXMiLCJnZXRTaWduYXR1cmVzRm9yQWRkcmVzcyIsInVuZGVmaW5lZCIsImZpbHRlciIsInNpZ25hdHVyZSIsImVyciIsIm51bWJlck9mU2lnbmF0dXJlcyIsImxlbmd0aCIsImJsb2NrVGltZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/util/tps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/wallet.js":
/*!****************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/wallet.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadKeypair = exports.Wallet = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst bs58_1 = __importDefault(__webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/index.js\"));\nclass Wallet {\n    constructor(payer){\n        this.payer = payer;\n    }\n    async signTransaction(tx) {\n        tx.partialSign(this.payer);\n        return tx;\n    }\n    async signVersionedTransaction(tx) {\n        tx.sign([\n            this.payer\n        ]);\n        return tx;\n    }\n    async signAllTransactions(txs) {\n        return txs.map((t)=>{\n            t.partialSign(this.payer);\n            return t;\n        });\n    }\n    async signAllVersionedTransactions(txs) {\n        return txs.map((t)=>{\n            t.sign([\n                this.payer\n            ]);\n            return t;\n        });\n    }\n    get publicKey() {\n        return this.payer.publicKey;\n    }\n}\nexports.Wallet = Wallet;\nfunction loadKeypair(privateKey) {\n    // try to load privateKey as a filepath\n    let loadedKey;\n    if (fs_1.default.existsSync(privateKey)) {\n        privateKey = fs_1.default.readFileSync(privateKey).toString();\n    }\n    if (privateKey.includes(\"[\") && privateKey.includes(\"]\")) {\n        loadedKey = Uint8Array.from(JSON.parse(privateKey));\n    } else if (privateKey.includes(\",\")) {\n        loadedKey = Uint8Array.from(privateKey.split(\",\").map((val)=>Number(val)));\n    } else {\n        privateKey = privateKey.replace(/\\s/g, \"\");\n        loadedKey = new Uint8Array(bs58_1.default.decode(privateKey));\n    }\n    return web3_js_1.Keypair.fromSecretKey(Uint8Array.from(loadedKey));\n}\nexports.loadKeypair = loadKeypair;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi93YWxsZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHQSxjQUFjLEdBQUcsS0FBSztBQUM1QyxNQUFNSSxZQUFZQyxtQkFBT0EsQ0FBQyw4RUFBaUI7QUFDM0MsTUFBTUMsT0FBT1gsZ0JBQWdCVSxtQkFBT0EsQ0FBQyxjQUFJO0FBQ3pDLE1BQU1FLFNBQVNaLGdCQUFnQlUsbUJBQU9BLENBQUMsZ0RBQU07QUFDN0MsTUFBTUY7SUFDRkssWUFBWUMsS0FBSyxDQUFFO1FBQ2YsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO0lBQ2pCO0lBQ0EsTUFBTUMsZ0JBQWdCQyxFQUFFLEVBQUU7UUFDdEJBLEdBQUdDLFdBQVcsQ0FBQyxJQUFJLENBQUNILEtBQUs7UUFDekIsT0FBT0U7SUFDWDtJQUNBLE1BQU1FLHlCQUF5QkYsRUFBRSxFQUFFO1FBQy9CQSxHQUFHRyxJQUFJLENBQUM7WUFBQyxJQUFJLENBQUNMLEtBQUs7U0FBQztRQUNwQixPQUFPRTtJQUNYO0lBQ0EsTUFBTUksb0JBQW9CQyxHQUFHLEVBQUU7UUFDM0IsT0FBT0EsSUFBSUMsR0FBRyxDQUFDLENBQUNDO1lBQ1pBLEVBQUVOLFdBQVcsQ0FBQyxJQUFJLENBQUNILEtBQUs7WUFDeEIsT0FBT1M7UUFDWDtJQUNKO0lBQ0EsTUFBTUMsNkJBQTZCSCxHQUFHLEVBQUU7UUFDcEMsT0FBT0EsSUFBSUMsR0FBRyxDQUFDLENBQUNDO1lBQ1pBLEVBQUVKLElBQUksQ0FBQztnQkFBQyxJQUFJLENBQUNMLEtBQUs7YUFBQztZQUNuQixPQUFPUztRQUNYO0lBQ0o7SUFDQSxJQUFJRSxZQUFZO1FBQ1osT0FBTyxJQUFJLENBQUNYLEtBQUssQ0FBQ1csU0FBUztJQUMvQjtBQUNKO0FBQ0FwQixjQUFjLEdBQUdHO0FBQ2pCLFNBQVNELFlBQVltQixVQUFVO0lBQzNCLHVDQUF1QztJQUN2QyxJQUFJQztJQUNKLElBQUloQixLQUFLaUIsT0FBTyxDQUFDQyxVQUFVLENBQUNILGFBQWE7UUFDckNBLGFBQWFmLEtBQUtpQixPQUFPLENBQUNFLFlBQVksQ0FBQ0osWUFBWUssUUFBUTtJQUMvRDtJQUNBLElBQUlMLFdBQVdNLFFBQVEsQ0FBQyxRQUFRTixXQUFXTSxRQUFRLENBQUMsTUFBTTtRQUN0REwsWUFBWU0sV0FBV0MsSUFBSSxDQUFDQyxLQUFLQyxLQUFLLENBQUNWO0lBQzNDLE9BQ0ssSUFBSUEsV0FBV00sUUFBUSxDQUFDLE1BQU07UUFDL0JMLFlBQVlNLFdBQVdDLElBQUksQ0FBQ1IsV0FBV1csS0FBSyxDQUFDLEtBQUtmLEdBQUcsQ0FBQyxDQUFDZ0IsTUFBUUMsT0FBT0Q7SUFDMUUsT0FDSztRQUNEWixhQUFhQSxXQUFXYyxPQUFPLENBQUMsT0FBTztRQUN2Q2IsWUFBWSxJQUFJTSxXQUFXckIsT0FBT2dCLE9BQU8sQ0FBQ2EsTUFBTSxDQUFDZjtJQUNyRDtJQUNBLE9BQU9qQixVQUFVaUMsT0FBTyxDQUFDQyxhQUFhLENBQUNWLFdBQVdDLElBQUksQ0FBQ1A7QUFDM0Q7QUFDQXRCLG1CQUFtQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQGRyaWZ0LWxhYnMvc2RrL2xpYi93YWxsZXQuanM/MjZhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEtleXBhaXIgPSBleHBvcnRzLldhbGxldCA9IHZvaWQgMDtcbmNvbnN0IHdlYjNfanNfMSA9IHJlcXVpcmUoXCJAc29sYW5hL3dlYjMuanNcIik7XG5jb25zdCBmc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJmc1wiKSk7XG5jb25zdCBiczU4XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJzNThcIikpO1xuY2xhc3MgV2FsbGV0IHtcbiAgICBjb25zdHJ1Y3RvcihwYXllcikge1xuICAgICAgICB0aGlzLnBheWVyID0gcGF5ZXI7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25UcmFuc2FjdGlvbih0eCkge1xuICAgICAgICB0eC5wYXJ0aWFsU2lnbih0aGlzLnBheWVyKTtcbiAgICAgICAgcmV0dXJuIHR4O1xuICAgIH1cbiAgICBhc3luYyBzaWduVmVyc2lvbmVkVHJhbnNhY3Rpb24odHgpIHtcbiAgICAgICAgdHguc2lnbihbdGhpcy5wYXllcl0pO1xuICAgICAgICByZXR1cm4gdHg7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25BbGxUcmFuc2FjdGlvbnModHhzKSB7XG4gICAgICAgIHJldHVybiB0eHMubWFwKCh0KSA9PiB7XG4gICAgICAgICAgICB0LnBhcnRpYWxTaWduKHRoaXMucGF5ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBzaWduQWxsVmVyc2lvbmVkVHJhbnNhY3Rpb25zKHR4cykge1xuICAgICAgICByZXR1cm4gdHhzLm1hcCgodCkgPT4ge1xuICAgICAgICAgICAgdC5zaWduKFt0aGlzLnBheWVyXSk7XG4gICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBwdWJsaWNLZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBheWVyLnB1YmxpY0tleTtcbiAgICB9XG59XG5leHBvcnRzLldhbGxldCA9IFdhbGxldDtcbmZ1bmN0aW9uIGxvYWRLZXlwYWlyKHByaXZhdGVLZXkpIHtcbiAgICAvLyB0cnkgdG8gbG9hZCBwcml2YXRlS2V5IGFzIGEgZmlsZXBhdGhcbiAgICBsZXQgbG9hZGVkS2V5O1xuICAgIGlmIChmc18xLmRlZmF1bHQuZXhpc3RzU3luYyhwcml2YXRlS2V5KSkge1xuICAgICAgICBwcml2YXRlS2V5ID0gZnNfMS5kZWZhdWx0LnJlYWRGaWxlU3luYyhwcml2YXRlS2V5KS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAocHJpdmF0ZUtleS5pbmNsdWRlcygnWycpICYmIHByaXZhdGVLZXkuaW5jbHVkZXMoJ10nKSkge1xuICAgICAgICBsb2FkZWRLZXkgPSBVaW50OEFycmF5LmZyb20oSlNPTi5wYXJzZShwcml2YXRlS2V5KSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHByaXZhdGVLZXkuaW5jbHVkZXMoJywnKSkge1xuICAgICAgICBsb2FkZWRLZXkgPSBVaW50OEFycmF5LmZyb20ocHJpdmF0ZUtleS5zcGxpdCgnLCcpLm1hcCgodmFsKSA9PiBOdW1iZXIodmFsKSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcHJpdmF0ZUtleSA9IHByaXZhdGVLZXkucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgICAgICAgbG9hZGVkS2V5ID0gbmV3IFVpbnQ4QXJyYXkoYnM1OF8xLmRlZmF1bHQuZGVjb2RlKHByaXZhdGVLZXkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHdlYjNfanNfMS5LZXlwYWlyLmZyb21TZWNyZXRLZXkoVWludDhBcnJheS5mcm9tKGxvYWRlZEtleSkpO1xufVxuZXhwb3J0cy5sb2FkS2V5cGFpciA9IGxvYWRLZXlwYWlyO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvYWRLZXlwYWlyIiwiV2FsbGV0Iiwid2ViM19qc18xIiwicmVxdWlyZSIsImZzXzEiLCJiczU4XzEiLCJjb25zdHJ1Y3RvciIsInBheWVyIiwic2lnblRyYW5zYWN0aW9uIiwidHgiLCJwYXJ0aWFsU2lnbiIsInNpZ25WZXJzaW9uZWRUcmFuc2FjdGlvbiIsInNpZ24iLCJzaWduQWxsVHJhbnNhY3Rpb25zIiwidHhzIiwibWFwIiwidCIsInNpZ25BbGxWZXJzaW9uZWRUcmFuc2FjdGlvbnMiLCJwdWJsaWNLZXkiLCJwcml2YXRlS2V5IiwibG9hZGVkS2V5IiwiZGVmYXVsdCIsImV4aXN0c1N5bmMiLCJyZWFkRmlsZVN5bmMiLCJ0b1N0cmluZyIsImluY2x1ZGVzIiwiVWludDhBcnJheSIsImZyb20iLCJKU09OIiwicGFyc2UiLCJzcGxpdCIsInZhbCIsIk51bWJlciIsInJlcGxhY2UiLCJkZWNvZGUiLCJLZXlwYWlyIiwiZnJvbVNlY3JldEtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@drift-labs/sdk/lib/wallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/dlob/dlobIdl.json":
/*!************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/dlob/dlobIdl.json ***!
  \************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"version":"2.0.0","name":"dlob","instructions":[],"accounts":[],"types":[{"name":"DLOBOrders","type":{"vec":{"defined":"DLOBOrder"}}},{"name":"DLOBOrder","type":{"kind":"struct","fields":[{"name":"user","type":"publicKey"},{"name":"order","type":{"defined":"Order"}}]}},{"name":"Order","type":{"kind":"struct","fields":[{"name":"slot","type":"u64"},{"name":"price","type":"u64"},{"name":"baseAssetAmount","type":"u64"},{"name":"baseAssetAmountFilled","type":"u64"},{"name":"quoteAssetAmountFilled","type":"u64"},{"name":"triggerPrice","type":"u64"},{"name":"auctionStartPrice","type":"u64"},{"name":"auctionEndPrice","type":"u64"},{"name":"maxTs","type":"i64"},{"name":"oraclePriceOffset","type":"i32"},{"name":"orderId","type":"u32"},{"name":"marketIndex","type":"u16"},{"name":"status","type":{"defined":"OrderStatus"}},{"name":"orderType","type":{"defined":"OrderType"}},{"name":"marketType","type":{"defined":"MarketType"}},{"name":"userOrderId","type":"u8"},{"name":"existingPositionDirection","type":{"defined":"PositionDirection"}},{"name":"direction","type":{"defined":"PositionDirection"}},{"name":"reduceOnly","type":"bool"},{"name":"postOnly","type":"bool"},{"name":"immediateOrCancel","type":"bool"},{"name":"triggerCondition","type":{"defined":"OrderTriggerCondition"}},{"name":"auctionDuration","type":"u8"},{"name":"padding","type":{"array":["u8",3]}}]}},{"name":"OrderStatus","type":{"kind":"enum","variants":[{"name":"Init"},{"name":"Open"},{"name":"Filled"},{"name":"Canceled"}]}},{"name":"OrderType","type":{"kind":"enum","variants":[{"name":"Market"},{"name":"Limit"},{"name":"TriggerMarket"},{"name":"TriggerLimit"},{"name":"Oracle"}]}},{"name":"OrderTriggerCondition","type":{"kind":"enum","variants":[{"name":"Above"},{"name":"Below"},{"name":"TriggeredAbove"},{"name":"TriggeredBelow"}]}},{"name":"MarketType","type":{"kind":"enum","variants":[{"name":"Spot"},{"name":"Perp"}]}},{"name":"PositionDirection","type":{"kind":"enum","variants":[{"name":"Long"},{"name":"Short"}]}}],"events":[],"errors":[]}');

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/idl/drift.json":
/*!*********************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/idl/drift.json ***!
  \*********************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"version":"2.38.0","name":"drift","instructions":[{"name":"initializeUser","accounts":[{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"state","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"payer","isMut":true,"isSigner":true},{"name":"rent","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[{"name":"subAccountId","type":"u16"},{"name":"name","type":{"array":["u8",32]}}]},{"name":"initializeUserStats","accounts":[{"name":"userStats","isMut":true,"isSigner":false},{"name":"state","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"payer","isMut":true,"isSigner":true},{"name":"rent","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[]},{"name":"initializeReferrerName","accounts":[{"name":"referrerName","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"payer","isMut":true,"isSigner":true},{"name":"rent","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[{"name":"name","type":{"array":["u8",32]}}]},{"name":"deposit","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"spotMarketVault","isMut":true,"isSigner":false},{"name":"userTokenAccount","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"},{"name":"amount","type":"u64"},{"name":"reduceOnly","type":"bool"}]},{"name":"withdraw","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"spotMarketVault","isMut":true,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"userTokenAccount","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"},{"name":"amount","type":"u64"},{"name":"reduceOnly","type":"bool"}]},{"name":"transferDeposit","accounts":[{"name":"fromUser","isMut":true,"isSigner":false},{"name":"toUser","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarketVault","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"},{"name":"amount","type":"u64"}]},{"name":"placePerpOrder","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"params","type":{"defined":"OrderParams"}}]},{"name":"cancelOrder","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"orderId","type":{"option":"u32"}}]},{"name":"cancelOrderByUserId","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"userOrderId","type":"u8"}]},{"name":"cancelOrders","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"marketType","type":{"option":{"defined":"MarketType"}}},{"name":"marketIndex","type":{"option":"u16"}},{"name":"direction","type":{"option":{"defined":"PositionDirection"}}}]},{"name":"cancelOrdersByIds","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"orderIds","type":{"vec":"u32"}}]},{"name":"modifyOrder","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"orderId","type":{"option":"u32"}},{"name":"modifyOrderParams","type":{"defined":"ModifyOrderParams"}}]},{"name":"modifyOrderByUserId","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"userOrderId","type":"u8"},{"name":"modifyOrderParams","type":{"defined":"ModifyOrderParams"}}]},{"name":"placeAndTakePerpOrder","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"params","type":{"defined":"OrderParams"}},{"name":"makerOrderId","type":{"option":"u32"}}]},{"name":"placeAndMakePerpOrder","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"taker","isMut":true,"isSigner":false},{"name":"takerStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"params","type":{"defined":"OrderParams"}},{"name":"takerOrderId","type":"u32"}]},{"name":"placeSpotOrder","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"params","type":{"defined":"OrderParams"}}]},{"name":"placeAndTakeSpotOrder","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"params","type":{"defined":"OrderParams"}},{"name":"fulfillmentType","type":{"option":{"defined":"SpotFulfillmentType"}}},{"name":"makerOrderId","type":{"option":"u32"}}]},{"name":"placeAndMakeSpotOrder","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"taker","isMut":true,"isSigner":false},{"name":"takerStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"params","type":{"defined":"OrderParams"}},{"name":"takerOrderId","type":"u32"},{"name":"fulfillmentType","type":{"option":{"defined":"SpotFulfillmentType"}}}]},{"name":"placeOrders","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"params","type":{"vec":{"defined":"OrderParams"}}}]},{"name":"beginSwap","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"outSpotMarketVault","isMut":true,"isSigner":false},{"name":"inSpotMarketVault","isMut":true,"isSigner":false},{"name":"outTokenAccount","isMut":true,"isSigner":false},{"name":"inTokenAccount","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"instructions","isMut":false,"isSigner":false,"docs":["Instructions Sysvar for instruction introspection"]}],"args":[{"name":"inMarketIndex","type":"u16"},{"name":"outMarketIndex","type":"u16"},{"name":"amountIn","type":"u64"}]},{"name":"endSwap","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"outSpotMarketVault","isMut":true,"isSigner":false},{"name":"inSpotMarketVault","isMut":true,"isSigner":false},{"name":"outTokenAccount","isMut":true,"isSigner":false},{"name":"inTokenAccount","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"instructions","isMut":false,"isSigner":false,"docs":["Instructions Sysvar for instruction introspection"]}],"args":[{"name":"inMarketIndex","type":"u16"},{"name":"outMarketIndex","type":"u16"},{"name":"limitPrice","type":{"option":"u64"}},{"name":"reduceOnly","type":{"option":{"defined":"SwapReduceOnly"}}}]},{"name":"addPerpLpShares","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"nShares","type":"u64"},{"name":"marketIndex","type":"u16"}]},{"name":"removePerpLpShares","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"sharesToBurn","type":"u64"},{"name":"marketIndex","type":"u16"}]},{"name":"removePerpLpSharesInExpiringMarket","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false}],"args":[{"name":"sharesToBurn","type":"u64"},{"name":"marketIndex","type":"u16"}]},{"name":"updateUserName","accounts":[{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"subAccountId","type":"u16"},{"name":"name","type":{"array":["u8",32]}}]},{"name":"updateUserCustomMarginRatio","accounts":[{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"subAccountId","type":"u16"},{"name":"marginRatio","type":"u32"}]},{"name":"updateUserMarginTradingEnabled","accounts":[{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"subAccountId","type":"u16"},{"name":"marginTradingEnabled","type":"bool"}]},{"name":"updateUserDelegate","accounts":[{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"subAccountId","type":"u16"},{"name":"delegate","type":"publicKey"}]},{"name":"updateUserReduceOnly","accounts":[{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"subAccountId","type":"u16"},{"name":"reduceOnly","type":"bool"}]},{"name":"deleteUser","accounts":[{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"state","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[]},{"name":"fillPerpOrder","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"filler","isMut":true,"isSigner":false},{"name":"fillerStats","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false}],"args":[{"name":"orderId","type":{"option":"u32"}},{"name":"makerOrderId","type":{"option":"u32"}}]},{"name":"revertFill","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"filler","isMut":true,"isSigner":false},{"name":"fillerStats","isMut":true,"isSigner":false}],"args":[]},{"name":"fillSpotOrder","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"filler","isMut":true,"isSigner":false},{"name":"fillerStats","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false}],"args":[{"name":"orderId","type":{"option":"u32"}},{"name":"fulfillmentType","type":{"option":{"defined":"SpotFulfillmentType"}}},{"name":"makerOrderId","type":{"option":"u32"}}]},{"name":"triggerOrder","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"filler","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false}],"args":[{"name":"orderId","type":"u32"}]},{"name":"forceCancelOrders","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"filler","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false}],"args":[]},{"name":"updateUserIdle","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"filler","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false}],"args":[]},{"name":"updateUserOpenOrdersCount","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"filler","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false}],"args":[]},{"name":"adminDisableUpdatePerpBidAskTwap","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false}],"args":[{"name":"disable","type":"bool"}]},{"name":"settlePnl","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"spotMarketVault","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"}]},{"name":"settleFundingPayment","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false}],"args":[]},{"name":"settleLp","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"user","isMut":true,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"}]},{"name":"settleExpiredMarket","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"marketIndex","type":"u16"}]},{"name":"liquidatePerp","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"liquidator","isMut":true,"isSigner":false},{"name":"liquidatorStats","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"},{"name":"liquidatorMaxBaseAssetAmount","type":"u64"},{"name":"limitPrice","type":{"option":"u64"}}]},{"name":"liquidateSpot","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"liquidator","isMut":true,"isSigner":false},{"name":"liquidatorStats","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false}],"args":[{"name":"assetMarketIndex","type":"u16"},{"name":"liabilityMarketIndex","type":"u16"},{"name":"liquidatorMaxLiabilityTransfer","type":"u128"},{"name":"limitPrice","type":{"option":"u64"}}]},{"name":"liquidateBorrowForPerpPnl","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"liquidator","isMut":true,"isSigner":false},{"name":"liquidatorStats","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false}],"args":[{"name":"perpMarketIndex","type":"u16"},{"name":"spotMarketIndex","type":"u16"},{"name":"liquidatorMaxLiabilityTransfer","type":"u128"},{"name":"limitPrice","type":{"option":"u64"}}]},{"name":"liquidatePerpPnlForDeposit","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"liquidator","isMut":true,"isSigner":false},{"name":"liquidatorStats","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false}],"args":[{"name":"perpMarketIndex","type":"u16"},{"name":"spotMarketIndex","type":"u16"},{"name":"liquidatorMaxPnlTransfer","type":"u128"},{"name":"limitPrice","type":{"option":"u64"}}]},{"name":"resolvePerpPnlDeficit","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"spotMarketVault","isMut":true,"isSigner":false},{"name":"insuranceFundVault","isMut":true,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"spotMarketIndex","type":"u16"},{"name":"perpMarketIndex","type":"u16"}]},{"name":"resolvePerpBankruptcy","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"liquidator","isMut":true,"isSigner":false},{"name":"liquidatorStats","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"spotMarketVault","isMut":true,"isSigner":false},{"name":"insuranceFundVault","isMut":true,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"quoteSpotMarketIndex","type":"u16"},{"name":"marketIndex","type":"u16"}]},{"name":"resolveSpotBankruptcy","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"liquidator","isMut":true,"isSigner":false},{"name":"liquidatorStats","isMut":true,"isSigner":false},{"name":"user","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"spotMarketVault","isMut":true,"isSigner":false},{"name":"insuranceFundVault","isMut":true,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"}]},{"name":"settleRevenueToInsuranceFund","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false},{"name":"spotMarketVault","isMut":true,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"insuranceFundVault","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"spotMarketIndex","type":"u16"}]},{"name":"updateFundingRate","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false},{"name":"oracle","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"}]},{"name":"updatePerpBidAskTwap","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false},{"name":"oracle","isMut":false,"isSigner":false},{"name":"keeperStats","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[]},{"name":"updateSpotMarketCumulativeInterest","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false},{"name":"oracle","isMut":false,"isSigner":false},{"name":"spotMarketVault","isMut":false,"isSigner":false}],"args":[]},{"name":"updateAmms","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true}],"args":[{"name":"marketIndexes","type":{"array":["u16",5]}}]},{"name":"updateSpotMarketExpiry","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"expiryTs","type":"i64"}]},{"name":"updateUserQuoteAssetInsuranceStake","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":false,"isSigner":false},{"name":"insuranceFundStake","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"insuranceFundVault","isMut":true,"isSigner":false}],"args":[]},{"name":"initializeInsuranceFundStake","accounts":[{"name":"spotMarket","isMut":false,"isSigner":false},{"name":"insuranceFundStake","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"state","isMut":false,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"payer","isMut":true,"isSigner":true},{"name":"rent","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"}]},{"name":"addInsuranceFundStake","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":false,"isSigner":false},{"name":"insuranceFundStake","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"spotMarketVault","isMut":true,"isSigner":false},{"name":"insuranceFundVault","isMut":true,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"userTokenAccount","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"},{"name":"amount","type":"u64"}]},{"name":"requestRemoveInsuranceFundStake","accounts":[{"name":"spotMarket","isMut":false,"isSigner":false},{"name":"insuranceFundStake","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"insuranceFundVault","isMut":true,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"},{"name":"amount","type":"u64"}]},{"name":"cancelRequestRemoveInsuranceFundStake","accounts":[{"name":"spotMarket","isMut":false,"isSigner":false},{"name":"insuranceFundStake","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"insuranceFundVault","isMut":true,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"}]},{"name":"removeInsuranceFundStake","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":false,"isSigner":false},{"name":"insuranceFundStake","isMut":true,"isSigner":false},{"name":"userStats","isMut":true,"isSigner":false},{"name":"authority","isMut":false,"isSigner":true},{"name":"insuranceFundVault","isMut":true,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"userTokenAccount","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"}]},{"name":"initialize","accounts":[{"name":"admin","isMut":true,"isSigner":true},{"name":"state","isMut":true,"isSigner":false},{"name":"quoteAssetMint","isMut":false,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"rent","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[]},{"name":"initializeSpotMarket","accounts":[{"name":"spotMarket","isMut":true,"isSigner":false},{"name":"spotMarketMint","isMut":false,"isSigner":false},{"name":"spotMarketVault","isMut":true,"isSigner":false},{"name":"insuranceFundVault","isMut":true,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"state","isMut":true,"isSigner":false},{"name":"oracle","isMut":false,"isSigner":false},{"name":"admin","isMut":true,"isSigner":true},{"name":"rent","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"optimalUtilization","type":"u32"},{"name":"optimalBorrowRate","type":"u32"},{"name":"maxBorrowRate","type":"u32"},{"name":"oracleSource","type":{"defined":"OracleSource"}},{"name":"initialAssetWeight","type":"u32"},{"name":"maintenanceAssetWeight","type":"u32"},{"name":"initialLiabilityWeight","type":"u32"},{"name":"maintenanceLiabilityWeight","type":"u32"},{"name":"imfFactor","type":"u32"},{"name":"liquidatorFee","type":"u32"},{"name":"activeStatus","type":"bool"},{"name":"name","type":{"array":["u8",32]}}]},{"name":"initializeSerumFulfillmentConfig","accounts":[{"name":"baseSpotMarket","isMut":false,"isSigner":false},{"name":"quoteSpotMarket","isMut":false,"isSigner":false},{"name":"state","isMut":true,"isSigner":false},{"name":"serumProgram","isMut":false,"isSigner":false},{"name":"serumMarket","isMut":false,"isSigner":false},{"name":"serumOpenOrders","isMut":true,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"serumFulfillmentConfig","isMut":true,"isSigner":false},{"name":"admin","isMut":true,"isSigner":true},{"name":"rent","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"}]},{"name":"updateSerumFulfillmentConfigStatus","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"serumFulfillmentConfig","isMut":true,"isSigner":false},{"name":"admin","isMut":true,"isSigner":true}],"args":[{"name":"status","type":{"defined":"SpotFulfillmentConfigStatus"}}]},{"name":"initializePhoenixFulfillmentConfig","accounts":[{"name":"baseSpotMarket","isMut":false,"isSigner":false},{"name":"quoteSpotMarket","isMut":false,"isSigner":false},{"name":"state","isMut":true,"isSigner":false},{"name":"phoenixProgram","isMut":false,"isSigner":false},{"name":"phoenixMarket","isMut":false,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"phoenixFulfillmentConfig","isMut":true,"isSigner":false},{"name":"admin","isMut":true,"isSigner":true},{"name":"rent","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"}]},{"name":"phoenixFulfillmentConfigStatus","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"phoenixFulfillmentConfig","isMut":true,"isSigner":false},{"name":"admin","isMut":true,"isSigner":true}],"args":[{"name":"status","type":{"defined":"SpotFulfillmentConfigStatus"}}]},{"name":"updateSerumVault","accounts":[{"name":"state","isMut":true,"isSigner":false},{"name":"admin","isMut":true,"isSigner":true},{"name":"srmVault","isMut":false,"isSigner":false}],"args":[]},{"name":"initializePerpMarket","accounts":[{"name":"admin","isMut":true,"isSigner":true},{"name":"state","isMut":true,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false},{"name":"oracle","isMut":false,"isSigner":false},{"name":"rent","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"},{"name":"ammBaseAssetReserve","type":"u128"},{"name":"ammQuoteAssetReserve","type":"u128"},{"name":"ammPeriodicity","type":"i64"},{"name":"ammPegMultiplier","type":"u128"},{"name":"oracleSource","type":{"defined":"OracleSource"}},{"name":"marginRatioInitial","type":"u32"},{"name":"marginRatioMaintenance","type":"u32"},{"name":"liquidatorFee","type":"u32"},{"name":"activeStatus","type":"bool"},{"name":"name","type":{"array":["u8",32]}}]},{"name":"deleteInitializedPerpMarket","accounts":[{"name":"admin","isMut":true,"isSigner":true},{"name":"state","isMut":true,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"}]},{"name":"moveAmmPrice","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"baseAssetReserve","type":"u128"},{"name":"quoteAssetReserve","type":"u128"},{"name":"sqrtK","type":"u128"}]},{"name":"updatePerpMarketExpiry","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"expiryTs","type":"i64"}]},{"name":"settleExpiredMarketPoolsToRevenuePool","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"admin","isMut":false,"isSigner":true},{"name":"spotMarket","isMut":true,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[]},{"name":"depositIntoPerpMarketFeePool","accounts":[{"name":"state","isMut":true,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false},{"name":"admin","isMut":false,"isSigner":true},{"name":"sourceVault","isMut":true,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"quoteSpotMarket","isMut":true,"isSigner":false},{"name":"spotMarketVault","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"amount","type":"u64"}]},{"name":"depositIntoSpotMarketRevenuePool","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false},{"name":"authority","isMut":true,"isSigner":true},{"name":"spotMarketVault","isMut":true,"isSigner":false},{"name":"userTokenAccount","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"amount","type":"u64"}]},{"name":"repegAmmCurve","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false},{"name":"oracle","isMut":false,"isSigner":false},{"name":"admin","isMut":false,"isSigner":true}],"args":[{"name":"newPegCandidate","type":"u128"}]},{"name":"updatePerpMarketAmmOracleTwap","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false},{"name":"oracle","isMut":false,"isSigner":false},{"name":"admin","isMut":false,"isSigner":true}],"args":[]},{"name":"resetPerpMarketAmmOracleTwap","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false},{"name":"oracle","isMut":false,"isSigner":false},{"name":"admin","isMut":false,"isSigner":true}],"args":[]},{"name":"updateK","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false},{"name":"oracle","isMut":false,"isSigner":false}],"args":[{"name":"sqrtK","type":"u128"}]},{"name":"updatePerpMarketMarginRatio","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"marginRatioInitial","type":"u32"},{"name":"marginRatioMaintenance","type":"u32"}]},{"name":"updatePerpMarketMaxImbalances","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"unrealizedMaxImbalance","type":"u64"},{"name":"maxRevenueWithdrawPerPeriod","type":"u64"},{"name":"quoteMaxInsurance","type":"u64"}]},{"name":"updatePerpMarketLiquidationFee","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"liquidatorFee","type":"u32"},{"name":"ifLiquidationFee","type":"u32"}]},{"name":"updateInsuranceFundUnstakingPeriod","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"insuranceFundUnstakingPeriod","type":"i64"}]},{"name":"updateSpotMarketLiquidationFee","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"liquidatorFee","type":"u32"},{"name":"ifLiquidationFee","type":"u32"}]},{"name":"updateWithdrawGuardThreshold","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"withdrawGuardThreshold","type":"u64"}]},{"name":"updateSpotMarketIfFactor","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"spotMarketIndex","type":"u16"},{"name":"userIfFactor","type":"u32"},{"name":"totalIfFactor","type":"u32"}]},{"name":"updateSpotMarketRevenueSettlePeriod","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"revenueSettlePeriod","type":"i64"}]},{"name":"updateSpotMarketStatus","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"status","type":{"defined":"MarketStatus"}}]},{"name":"updateSpotMarketAssetTier","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"assetTier","type":{"defined":"AssetTier"}}]},{"name":"updateSpotMarketMarginWeights","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"initialAssetWeight","type":"u32"},{"name":"maintenanceAssetWeight","type":"u32"},{"name":"initialLiabilityWeight","type":"u32"},{"name":"maintenanceLiabilityWeight","type":"u32"},{"name":"imfFactor","type":"u32"}]},{"name":"updateSpotMarketBorrowRate","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"optimalUtilization","type":"u32"},{"name":"optimalBorrowRate","type":"u32"},{"name":"maxBorrowRate","type":"u32"}]},{"name":"updateSpotMarketMaxTokenDeposits","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"maxTokenDeposits","type":"u64"}]},{"name":"updateSpotMarketOracle","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false},{"name":"oracle","isMut":false,"isSigner":false}],"args":[{"name":"oracle","type":"publicKey"},{"name":"oracleSource","type":{"defined":"OracleSource"}}]},{"name":"updateSpotMarketStepSizeAndTickSize","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"stepSize","type":"u64"},{"name":"tickSize","type":"u64"}]},{"name":"updateSpotMarketMinOrderSize","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"orderSize","type":"u64"}]},{"name":"updateSpotMarketOrdersEnabled","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"ordersEnabled","type":"bool"}]},{"name":"updateSpotMarketName","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":true,"isSigner":false}],"args":[{"name":"name","type":{"array":["u8",32]}}]},{"name":"updatePerpMarketStatus","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"status","type":{"defined":"MarketStatus"}}]},{"name":"updatePerpMarketContractTier","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"contractTier","type":{"defined":"ContractTier"}}]},{"name":"updatePerpMarketImfFactor","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"imfFactor","type":"u32"},{"name":"unrealizedPnlImfFactor","type":"u32"}]},{"name":"updatePerpMarketUnrealizedAssetWeight","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"unrealizedInitialAssetWeight","type":"u32"},{"name":"unrealizedMaintenanceAssetWeight","type":"u32"}]},{"name":"updatePerpMarketConcentrationCoef","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"concentrationScale","type":"u128"}]},{"name":"updatePerpMarketCurveUpdateIntensity","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"curveUpdateIntensity","type":"u8"}]},{"name":"updatePerpMarketTargetBaseAssetAmountPerLp","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"targetBaseAssetAmountPerLp","type":"i32"}]},{"name":"updatePerpMarketPerLpBase","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"perLpBase","type":"i8"}]},{"name":"updateLpCooldownTime","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"lpCooldownTime","type":"u64"}]},{"name":"updatePerpFeeStructure","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"feeStructure","type":{"defined":"FeeStructure"}}]},{"name":"updateSpotFeeStructure","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"feeStructure","type":{"defined":"FeeStructure"}}]},{"name":"updateInitialPctToLiquidate","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"initialPctToLiquidate","type":"u16"}]},{"name":"updateLiquidationDuration","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"liquidationDuration","type":"u8"}]},{"name":"updateOracleGuardRails","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"oracleGuardRails","type":{"defined":"OracleGuardRails"}}]},{"name":"updateStateSettlementDuration","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"settlementDuration","type":"u16"}]},{"name":"updatePerpMarketOracle","accounts":[{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false},{"name":"oracle","isMut":false,"isSigner":false},{"name":"admin","isMut":false,"isSigner":true}],"args":[{"name":"oracle","type":"publicKey"},{"name":"oracleSource","type":{"defined":"OracleSource"}}]},{"name":"updatePerpMarketBaseSpread","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"baseSpread","type":"u32"}]},{"name":"updateAmmJitIntensity","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"ammJitIntensity","type":"u8"}]},{"name":"updatePerpMarketMaxSpread","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"maxSpread","type":"u32"}]},{"name":"updatePerpMarketStepSizeAndTickSize","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"stepSize","type":"u64"},{"name":"tickSize","type":"u64"}]},{"name":"updatePerpMarketName","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"name","type":{"array":["u8",32]}}]},{"name":"updatePerpMarketMinOrderSize","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"orderSize","type":"u64"}]},{"name":"updatePerpMarketMaxSlippageRatio","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"maxSlippageRatio","type":"u16"}]},{"name":"updatePerpMarketMaxFillReserveFraction","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"maxFillReserveFraction","type":"u16"}]},{"name":"updatePerpMarketMaxOpenInterest","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"perpMarket","isMut":true,"isSigner":false}],"args":[{"name":"maxOpenInterest","type":"u128"}]},{"name":"updateAdmin","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"admin","type":"publicKey"}]},{"name":"updateWhitelistMint","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"whitelistMint","type":"publicKey"}]},{"name":"updateDiscountMint","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"discountMint","type":"publicKey"}]},{"name":"updateExchangeStatus","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"exchangeStatus","type":"u8"}]},{"name":"updatePerpAuctionDuration","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"minPerpAuctionDuration","type":"u8"}]},{"name":"updateSpotAuctionDuration","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":true,"isSigner":false}],"args":[{"name":"defaultSpotAuctionDuration","type":"u8"}]},{"name":"adminRemoveInsuranceFundStake","accounts":[{"name":"admin","isMut":false,"isSigner":true},{"name":"state","isMut":false,"isSigner":false},{"name":"spotMarket","isMut":false,"isSigner":false},{"name":"insuranceFundVault","isMut":true,"isSigner":false},{"name":"driftSigner","isMut":false,"isSigner":false},{"name":"adminTokenAccount","isMut":true,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"marketIndex","type":"u16"},{"name":"amount","type":"u64"}]}],"accounts":[{"name":"PhoenixV1FulfillmentConfig","type":{"kind":"struct","fields":[{"name":"pubkey","type":"publicKey"},{"name":"phoenixProgramId","type":"publicKey"},{"name":"phoenixLogAuthority","type":"publicKey"},{"name":"phoenixMarket","type":"publicKey"},{"name":"phoenixBaseVault","type":"publicKey"},{"name":"phoenixQuoteVault","type":"publicKey"},{"name":"marketIndex","type":"u16"},{"name":"fulfillmentType","type":{"defined":"SpotFulfillmentType"}},{"name":"status","type":{"defined":"SpotFulfillmentConfigStatus"}},{"name":"padding","type":{"array":["u8",4]}}]}},{"name":"SerumV3FulfillmentConfig","type":{"kind":"struct","fields":[{"name":"pubkey","type":"publicKey"},{"name":"serumProgramId","type":"publicKey"},{"name":"serumMarket","type":"publicKey"},{"name":"serumRequestQueue","type":"publicKey"},{"name":"serumEventQueue","type":"publicKey"},{"name":"serumBids","type":"publicKey"},{"name":"serumAsks","type":"publicKey"},{"name":"serumBaseVault","type":"publicKey"},{"name":"serumQuoteVault","type":"publicKey"},{"name":"serumOpenOrders","type":"publicKey"},{"name":"serumSignerNonce","type":"u64"},{"name":"marketIndex","type":"u16"},{"name":"fulfillmentType","type":{"defined":"SpotFulfillmentType"}},{"name":"status","type":{"defined":"SpotFulfillmentConfigStatus"}},{"name":"padding","type":{"array":["u8",4]}}]}},{"name":"InsuranceFundStake","type":{"kind":"struct","fields":[{"name":"authority","type":"publicKey"},{"name":"ifShares","type":"u128"},{"name":"lastWithdrawRequestShares","type":"u128"},{"name":"ifBase","type":"u128"},{"name":"lastValidTs","type":"i64"},{"name":"lastWithdrawRequestValue","type":"u64"},{"name":"lastWithdrawRequestTs","type":"i64"},{"name":"costBasis","type":"i64"},{"name":"marketIndex","type":"u16"},{"name":"padding","type":{"array":["u8",14]}}]}},{"name":"PerpMarket","type":{"kind":"struct","fields":[{"name":"pubkey","docs":["The perp market\'s address. It is a pda of the market index"],"type":"publicKey"},{"name":"amm","docs":["The automated market maker"],"type":{"defined":"AMM"}},{"name":"pnlPool","docs":["The market\'s pnl pool. When users settle negative pnl, the balance increases.","When users settle positive pnl, the balance decreases. Can not go negative."],"type":{"defined":"PoolBalance"}},{"name":"name","docs":["Encoded display name for the perp market e.g. SOL-PERP"],"type":{"array":["u8",32]}},{"name":"insuranceClaim","docs":["The perp market\'s claim on the insurance fund"],"type":{"defined":"InsuranceClaim"}},{"name":"unrealizedPnlMaxImbalance","docs":["The max pnl imbalance before positive pnl asset weight is discounted","pnl imbalance is the difference between long and short pnl. When it\'s greater than 0,","the amm has negative pnl and the initial asset weight for positive pnl is discounted","precision = QUOTE_PRECISION"],"type":"u64"},{"name":"expiryTs","docs":["The ts when the market will be expired. Only set if market is in reduce only mode"],"type":"i64"},{"name":"expiryPrice","docs":["The price at which positions will be settled. Only set if market is expired","precision = PRICE_PRECISION"],"type":"i64"},{"name":"nextFillRecordId","docs":["Every trade has a fill record id. This is the next id to be used"],"type":"u64"},{"name":"nextFundingRateRecordId","docs":["Every funding rate update has a record id. This is the next id to be used"],"type":"u64"},{"name":"nextCurveRecordId","docs":["Every amm k updated has a record id. This is the next id to be used"],"type":"u64"},{"name":"imfFactor","docs":["The initial margin fraction factor. Used to increase margin ratio for large positions","precision: MARGIN_PRECISION"],"type":"u32"},{"name":"unrealizedPnlImfFactor","docs":["The imf factor for unrealized pnl. Used to discount asset weight for large positive pnl","precision: MARGIN_PRECISION"],"type":"u32"},{"name":"liquidatorFee","docs":["The fee the liquidator is paid for taking over perp position","precision: LIQUIDATOR_FEE_PRECISION"],"type":"u32"},{"name":"ifLiquidationFee","docs":["The fee the insurance fund receives from liquidation","precision: LIQUIDATOR_FEE_PRECISION"],"type":"u32"},{"name":"marginRatioInitial","docs":["The margin ratio which determines how much collateral is required to open a position","e.g. margin ratio of .1 means a user must have $100 of total collateral to open a $1000 position","precision: MARGIN_PRECISION"],"type":"u32"},{"name":"marginRatioMaintenance","docs":["The margin ratio which determines when a user will be liquidated","e.g. margin ratio of .05 means a user must have $50 of total collateral to maintain a $1000 position","else they will be liquidated","precision: MARGIN_PRECISION"],"type":"u32"},{"name":"unrealizedPnlInitialAssetWeight","docs":["The initial asset weight for positive pnl. Negative pnl always has an asset weight of 1","precision: SPOT_WEIGHT_PRECISION"],"type":"u32"},{"name":"unrealizedPnlMaintenanceAssetWeight","docs":["The maintenance asset weight for positive pnl. Negative pnl always has an asset weight of 1","precision: SPOT_WEIGHT_PRECISION"],"type":"u32"},{"name":"numberOfUsersWithBase","docs":["number of users in a position (base)"],"type":"u32"},{"name":"numberOfUsers","docs":["number of users in a position (pnl) or pnl (quote)"],"type":"u32"},{"name":"marketIndex","type":"u16"},{"name":"status","docs":["Whether a market is active, reduce only, expired, etc","Affects whether users can open/close positions"],"type":{"defined":"MarketStatus"}},{"name":"contractType","docs":["Currently only Perpetual markets are supported"],"type":{"defined":"ContractType"}},{"name":"contractTier","docs":["The contract tier determines how much insurance a market can receive, with more speculative markets receiving less insurance","It also influences the order perp markets can be liquidated, with less speculative markets being liquidated first"],"type":{"defined":"ContractTier"}},{"name":"padding1","type":"bool"},{"name":"quoteSpotMarketIndex","docs":["The spot market that pnl is settled in"],"type":"u16"},{"name":"padding","type":{"array":["u8",48]}}]}},{"name":"SpotMarket","type":{"kind":"struct","fields":[{"name":"pubkey","docs":["The address of the spot market. It is a pda of the market index"],"type":"publicKey"},{"name":"oracle","docs":["The oracle used to price the markets deposits/borrows"],"type":"publicKey"},{"name":"mint","docs":["The token mint of the market"],"type":"publicKey"},{"name":"vault","docs":["The vault used to store the market\'s deposits","The amount in the vault should be equal to or greater than deposits - borrows"],"type":"publicKey"},{"name":"name","docs":["The encoded display name fo the market e.g. SOL"],"type":{"array":["u8",32]}},{"name":"historicalOracleData","type":{"defined":"HistoricalOracleData"}},{"name":"historicalIndexData","type":{"defined":"HistoricalIndexData"}},{"name":"revenuePool","docs":["Revenue the protocol has collected in this markets token","e.g. for SOL-PERP, funds can be settled in usdc and will flow into the USDC revenue pool"],"type":{"defined":"PoolBalance"}},{"name":"spotFeePool","docs":["The fees collected from swaps between this market and the quote market","Is settled to the quote markets revenue pool"],"type":{"defined":"PoolBalance"}},{"name":"insuranceFund","docs":["Details on the insurance fund covering bankruptcies in this markets token","Covers bankruptcies for borrows with this markets token and perps settling in this markets token"],"type":{"defined":"InsuranceFund"}},{"name":"totalSpotFee","docs":["The total spot fees collected for this market","precision: QUOTE_PRECISION"],"type":"u128"},{"name":"depositBalance","docs":["The sum of the scaled balances for deposits across users and pool balances","To convert to the deposit token amount, multiply by the cumulative deposit interest","precision: SPOT_BALANCE_PRECISION"],"type":"u128"},{"name":"borrowBalance","docs":["The sum of the scaled balances for borrows across users and pool balances","To convert to the borrow token amount, multiply by the cumulative borrow interest","precision: SPOT_BALANCE_PRECISION"],"type":"u128"},{"name":"cumulativeDepositInterest","docs":["The cumulative interest earned by depositors","Used to calculate the deposit token amount from the deposit balance","precision: SPOT_CUMULATIVE_INTEREST_PRECISION"],"type":"u128"},{"name":"cumulativeBorrowInterest","docs":["The cumulative interest earned by borrowers","Used to calculate the borrow token amount from the borrow balance","precision: SPOT_CUMULATIVE_INTEREST_PRECISION"],"type":"u128"},{"name":"totalSocialLoss","docs":["The total socialized loss from borrows, in the mint\'s token","precision: token mint precision"],"type":"u128"},{"name":"totalQuoteSocialLoss","docs":["The total socialized loss from borrows, in the quote market\'s token","preicision: QUOTE_PRECISION"],"type":"u128"},{"name":"withdrawGuardThreshold","docs":["no withdraw limits/guards when deposits below this threshold","precision: token mint precision"],"type":"u64"},{"name":"maxTokenDeposits","docs":["The max amount of token deposits in this market","0 if there is no limit","precision: token mint precision"],"type":"u64"},{"name":"depositTokenTwap","docs":["24hr average of deposit token amount","precision: token mint precision"],"type":"u64"},{"name":"borrowTokenTwap","docs":["24hr average of borrow token amount","precision: token mint precision"],"type":"u64"},{"name":"utilizationTwap","docs":["24hr average of utilization","which is borrow amount over token amount","precision: SPOT_UTILIZATION_PRECISION"],"type":"u64"},{"name":"lastInterestTs","docs":["Last time the cumulative deposit and borrow interest was updated"],"type":"u64"},{"name":"lastTwapTs","docs":["Last time the deposit/borrow/utilization averages were updated"],"type":"u64"},{"name":"expiryTs","docs":["The time the market is set to expire. Only set if market is in reduce only mode"],"type":"i64"},{"name":"orderStepSize","docs":["Spot orders must be a multiple of the step size","precision: token mint precision"],"type":"u64"},{"name":"orderTickSize","docs":["Spot orders must be a multiple of the tick size","precision: PRICE_PRECISION"],"type":"u64"},{"name":"minOrderSize","docs":["The minimum order size","precision: token mint precision"],"type":"u64"},{"name":"maxPositionSize","docs":["The maximum spot position size","if the limit is 0, there is no limit","precision: token mint precision"],"type":"u64"},{"name":"nextFillRecordId","docs":["Every spot trade has a fill record id. This is the next id to use"],"type":"u64"},{"name":"nextDepositRecordId","docs":["Every deposit has a deposit record id. This is the next id to use"],"type":"u64"},{"name":"initialAssetWeight","docs":["The initial asset weight used to calculate a deposits contribution to a users initial total collateral","e.g. if the asset weight is .8, $100 of deposits contributes $80 to the users initial total collateral","precision: SPOT_WEIGHT_PRECISION"],"type":"u32"},{"name":"maintenanceAssetWeight","docs":["The maintenance asset weight used to calculate a deposits contribution to a users maintenance total collateral","e.g. if the asset weight is .9, $100 of deposits contributes $90 to the users maintenance total collateral","precision: SPOT_WEIGHT_PRECISION"],"type":"u32"},{"name":"initialLiabilityWeight","docs":["The initial liability weight used to calculate a borrows contribution to a users initial margin requirement","e.g. if the liability weight is .9, $100 of borrows contributes $90 to the users initial margin requirement","precision: SPOT_WEIGHT_PRECISION"],"type":"u32"},{"name":"maintenanceLiabilityWeight","docs":["The maintenance liability weight used to calculate a borrows contribution to a users maintenance margin requirement","e.g. if the liability weight is .8, $100 of borrows contributes $80 to the users maintenance margin requirement","precision: SPOT_WEIGHT_PRECISION"],"type":"u32"},{"name":"imfFactor","docs":["The initial margin fraction factor. Used to increase liability weight/decrease asset weight for large positions","precision: MARGIN_PRECISION"],"type":"u32"},{"name":"liquidatorFee","docs":["The fee the liquidator is paid for taking over borrow/deposit","precision: LIQUIDATOR_FEE_PRECISION"],"type":"u32"},{"name":"ifLiquidationFee","docs":["The fee the insurance fund receives from liquidation","precision: LIQUIDATOR_FEE_PRECISION"],"type":"u32"},{"name":"optimalUtilization","docs":["The optimal utilization rate for this market.","Used to determine the markets borrow rate","precision: SPOT_UTILIZATION_PRECISION"],"type":"u32"},{"name":"optimalBorrowRate","docs":["The borrow rate for this market when the market has optimal utilization","precision: SPOT_RATE_PRECISION"],"type":"u32"},{"name":"maxBorrowRate","docs":["The borrow rate for this market when the market has 1000 utilization","precision: SPOT_RATE_PRECISION"],"type":"u32"},{"name":"decimals","docs":["The market\'s token mint\'s decimals. To from decimals to a precision, 10^decimals"],"type":"u32"},{"name":"marketIndex","type":"u16"},{"name":"ordersEnabled","docs":["Whether or not spot trading is enabled"],"type":"bool"},{"name":"oracleSource","type":{"defined":"OracleSource"}},{"name":"status","type":{"defined":"MarketStatus"}},{"name":"assetTier","docs":["The asset tier affects how a deposit can be used as collateral and the priority for a borrow being liquidated"],"type":{"defined":"AssetTier"}},{"name":"padding1","type":{"array":["u8",6]}},{"name":"flashLoanAmount","docs":["For swaps, the amount of token loaned out in the begin_swap ix","precision: token mint precision"],"type":"u64"},{"name":"flashLoanInitialTokenAmount","docs":["For swaps, the amount in the users token account in the begin_swap ix","Used to calculate how much of the token left the system in end_swap ix","precision: token mint precision"],"type":"u64"},{"name":"totalSwapFee","docs":["The total fees received from swaps","precision: token mint precision"],"type":"u64"},{"name":"padding","type":{"array":["u8",56]}}]}},{"name":"State","type":{"kind":"struct","fields":[{"name":"admin","type":"publicKey"},{"name":"whitelistMint","type":"publicKey"},{"name":"discountMint","type":"publicKey"},{"name":"signer","type":"publicKey"},{"name":"srmVault","type":"publicKey"},{"name":"perpFeeStructure","type":{"defined":"FeeStructure"}},{"name":"spotFeeStructure","type":{"defined":"FeeStructure"}},{"name":"oracleGuardRails","type":{"defined":"OracleGuardRails"}},{"name":"numberOfAuthorities","type":"u64"},{"name":"numberOfSubAccounts","type":"u64"},{"name":"lpCooldownTime","type":"u64"},{"name":"liquidationMarginBufferRatio","type":"u32"},{"name":"settlementDuration","type":"u16"},{"name":"numberOfMarkets","type":"u16"},{"name":"numberOfSpotMarkets","type":"u16"},{"name":"signerNonce","type":"u8"},{"name":"minPerpAuctionDuration","type":"u8"},{"name":"defaultMarketOrderTimeInForce","type":"u8"},{"name":"defaultSpotAuctionDuration","type":"u8"},{"name":"exchangeStatus","type":"u8"},{"name":"liquidationDuration","type":"u8"},{"name":"initialPctToLiquidate","type":"u16"},{"name":"padding","type":{"array":["u8",14]}}]}},{"name":"User","type":{"kind":"struct","fields":[{"name":"authority","docs":["The owner/authority of the account"],"type":"publicKey"},{"name":"delegate","docs":["An addresses that can control the account on the authority\'s behalf. Has limited power, cant withdraw"],"type":"publicKey"},{"name":"name","docs":["Encoded display name e.g. \\"toly\\""],"type":{"array":["u8",32]}},{"name":"spotPositions","docs":["The user\'s spot positions"],"type":{"array":[{"defined":"SpotPosition"},8]}},{"name":"perpPositions","docs":["The user\'s perp positions"],"type":{"array":[{"defined":"PerpPosition"},8]}},{"name":"orders","docs":["The user\'s orders"],"type":{"array":[{"defined":"Order"},32]}},{"name":"lastAddPerpLpSharesTs","docs":["The last time the user added perp lp positions"],"type":"i64"},{"name":"totalDeposits","docs":["The total values of deposits the user has made","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"totalWithdraws","docs":["The total values of withdrawals the user has made","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"totalSocialLoss","docs":["The total socialized loss the users has incurred upon the protocol","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"settledPerpPnl","docs":["Fees (taker fees, maker rebate, referrer reward, filler reward) and pnl for perps","precision: QUOTE_PRECISION"],"type":"i64"},{"name":"cumulativeSpotFees","docs":["Fees (taker fees, maker rebate, filler reward) for spot","precision: QUOTE_PRECISION"],"type":"i64"},{"name":"cumulativePerpFunding","docs":["Cumulative funding paid/received for perps","precision: QUOTE_PRECISION"],"type":"i64"},{"name":"liquidationMarginFreed","docs":["The amount of margin freed during liquidation. Used to force the liquidation to occur over a period of time","Defaults to zero when not being liquidated","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"lastActiveSlot","docs":["The last slot a user was active. Used to determine if a user is idle"],"type":"u64"},{"name":"nextOrderId","docs":["Every user order has an order id. This is the next order id to be used"],"type":"u32"},{"name":"maxMarginRatio","docs":["Custom max initial margin ratio for the user"],"type":"u32"},{"name":"nextLiquidationId","docs":["The next liquidation id to be used for user"],"type":"u16"},{"name":"subAccountId","docs":["The sub account id for this user"],"type":"u16"},{"name":"status","docs":["Whether the user is active, being liquidated or bankrupt"],"type":{"defined":"UserStatus"}},{"name":"isMarginTradingEnabled","docs":["Whether the user has enabled margin trading"],"type":"bool"},{"name":"idle","docs":["User is idle if they haven\'t interacted with the protocol in 1 week and they have no orders, perp positions or borrows","Off-chain keeper bots can ignore users that are idle"],"type":"bool"},{"name":"openOrders","docs":["number of open orders"],"type":"u8"},{"name":"hasOpenOrder","docs":["Whether or not user has open order"],"type":"bool"},{"name":"openAuctions","docs":["number of open orders with auction"],"type":"u8"},{"name":"hasOpenAuction","docs":["Whether or not user has open order with auction"],"type":"bool"},{"name":"padding","type":{"array":["u8",21]}}]}},{"name":"UserStats","type":{"kind":"struct","fields":[{"name":"authority","docs":["The authority for all of a users sub accounts"],"type":"publicKey"},{"name":"referrer","docs":["The address that referred this user"],"type":"publicKey"},{"name":"fees","docs":["Stats on the fees paid by the user"],"type":{"defined":"UserFees"}},{"name":"nextEpochTs","docs":["The timestamp of the next epoch","Epoch is used to limit referrer rewards earned in single epoch"],"type":"i64"},{"name":"makerVolume30d","docs":["Rolling 30day maker volume for user","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"takerVolume30d","docs":["Rolling 30day taker volume for user","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"fillerVolume30d","docs":["Rolling 30day filler volume for user","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"lastMakerVolume30dTs","docs":["last time the maker volume was updated"],"type":"i64"},{"name":"lastTakerVolume30dTs","docs":["last time the taker volume was updated"],"type":"i64"},{"name":"lastFillerVolume30dTs","docs":["last time the filler volume was updated"],"type":"i64"},{"name":"ifStakedQuoteAssetAmount","docs":["The amount of tokens staked in the quote spot markets if"],"type":"u64"},{"name":"numberOfSubAccounts","docs":["The current number of sub accounts"],"type":"u16"},{"name":"numberOfSubAccountsCreated","docs":["The number of sub accounts created. Can be greater than the number of sub accounts if user","has deleted sub accounts"],"type":"u16"},{"name":"isReferrer","docs":["Whether the user is a referrer. Sub account 0 can not be deleted if user is a referrer"],"type":"bool"},{"name":"disableUpdatePerpBidAskTwap","type":"bool"},{"name":"padding","type":{"array":["u8",50]}}]}},{"name":"ReferrerName","type":{"kind":"struct","fields":[{"name":"authority","type":"publicKey"},{"name":"user","type":"publicKey"},{"name":"userStats","type":"publicKey"},{"name":"name","type":{"array":["u8",32]}}]}}],"types":[{"name":"OrderParams","type":{"kind":"struct","fields":[{"name":"orderType","type":{"defined":"OrderType"}},{"name":"marketType","type":{"defined":"MarketType"}},{"name":"direction","type":{"defined":"PositionDirection"}},{"name":"userOrderId","type":"u8"},{"name":"baseAssetAmount","type":"u64"},{"name":"price","type":"u64"},{"name":"marketIndex","type":"u16"},{"name":"reduceOnly","type":"bool"},{"name":"postOnly","type":{"defined":"PostOnlyParam"}},{"name":"immediateOrCancel","type":"bool"},{"name":"maxTs","type":{"option":"i64"}},{"name":"triggerPrice","type":{"option":"u64"}},{"name":"triggerCondition","type":{"defined":"OrderTriggerCondition"}},{"name":"oraclePriceOffset","type":{"option":"i32"}},{"name":"auctionDuration","type":{"option":"u8"}},{"name":"auctionStartPrice","type":{"option":"i64"}},{"name":"auctionEndPrice","type":{"option":"i64"}}]}},{"name":"ModifyOrderParams","type":{"kind":"struct","fields":[{"name":"direction","type":{"option":{"defined":"PositionDirection"}}},{"name":"baseAssetAmount","type":{"option":"u64"}},{"name":"price","type":{"option":"u64"}},{"name":"reduceOnly","type":{"option":"bool"}},{"name":"postOnly","type":{"option":{"defined":"PostOnlyParam"}}},{"name":"immediateOrCancel","type":{"option":"bool"}},{"name":"maxTs","type":{"option":"i64"}},{"name":"triggerPrice","type":{"option":"u64"}},{"name":"triggerCondition","type":{"option":{"defined":"OrderTriggerCondition"}}},{"name":"oraclePriceOffset","type":{"option":"i32"}},{"name":"auctionDuration","type":{"option":"u8"}},{"name":"auctionStartPrice","type":{"option":"i64"}},{"name":"auctionEndPrice","type":{"option":"i64"}},{"name":"policy","type":{"option":{"defined":"ModifyOrderPolicy"}}}]}},{"name":"LiquidatePerpRecord","type":{"kind":"struct","fields":[{"name":"marketIndex","type":"u16"},{"name":"oraclePrice","type":"i64"},{"name":"baseAssetAmount","type":"i64"},{"name":"quoteAssetAmount","type":"i64"},{"name":"lpShares","type":"u64"},{"name":"fillRecordId","type":"u64"},{"name":"userOrderId","type":"u32"},{"name":"liquidatorOrderId","type":"u32"},{"name":"liquidatorFee","type":"u64"},{"name":"ifFee","type":"u64"}]}},{"name":"LiquidateSpotRecord","type":{"kind":"struct","fields":[{"name":"assetMarketIndex","type":"u16"},{"name":"assetPrice","type":"i64"},{"name":"assetTransfer","type":"u128"},{"name":"liabilityMarketIndex","type":"u16"},{"name":"liabilityPrice","type":"i64"},{"name":"liabilityTransfer","type":"u128"},{"name":"ifFee","type":"u64"}]}},{"name":"LiquidateBorrowForPerpPnlRecord","type":{"kind":"struct","fields":[{"name":"perpMarketIndex","type":"u16"},{"name":"marketOraclePrice","type":"i64"},{"name":"pnlTransfer","type":"u128"},{"name":"liabilityMarketIndex","type":"u16"},{"name":"liabilityPrice","type":"i64"},{"name":"liabilityTransfer","type":"u128"}]}},{"name":"LiquidatePerpPnlForDepositRecord","type":{"kind":"struct","fields":[{"name":"perpMarketIndex","type":"u16"},{"name":"marketOraclePrice","type":"i64"},{"name":"pnlTransfer","type":"u128"},{"name":"assetMarketIndex","type":"u16"},{"name":"assetPrice","type":"i64"},{"name":"assetTransfer","type":"u128"}]}},{"name":"PerpBankruptcyRecord","type":{"kind":"struct","fields":[{"name":"marketIndex","type":"u16"},{"name":"pnl","type":"i128"},{"name":"ifPayment","type":"u128"},{"name":"clawbackUser","type":{"option":"publicKey"}},{"name":"clawbackUserPayment","type":{"option":"u128"}},{"name":"cumulativeFundingRateDelta","type":"i128"}]}},{"name":"SpotBankruptcyRecord","type":{"kind":"struct","fields":[{"name":"marketIndex","type":"u16"},{"name":"borrowAmount","type":"u128"},{"name":"ifPayment","type":"u128"},{"name":"cumulativeDepositInterestDelta","type":"u128"}]}},{"name":"HistoricalOracleData","type":{"kind":"struct","fields":[{"name":"lastOraclePrice","docs":["precision: PRICE_PRECISION"],"type":"i64"},{"name":"lastOracleConf","docs":["precision: PRICE_PRECISION"],"type":"u64"},{"name":"lastOracleDelay","type":"i64"},{"name":"lastOraclePriceTwap","docs":["precision: PRICE_PRECISION"],"type":"i64"},{"name":"lastOraclePriceTwap5min","docs":["precision: PRICE_PRECISION"],"type":"i64"},{"name":"lastOraclePriceTwapTs","type":"i64"}]}},{"name":"HistoricalIndexData","type":{"kind":"struct","fields":[{"name":"lastIndexBidPrice","docs":["precision: PRICE_PRECISION"],"type":"u64"},{"name":"lastIndexAskPrice","docs":["precision: PRICE_PRECISION"],"type":"u64"},{"name":"lastIndexPriceTwap","docs":["precision: PRICE_PRECISION"],"type":"u64"},{"name":"lastIndexPriceTwap5min","docs":["precision: PRICE_PRECISION"],"type":"u64"},{"name":"lastIndexPriceTwapTs","type":"i64"}]}},{"name":"InsuranceClaim","type":{"kind":"struct","fields":[{"name":"revenueWithdrawSinceLastSettle","docs":["The amount of revenue last settled","Positive if funds left the perp market,","negative if funds were pulled into the perp market","precision: QUOTE_PRECISION"],"type":"i64"},{"name":"maxRevenueWithdrawPerPeriod","docs":["The max amount of revenue that can be withdrawn per period","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"quoteMaxInsurance","docs":["The max amount of insurance that perp market can use to resolve bankruptcy and pnl deficits","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"quoteSettledInsurance","docs":["The amount of insurance that has been used to resolve bankruptcy and pnl deficits","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"lastRevenueWithdrawTs","docs":["The last time revenue was settled in/out of market"],"type":"i64"}]}},{"name":"PoolBalance","type":{"kind":"struct","fields":[{"name":"scaledBalance","docs":["To get the pool\'s token amount, you must multiply the scaled balance by the market\'s cumulative","deposit interest","precision: SPOT_BALANCE_PRECISION"],"type":"u128"},{"name":"marketIndex","docs":["The spot market the pool is for"],"type":"u16"},{"name":"padding","type":{"array":["u8",6]}}]}},{"name":"AMM","type":{"kind":"struct","fields":[{"name":"oracle","docs":["oracle price data public key"],"type":"publicKey"},{"name":"historicalOracleData","docs":["stores historically witnessed oracle data"],"type":{"defined":"HistoricalOracleData"}},{"name":"baseAssetAmountPerLp","docs":["accumulated base asset amount since inception per lp share"],"type":"i128"},{"name":"quoteAssetAmountPerLp","docs":["accumulated quote asset amount since inception per lp share"],"type":"i128"},{"name":"feePool","docs":["partition of fees from perp market trading moved from pnl settlements"],"type":{"defined":"PoolBalance"}},{"name":"baseAssetReserve","docs":["`x` reserves for constant product mm formula (x * y = k)"],"type":"u128"},{"name":"quoteAssetReserve","docs":["`y` reserves for constant product mm formula (x * y = k)"],"type":"u128"},{"name":"concentrationCoef","docs":["determines how close the min/max base asset reserve sit vs base reserves","allow for decreasing slippage without increasing liquidity and v.v."],"type":"u128"},{"name":"minBaseAssetReserve","docs":["minimum base_asset_reserve allowed before AMM is unavailable"],"type":"u128"},{"name":"maxBaseAssetReserve","docs":["maximum base_asset_reserve allowed before AMM is unavailable"],"type":"u128"},{"name":"sqrtK","docs":["`sqrt(k)` in constant product mm formula (x * y = k). stored to avoid drift caused by integer math issues"],"type":"u128"},{"name":"pegMultiplier","docs":["normalizing numerical factor for y, its use offers lowest slippage in cp-curve when market is balanced"],"type":"u128"},{"name":"terminalQuoteAssetReserve","docs":["y when market is balanced. stored to save computation"],"type":"u128"},{"name":"baseAssetAmountLong","docs":["tracks number of total longs in market (regardless of counterparty)"],"type":"i128"},{"name":"baseAssetAmountShort","docs":["tracks number of total shorts in market (regardless of counterparty)"],"type":"i128"},{"name":"baseAssetAmountWithAmm","docs":["tracks net position (longs-shorts) in market with AMM as counterparty"],"type":"i128"},{"name":"baseAssetAmountWithUnsettledLp","docs":["tracks net position (longs-shorts) in market with LPs as counterparty"],"type":"i128"},{"name":"maxOpenInterest","docs":["max allowed open interest, blocks trades that breach this value"],"type":"u128"},{"name":"quoteAssetAmount","docs":["sum of all user\'s perp quote_asset_amount in market"],"type":"i128"},{"name":"quoteEntryAmountLong","docs":["sum of all long user\'s quote_entry_amount in market"],"type":"i128"},{"name":"quoteEntryAmountShort","docs":["sum of all short user\'s quote_entry_amount in market"],"type":"i128"},{"name":"quoteBreakEvenAmountLong","docs":["sum of all long user\'s quote_break_even_amount in market"],"type":"i128"},{"name":"quoteBreakEvenAmountShort","docs":["sum of all short user\'s quote_break_even_amount in market"],"type":"i128"},{"name":"userLpShares","docs":["total user lp shares of sqrt_k (protocol owned liquidity = sqrt_k - last_funding_rate)"],"type":"u128"},{"name":"lastFundingRate","docs":["last funding rate in this perp market (unit is quote per base)"],"type":"i64"},{"name":"lastFundingRateLong","docs":["last funding rate for longs in this perp market (unit is quote per base)"],"type":"i64"},{"name":"lastFundingRateShort","docs":["last funding rate for shorts in this perp market (unit is quote per base)"],"type":"i64"},{"name":"last24hAvgFundingRate","docs":["estimate of last 24h of funding rate perp market (unit is quote per base)"],"type":"i64"},{"name":"totalFee","docs":["total fees collected by this perp market"],"type":"i128"},{"name":"totalMmFee","docs":["total fees collected by the vAMM\'s bid/ask spread"],"type":"i128"},{"name":"totalExchangeFee","docs":["total fees collected by exchange fee schedule"],"type":"u128"},{"name":"totalFeeMinusDistributions","docs":["total fees minus any recognized upnl and pool withdraws"],"type":"i128"},{"name":"totalFeeWithdrawn","docs":["sum of all fees from fee pool withdrawn to revenue pool"],"type":"u128"},{"name":"totalLiquidationFee","docs":["all fees collected by market for liquidations"],"type":"u128"},{"name":"cumulativeFundingRateLong","docs":["accumulated funding rate for longs since inception in market"],"type":"i128"},{"name":"cumulativeFundingRateShort","docs":["accumulated funding rate for shorts since inception in market"],"type":"i128"},{"name":"totalSocialLoss","docs":["accumulated social loss paid by users since inception in market"],"type":"u128"},{"name":"askBaseAssetReserve","docs":["transformed base_asset_reserve for users going long"],"type":"u128"},{"name":"askQuoteAssetReserve","docs":["transformed quote_asset_reserve for users going long"],"type":"u128"},{"name":"bidBaseAssetReserve","docs":["transformed base_asset_reserve for users going short"],"type":"u128"},{"name":"bidQuoteAssetReserve","docs":["transformed quote_asset_reserve for users going short"],"type":"u128"},{"name":"lastOracleNormalisedPrice","docs":["the last seen oracle price partially shrunk toward the amm reserve price","precision: PRICE_PRECISION"],"type":"i64"},{"name":"lastOracleReservePriceSpreadPct","docs":["the gap between the oracle price and the reserve price = y * peg_multiplier / x"],"type":"i64"},{"name":"lastBidPriceTwap","docs":["average estimate of bid price over funding_period","precision: PRICE_PRECISION"],"type":"u64"},{"name":"lastAskPriceTwap","docs":["average estimate of ask price over funding_period","precision: PRICE_PRECISION"],"type":"u64"},{"name":"lastMarkPriceTwap","docs":["average estimate of (bid+ask)/2 price over funding_period","precision: PRICE_PRECISION"],"type":"u64"},{"name":"lastMarkPriceTwap5min","docs":["average estimate of (bid+ask)/2 price over FIVE_MINUTES"],"type":"u64"},{"name":"lastUpdateSlot","docs":["the last blockchain slot the amm was updated"],"type":"u64"},{"name":"lastOracleConfPct","docs":["the pct size of the oracle confidence interval","precision: PERCENTAGE_PRECISION"],"type":"u64"},{"name":"netRevenueSinceLastFunding","docs":["the total_fee_minus_distribution change since the last funding update","precision: QUOTE_PRECISION"],"type":"i64"},{"name":"lastFundingRateTs","docs":["the last funding rate update unix_timestamp"],"type":"i64"},{"name":"fundingPeriod","docs":["the peridocity of the funding rate updates"],"type":"i64"},{"name":"orderStepSize","docs":["the base step size (increment) of orders","precision: BASE_PRECISION"],"type":"u64"},{"name":"orderTickSize","docs":["the price tick size of orders","precision: PRICE_PRECISION"],"type":"u64"},{"name":"minOrderSize","docs":["the minimum base size of an order","precision: BASE_PRECISION"],"type":"u64"},{"name":"maxPositionSize","docs":["the max base size a single user can have","precision: BASE_PRECISION"],"type":"u64"},{"name":"volume24h","docs":["estimated total of volume in market","QUOTE_PRECISION"],"type":"u64"},{"name":"longIntensityVolume","docs":["the volume intensity of long fills against AMM"],"type":"u64"},{"name":"shortIntensityVolume","docs":["the volume intensity of short fills against AMM"],"type":"u64"},{"name":"lastTradeTs","docs":["the blockchain unix timestamp at the time of the last trade"],"type":"i64"},{"name":"markStd","docs":["estimate of standard deviation of the fill (mark) prices","precision: PRICE_PRECISION"],"type":"u64"},{"name":"oracleStd","docs":["estimate of standard deviation of the oracle price at each update","precision: PRICE_PRECISION"],"type":"u64"},{"name":"lastMarkPriceTwapTs","docs":["the last unix_timestamp the mark twap was updated"],"type":"i64"},{"name":"baseSpread","docs":["the minimum spread the AMM can quote. also used as step size for some spread logic increases."],"type":"u32"},{"name":"maxSpread","docs":["the maximum spread the AMM can quote"],"type":"u32"},{"name":"longSpread","docs":["the spread for asks vs the reserve price"],"type":"u32"},{"name":"shortSpread","docs":["the spread for bids vs the reserve price"],"type":"u32"},{"name":"longIntensityCount","docs":["the count intensity of long fills against AMM"],"type":"u32"},{"name":"shortIntensityCount","docs":["the count intensity of short fills against AMM"],"type":"u32"},{"name":"maxFillReserveFraction","docs":["the fraction of total available liquidity a single fill on the AMM can consume"],"type":"u16"},{"name":"maxSlippageRatio","docs":["the maximum slippage a single fill on the AMM can push"],"type":"u16"},{"name":"curveUpdateIntensity","docs":["the update intensity of AMM formulaic updates (adjusting k). 0-100"],"type":"u8"},{"name":"ammJitIntensity","docs":["the jit intensity of AMM. larger intensity means larger participation in jit. 0 means no jit participation.","(0, 100] is intensity for protocol-owned AMM. (100, 200] is intensity for user LP-owned AMM."],"type":"u8"},{"name":"oracleSource","docs":["the oracle provider information. used to decode/scale the oracle public key"],"type":{"defined":"OracleSource"}},{"name":"lastOracleValid","docs":["tracks whether the oracle was considered valid at the last AMM update"],"type":"bool"},{"name":"targetBaseAssetAmountPerLp","docs":["the target value for `base_asset_amount_per_lp`, used during AMM JIT with LP split","precision: BASE_PRECISION"],"type":"i32"},{"name":"perLpBase","docs":["expo for unit of per_lp, base 10 (if per_lp_base=X, then per_lp unit is 10^X)"],"type":"i8"},{"name":"padding1","type":"u8"},{"name":"padding2","type":"u16"},{"name":"totalFeeEarnedPerLp","type":"u64"},{"name":"padding","type":{"array":["u8",32]}}]}},{"name":"InsuranceFund","type":{"kind":"struct","fields":[{"name":"vault","type":"publicKey"},{"name":"totalShares","type":"u128"},{"name":"userShares","type":"u128"},{"name":"sharesBase","type":"u128"},{"name":"unstakingPeriod","type":"i64"},{"name":"lastRevenueSettleTs","type":"i64"},{"name":"revenueSettlePeriod","type":"i64"},{"name":"totalFactor","type":"u32"},{"name":"userFactor","type":"u32"}]}},{"name":"OracleGuardRails","type":{"kind":"struct","fields":[{"name":"priceDivergence","type":{"defined":"PriceDivergenceGuardRails"}},{"name":"validity","type":{"defined":"ValidityGuardRails"}}]}},{"name":"PriceDivergenceGuardRails","type":{"kind":"struct","fields":[{"name":"markOraclePercentDivergence","type":"u64"},{"name":"oracleTwap5minPercentDivergence","type":"u64"}]}},{"name":"ValidityGuardRails","type":{"kind":"struct","fields":[{"name":"slotsBeforeStaleForAmm","type":"i64"},{"name":"slotsBeforeStaleForMargin","type":"i64"},{"name":"confidenceIntervalMaxSize","type":"u64"},{"name":"tooVolatileRatio","type":"i64"}]}},{"name":"FeeStructure","type":{"kind":"struct","fields":[{"name":"feeTiers","type":{"array":[{"defined":"FeeTier"},10]}},{"name":"fillerRewardStructure","type":{"defined":"OrderFillerRewardStructure"}},{"name":"referrerRewardEpochUpperBound","type":"u64"},{"name":"flatFillerFee","type":"u64"}]}},{"name":"FeeTier","type":{"kind":"struct","fields":[{"name":"feeNumerator","type":"u32"},{"name":"feeDenominator","type":"u32"},{"name":"makerRebateNumerator","type":"u32"},{"name":"makerRebateDenominator","type":"u32"},{"name":"referrerRewardNumerator","type":"u32"},{"name":"referrerRewardDenominator","type":"u32"},{"name":"refereeFeeNumerator","type":"u32"},{"name":"refereeFeeDenominator","type":"u32"}]}},{"name":"OrderFillerRewardStructure","type":{"kind":"struct","fields":[{"name":"rewardNumerator","type":"u32"},{"name":"rewardDenominator","type":"u32"},{"name":"timeBasedRewardLowerBound","type":"u128"}]}},{"name":"UserFees","type":{"kind":"struct","fields":[{"name":"totalFeePaid","docs":["Total taker fee paid","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"totalFeeRebate","docs":["Total maker fee rebate","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"totalTokenDiscount","docs":["Total discount from holding token","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"totalRefereeDiscount","docs":["Total discount from being referred","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"totalReferrerReward","docs":["Total reward to referrer","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"currentEpochReferrerReward","docs":["Total reward to referrer this epoch","precision: QUOTE_PRECISION"],"type":"u64"}]}},{"name":"SpotPosition","type":{"kind":"struct","fields":[{"name":"scaledBalance","docs":["The scaled balance of the position. To get the token amount, multiply by the cumulative deposit/borrow","interest of corresponding market.","precision: SPOT_BALANCE_PRECISION"],"type":"u64"},{"name":"openBids","docs":["How many spot bids the user has open","precision: token mint precision"],"type":"i64"},{"name":"openAsks","docs":["How many spot asks the user has open","precision: token mint precision"],"type":"i64"},{"name":"cumulativeDeposits","docs":["The cumulative deposits/borrows a user has made into a market","precision: token mint precision"],"type":"i64"},{"name":"marketIndex","docs":["The market index of the corresponding spot market"],"type":"u16"},{"name":"balanceType","docs":["Whether the position is deposit or borrow"],"type":{"defined":"SpotBalanceType"}},{"name":"openOrders","docs":["Number of open orders"],"type":"u8"},{"name":"padding","type":{"array":["u8",4]}}]}},{"name":"PerpPosition","type":{"kind":"struct","fields":[{"name":"lastCumulativeFundingRate","docs":["The perp market\'s last cumulative funding rate. Used to calculate the funding payment owed to user","precision: FUNDING_RATE_PRECISION"],"type":"i64"},{"name":"baseAssetAmount","docs":["the size of the users perp position","precision: BASE_PRECISION"],"type":"i64"},{"name":"quoteAssetAmount","docs":["Used to calculate the users pnl. Upon entry, is equal to base_asset_amount * avg entry price - fees","Updated when the user open/closes position or settles pnl. Includes fees/funding","precision: QUOTE_PRECISION"],"type":"i64"},{"name":"quoteBreakEvenAmount","docs":["The amount of quote the user would need to exit their position at to break even","Updated when the user open/closes position or settles pnl. Includes fees/funding","precision: QUOTE_PRECISION"],"type":"i64"},{"name":"quoteEntryAmount","docs":["The amount quote the user entered the position with. Equal to base asset amount * avg entry price","Updated when the user open/closes position. Excludes fees/funding","precision: QUOTE_PRECISION"],"type":"i64"},{"name":"openBids","docs":["The amount of open bids the user has in this perp market","precision: BASE_PRECISION"],"type":"i64"},{"name":"openAsks","docs":["The amount of open asks the user has in this perp market","precision: BASE_PRECISION"],"type":"i64"},{"name":"settledPnl","docs":["The amount of pnl settled in this market since opening the position","precision: QUOTE_PRECISION"],"type":"i64"},{"name":"lpShares","docs":["The number of lp (liquidity provider) shares the user has in this perp market","LP shares allow users to provide liquidity via the AMM","precision: BASE_PRECISION"],"type":"u64"},{"name":"lastBaseAssetAmountPerLp","docs":["The last base asset amount per lp the amm had","Used to settle the users lp position","precision: BASE_PRECISION"],"type":"i64"},{"name":"lastQuoteAssetAmountPerLp","docs":["The last quote asset amount per lp the amm had","Used to settle the users lp position","precision: QUOTE_PRECISION"],"type":"i64"},{"name":"remainderBaseAssetAmount","docs":["Settling LP position can lead to a small amount of base asset being left over smaller than step size","This records that remainder so it can be settled later on","precision: BASE_PRECISION"],"type":"i32"},{"name":"marketIndex","docs":["The market index for the perp market"],"type":"u16"},{"name":"openOrders","docs":["The number of open orders"],"type":"u8"},{"name":"perLpBase","type":"i8"}]}},{"name":"Order","type":{"kind":"struct","fields":[{"name":"slot","docs":["The slot the order was placed"],"type":"u64"},{"name":"price","docs":["The limit price for the order (can be 0 for market orders)","For orders with an auction, this price isn\'t used until the auction is complete","precision: PRICE_PRECISION"],"type":"u64"},{"name":"baseAssetAmount","docs":["The size of the order","precision for perps: BASE_PRECISION","precision for spot: token mint precision"],"type":"u64"},{"name":"baseAssetAmountFilled","docs":["The amount of the order filled","precision for perps: BASE_PRECISION","precision for spot: token mint precision"],"type":"u64"},{"name":"quoteAssetAmountFilled","docs":["The amount of quote filled for the order","precision: QUOTE_PRECISION"],"type":"u64"},{"name":"triggerPrice","docs":["At what price the order will be triggered. Only relevant for trigger orders","precision: PRICE_PRECISION"],"type":"u64"},{"name":"auctionStartPrice","docs":["The start price for the auction. Only relevant for market/oracle orders","precision: PRICE_PRECISION"],"type":"i64"},{"name":"auctionEndPrice","docs":["The end price for the auction. Only relevant for market/oracle orders","precision: PRICE_PRECISION"],"type":"i64"},{"name":"maxTs","docs":["The time when the order will expire"],"type":"i64"},{"name":"oraclePriceOffset","docs":["If set, the order limit price is the oracle price + this offset","precision: PRICE_PRECISION"],"type":"i32"},{"name":"orderId","docs":["The id for the order. Each users has their own order id space"],"type":"u32"},{"name":"marketIndex","docs":["The perp/spot market index"],"type":"u16"},{"name":"status","docs":["Whether the order is open or unused"],"type":{"defined":"OrderStatus"}},{"name":"orderType","docs":["The type of order"],"type":{"defined":"OrderType"}},{"name":"marketType","docs":["Whether market is spot or perp"],"type":{"defined":"MarketType"}},{"name":"userOrderId","docs":["User generated order id. Can make it easier to place/cancel orders"],"type":"u8"},{"name":"existingPositionDirection","docs":["What the users position was when the order was placed"],"type":{"defined":"PositionDirection"}},{"name":"direction","docs":["Whether the user is going long or short. LONG = bid, SHORT = ask"],"type":{"defined":"PositionDirection"}},{"name":"reduceOnly","docs":["Whether the order is allowed to only reduce position size"],"type":"bool"},{"name":"postOnly","docs":["Whether the order must be a maker"],"type":"bool"},{"name":"immediateOrCancel","docs":["Whether the order must be canceled the same slot it is placed"],"type":"bool"},{"name":"triggerCondition","docs":["Whether the order is triggered above or below the trigger price. Only relevant for trigger orders"],"type":{"defined":"OrderTriggerCondition"}},{"name":"auctionDuration","docs":["How many slots the auction lasts"],"type":"u8"},{"name":"padding","type":{"array":["u8",3]}}]}},{"name":"SwapDirection","type":{"kind":"enum","variants":[{"name":"Add"},{"name":"Remove"}]}},{"name":"ModifyOrderId","type":{"kind":"enum","variants":[{"name":"UserOrderId","fields":["u8"]},{"name":"OrderId","fields":["u32"]}]}},{"name":"PositionDirection","type":{"kind":"enum","variants":[{"name":"Long"},{"name":"Short"}]}},{"name":"SpotFulfillmentType","type":{"kind":"enum","variants":[{"name":"SerumV3"},{"name":"Match"},{"name":"PhoenixV1"}]}},{"name":"PostOnlyParam","type":{"kind":"enum","variants":[{"name":"None"},{"name":"MustPostOnly"},{"name":"TryPostOnly"},{"name":"Slide"}]}},{"name":"ModifyOrderPolicy","type":{"kind":"enum","variants":[{"name":"TryModify"},{"name":"MustModify"}]}},{"name":"SwapReduceOnly","type":{"kind":"enum","variants":[{"name":"In"},{"name":"Out"}]}},{"name":"TwapPeriod","type":{"kind":"enum","variants":[{"name":"FundingPeriod"},{"name":"FiveMin"}]}},{"name":"LiquidationMultiplierType","type":{"kind":"enum","variants":[{"name":"Discount"},{"name":"Premium"}]}},{"name":"MarginRequirementType","type":{"kind":"enum","variants":[{"name":"Initial"},{"name":"Fill"},{"name":"Maintenance"}]}},{"name":"OracleValidity","type":{"kind":"enum","variants":[{"name":"Invalid"},{"name":"TooVolatile"},{"name":"TooUncertain"},{"name":"StaleForMargin"},{"name":"InsufficientDataPoints"},{"name":"StaleForAMM"},{"name":"Valid"}]}},{"name":"DriftAction","type":{"kind":"enum","variants":[{"name":"UpdateFunding"},{"name":"SettlePnl"},{"name":"TriggerOrder"},{"name":"FillOrderMatch"},{"name":"FillOrderAmm"},{"name":"Liquidate"},{"name":"MarginCalc"},{"name":"UpdateTwap"},{"name":"UpdateAMMCurve"}]}},{"name":"PositionUpdateType","type":{"kind":"enum","variants":[{"name":"Open"},{"name":"Increase"},{"name":"Reduce"},{"name":"Close"},{"name":"Flip"}]}},{"name":"DepositExplanation","type":{"kind":"enum","variants":[{"name":"None"},{"name":"Transfer"}]}},{"name":"DepositDirection","type":{"kind":"enum","variants":[{"name":"Deposit"},{"name":"Withdraw"}]}},{"name":"OrderAction","type":{"kind":"enum","variants":[{"name":"Place"},{"name":"Cancel"},{"name":"Fill"},{"name":"Trigger"},{"name":"Expire"}]}},{"name":"OrderActionExplanation","type":{"kind":"enum","variants":[{"name":"None"},{"name":"InsufficientFreeCollateral"},{"name":"OraclePriceBreachedLimitPrice"},{"name":"MarketOrderFilledToLimitPrice"},{"name":"OrderExpired"},{"name":"Liquidation"},{"name":"OrderFilledWithAMM"},{"name":"OrderFilledWithAMMJit"},{"name":"OrderFilledWithMatch"},{"name":"OrderFilledWithMatchJit"},{"name":"MarketExpired"},{"name":"RiskingIncreasingOrder"},{"name":"ReduceOnlyOrderIncreasedPosition"},{"name":"OrderFillWithSerum"},{"name":"NoBorrowLiquidity"},{"name":"OrderFillWithPhoenix"},{"name":"OrderFilledWithAMMJitLPSplit"},{"name":"OrderFilledWithLPJit"}]}},{"name":"LPAction","type":{"kind":"enum","variants":[{"name":"AddLiquidity"},{"name":"RemoveLiquidity"},{"name":"SettleLiquidity"}]}},{"name":"LiquidationType","type":{"kind":"enum","variants":[{"name":"LiquidatePerp"},{"name":"LiquidateSpot"},{"name":"LiquidateBorrowForPerpPnl"},{"name":"LiquidatePerpPnlForDeposit"},{"name":"PerpBankruptcy"},{"name":"SpotBankruptcy"}]}},{"name":"SettlePnlExplanation","type":{"kind":"enum","variants":[{"name":"None"},{"name":"ExpiredPosition"}]}},{"name":"StakeAction","type":{"kind":"enum","variants":[{"name":"Stake"},{"name":"UnstakeRequest"},{"name":"UnstakeCancelRequest"},{"name":"Unstake"}]}},{"name":"PerpFulfillmentMethod","type":{"kind":"enum","variants":[{"name":"AMM","fields":[{"option":"u64"}]},{"name":"Match","fields":["publicKey","u16"]}]}},{"name":"SpotFulfillmentMethod","type":{"kind":"enum","variants":[{"name":"ExternalMarket"},{"name":"Match"}]}},{"name":"OracleSource","type":{"kind":"enum","variants":[{"name":"Pyth"},{"name":"Switchboard"},{"name":"QuoteAsset"},{"name":"Pyth1K"},{"name":"Pyth1M"},{"name":"PythStableCoin"}]}},{"name":"MarketStatus","type":{"kind":"enum","variants":[{"name":"Initialized"},{"name":"Active"},{"name":"FundingPaused"},{"name":"AmmPaused"},{"name":"FillPaused"},{"name":"WithdrawPaused"},{"name":"ReduceOnly"},{"name":"Settlement"},{"name":"Delisted"}]}},{"name":"ContractType","type":{"kind":"enum","variants":[{"name":"Perpetual"},{"name":"Future"}]}},{"name":"ContractTier","type":{"kind":"enum","variants":[{"name":"A"},{"name":"B"},{"name":"C"},{"name":"Speculative"},{"name":"Isolated"}]}},{"name":"AMMLiquiditySplit","type":{"kind":"enum","variants":[{"name":"ProtocolOwned"},{"name":"LPOwned"},{"name":"Shared"}]}},{"name":"SpotBalanceType","type":{"kind":"enum","variants":[{"name":"Deposit"},{"name":"Borrow"}]}},{"name":"SpotFulfillmentConfigStatus","type":{"kind":"enum","variants":[{"name":"Enabled"},{"name":"Disabled"}]}},{"name":"AssetTier","type":{"kind":"enum","variants":[{"name":"Collateral"},{"name":"Protected"},{"name":"Cross"},{"name":"Isolated"},{"name":"Unlisted"}]}},{"name":"ExchangeStatus","type":{"kind":"enum","variants":[{"name":"DepositPaused"},{"name":"WithdrawPaused"},{"name":"AmmPaused"},{"name":"FillPaused"},{"name":"LiqPaused"},{"name":"FundingPaused"},{"name":"SettlePnlPaused"}]}},{"name":"UserStatus","type":{"kind":"enum","variants":[{"name":"Active"},{"name":"BeingLiquidated"},{"name":"Bankrupt"},{"name":"ReduceOnly"}]}},{"name":"AssetType","type":{"kind":"enum","variants":[{"name":"Base"},{"name":"Quote"}]}},{"name":"OrderStatus","type":{"kind":"enum","variants":[{"name":"Init"},{"name":"Open"},{"name":"Filled"},{"name":"Canceled"}]}},{"name":"OrderType","type":{"kind":"enum","variants":[{"name":"Market"},{"name":"Limit"},{"name":"TriggerMarket"},{"name":"TriggerLimit"},{"name":"Oracle"}]}},{"name":"OrderTriggerCondition","type":{"kind":"enum","variants":[{"name":"Above"},{"name":"Below"},{"name":"TriggeredAbove"},{"name":"TriggeredBelow"}]}},{"name":"MarketType","type":{"kind":"enum","variants":[{"name":"Spot"},{"name":"Perp"}]}}],"events":[{"name":"NewUserRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"userAuthority","type":"publicKey","index":false},{"name":"user","type":"publicKey","index":false},{"name":"subAccountId","type":"u16","index":false},{"name":"name","type":{"array":["u8",32]},"index":false},{"name":"referrer","type":"publicKey","index":false}]},{"name":"DepositRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"userAuthority","type":"publicKey","index":false},{"name":"user","type":"publicKey","index":false},{"name":"direction","type":{"defined":"DepositDirection"},"index":false},{"name":"depositRecordId","type":"u64","index":false},{"name":"amount","type":"u64","index":false},{"name":"marketIndex","type":"u16","index":false},{"name":"oraclePrice","type":"i64","index":false},{"name":"marketDepositBalance","type":"u128","index":false},{"name":"marketWithdrawBalance","type":"u128","index":false},{"name":"marketCumulativeDepositInterest","type":"u128","index":false},{"name":"marketCumulativeBorrowInterest","type":"u128","index":false},{"name":"totalDepositsAfter","type":"u64","index":false},{"name":"totalWithdrawsAfter","type":"u64","index":false},{"name":"explanation","type":{"defined":"DepositExplanation"},"index":false},{"name":"transferUser","type":{"option":"publicKey"},"index":false}]},{"name":"SpotInterestRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"marketIndex","type":"u16","index":false},{"name":"depositBalance","type":"u128","index":false},{"name":"cumulativeDepositInterest","type":"u128","index":false},{"name":"borrowBalance","type":"u128","index":false},{"name":"cumulativeBorrowInterest","type":"u128","index":false},{"name":"optimalUtilization","type":"u32","index":false},{"name":"optimalBorrowRate","type":"u32","index":false},{"name":"maxBorrowRate","type":"u32","index":false}]},{"name":"FundingPaymentRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"userAuthority","type":"publicKey","index":false},{"name":"user","type":"publicKey","index":false},{"name":"marketIndex","type":"u16","index":false},{"name":"fundingPayment","type":"i64","index":false},{"name":"baseAssetAmount","type":"i64","index":false},{"name":"userLastCumulativeFunding","type":"i64","index":false},{"name":"ammCumulativeFundingLong","type":"i128","index":false},{"name":"ammCumulativeFundingShort","type":"i128","index":false}]},{"name":"FundingRateRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"recordId","type":"u64","index":false},{"name":"marketIndex","type":"u16","index":false},{"name":"fundingRate","type":"i64","index":false},{"name":"fundingRateLong","type":"i128","index":false},{"name":"fundingRateShort","type":"i128","index":false},{"name":"cumulativeFundingRateLong","type":"i128","index":false},{"name":"cumulativeFundingRateShort","type":"i128","index":false},{"name":"oraclePriceTwap","type":"i64","index":false},{"name":"markPriceTwap","type":"u64","index":false},{"name":"periodRevenue","type":"i64","index":false},{"name":"baseAssetAmountWithAmm","type":"i128","index":false},{"name":"baseAssetAmountWithUnsettledLp","type":"i128","index":false}]},{"name":"CurveRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"recordId","type":"u64","index":false},{"name":"pegMultiplierBefore","type":"u128","index":false},{"name":"baseAssetReserveBefore","type":"u128","index":false},{"name":"quoteAssetReserveBefore","type":"u128","index":false},{"name":"sqrtKBefore","type":"u128","index":false},{"name":"pegMultiplierAfter","type":"u128","index":false},{"name":"baseAssetReserveAfter","type":"u128","index":false},{"name":"quoteAssetReserveAfter","type":"u128","index":false},{"name":"sqrtKAfter","type":"u128","index":false},{"name":"baseAssetAmountLong","type":"u128","index":false},{"name":"baseAssetAmountShort","type":"u128","index":false},{"name":"baseAssetAmountWithAmm","type":"i128","index":false},{"name":"totalFee","type":"i128","index":false},{"name":"totalFeeMinusDistributions","type":"i128","index":false},{"name":"adjustmentCost","type":"i128","index":false},{"name":"oraclePrice","type":"i64","index":false},{"name":"fillRecord","type":"u128","index":false},{"name":"numberOfUsers","type":"u32","index":false},{"name":"marketIndex","type":"u16","index":false}]},{"name":"OrderRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"user","type":"publicKey","index":false},{"name":"order","type":{"defined":"Order"},"index":false}]},{"name":"OrderActionRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"action","type":{"defined":"OrderAction"},"index":false},{"name":"actionExplanation","type":{"defined":"OrderActionExplanation"},"index":false},{"name":"marketIndex","type":"u16","index":false},{"name":"marketType","type":{"defined":"MarketType"},"index":false},{"name":"filler","type":{"option":"publicKey"},"index":false},{"name":"fillerReward","type":{"option":"u64"},"index":false},{"name":"fillRecordId","type":{"option":"u64"},"index":false},{"name":"baseAssetAmountFilled","type":{"option":"u64"},"index":false},{"name":"quoteAssetAmountFilled","type":{"option":"u64"},"index":false},{"name":"takerFee","type":{"option":"u64"},"index":false},{"name":"makerFee","type":{"option":"i64"},"index":false},{"name":"referrerReward","type":{"option":"u32"},"index":false},{"name":"quoteAssetAmountSurplus","type":{"option":"i64"},"index":false},{"name":"spotFulfillmentMethodFee","type":{"option":"u64"},"index":false},{"name":"taker","type":{"option":"publicKey"},"index":false},{"name":"takerOrderId","type":{"option":"u32"},"index":false},{"name":"takerOrderDirection","type":{"option":{"defined":"PositionDirection"}},"index":false},{"name":"takerOrderBaseAssetAmount","type":{"option":"u64"},"index":false},{"name":"takerOrderCumulativeBaseAssetAmountFilled","type":{"option":"u64"},"index":false},{"name":"takerOrderCumulativeQuoteAssetAmountFilled","type":{"option":"u64"},"index":false},{"name":"maker","type":{"option":"publicKey"},"index":false},{"name":"makerOrderId","type":{"option":"u32"},"index":false},{"name":"makerOrderDirection","type":{"option":{"defined":"PositionDirection"}},"index":false},{"name":"makerOrderBaseAssetAmount","type":{"option":"u64"},"index":false},{"name":"makerOrderCumulativeBaseAssetAmountFilled","type":{"option":"u64"},"index":false},{"name":"makerOrderCumulativeQuoteAssetAmountFilled","type":{"option":"u64"},"index":false},{"name":"oraclePrice","type":"i64","index":false}]},{"name":"LPRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"user","type":"publicKey","index":false},{"name":"action","type":{"defined":"LPAction"},"index":false},{"name":"nShares","type":"u64","index":false},{"name":"marketIndex","type":"u16","index":false},{"name":"deltaBaseAssetAmount","type":"i64","index":false},{"name":"deltaQuoteAssetAmount","type":"i64","index":false},{"name":"pnl","type":"i64","index":false}]},{"name":"LiquidationRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"liquidationType","type":{"defined":"LiquidationType"},"index":false},{"name":"user","type":"publicKey","index":false},{"name":"liquidator","type":"publicKey","index":false},{"name":"marginRequirement","type":"u128","index":false},{"name":"totalCollateral","type":"i128","index":false},{"name":"marginFreed","type":"u64","index":false},{"name":"liquidationId","type":"u16","index":false},{"name":"bankrupt","type":"bool","index":false},{"name":"canceledOrderIds","type":{"vec":"u32"},"index":false},{"name":"liquidatePerp","type":{"defined":"LiquidatePerpRecord"},"index":false},{"name":"liquidateSpot","type":{"defined":"LiquidateSpotRecord"},"index":false},{"name":"liquidateBorrowForPerpPnl","type":{"defined":"LiquidateBorrowForPerpPnlRecord"},"index":false},{"name":"liquidatePerpPnlForDeposit","type":{"defined":"LiquidatePerpPnlForDepositRecord"},"index":false},{"name":"perpBankruptcy","type":{"defined":"PerpBankruptcyRecord"},"index":false},{"name":"spotBankruptcy","type":{"defined":"SpotBankruptcyRecord"},"index":false}]},{"name":"SettlePnlRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"user","type":"publicKey","index":false},{"name":"marketIndex","type":"u16","index":false},{"name":"pnl","type":"i128","index":false},{"name":"baseAssetAmount","type":"i64","index":false},{"name":"quoteAssetAmountAfter","type":"i64","index":false},{"name":"quoteEntryAmount","type":"i64","index":false},{"name":"settlePrice","type":"i64","index":false},{"name":"explanation","type":{"defined":"SettlePnlExplanation"},"index":false}]},{"name":"InsuranceFundRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"spotMarketIndex","type":"u16","index":false},{"name":"perpMarketIndex","type":"u16","index":false},{"name":"userIfFactor","type":"u32","index":false},{"name":"totalIfFactor","type":"u32","index":false},{"name":"vaultAmountBefore","type":"u64","index":false},{"name":"insuranceVaultAmountBefore","type":"u64","index":false},{"name":"totalIfSharesBefore","type":"u128","index":false},{"name":"totalIfSharesAfter","type":"u128","index":false},{"name":"amount","type":"i64","index":false}]},{"name":"InsuranceFundStakeRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"userAuthority","type":"publicKey","index":false},{"name":"action","type":{"defined":"StakeAction"},"index":false},{"name":"amount","type":"u64","index":false},{"name":"marketIndex","type":"u16","index":false},{"name":"insuranceVaultAmountBefore","type":"u64","index":false},{"name":"ifSharesBefore","type":"u128","index":false},{"name":"userIfSharesBefore","type":"u128","index":false},{"name":"totalIfSharesBefore","type":"u128","index":false},{"name":"ifSharesAfter","type":"u128","index":false},{"name":"userIfSharesAfter","type":"u128","index":false},{"name":"totalIfSharesAfter","type":"u128","index":false}]},{"name":"SwapRecord","fields":[{"name":"ts","type":"i64","index":false},{"name":"user","type":"publicKey","index":false},{"name":"amountOut","type":"u64","index":false},{"name":"amountIn","type":"u64","index":false},{"name":"outMarketIndex","type":"u16","index":false},{"name":"inMarketIndex","type":"u16","index":false},{"name":"outOraclePrice","type":"i64","index":false},{"name":"inOraclePrice","type":"i64","index":false},{"name":"fee","type":"u64","index":false}]}],"errors":[{"code":6000,"name":"InvalidSpotMarketAuthority","msg":"Invalid Spot Market Authority"},{"code":6001,"name":"InvalidInsuranceFundAuthority","msg":"Clearing house not insurance fund authority"},{"code":6002,"name":"InsufficientDeposit","msg":"Insufficient deposit"},{"code":6003,"name":"InsufficientCollateral","msg":"Insufficient collateral"},{"code":6004,"name":"SufficientCollateral","msg":"Sufficient collateral"},{"code":6005,"name":"MaxNumberOfPositions","msg":"Max number of positions taken"},{"code":6006,"name":"AdminControlsPricesDisabled","msg":"Admin Controls Prices Disabled"},{"code":6007,"name":"MarketDelisted","msg":"Market Delisted"},{"code":6008,"name":"MarketIndexAlreadyInitialized","msg":"Market Index Already Initialized"},{"code":6009,"name":"UserAccountAndUserPositionsAccountMismatch","msg":"User Account And User Positions Account Mismatch"},{"code":6010,"name":"UserHasNoPositionInMarket","msg":"User Has No Position In Market"},{"code":6011,"name":"InvalidInitialPeg","msg":"Invalid Initial Peg"},{"code":6012,"name":"InvalidRepegRedundant","msg":"AMM repeg already configured with amt given"},{"code":6013,"name":"InvalidRepegDirection","msg":"AMM repeg incorrect repeg direction"},{"code":6014,"name":"InvalidRepegProfitability","msg":"AMM repeg out of bounds pnl"},{"code":6015,"name":"SlippageOutsideLimit","msg":"Slippage Outside Limit Price"},{"code":6016,"name":"OrderSizeTooSmall","msg":"Order Size Too Small"},{"code":6017,"name":"InvalidUpdateK","msg":"Price change too large when updating K"},{"code":6018,"name":"AdminWithdrawTooLarge","msg":"Admin tried to withdraw amount larger than fees collected"},{"code":6019,"name":"MathError","msg":"Math Error"},{"code":6020,"name":"BnConversionError","msg":"Conversion to u128/u64 failed with an overflow or underflow"},{"code":6021,"name":"ClockUnavailable","msg":"Clock unavailable"},{"code":6022,"name":"UnableToLoadOracle","msg":"Unable To Load Oracles"},{"code":6023,"name":"PriceBandsBreached","msg":"Price Bands Breached"},{"code":6024,"name":"ExchangePaused","msg":"Exchange is paused"},{"code":6025,"name":"InvalidWhitelistToken","msg":"Invalid whitelist token"},{"code":6026,"name":"WhitelistTokenNotFound","msg":"Whitelist token not found"},{"code":6027,"name":"InvalidDiscountToken","msg":"Invalid discount token"},{"code":6028,"name":"DiscountTokenNotFound","msg":"Discount token not found"},{"code":6029,"name":"ReferrerNotFound","msg":"Referrer not found"},{"code":6030,"name":"ReferrerStatsNotFound","msg":"ReferrerNotFound"},{"code":6031,"name":"ReferrerMustBeWritable","msg":"ReferrerMustBeWritable"},{"code":6032,"name":"ReferrerStatsMustBeWritable","msg":"ReferrerMustBeWritable"},{"code":6033,"name":"ReferrerAndReferrerStatsAuthorityUnequal","msg":"ReferrerAndReferrerStatsAuthorityUnequal"},{"code":6034,"name":"InvalidReferrer","msg":"InvalidReferrer"},{"code":6035,"name":"InvalidOracle","msg":"InvalidOracle"},{"code":6036,"name":"OracleNotFound","msg":"OracleNotFound"},{"code":6037,"name":"LiquidationsBlockedByOracle","msg":"Liquidations Blocked By Oracle"},{"code":6038,"name":"MaxDeposit","msg":"Can not deposit more than max deposit"},{"code":6039,"name":"CantDeleteUserWithCollateral","msg":"Can not delete user that still has collateral"},{"code":6040,"name":"InvalidFundingProfitability","msg":"AMM funding out of bounds pnl"},{"code":6041,"name":"CastingFailure","msg":"Casting Failure"},{"code":6042,"name":"InvalidOrder","msg":"InvalidOrder"},{"code":6043,"name":"InvalidOrderMaxTs","msg":"InvalidOrderMaxTs"},{"code":6044,"name":"InvalidOrderMarketType","msg":"InvalidOrderMarketType"},{"code":6045,"name":"InvalidOrderForInitialMarginReq","msg":"InvalidOrderForInitialMarginReq"},{"code":6046,"name":"InvalidOrderNotRiskReducing","msg":"InvalidOrderNotRiskReducing"},{"code":6047,"name":"InvalidOrderSizeTooSmall","msg":"InvalidOrderSizeTooSmall"},{"code":6048,"name":"InvalidOrderNotStepSizeMultiple","msg":"InvalidOrderNotStepSizeMultiple"},{"code":6049,"name":"InvalidOrderBaseQuoteAsset","msg":"InvalidOrderBaseQuoteAsset"},{"code":6050,"name":"InvalidOrderIOC","msg":"InvalidOrderIOC"},{"code":6051,"name":"InvalidOrderPostOnly","msg":"InvalidOrderPostOnly"},{"code":6052,"name":"InvalidOrderIOCPostOnly","msg":"InvalidOrderIOCPostOnly"},{"code":6053,"name":"InvalidOrderTrigger","msg":"InvalidOrderTrigger"},{"code":6054,"name":"InvalidOrderAuction","msg":"InvalidOrderAuction"},{"code":6055,"name":"InvalidOrderOracleOffset","msg":"InvalidOrderOracleOffset"},{"code":6056,"name":"InvalidOrderMinOrderSize","msg":"InvalidOrderMinOrderSize"},{"code":6057,"name":"PlacePostOnlyLimitFailure","msg":"Failed to Place Post-Only Limit Order"},{"code":6058,"name":"UserHasNoOrder","msg":"User has no order"},{"code":6059,"name":"OrderAmountTooSmall","msg":"Order Amount Too Small"},{"code":6060,"name":"MaxNumberOfOrders","msg":"Max number of orders taken"},{"code":6061,"name":"OrderDoesNotExist","msg":"Order does not exist"},{"code":6062,"name":"OrderNotOpen","msg":"Order not open"},{"code":6063,"name":"FillOrderDidNotUpdateState","msg":"FillOrderDidNotUpdateState"},{"code":6064,"name":"ReduceOnlyOrderIncreasedRisk","msg":"Reduce only order increased risk"},{"code":6065,"name":"UnableToLoadAccountLoader","msg":"Unable to load AccountLoader"},{"code":6066,"name":"TradeSizeTooLarge","msg":"Trade Size Too Large"},{"code":6067,"name":"UserCantReferThemselves","msg":"User cant refer themselves"},{"code":6068,"name":"DidNotReceiveExpectedReferrer","msg":"Did not receive expected referrer"},{"code":6069,"name":"CouldNotDeserializeReferrer","msg":"Could not deserialize referrer"},{"code":6070,"name":"CouldNotDeserializeReferrerStats","msg":"Could not deserialize referrer stats"},{"code":6071,"name":"UserOrderIdAlreadyInUse","msg":"User Order Id Already In Use"},{"code":6072,"name":"NoPositionsLiquidatable","msg":"No positions liquidatable"},{"code":6073,"name":"InvalidMarginRatio","msg":"Invalid Margin Ratio"},{"code":6074,"name":"CantCancelPostOnlyOrder","msg":"Cant Cancel Post Only Order"},{"code":6075,"name":"InvalidOracleOffset","msg":"InvalidOracleOffset"},{"code":6076,"name":"CantExpireOrders","msg":"CantExpireOrders"},{"code":6077,"name":"CouldNotLoadMarketData","msg":"CouldNotLoadMarketData"},{"code":6078,"name":"PerpMarketNotFound","msg":"PerpMarketNotFound"},{"code":6079,"name":"InvalidMarketAccount","msg":"InvalidMarketAccount"},{"code":6080,"name":"UnableToLoadPerpMarketAccount","msg":"UnableToLoadMarketAccount"},{"code":6081,"name":"MarketWrongMutability","msg":"MarketWrongMutability"},{"code":6082,"name":"UnableToCastUnixTime","msg":"UnableToCastUnixTime"},{"code":6083,"name":"CouldNotFindSpotPosition","msg":"CouldNotFindSpotPosition"},{"code":6084,"name":"NoSpotPositionAvailable","msg":"NoSpotPositionAvailable"},{"code":6085,"name":"InvalidSpotMarketInitialization","msg":"InvalidSpotMarketInitialization"},{"code":6086,"name":"CouldNotLoadSpotMarketData","msg":"CouldNotLoadSpotMarketData"},{"code":6087,"name":"SpotMarketNotFound","msg":"SpotMarketNotFound"},{"code":6088,"name":"InvalidSpotMarketAccount","msg":"InvalidSpotMarketAccount"},{"code":6089,"name":"UnableToLoadSpotMarketAccount","msg":"UnableToLoadSpotMarketAccount"},{"code":6090,"name":"SpotMarketWrongMutability","msg":"SpotMarketWrongMutability"},{"code":6091,"name":"SpotMarketInterestNotUpToDate","msg":"SpotInterestNotUpToDate"},{"code":6092,"name":"SpotMarketInsufficientDeposits","msg":"SpotMarketInsufficientDeposits"},{"code":6093,"name":"UserMustSettleTheirOwnPositiveUnsettledPNL","msg":"UserMustSettleTheirOwnPositiveUnsettledPNL"},{"code":6094,"name":"CantUpdatePoolBalanceType","msg":"CantUpdatePoolBalanceType"},{"code":6095,"name":"InsufficientCollateralForSettlingPNL","msg":"InsufficientCollateralForSettlingPNL"},{"code":6096,"name":"AMMNotUpdatedInSameSlot","msg":"AMMNotUpdatedInSameSlot"},{"code":6097,"name":"AuctionNotComplete","msg":"AuctionNotComplete"},{"code":6098,"name":"MakerNotFound","msg":"MakerNotFound"},{"code":6099,"name":"MakerStatsNotFound","msg":"MakerNotFound"},{"code":6100,"name":"MakerMustBeWritable","msg":"MakerMustBeWritable"},{"code":6101,"name":"MakerStatsMustBeWritable","msg":"MakerMustBeWritable"},{"code":6102,"name":"MakerOrderNotFound","msg":"MakerOrderNotFound"},{"code":6103,"name":"CouldNotDeserializeMaker","msg":"CouldNotDeserializeMaker"},{"code":6104,"name":"CouldNotDeserializeMakerStats","msg":"CouldNotDeserializeMaker"},{"code":6105,"name":"AuctionPriceDoesNotSatisfyMaker","msg":"AuctionPriceDoesNotSatisfyMaker"},{"code":6106,"name":"MakerCantFulfillOwnOrder","msg":"MakerCantFulfillOwnOrder"},{"code":6107,"name":"MakerOrderMustBePostOnly","msg":"MakerOrderMustBePostOnly"},{"code":6108,"name":"CantMatchTwoPostOnlys","msg":"CantMatchTwoPostOnlys"},{"code":6109,"name":"OrderBreachesOraclePriceLimits","msg":"OrderBreachesOraclePriceLimits"},{"code":6110,"name":"OrderMustBeTriggeredFirst","msg":"OrderMustBeTriggeredFirst"},{"code":6111,"name":"OrderNotTriggerable","msg":"OrderNotTriggerable"},{"code":6112,"name":"OrderDidNotSatisfyTriggerCondition","msg":"OrderDidNotSatisfyTriggerCondition"},{"code":6113,"name":"PositionAlreadyBeingLiquidated","msg":"PositionAlreadyBeingLiquidated"},{"code":6114,"name":"PositionDoesntHaveOpenPositionOrOrders","msg":"PositionDoesntHaveOpenPositionOrOrders"},{"code":6115,"name":"AllOrdersAreAlreadyLiquidations","msg":"AllOrdersAreAlreadyLiquidations"},{"code":6116,"name":"CantCancelLiquidationOrder","msg":"CantCancelLiquidationOrder"},{"code":6117,"name":"UserIsBeingLiquidated","msg":"UserIsBeingLiquidated"},{"code":6118,"name":"LiquidationsOngoing","msg":"LiquidationsOngoing"},{"code":6119,"name":"WrongSpotBalanceType","msg":"WrongSpotBalanceType"},{"code":6120,"name":"UserCantLiquidateThemself","msg":"UserCantLiquidateThemself"},{"code":6121,"name":"InvalidPerpPositionToLiquidate","msg":"InvalidPerpPositionToLiquidate"},{"code":6122,"name":"InvalidBaseAssetAmountForLiquidatePerp","msg":"InvalidBaseAssetAmountForLiquidatePerp"},{"code":6123,"name":"InvalidPositionLastFundingRate","msg":"InvalidPositionLastFundingRate"},{"code":6124,"name":"InvalidPositionDelta","msg":"InvalidPositionDelta"},{"code":6125,"name":"UserBankrupt","msg":"UserBankrupt"},{"code":6126,"name":"UserNotBankrupt","msg":"UserNotBankrupt"},{"code":6127,"name":"UserHasInvalidBorrow","msg":"UserHasInvalidBorrow"},{"code":6128,"name":"DailyWithdrawLimit","msg":"DailyWithdrawLimit"},{"code":6129,"name":"DefaultError","msg":"DefaultError"},{"code":6130,"name":"InsufficientLPTokens","msg":"Insufficient LP tokens"},{"code":6131,"name":"CantLPWithPerpPosition","msg":"Cant LP with a market position"},{"code":6132,"name":"UnableToBurnLPTokens","msg":"Unable to burn LP tokens"},{"code":6133,"name":"TryingToRemoveLiquidityTooFast","msg":"Trying to remove liqudity too fast after adding it"},{"code":6134,"name":"InvalidSpotMarketVault","msg":"Invalid Spot Market Vault"},{"code":6135,"name":"InvalidSpotMarketState","msg":"Invalid Spot Market State"},{"code":6136,"name":"InvalidSerumProgram","msg":"InvalidSerumProgram"},{"code":6137,"name":"InvalidSerumMarket","msg":"InvalidSerumMarket"},{"code":6138,"name":"InvalidSerumBids","msg":"InvalidSerumBids"},{"code":6139,"name":"InvalidSerumAsks","msg":"InvalidSerumAsks"},{"code":6140,"name":"InvalidSerumOpenOrders","msg":"InvalidSerumOpenOrders"},{"code":6141,"name":"FailedSerumCPI","msg":"FailedSerumCPI"},{"code":6142,"name":"FailedToFillOnExternalMarket","msg":"FailedToFillOnExternalMarket"},{"code":6143,"name":"InvalidFulfillmentConfig","msg":"InvalidFulfillmentConfig"},{"code":6144,"name":"InvalidFeeStructure","msg":"InvalidFeeStructure"},{"code":6145,"name":"InsufficientIFShares","msg":"Insufficient IF shares"},{"code":6146,"name":"MarketActionPaused","msg":"the Market has paused this action"},{"code":6147,"name":"MarketPlaceOrderPaused","msg":"the Market status doesnt allow placing orders"},{"code":6148,"name":"MarketFillOrderPaused","msg":"the Market status doesnt allow filling orders"},{"code":6149,"name":"MarketWithdrawPaused","msg":"the Market status doesnt allow withdraws"},{"code":6150,"name":"ProtectedAssetTierViolation","msg":"Action violates the Protected Asset Tier rules"},{"code":6151,"name":"IsolatedAssetTierViolation","msg":"Action violates the Isolated Asset Tier rules"},{"code":6152,"name":"UserCantBeDeleted","msg":"User Cant Be Deleted"},{"code":6153,"name":"ReduceOnlyWithdrawIncreasedRisk","msg":"Reduce Only Withdraw Increased Risk"},{"code":6154,"name":"MaxOpenInterest","msg":"Max Open Interest"},{"code":6155,"name":"CantResolvePerpBankruptcy","msg":"Cant Resolve Perp Bankruptcy"},{"code":6156,"name":"LiquidationDoesntSatisfyLimitPrice","msg":"Liquidation Doesnt Satisfy Limit Price"},{"code":6157,"name":"MarginTradingDisabled","msg":"Margin Trading Disabled"},{"code":6158,"name":"InvalidMarketStatusToSettlePnl","msg":"Invalid Market Status to Settle Perp Pnl"},{"code":6159,"name":"PerpMarketNotInSettlement","msg":"PerpMarketNotInSettlement"},{"code":6160,"name":"PerpMarketNotInReduceOnly","msg":"PerpMarketNotInReduceOnly"},{"code":6161,"name":"PerpMarketSettlementBufferNotReached","msg":"PerpMarketSettlementBufferNotReached"},{"code":6162,"name":"PerpMarketSettlementUserHasOpenOrders","msg":"PerpMarketSettlementUserHasOpenOrders"},{"code":6163,"name":"PerpMarketSettlementUserHasActiveLP","msg":"PerpMarketSettlementUserHasActiveLP"},{"code":6164,"name":"UnableToSettleExpiredUserPosition","msg":"UnableToSettleExpiredUserPosition"},{"code":6165,"name":"UnequalMarketIndexForSpotTransfer","msg":"UnequalMarketIndexForSpotTransfer"},{"code":6166,"name":"InvalidPerpPositionDetected","msg":"InvalidPerpPositionDetected"},{"code":6167,"name":"InvalidSpotPositionDetected","msg":"InvalidSpotPositionDetected"},{"code":6168,"name":"InvalidAmmDetected","msg":"InvalidAmmDetected"},{"code":6169,"name":"InvalidAmmForFillDetected","msg":"InvalidAmmForFillDetected"},{"code":6170,"name":"InvalidAmmLimitPriceOverride","msg":"InvalidAmmLimitPriceOverride"},{"code":6171,"name":"InvalidOrderFillPrice","msg":"InvalidOrderFillPrice"},{"code":6172,"name":"SpotMarketBalanceInvariantViolated","msg":"SpotMarketBalanceInvariantViolated"},{"code":6173,"name":"SpotMarketVaultInvariantViolated","msg":"SpotMarketVaultInvariantViolated"},{"code":6174,"name":"InvalidPDA","msg":"InvalidPDA"},{"code":6175,"name":"InvalidPDASigner","msg":"InvalidPDASigner"},{"code":6176,"name":"RevenueSettingsCannotSettleToIF","msg":"RevenueSettingsCannotSettleToIF"},{"code":6177,"name":"NoRevenueToSettleToIF","msg":"NoRevenueToSettleToIF"},{"code":6178,"name":"NoAmmPerpPnlDeficit","msg":"NoAmmPerpPnlDeficit"},{"code":6179,"name":"SufficientPerpPnlPool","msg":"SufficientPerpPnlPool"},{"code":6180,"name":"InsufficientPerpPnlPool","msg":"InsufficientPerpPnlPool"},{"code":6181,"name":"PerpPnlDeficitBelowThreshold","msg":"PerpPnlDeficitBelowThreshold"},{"code":6182,"name":"MaxRevenueWithdrawPerPeriodReached","msg":"MaxRevenueWithdrawPerPeriodReached"},{"code":6183,"name":"MaxIFWithdrawReached","msg":"InvalidSpotPositionDetected"},{"code":6184,"name":"NoIFWithdrawAvailable","msg":"NoIFWithdrawAvailable"},{"code":6185,"name":"InvalidIFUnstake","msg":"InvalidIFUnstake"},{"code":6186,"name":"InvalidIFUnstakeSize","msg":"InvalidIFUnstakeSize"},{"code":6187,"name":"InvalidIFUnstakeCancel","msg":"InvalidIFUnstakeCancel"},{"code":6188,"name":"InvalidIFForNewStakes","msg":"InvalidIFForNewStakes"},{"code":6189,"name":"InvalidIFRebase","msg":"InvalidIFRebase"},{"code":6190,"name":"InvalidInsuranceUnstakeSize","msg":"InvalidInsuranceUnstakeSize"},{"code":6191,"name":"InvalidOrderLimitPrice","msg":"InvalidOrderLimitPrice"},{"code":6192,"name":"InvalidIFDetected","msg":"InvalidIFDetected"},{"code":6193,"name":"InvalidAmmMaxSpreadDetected","msg":"InvalidAmmMaxSpreadDetected"},{"code":6194,"name":"InvalidConcentrationCoef","msg":"InvalidConcentrationCoef"},{"code":6195,"name":"InvalidSrmVault","msg":"InvalidSrmVault"},{"code":6196,"name":"InvalidVaultOwner","msg":"InvalidVaultOwner"},{"code":6197,"name":"InvalidMarketStatusForFills","msg":"InvalidMarketStatusForFills"},{"code":6198,"name":"IFWithdrawRequestInProgress","msg":"IFWithdrawRequestInProgress"},{"code":6199,"name":"NoIFWithdrawRequestInProgress","msg":"NoIFWithdrawRequestInProgress"},{"code":6200,"name":"IFWithdrawRequestTooSmall","msg":"IFWithdrawRequestTooSmall"},{"code":6201,"name":"IncorrectSpotMarketAccountPassed","msg":"IncorrectSpotMarketAccountPassed"},{"code":6202,"name":"BlockchainClockInconsistency","msg":"BlockchainClockInconsistency"},{"code":6203,"name":"InvalidIFSharesDetected","msg":"InvalidIFSharesDetected"},{"code":6204,"name":"NewLPSizeTooSmall","msg":"NewLPSizeTooSmall"},{"code":6205,"name":"MarketStatusInvalidForNewLP","msg":"MarketStatusInvalidForNewLP"},{"code":6206,"name":"InvalidMarkTwapUpdateDetected","msg":"InvalidMarkTwapUpdateDetected"},{"code":6207,"name":"MarketSettlementAttemptOnActiveMarket","msg":"MarketSettlementAttemptOnActiveMarket"},{"code":6208,"name":"MarketSettlementRequiresSettledLP","msg":"MarketSettlementRequiresSettledLP"},{"code":6209,"name":"MarketSettlementAttemptTooEarly","msg":"MarketSettlementAttemptTooEarly"},{"code":6210,"name":"MarketSettlementTargetPriceInvalid","msg":"MarketSettlementTargetPriceInvalid"},{"code":6211,"name":"UnsupportedSpotMarket","msg":"UnsupportedSpotMarket"},{"code":6212,"name":"SpotOrdersDisabled","msg":"SpotOrdersDisabled"},{"code":6213,"name":"MarketBeingInitialized","msg":"Market Being Initialized"},{"code":6214,"name":"InvalidUserSubAccountId","msg":"Invalid Sub Account Id"},{"code":6215,"name":"InvalidTriggerOrderCondition","msg":"Invalid Trigger Order Condition"},{"code":6216,"name":"InvalidSpotPosition","msg":"Invalid Spot Position"},{"code":6217,"name":"CantTransferBetweenSameUserAccount","msg":"Cant transfer between same user account"},{"code":6218,"name":"InvalidPerpPosition","msg":"Invalid Perp Position"},{"code":6219,"name":"UnableToGetLimitPrice","msg":"Unable To Get Limit Price"},{"code":6220,"name":"InvalidLiquidation","msg":"Invalid Liquidation"},{"code":6221,"name":"SpotFulfillmentConfigDisabled","msg":"Spot Fulfullment Config Disabled"},{"code":6222,"name":"InvalidMaker","msg":"Invalid Maker"},{"code":6223,"name":"FailedUnwrap","msg":"Failed Unwrap"},{"code":6224,"name":"MaxNumberOfUsers","msg":"Max Number Of Users"},{"code":6225,"name":"InvalidOracleForSettlePnl","msg":"InvalidOracleForSettlePnl"},{"code":6226,"name":"MarginOrdersOpen","msg":"MarginOrdersOpen"},{"code":6227,"name":"TierViolationLiquidatingPerpPnl","msg":"TierViolationLiquidatingPerpPnl"},{"code":6228,"name":"CouldNotLoadUserData","msg":"CouldNotLoadUserData"},{"code":6229,"name":"UserWrongMutability","msg":"UserWrongMutability"},{"code":6230,"name":"InvalidUserAccount","msg":"InvalidUserAccount"},{"code":6231,"name":"CouldNotLoadUserStatsData","msg":"CouldNotLoadUserData"},{"code":6232,"name":"UserStatsWrongMutability","msg":"UserWrongMutability"},{"code":6233,"name":"InvalidUserStatsAccount","msg":"InvalidUserAccount"},{"code":6234,"name":"UserNotFound","msg":"UserNotFound"},{"code":6235,"name":"UnableToLoadUserAccount","msg":"UnableToLoadUserAccount"},{"code":6236,"name":"UserStatsNotFound","msg":"UserStatsNotFound"},{"code":6237,"name":"UnableToLoadUserStatsAccount","msg":"UnableToLoadUserStatsAccount"},{"code":6238,"name":"UserNotInactive","msg":"User Not Inactive"},{"code":6239,"name":"RevertFill","msg":"RevertFill"},{"code":6240,"name":"InvalidMarketAccountforDeletion","msg":"Invalid MarketAccount for Deletion"},{"code":6241,"name":"InvalidSpotFulfillmentParams","msg":"Invalid Spot Fulfillment Params"},{"code":6242,"name":"FailedToGetMint","msg":"Failed to Get Mint"},{"code":6243,"name":"FailedPhoenixCPI","msg":"FailedPhoenixCPI"},{"code":6244,"name":"FailedToDeserializePhoenixMarket","msg":"FailedToDeserializePhoenixMarket"},{"code":6245,"name":"InvalidPricePrecision","msg":"InvalidPricePrecision"},{"code":6246,"name":"InvalidPhoenixProgram","msg":"InvalidPhoenixProgram"},{"code":6247,"name":"InvalidPhoenixMarket","msg":"InvalidPhoenixMarket"},{"code":6248,"name":"InvalidSwap","msg":"InvalidSwap"},{"code":6249,"name":"SwapLimitPriceBreached","msg":"SwapLimitPriceBreached"},{"code":6250,"name":"SpotMarketReduceOnly","msg":"SpotMarketReduceOnly"},{"code":6251,"name":"FundingWasNotUpdated","msg":"FundingWasNotUpdated"},{"code":6252,"name":"ImpossibleFill","msg":"ImpossibleFill"},{"code":6253,"name":"CantUpdatePerpBidAskTwap","msg":"CantUpdatePerpBidAskTwap"},{"code":6254,"name":"UserReduceOnly","msg":"UserReduceOnly"}]}');

/***/ }),

/***/ "(ssr)/./node_modules/@drift-labs/sdk/lib/idl/token_faucet.json":
/*!****************************************************************!*\
  !*** ./node_modules/@drift-labs/sdk/lib/idl/token_faucet.json ***!
  \****************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"version":"0.1.0","name":"token_faucet","instructions":[{"name":"initialize","accounts":[{"name":"faucetConfig","isMut":true,"isSigner":false},{"name":"admin","isMut":true,"isSigner":true},{"name":"mintAccount","isMut":true,"isSigner":false},{"name":"rent","isMut":false,"isSigner":false},{"name":"systemProgram","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[]},{"name":"mintToUser","accounts":[{"name":"faucetConfig","isMut":false,"isSigner":false},{"name":"mintAccount","isMut":true,"isSigner":false},{"name":"userTokenAccount","isMut":true,"isSigner":false},{"name":"mintAuthority","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[{"name":"amount","type":"u64"}]},{"name":"transferMintAuthority","accounts":[{"name":"faucetConfig","isMut":false,"isSigner":false},{"name":"admin","isMut":true,"isSigner":true},{"name":"mintAccount","isMut":true,"isSigner":false},{"name":"mintAuthority","isMut":false,"isSigner":false},{"name":"tokenProgram","isMut":false,"isSigner":false}],"args":[]}],"accounts":[{"name":"FaucetConfig","type":{"kind":"struct","fields":[{"name":"admin","type":"publicKey"},{"name":"mint","type":"publicKey"},{"name":"mintAuthority","type":"publicKey"},{"name":"mintAuthorityNonce","type":"u8"}]}}],"errors":[{"code":6000,"name":"InvalidMintAccountAuthority","msg":"Program not mint authority"}]}');

/***/ })

};
;