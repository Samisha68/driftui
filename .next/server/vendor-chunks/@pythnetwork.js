"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@pythnetwork";
exports.ids = ["vendor-chunks/@pythnetwork"];
exports.modules = {

/***/ "(ssr)/./node_modules/@pythnetwork/client/lib/PythConnection.js":
/*!****************************************************************!*\
  !*** ./node_modules/@pythnetwork/client/lib/PythConnection.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (void 0) && (void 0).__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PythConnection = void 0;\nvar index_1 = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/@pythnetwork/client/lib/index.js\");\nvar ONES = \"11111111111111111111111111111111\";\n/**\n * Reads Pyth price data from a solana web3 connection. This class uses a callback-driven model,\n * similar to the solana web3 methods for tracking updates to accounts.\n */ var PythConnection = /** @class */ function() {\n    /** Create a PythConnection that reads its data from an underlying solana web3 connection.\n     *  pythProgramKey is the public key of the Pyth program running on the chosen solana cluster.\n     */ function PythConnection(connection, pythProgramKey, commitment) {\n        if (commitment === void 0) {\n            commitment = \"finalized\";\n        }\n        this.productAccountKeyToProduct = {};\n        this.priceAccountKeyToProductAccountKey = {};\n        this.callbacks = [];\n        this.connection = connection;\n        this.pythProgramKey = pythProgramKey;\n        this.commitment = commitment;\n    }\n    PythConnection.prototype.handleProductAccount = function(key, account) {\n        var _a = index_1.parseProductData(account.data), priceAccountKey = _a.priceAccountKey, type = _a.type, product = _a.product;\n        this.productAccountKeyToProduct[key.toString()] = product;\n        if (priceAccountKey.toString() !== ONES) {\n            this.priceAccountKeyToProductAccountKey[priceAccountKey.toString()] = key.toString();\n        }\n    };\n    PythConnection.prototype.handlePriceAccount = function(key, account) {\n        var product = this.productAccountKeyToProduct[this.priceAccountKeyToProductAccountKey[key.toString()]];\n        if (product === undefined) {\n            // This shouldn't happen since we're subscribed to all of the program's accounts,\n            // but let's be good defensive programmers.\n            throw new Error(\"Got a price update for an unknown product. This is a bug in the library, please report it to the developers.\");\n        }\n        var priceData = index_1.parsePriceData(account.data);\n        for(var _i = 0, _a = this.callbacks; _i < _a.length; _i++){\n            var callback = _a[_i];\n            callback(product, priceData);\n        }\n    };\n    PythConnection.prototype.handleAccount = function(key, account, productOnly) {\n        var base = index_1.parseBaseData(account.data);\n        // The pyth program owns accounts that don't contain pyth data, which we can safely ignore.\n        if (base) {\n            switch(index_1.AccountType[base.type]){\n                case \"Mapping\":\n                    break;\n                case \"Product\":\n                    this.handleProductAccount(key, account);\n                    break;\n                case \"Price\":\n                    if (!productOnly) {\n                        this.handlePriceAccount(key, account);\n                    }\n                    break;\n                case \"Test\":\n                    break;\n                default:\n                    throw new Error(\"Unknown account type: \" + base.type + \". Try upgrading pyth-client.\");\n            }\n        }\n    };\n    /** Start receiving price updates. Once this method is called, any registered callbacks will be invoked\n     *  each time a Pyth price account is updated.\n     */ PythConnection.prototype.start = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var accounts, _i, accounts_1, account;\n            var _this = this;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.connection.getProgramAccounts(this.pythProgramKey, this.commitment)\n                        ];\n                    case 1:\n                        accounts = _a.sent();\n                        for(_i = 0, accounts_1 = accounts; _i < accounts_1.length; _i++){\n                            account = accounts_1[_i];\n                            this.handleAccount(account.pubkey, account.account, true);\n                        }\n                        this.connection.onProgramAccountChange(this.pythProgramKey, function(keyedAccountInfo, context) {\n                            _this.handleAccount(keyedAccountInfo.accountId, keyedAccountInfo.accountInfo, false);\n                        }, this.commitment);\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    /** Register callback to receive price updates. */ PythConnection.prototype.onPriceChange = function(callback) {\n        this.callbacks.push(callback);\n    };\n    /** Stop receiving price updates. Note that this also currently deletes all registered callbacks. */ PythConnection.prototype.stop = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                // There's no way to actually turn off the solana web3 subscription x_x, but there should be.\n                // Leave this method in so we don't have to update our API when solana fixes theirs.\n                // In the interim, delete callbacks.\n                this.callbacks = [];\n                return [\n                    2 /*return*/ \n                ];\n            });\n        });\n    };\n    return PythConnection;\n}();\nexports.PythConnection = PythConnection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@pythnetwork/client/lib/PythConnection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@pythnetwork/client/lib/PythHttpClient.js":
/*!****************************************************************!*\
  !*** ./node_modules/@pythnetwork/client/lib/PythHttpClient.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (void 0) && (void 0).__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PythHttpClient = void 0;\nvar _1 = __webpack_require__(/*! . */ \"(ssr)/./node_modules/@pythnetwork/client/lib/index.js\");\n/**\n * Reads Pyth price data from a solana web3 connection. This class uses a single HTTP call.\n * Use the method getData() to get updated prices values.\n */ var PythHttpClient = /** @class */ function() {\n    function PythHttpClient(connection, pythProgramKey, commitment) {\n        if (commitment === void 0) {\n            commitment = \"finalized\";\n        }\n        this.connection = connection;\n        this.pythProgramKey = pythProgramKey;\n        this.commitment = commitment;\n    }\n    /*\n    * Get Pyth Network account information and return actual price state.\n    * The result contains lists of asset types, product symbols and their prices.\n    */ PythHttpClient.prototype.getData = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var assetTypes, productSymbols, products, productFromSymbol, productPrice, prices, accountList, priceDataQueue, productAccountKeyToProduct, result;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        assetTypes = new Set();\n                        productSymbols = new Set();\n                        products = new Set();\n                        productFromSymbol = new Map();\n                        productPrice = new Map();\n                        prices = new Array();\n                        return [\n                            4 /*yield*/ ,\n                            this.connection.getProgramAccounts(this.pythProgramKey, this.commitment)\n                        ];\n                    case 1:\n                        accountList = _a.sent();\n                        priceDataQueue = new Array();\n                        productAccountKeyToProduct = new Map();\n                        accountList.forEach(function(singleAccount) {\n                            var base = _1.parseBaseData(singleAccount.account.data);\n                            if (base) {\n                                switch(_1.AccountType[base.type]){\n                                    case \"Mapping\":\n                                        break;\n                                    case \"Product\":\n                                        var productData = _1.parseProductData(singleAccount.account.data);\n                                        productAccountKeyToProduct.set(singleAccount.pubkey.toBase58(), productData.product);\n                                        assetTypes.add(productData.product.asset_type);\n                                        productSymbols.add(productData.product.symbol);\n                                        products.add(productData.product);\n                                        productFromSymbol.set(productData.product.symbol, productData.product);\n                                        break;\n                                    case \"Price\":\n                                        var priceData = _1.parsePriceData(singleAccount.account.data);\n                                        priceDataQueue.push(priceData);\n                                        break;\n                                    case \"Test\":\n                                        break;\n                                    default:\n                                        throw new Error(\"Unknown account type: \" + base.type + \". Try upgrading pyth-client.\");\n                                }\n                            }\n                        });\n                        priceDataQueue.forEach(function(priceData) {\n                            var product = productAccountKeyToProduct.get(priceData.productAccountKey.toBase58());\n                            if (product) {\n                                productPrice.set(product.symbol, priceData);\n                                prices.push(priceData);\n                            }\n                        });\n                        result = {\n                            assetTypes: Array.from(assetTypes),\n                            symbols: Array.from(productSymbols),\n                            products: Array.from(products),\n                            productFromSymbol: productFromSymbol,\n                            productPrice: productPrice,\n                            prices: prices\n                        };\n                        return [\n                            2 /*return*/ ,\n                            result\n                        ];\n                }\n            });\n        });\n    };\n    return PythHttpClient;\n}();\nexports.PythHttpClient = PythHttpClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@pythnetwork/client/lib/PythHttpClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@pythnetwork/client/lib/cluster.js":
/*!*********************************************************!*\
  !*** ./node_modules/@pythnetwork/client/lib/cluster.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getPythProgramKeyForCluster = void 0;\nvar web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/** Mapping from solana clusters to the public key of the pyth program. */ var clusterToPythProgramKey = {\n    \"mainnet-beta\": \"FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH\",\n    devnet: \"gSbePebfvPy7tRqimPoVecS2UsBvYv46ynrzWocc92s\",\n    testnet: \"8tfDNiaEyrV6Q1U4DEXrEigs9DoDtkugzFbybENEbCDz\"\n};\n/** Gets the public key of the Pyth program running on the given cluster. */ function getPythProgramKeyForCluster(cluster) {\n    if (clusterToPythProgramKey[cluster] !== undefined) {\n        return new web3_js_1.PublicKey(clusterToPythProgramKey[cluster]);\n    } else {\n        throw new Error(\"Invalid Solana cluster name: \" + cluster + \". Valid options are: \" + JSON.stringify(Object.keys(clusterToPythProgramKey)));\n    }\n}\nexports.getPythProgramKeyForCluster = getPythProgramKeyForCluster;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHB5dGhuZXR3b3JrL2NsaWVudC9saWIvY2x1c3Rlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUNBQW1DLEdBQUcsS0FBSztBQUMzQyxJQUFJRyxZQUFZQyxtQkFBT0EsQ0FBQyw4RUFBaUI7QUFDekMsd0VBQXdFLEdBQ3hFLElBQUlDLDBCQUEwQjtJQUMxQixnQkFBZ0I7SUFDaEJDLFFBQVE7SUFDUkMsU0FBUztBQUNiO0FBQ0EsMEVBQTBFLEdBQzFFLFNBQVNMLDRCQUE0Qk0sT0FBTztJQUN4QyxJQUFJSCx1QkFBdUIsQ0FBQ0csUUFBUSxLQUFLQyxXQUFXO1FBQ2hELE9BQU8sSUFBSU4sVUFBVU8sU0FBUyxDQUFDTCx1QkFBdUIsQ0FBQ0csUUFBUTtJQUNuRSxPQUNLO1FBQ0QsTUFBTSxJQUFJRyxNQUFNLGtDQUFrQ0gsVUFBVSwwQkFBMEJJLEtBQUtDLFNBQVMsQ0FBQ2YsT0FBT2dCLElBQUksQ0FBQ1Q7SUFDckg7QUFDSjtBQUNBTCxtQ0FBbUMsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0BweXRobmV0d29yay9jbGllbnQvbGliL2NsdXN0ZXIuanM/NDhlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UHl0aFByb2dyYW1LZXlGb3JDbHVzdGVyID0gdm9pZCAwO1xudmFyIHdlYjNfanNfMSA9IHJlcXVpcmUoXCJAc29sYW5hL3dlYjMuanNcIik7XG4vKiogTWFwcGluZyBmcm9tIHNvbGFuYSBjbHVzdGVycyB0byB0aGUgcHVibGljIGtleSBvZiB0aGUgcHl0aCBwcm9ncmFtLiAqL1xudmFyIGNsdXN0ZXJUb1B5dGhQcm9ncmFtS2V5ID0ge1xuICAgICdtYWlubmV0LWJldGEnOiAnRnNKM0EzdTJ2bjVjVFZvZkFqdnk2eTVrd0FCSkFxWVdwZTQ5NzViaTJlcEgnLFxuICAgIGRldm5ldDogJ2dTYmVQZWJmdlB5N3RScWltUG9WZWNTMlVzQnZZdjQ2eW5yeldvY2M5MnMnLFxuICAgIHRlc3RuZXQ6ICc4dGZETmlhRXlyVjZRMVU0REVYckVpZ3M5RG9EdGt1Z3pGYnliRU5FYkNEeicsXG59O1xuLyoqIEdldHMgdGhlIHB1YmxpYyBrZXkgb2YgdGhlIFB5dGggcHJvZ3JhbSBydW5uaW5nIG9uIHRoZSBnaXZlbiBjbHVzdGVyLiAqL1xuZnVuY3Rpb24gZ2V0UHl0aFByb2dyYW1LZXlGb3JDbHVzdGVyKGNsdXN0ZXIpIHtcbiAgICBpZiAoY2x1c3RlclRvUHl0aFByb2dyYW1LZXlbY2x1c3Rlcl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmV3IHdlYjNfanNfMS5QdWJsaWNLZXkoY2x1c3RlclRvUHl0aFByb2dyYW1LZXlbY2x1c3Rlcl0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBTb2xhbmEgY2x1c3RlciBuYW1lOiBcIiArIGNsdXN0ZXIgKyBcIi4gVmFsaWQgb3B0aW9ucyBhcmU6IFwiICsgSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoY2x1c3RlclRvUHl0aFByb2dyYW1LZXkpKSk7XG4gICAgfVxufVxuZXhwb3J0cy5nZXRQeXRoUHJvZ3JhbUtleUZvckNsdXN0ZXIgPSBnZXRQeXRoUHJvZ3JhbUtleUZvckNsdXN0ZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRQeXRoUHJvZ3JhbUtleUZvckNsdXN0ZXIiLCJ3ZWIzX2pzXzEiLCJyZXF1aXJlIiwiY2x1c3RlclRvUHl0aFByb2dyYW1LZXkiLCJkZXZuZXQiLCJ0ZXN0bmV0IiwiY2x1c3RlciIsInVuZGVmaW5lZCIsIlB1YmxpY0tleSIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImtleXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@pythnetwork/client/lib/cluster.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@pythnetwork/client/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@pythnetwork/client/lib/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getPythProgramKeyForCluster = exports.PythHttpClient = exports.PythConnection = exports.parsePriceData = exports.parseProductData = exports.parseMappingData = exports.parseBaseData = exports.MAX_SLOT_DIFFERENCE = exports.AccountType = exports.DeriveType = exports.PriceType = exports.CorpAction = exports.PriceStatus = exports.Version = exports.Version2 = exports.Magic = void 0;\nvar web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nvar buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nvar readBig_1 = __webpack_require__(/*! ./readBig */ \"(ssr)/./node_modules/@pythnetwork/client/lib/readBig.js\");\n/** Constants. This section must be kept in sync with the on-chain program. */ exports.Magic = 0xa1b2c3d4;\nexports.Version2 = 2;\nexports.Version = exports.Version2;\nexports.PriceStatus = [\n    \"Unknown\",\n    \"Trading\",\n    \"Halted\",\n    \"Auction\"\n];\nexports.CorpAction = [\n    \"NoCorpAct\"\n];\nexports.PriceType = [\n    \"Unknown\",\n    \"Price\"\n];\nexports.DeriveType = [\n    \"Unknown\",\n    \"TWAP\",\n    \"Volatility\"\n];\nexports.AccountType = [\n    \"Unknown\",\n    \"Mapping\",\n    \"Product\",\n    \"Price\",\n    \"Test\"\n];\n/** Number of slots that can pass before a publisher's price is no longer included in the aggregate. */ exports.MAX_SLOT_DIFFERENCE = 25;\nvar empty32Buffer = buffer_1.Buffer.alloc(32);\nvar PKorNull = function(data) {\n    return data.equals(empty32Buffer) ? null : new web3_js_1.PublicKey(data);\n};\n/** Parse data as a generic Pyth account. Use this method if you don't know the account type. */ function parseBaseData(data) {\n    // data is too short to have the magic number.\n    if (data.byteLength < 4) {\n        return undefined;\n    }\n    var magic = data.readUInt32LE(0);\n    if (magic === exports.Magic) {\n        // program version\n        var version = data.readUInt32LE(4);\n        // account type\n        var type = data.readUInt32LE(8);\n        // account used size\n        var size = data.readUInt32LE(12);\n        return {\n            magic: magic,\n            version: version,\n            type: type,\n            size: size\n        };\n    } else {\n        return undefined;\n    }\n}\nexports.parseBaseData = parseBaseData;\nvar parseMappingData = function(data) {\n    // pyth magic number\n    var magic = data.readUInt32LE(0);\n    // program version\n    var version = data.readUInt32LE(4);\n    // account type\n    var type = data.readUInt32LE(8);\n    // account used size\n    var size = data.readUInt32LE(12);\n    // number of product accounts\n    var numProducts = data.readUInt32LE(16);\n    // unused\n    // const unused = accountInfo.data.readUInt32LE(20)\n    // next mapping account (if any)\n    var nextMappingAccount = PKorNull(data.slice(24, 56));\n    // read each symbol account\n    var offset = 56;\n    var productAccountKeys = [];\n    for(var i = 0; i < numProducts; i++){\n        var productAccountBytes = data.slice(offset, offset + 32);\n        var productAccountKey = new web3_js_1.PublicKey(productAccountBytes);\n        offset += 32;\n        productAccountKeys.push(productAccountKey);\n    }\n    return {\n        magic: magic,\n        version: version,\n        type: type,\n        size: size,\n        nextMappingAccount: nextMappingAccount,\n        productAccountKeys: productAccountKeys\n    };\n};\nexports.parseMappingData = parseMappingData;\nvar parseProductData = function(data) {\n    // pyth magic number\n    var magic = data.readUInt32LE(0);\n    // program version\n    var version = data.readUInt32LE(4);\n    // account type\n    var type = data.readUInt32LE(8);\n    // price account size\n    var size = data.readUInt32LE(12);\n    // first price account in list\n    var priceAccountBytes = data.slice(16, 48);\n    var priceAccountKey = new web3_js_1.PublicKey(priceAccountBytes);\n    var product = {};\n    var idx = 48;\n    while(idx < size){\n        var keyLength = data[idx];\n        idx++;\n        if (keyLength) {\n            var key = data.slice(idx, idx + keyLength).toString();\n            idx += keyLength;\n            var valueLength = data[idx];\n            idx++;\n            var value = data.slice(idx, idx + valueLength).toString();\n            idx += valueLength;\n            product[key] = value;\n        }\n    }\n    return {\n        magic: magic,\n        version: version,\n        type: type,\n        size: size,\n        priceAccountKey: priceAccountKey,\n        product: product\n    };\n};\nexports.parseProductData = parseProductData;\nvar parseEma = function(data, exponent) {\n    // current value of ema\n    var valueComponent = readBig_1.readBigInt64LE(data, 0);\n    var value = Number(valueComponent) * Math.pow(10, exponent);\n    // numerator state for next update\n    var numerator = readBig_1.readBigInt64LE(data, 8);\n    // denominator state for next update\n    var denominator = readBig_1.readBigInt64LE(data, 16);\n    return {\n        valueComponent: valueComponent,\n        value: value,\n        numerator: numerator,\n        denominator: denominator\n    };\n};\nvar parsePriceInfo = function(data, exponent) {\n    // aggregate price\n    var priceComponent = readBig_1.readBigInt64LE(data, 0);\n    var price = Number(priceComponent) * Math.pow(10, exponent);\n    // aggregate confidence\n    var confidenceComponent = readBig_1.readBigUInt64LE(data, 8);\n    var confidence = Number(confidenceComponent) * Math.pow(10, exponent);\n    // aggregate status\n    var status = data.readUInt32LE(16);\n    // aggregate corporate action\n    var corporateAction = data.readUInt32LE(20);\n    // aggregate publish slot\n    var publishSlot = readBig_1.readBigUInt64LE(data, 24);\n    return {\n        priceComponent: priceComponent,\n        price: price,\n        confidenceComponent: confidenceComponent,\n        confidence: confidence,\n        status: status,\n        corporateAction: corporateAction,\n        publishSlot: publishSlot\n    };\n};\nvar parsePriceData = function(data) {\n    // pyth magic number\n    var magic = data.readUInt32LE(0);\n    // program version\n    var version = data.readUInt32LE(4);\n    // account type\n    var type = data.readUInt32LE(8);\n    // price account size\n    var size = data.readUInt32LE(12);\n    // price or calculation type\n    var priceType = data.readUInt32LE(16);\n    // price exponent\n    var exponent = data.readInt32LE(20);\n    // number of component prices\n    var numComponentPrices = data.readUInt32LE(24);\n    // number of quoters that make up aggregate\n    var numQuoters = data.readUInt32LE(28);\n    // slot of last valid (not unknown) aggregate price\n    var lastSlot = readBig_1.readBigUInt64LE(data, 32);\n    // valid on-chain slot of aggregate price\n    var validSlot = readBig_1.readBigUInt64LE(data, 40);\n    // time-weighted average price\n    var twap = parseEma(data.slice(48, 72), exponent);\n    // time-weighted average confidence interval\n    var twac = parseEma(data.slice(72, 96), exponent);\n    // space for future derived values\n    var drv1Component = readBig_1.readBigInt64LE(data, 96);\n    var drv1 = Number(drv1Component) * Math.pow(10, exponent);\n    // minimum number of publishers for status to be TRADING\n    var minPublishers = data.readUInt8(104);\n    // space for future derived values\n    var drv2 = data.readInt8(105);\n    // space for future derived values\n    var drv3 = data.readInt16LE(106);\n    // space for future derived values\n    var drv4 = data.readInt32LE(108);\n    // product id / reference account\n    var productAccountKey = new web3_js_1.PublicKey(data.slice(112, 144));\n    // next price account in list\n    var nextPriceAccountKey = PKorNull(data.slice(144, 176));\n    // valid slot of previous update\n    var previousSlot = readBig_1.readBigUInt64LE(data, 176);\n    // aggregate price of previous update\n    var previousPriceComponent = readBig_1.readBigInt64LE(data, 184);\n    var previousPrice = Number(previousPriceComponent) * Math.pow(10, exponent);\n    // confidence interval of previous update\n    var previousConfidenceComponent = readBig_1.readBigUInt64LE(data, 192);\n    var previousConfidence = Number(previousConfidenceComponent) * Math.pow(10, exponent);\n    // space for future derived values\n    var drv5Component = readBig_1.readBigInt64LE(data, 200);\n    var drv5 = Number(drv5Component) * Math.pow(10, exponent);\n    var aggregate = parsePriceInfo(data.slice(208, 240), exponent);\n    var price;\n    var confidence;\n    if (aggregate.status === 1) {\n        price = aggregate.price;\n        confidence = aggregate.confidence;\n    }\n    // price components - up to 32\n    var priceComponents = [];\n    var offset = 240;\n    var shouldContinue = true;\n    while(offset < data.length && shouldContinue){\n        var publisher = PKorNull(data.slice(offset, offset + 32));\n        offset += 32;\n        if (publisher) {\n            var componentAggregate = parsePriceInfo(data.slice(offset, offset + 32), exponent);\n            offset += 32;\n            var latest = parsePriceInfo(data.slice(offset, offset + 32), exponent);\n            offset += 32;\n            priceComponents.push({\n                publisher: publisher,\n                aggregate: componentAggregate,\n                latest: latest\n            });\n        } else {\n            shouldContinue = false;\n        }\n    }\n    return {\n        magic: magic,\n        version: version,\n        type: type,\n        size: size,\n        priceType: priceType,\n        exponent: exponent,\n        numComponentPrices: numComponentPrices,\n        numQuoters: numQuoters,\n        lastSlot: lastSlot,\n        validSlot: validSlot,\n        twap: twap,\n        twac: twac,\n        drv1Component: drv1Component,\n        drv1: drv1,\n        minPublishers: minPublishers,\n        drv2: drv2,\n        drv3: drv3,\n        drv4: drv4,\n        productAccountKey: productAccountKey,\n        nextPriceAccountKey: nextPriceAccountKey,\n        previousSlot: previousSlot,\n        previousPriceComponent: previousPriceComponent,\n        previousPrice: previousPrice,\n        previousConfidenceComponent: previousConfidenceComponent,\n        previousConfidence: previousConfidence,\n        drv5Component: drv5Component,\n        drv5: drv5,\n        aggregate: aggregate,\n        priceComponents: priceComponents,\n        price: price,\n        confidence: confidence\n    };\n};\nexports.parsePriceData = parsePriceData;\nvar PythConnection_1 = __webpack_require__(/*! ./PythConnection */ \"(ssr)/./node_modules/@pythnetwork/client/lib/PythConnection.js\");\nObject.defineProperty(exports, \"PythConnection\", ({\n    enumerable: true,\n    get: function() {\n        return PythConnection_1.PythConnection;\n    }\n}));\nvar PythHttpClient_1 = __webpack_require__(/*! ./PythHttpClient */ \"(ssr)/./node_modules/@pythnetwork/client/lib/PythHttpClient.js\");\nObject.defineProperty(exports, \"PythHttpClient\", ({\n    enumerable: true,\n    get: function() {\n        return PythHttpClient_1.PythHttpClient;\n    }\n}));\nvar cluster_1 = __webpack_require__(/*! ./cluster */ \"(ssr)/./node_modules/@pythnetwork/client/lib/cluster.js\");\nObject.defineProperty(exports, \"getPythProgramKeyForCluster\", ({\n    enumerable: true,\n    get: function() {\n        return cluster_1.getPythProgramKeyForCluster;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@pythnetwork/client/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@pythnetwork/client/lib/readBig.js":
/*!*********************************************************!*\
  !*** ./node_modules/@pythnetwork/client/lib/readBig.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.readBigUInt64LE = exports.readBigInt64LE = void 0;\n// https://github.com/nodejs/node/blob/v14.17.0/lib/internal/errors.js#L758\nvar ERR_BUFFER_OUT_OF_BOUNDS = function() {\n    return new Error(\"Attempt to access memory outside buffer bounds\");\n};\n// https://github.com/nodejs/node/blob/v14.17.0/lib/internal/errors.js#L968\nvar ERR_INVALID_ARG_TYPE = function(name, expected, actual) {\n    return new Error('The \"' + name + '\" argument must be of type ' + expected + \". Received \" + actual);\n};\n// https://github.com/nodejs/node/blob/v14.17.0/lib/internal/errors.js#L1262\nvar ERR_OUT_OF_RANGE = function(str, range, received) {\n    return new Error('The value of \"' + str + \" is out of range. It must be \" + range + \". Received \" + received);\n};\n// https://github.com/nodejs/node/blob/v14.17.0/lib/internal/validators.js#L127-L130\nfunction validateNumber(value, name) {\n    if (typeof value !== \"number\") throw ERR_INVALID_ARG_TYPE(name, \"number\", value);\n}\n// https://github.com/nodejs/node/blob/v14.17.0/lib/internal/buffer.js#L68-L80\nfunction boundsError(value, length) {\n    if (Math.floor(value) !== value) {\n        validateNumber(value, \"offset\");\n        throw ERR_OUT_OF_RANGE(\"offset\", \"an integer\", value);\n    }\n    if (length < 0) throw ERR_BUFFER_OUT_OF_BOUNDS();\n    throw ERR_OUT_OF_RANGE(\"offset\", \">= 0 and <= \" + length, value);\n}\n// https://github.com/nodejs/node/blob/v14.17.0/lib/internal/buffer.js#L129-L145\nfunction readBigInt64LE(buffer, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    validateNumber(offset, \"offset\");\n    var first = buffer[offset];\n    var last = buffer[offset + 7];\n    if (first === undefined || last === undefined) boundsError(offset, buffer.length - 8);\n    // tslint:disable-next-line:no-bitwise\n    var val = buffer[offset + 4] + buffer[offset + 5] * Math.pow(2, 8) + buffer[offset + 6] * Math.pow(2, 16) + (last << 24); // Overflow\n    return (BigInt(val) << BigInt(32)) + // tslint:disable-line:no-bitwise\n    BigInt(first + buffer[++offset] * Math.pow(2, 8) + buffer[++offset] * Math.pow(2, 16) + buffer[++offset] * Math.pow(2, 24));\n}\nexports.readBigInt64LE = readBigInt64LE;\n// https://github.com/nodejs/node/blob/v14.17.0/lib/internal/buffer.js#L89-L107\nfunction readBigUInt64LE(buffer, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    validateNumber(offset, \"offset\");\n    var first = buffer[offset];\n    var last = buffer[offset + 7];\n    if (first === undefined || last === undefined) boundsError(offset, buffer.length - 8);\n    var lo = first + buffer[++offset] * Math.pow(2, 8) + buffer[++offset] * Math.pow(2, 16) + buffer[++offset] * Math.pow(2, 24);\n    var hi = buffer[++offset] + buffer[++offset] * Math.pow(2, 8) + buffer[++offset] * Math.pow(2, 16) + last * Math.pow(2, 24);\n    return BigInt(lo) + (BigInt(hi) << BigInt(32)); // tslint:disable-line:no-bitwise\n}\nexports.readBigUInt64LE = readBigUInt64LE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHB5dGhuZXR3b3JrL2NsaWVudC9saWIvcmVhZEJpZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLHNCQUFzQixHQUFHLEtBQUs7QUFDeEQsMkVBQTJFO0FBQzNFLElBQUlJLDJCQUEyQjtJQUFjLE9BQU8sSUFBSUMsTUFBTTtBQUFtRDtBQUNqSCwyRUFBMkU7QUFDM0UsSUFBSUMsdUJBQXVCLFNBQVVDLElBQUksRUFBRUMsUUFBUSxFQUFFQyxNQUFNO0lBQ3ZELE9BQU8sSUFBSUosTUFBTSxVQUFXRSxPQUFPLGdDQUFpQ0MsV0FBVyxnQkFBZ0JDO0FBQ25HO0FBQ0EsNEVBQTRFO0FBQzVFLElBQUlDLG1CQUFtQixTQUFVQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsUUFBUTtJQUNqRCxPQUFPLElBQUlSLE1BQU0sbUJBQW9CTSxNQUFNLGtDQUFrQ0MsUUFBUSxnQkFBZ0JDO0FBQ3pHO0FBQ0Esb0ZBQW9GO0FBQ3BGLFNBQVNDLGVBQWViLEtBQUssRUFBRU0sSUFBSTtJQUMvQixJQUFJLE9BQU9OLFVBQVUsVUFDakIsTUFBTUsscUJBQXFCQyxNQUFNLFVBQVVOO0FBQ25EO0FBQ0EsOEVBQThFO0FBQzlFLFNBQVNjLFlBQVlkLEtBQUssRUFBRWUsTUFBTTtJQUM5QixJQUFJQyxLQUFLQyxLQUFLLENBQUNqQixXQUFXQSxPQUFPO1FBQzdCYSxlQUFlYixPQUFPO1FBQ3RCLE1BQU1TLGlCQUFpQixVQUFVLGNBQWNUO0lBQ25EO0lBQ0EsSUFBSWUsU0FBUyxHQUNULE1BQU1aO0lBQ1YsTUFBTU0saUJBQWlCLFVBQVUsaUJBQWlCTSxRQUFRZjtBQUM5RDtBQUNBLGdGQUFnRjtBQUNoRixTQUFTRSxlQUFlZ0IsTUFBTSxFQUFFQyxNQUFNO0lBQ2xDLElBQUlBLFdBQVcsS0FBSyxHQUFHO1FBQUVBLFNBQVM7SUFBRztJQUNyQ04sZUFBZU0sUUFBUTtJQUN2QixJQUFJQyxRQUFRRixNQUFNLENBQUNDLE9BQU87SUFDMUIsSUFBSUUsT0FBT0gsTUFBTSxDQUFDQyxTQUFTLEVBQUU7SUFDN0IsSUFBSUMsVUFBVUUsYUFBYUQsU0FBU0MsV0FDaENSLFlBQVlLLFFBQVFELE9BQU9ILE1BQU0sR0FBRztJQUN4QyxzQ0FBc0M7SUFDdEMsSUFBSVEsTUFBTUwsTUFBTSxDQUFDQyxTQUFTLEVBQUUsR0FBR0QsTUFBTSxDQUFDQyxTQUFTLEVBQUUsR0FBR0gsS0FBS1EsR0FBRyxDQUFDLEdBQUcsS0FBS04sTUFBTSxDQUFDQyxTQUFTLEVBQUUsR0FBR0gsS0FBS1EsR0FBRyxDQUFDLEdBQUcsTUFBT0gsQ0FBQUEsUUFBUSxFQUFDLEdBQUksV0FBVztJQUNySSxPQUFRLENBQUNJLE9BQU9GLFFBQVFFLE9BQU8sR0FBRSxJQUFLLGlDQUFpQztJQUNuRUEsT0FBT0wsUUFBUUYsTUFBTSxDQUFDLEVBQUVDLE9BQU8sR0FBR0gsS0FBS1EsR0FBRyxDQUFDLEdBQUcsS0FBS04sTUFBTSxDQUFDLEVBQUVDLE9BQU8sR0FBR0gsS0FBS1EsR0FBRyxDQUFDLEdBQUcsTUFBTU4sTUFBTSxDQUFDLEVBQUVDLE9BQU8sR0FBR0gsS0FBS1EsR0FBRyxDQUFDLEdBQUc7QUFDL0g7QUFDQXpCLHNCQUFzQixHQUFHRztBQUN6QiwrRUFBK0U7QUFDL0UsU0FBU0QsZ0JBQWdCaUIsTUFBTSxFQUFFQyxNQUFNO0lBQ25DLElBQUlBLFdBQVcsS0FBSyxHQUFHO1FBQUVBLFNBQVM7SUFBRztJQUNyQ04sZUFBZU0sUUFBUTtJQUN2QixJQUFJQyxRQUFRRixNQUFNLENBQUNDLE9BQU87SUFDMUIsSUFBSUUsT0FBT0gsTUFBTSxDQUFDQyxTQUFTLEVBQUU7SUFDN0IsSUFBSUMsVUFBVUUsYUFBYUQsU0FBU0MsV0FDaENSLFlBQVlLLFFBQVFELE9BQU9ILE1BQU0sR0FBRztJQUN4QyxJQUFJVyxLQUFLTixRQUFRRixNQUFNLENBQUMsRUFBRUMsT0FBTyxHQUFHSCxLQUFLUSxHQUFHLENBQUMsR0FBRyxLQUFLTixNQUFNLENBQUMsRUFBRUMsT0FBTyxHQUFHSCxLQUFLUSxHQUFHLENBQUMsR0FBRyxNQUFNTixNQUFNLENBQUMsRUFBRUMsT0FBTyxHQUFHSCxLQUFLUSxHQUFHLENBQUMsR0FBRztJQUN6SCxJQUFJRyxLQUFLVCxNQUFNLENBQUMsRUFBRUMsT0FBTyxHQUFHRCxNQUFNLENBQUMsRUFBRUMsT0FBTyxHQUFHSCxLQUFLUSxHQUFHLENBQUMsR0FBRyxLQUFLTixNQUFNLENBQUMsRUFBRUMsT0FBTyxHQUFHSCxLQUFLUSxHQUFHLENBQUMsR0FBRyxNQUFNSCxPQUFPTCxLQUFLUSxHQUFHLENBQUMsR0FBRztJQUN4SCxPQUFPQyxPQUFPQyxNQUFPRCxDQUFBQSxPQUFPRSxPQUFPRixPQUFPLEdBQUUsR0FBSSxpQ0FBaUM7QUFDckY7QUFDQTFCLHVCQUF1QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQHB5dGhuZXR3b3JrL2NsaWVudC9saWIvcmVhZEJpZy5qcz81ZDA0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWFkQmlnVUludDY0TEUgPSBleHBvcnRzLnJlYWRCaWdJbnQ2NExFID0gdm9pZCAwO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvdjE0LjE3LjAvbGliL2ludGVybmFsL2Vycm9ycy5qcyNMNzU4XG52YXIgRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEVycm9yKCdBdHRlbXB0IHRvIGFjY2VzcyBtZW1vcnkgb3V0c2lkZSBidWZmZXIgYm91bmRzJyk7IH07XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTQuMTcuMC9saWIvaW50ZXJuYWwvZXJyb3JzLmpzI0w5NjhcbnZhciBFUlJfSU5WQUxJRF9BUkdfVFlQRSA9IGZ1bmN0aW9uIChuYW1lLCBleHBlY3RlZCwgYWN0dWFsKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcIlRoZSBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBcIiArIGV4cGVjdGVkICsgXCIuIFJlY2VpdmVkIFwiICsgYWN0dWFsKTtcbn07XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTQuMTcuMC9saWIvaW50ZXJuYWwvZXJyb3JzLmpzI0wxMjYyXG52YXIgRVJSX09VVF9PRl9SQU5HRSA9IGZ1bmN0aW9uIChzdHIsIHJhbmdlLCByZWNlaXZlZCkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgdmFsdWUgb2YgXFxcIlwiICsgc3RyICsgXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIFwiICsgcmFuZ2UgKyBcIi4gUmVjZWl2ZWQgXCIgKyByZWNlaXZlZCk7XG59O1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvdjE0LjE3LjAvbGliL2ludGVybmFsL3ZhbGlkYXRvcnMuanMjTDEyNy1MMTMwXG5mdW5jdGlvbiB2YWxpZGF0ZU51bWJlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKVxuICAgICAgICB0aHJvdyBFUlJfSU5WQUxJRF9BUkdfVFlQRShuYW1lLCAnbnVtYmVyJywgdmFsdWUpO1xufVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvdjE0LjE3LjAvbGliL2ludGVybmFsL2J1ZmZlci5qcyNMNjgtTDgwXG5mdW5jdGlvbiBib3VuZHNFcnJvcih2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSkge1xuICAgICAgICB2YWxpZGF0ZU51bWJlcih2YWx1ZSwgJ29mZnNldCcpO1xuICAgICAgICB0aHJvdyBFUlJfT1VUX09GX1JBTkdFKCdvZmZzZXQnLCAnYW4gaW50ZWdlcicsIHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCA8IDApXG4gICAgICAgIHRocm93IEVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUygpO1xuICAgIHRocm93IEVSUl9PVVRfT0ZfUkFOR0UoJ29mZnNldCcsIFwiPj0gMCBhbmQgPD0gXCIgKyBsZW5ndGgsIHZhbHVlKTtcbn1cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL3YxNC4xNy4wL2xpYi9pbnRlcm5hbC9idWZmZXIuanMjTDEyOS1MMTQ1XG5mdW5jdGlvbiByZWFkQmlnSW50NjRMRShidWZmZXIsIG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0Jyk7XG4gICAgdmFyIGZpcnN0ID0gYnVmZmVyW29mZnNldF07XG4gICAgdmFyIGxhc3QgPSBidWZmZXJbb2Zmc2V0ICsgN107XG4gICAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBib3VuZHNFcnJvcihvZmZzZXQsIGJ1ZmZlci5sZW5ndGggLSA4KTtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZVxuICAgIHZhciB2YWwgPSBidWZmZXJbb2Zmc2V0ICsgNF0gKyBidWZmZXJbb2Zmc2V0ICsgNV0gKiBNYXRoLnBvdygyLCA4KSArIGJ1ZmZlcltvZmZzZXQgKyA2XSAqIE1hdGgucG93KDIsIDE2KSArIChsYXN0IDw8IDI0KTsgLy8gT3ZlcmZsb3dcbiAgICByZXR1cm4gKChCaWdJbnQodmFsKSA8PCBCaWdJbnQoMzIpKSArIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYml0d2lzZVxuICAgICAgICBCaWdJbnQoZmlyc3QgKyBidWZmZXJbKytvZmZzZXRdICogTWF0aC5wb3coMiwgOCkgKyBidWZmZXJbKytvZmZzZXRdICogTWF0aC5wb3coMiwgMTYpICsgYnVmZmVyWysrb2Zmc2V0XSAqIE1hdGgucG93KDIsIDI0KSkpO1xufVxuZXhwb3J0cy5yZWFkQmlnSW50NjRMRSA9IHJlYWRCaWdJbnQ2NExFO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvdjE0LjE3LjAvbGliL2ludGVybmFsL2J1ZmZlci5qcyNMODktTDEwN1xuZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NExFKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKTtcbiAgICB2YXIgZmlyc3QgPSBidWZmZXJbb2Zmc2V0XTtcbiAgICB2YXIgbGFzdCA9IGJ1ZmZlcltvZmZzZXQgKyA3XTtcbiAgICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgYnVmZmVyLmxlbmd0aCAtIDgpO1xuICAgIHZhciBsbyA9IGZpcnN0ICsgYnVmZmVyWysrb2Zmc2V0XSAqIE1hdGgucG93KDIsIDgpICsgYnVmZmVyWysrb2Zmc2V0XSAqIE1hdGgucG93KDIsIDE2KSArIGJ1ZmZlclsrK29mZnNldF0gKiBNYXRoLnBvdygyLCAyNCk7XG4gICAgdmFyIGhpID0gYnVmZmVyWysrb2Zmc2V0XSArIGJ1ZmZlclsrK29mZnNldF0gKiBNYXRoLnBvdygyLCA4KSArIGJ1ZmZlclsrK29mZnNldF0gKiBNYXRoLnBvdygyLCAxNikgKyBsYXN0ICogTWF0aC5wb3coMiwgMjQpO1xuICAgIHJldHVybiBCaWdJbnQobG8pICsgKEJpZ0ludChoaSkgPDwgQmlnSW50KDMyKSk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYml0d2lzZVxufVxuZXhwb3J0cy5yZWFkQmlnVUludDY0TEUgPSByZWFkQmlnVUludDY0TEU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZWFkQmlnVUludDY0TEUiLCJyZWFkQmlnSW50NjRMRSIsIkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUyIsIkVycm9yIiwiRVJSX0lOVkFMSURfQVJHX1RZUEUiLCJuYW1lIiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJFUlJfT1VUX09GX1JBTkdFIiwic3RyIiwicmFuZ2UiLCJyZWNlaXZlZCIsInZhbGlkYXRlTnVtYmVyIiwiYm91bmRzRXJyb3IiLCJsZW5ndGgiLCJNYXRoIiwiZmxvb3IiLCJidWZmZXIiLCJvZmZzZXQiLCJmaXJzdCIsImxhc3QiLCJ1bmRlZmluZWQiLCJ2YWwiLCJwb3ciLCJCaWdJbnQiLCJsbyIsImhpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@pythnetwork/client/lib/readBig.js\n");

/***/ })

};
;