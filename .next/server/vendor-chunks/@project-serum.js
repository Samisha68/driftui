"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@project-serum";
exports.ids = ["vendor-chunks/@project-serum"];
exports.modules = {

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/accounts.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/coder/accounts.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCOUNT_DISCRIMINATOR_SIZE: () => (/* binding */ ACCOUNT_DISCRIMINATOR_SIZE),\n/* harmony export */   AccountsCoder: () => (/* binding */ AccountsCoder),\n/* harmony export */   accountDiscriminator: () => (/* binding */ accountDiscriminator)\n/* harmony export */ });\n/* harmony import */ var _idl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./idl */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/idl.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/js-sha256/src/sha256.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(js_sha256__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/**\n * Number of bytes of the account discriminator.\n */ const ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */ class AccountsCoder {\n    constructor(idl){\n        if (idl.accounts === undefined) {\n            this.accountLayouts = new Map();\n            return;\n        }\n        const layouts = idl.accounts.map((acc)=>{\n            return [\n                acc.name,\n                _idl__WEBPACK_IMPORTED_MODULE_0__.IdlCoder.typeDefLayout(acc, idl.types)\n            ];\n        });\n        this.accountLayouts = new Map(layouts);\n    }\n    async encode(accountName, account) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const layout = this.accountLayouts.get(accountName);\n        const len = layout.encode(account, buffer);\n        let accountData = buffer.slice(0, len);\n        let discriminator = await accountDiscriminator(accountName);\n        return Buffer.concat([\n            discriminator,\n            accountData\n        ]);\n    }\n    decode(accountName, ix) {\n        // Chop off the discriminator before decoding.\n        const data = ix.slice(8);\n        const layout = this.accountLayouts.get(accountName);\n        return layout.decode(data);\n    }\n}\n// Calculates unique 8 byte discriminator prepended to all anchor accounts.\nasync function accountDiscriminator(name) {\n    return Buffer.from(js_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256.digest(`account:${name}`)).slice(0, 8);\n} //# sourceMappingURL=accounts.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL2NvZGVyL2FjY291bnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpQztBQUNFO0FBQ25DOztDQUVDLEdBQ00sTUFBTUUsNkJBQTZCLEVBQUU7QUFDNUM7O0NBRUMsR0FDTSxNQUFNQztJQUNUQyxZQUFZQyxHQUFHLENBQUU7UUFDYixJQUFJQSxJQUFJQyxRQUFRLEtBQUtDLFdBQVc7WUFDNUIsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSUM7WUFDMUI7UUFDSjtRQUNBLE1BQU1DLFVBQVVMLElBQUlDLFFBQVEsQ0FBQ0ssR0FBRyxDQUFDLENBQUNDO1lBQzlCLE9BQU87Z0JBQUNBLElBQUlDLElBQUk7Z0JBQUViLDBDQUFRQSxDQUFDYyxhQUFhLENBQUNGLEtBQUtQLElBQUlVLEtBQUs7YUFBRTtRQUM3RDtRQUNBLElBQUksQ0FBQ1AsY0FBYyxHQUFHLElBQUlDLElBQUlDO0lBQ2xDO0lBQ0EsTUFBTU0sT0FBT0MsV0FBVyxFQUFFQyxPQUFPLEVBQUU7UUFDL0IsTUFBTUMsU0FBU0MsT0FBT0MsS0FBSyxDQUFDLE9BQU8sOEJBQThCO1FBQ2pFLE1BQU1DLFNBQVMsSUFBSSxDQUFDZCxjQUFjLENBQUNlLEdBQUcsQ0FBQ047UUFDdkMsTUFBTU8sTUFBTUYsT0FBT04sTUFBTSxDQUFDRSxTQUFTQztRQUNuQyxJQUFJTSxjQUFjTixPQUFPTyxLQUFLLENBQUMsR0FBR0Y7UUFDbEMsSUFBSUcsZ0JBQWdCLE1BQU1DLHFCQUFxQlg7UUFDL0MsT0FBT0csT0FBT1MsTUFBTSxDQUFDO1lBQUNGO1lBQWVGO1NBQVk7SUFDckQ7SUFDQUssT0FBT2IsV0FBVyxFQUFFYyxFQUFFLEVBQUU7UUFDcEIsOENBQThDO1FBQzlDLE1BQU1DLE9BQU9ELEdBQUdMLEtBQUssQ0FBQztRQUN0QixNQUFNSixTQUFTLElBQUksQ0FBQ2QsY0FBYyxDQUFDZSxHQUFHLENBQUNOO1FBQ3ZDLE9BQU9LLE9BQU9RLE1BQU0sQ0FBQ0U7SUFDekI7QUFDSjtBQUNBLDJFQUEyRTtBQUNwRSxlQUFlSixxQkFBcUJmLElBQUk7SUFDM0MsT0FBT08sT0FBT2EsSUFBSSxDQUFDaEMsNkNBQU1BLENBQUNpQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUVyQixLQUFLLENBQUMsR0FBR2EsS0FBSyxDQUFDLEdBQUc7QUFDbEUsRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS9jb2Rlci9hY2NvdW50cy5qcz9kMzk0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElkbENvZGVyIH0gZnJvbSBcIi4vaWRsXCI7XG5pbXBvcnQgeyBzaGEyNTYgfSBmcm9tIFwianMtc2hhMjU2XCI7XG4vKipcbiAqIE51bWJlciBvZiBieXRlcyBvZiB0aGUgYWNjb3VudCBkaXNjcmltaW5hdG9yLlxuICovXG5leHBvcnQgY29uc3QgQUNDT1VOVF9ESVNDUklNSU5BVE9SX1NJWkUgPSA4O1xuLyoqXG4gKiBFbmNvZGVzIGFuZCBkZWNvZGVzIGFjY291bnQgb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFjY291bnRzQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGlkbCkge1xuICAgICAgICBpZiAoaWRsLmFjY291bnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWNjb3VudExheW91dHMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGF5b3V0cyA9IGlkbC5hY2NvdW50cy5tYXAoKGFjYykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFthY2MubmFtZSwgSWRsQ29kZXIudHlwZURlZkxheW91dChhY2MsIGlkbC50eXBlcyldO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hY2NvdW50TGF5b3V0cyA9IG5ldyBNYXAobGF5b3V0cyk7XG4gICAgfVxuICAgIGFzeW5jIGVuY29kZShhY2NvdW50TmFtZSwgYWNjb3VudCkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2MoMTAwMCk7IC8vIFRPRE86IHVzZSBhIHRpZ2h0ZXIgYnVmZmVyLlxuICAgICAgICBjb25zdCBsYXlvdXQgPSB0aGlzLmFjY291bnRMYXlvdXRzLmdldChhY2NvdW50TmFtZSk7XG4gICAgICAgIGNvbnN0IGxlbiA9IGxheW91dC5lbmNvZGUoYWNjb3VudCwgYnVmZmVyKTtcbiAgICAgICAgbGV0IGFjY291bnREYXRhID0gYnVmZmVyLnNsaWNlKDAsIGxlbik7XG4gICAgICAgIGxldCBkaXNjcmltaW5hdG9yID0gYXdhaXQgYWNjb3VudERpc2NyaW1pbmF0b3IoYWNjb3VudE5hbWUpO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbZGlzY3JpbWluYXRvciwgYWNjb3VudERhdGFdKTtcbiAgICB9XG4gICAgZGVjb2RlKGFjY291bnROYW1lLCBpeCkge1xuICAgICAgICAvLyBDaG9wIG9mZiB0aGUgZGlzY3JpbWluYXRvciBiZWZvcmUgZGVjb2RpbmcuXG4gICAgICAgIGNvbnN0IGRhdGEgPSBpeC5zbGljZSg4KTtcbiAgICAgICAgY29uc3QgbGF5b3V0ID0gdGhpcy5hY2NvdW50TGF5b3V0cy5nZXQoYWNjb3VudE5hbWUpO1xuICAgICAgICByZXR1cm4gbGF5b3V0LmRlY29kZShkYXRhKTtcbiAgICB9XG59XG4vLyBDYWxjdWxhdGVzIHVuaXF1ZSA4IGJ5dGUgZGlzY3JpbWluYXRvciBwcmVwZW5kZWQgdG8gYWxsIGFuY2hvciBhY2NvdW50cy5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhY2NvdW50RGlzY3JpbWluYXRvcihuYW1lKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNoYTI1Ni5kaWdlc3QoYGFjY291bnQ6JHtuYW1lfWApKS5zbGljZSgwLCA4KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY291bnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJJZGxDb2RlciIsInNoYTI1NiIsIkFDQ09VTlRfRElTQ1JJTUlOQVRPUl9TSVpFIiwiQWNjb3VudHNDb2RlciIsImNvbnN0cnVjdG9yIiwiaWRsIiwiYWNjb3VudHMiLCJ1bmRlZmluZWQiLCJhY2NvdW50TGF5b3V0cyIsIk1hcCIsImxheW91dHMiLCJtYXAiLCJhY2MiLCJuYW1lIiwidHlwZURlZkxheW91dCIsInR5cGVzIiwiZW5jb2RlIiwiYWNjb3VudE5hbWUiLCJhY2NvdW50IiwiYnVmZmVyIiwiQnVmZmVyIiwiYWxsb2MiLCJsYXlvdXQiLCJnZXQiLCJsZW4iLCJhY2NvdW50RGF0YSIsInNsaWNlIiwiZGlzY3JpbWluYXRvciIsImFjY291bnREaXNjcmltaW5hdG9yIiwiY29uY2F0IiwiZGVjb2RlIiwiaXgiLCJkYXRhIiwiZnJvbSIsImRpZ2VzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/accounts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/common.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/coder/common.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accountSize: () => (/* binding */ accountSize),\n/* harmony export */   sighash: () => (/* binding */ sighash)\n/* harmony export */ });\n/* harmony import */ var snake_case__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! snake-case */ \"(ssr)/./node_modules/snake-case/dist.es2015/index.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/js-sha256/src/sha256.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sha256__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/error.js\");\n\n\n\nfunction accountSize(idl, idlAccount) {\n    if (idlAccount.type.kind === \"enum\") {\n        let variantSizes = idlAccount.type.variants.map((variant)=>{\n            if (variant.fields === undefined) {\n                return 0;\n            }\n            return variant.fields// @ts-ignore\n            .map((f)=>{\n                // @ts-ignore\n                if (f.name === undefined) {\n                    throw new Error(\"Tuple enum variants not yet implemented.\");\n                }\n                // @ts-ignore\n                return typeSize(idl, f.type);\n            }).reduce((a, b)=>a + b);\n        });\n        return Math.max(...variantSizes) + 1;\n    }\n    if (idlAccount.type.fields === undefined) {\n        return 0;\n    }\n    return idlAccount.type.fields.map((f)=>typeSize(idl, f.type)).reduce((a, b)=>a + b);\n}\n// Returns the size of the type in bytes. For variable length types, just return\n// 1. Users should override this value in such cases.\nfunction typeSize(idl, ty) {\n    switch(ty){\n        case \"bool\":\n            return 1;\n        case \"u8\":\n            return 1;\n        case \"i8\":\n            return 1;\n        case \"i16\":\n            return 2;\n        case \"u16\":\n            return 2;\n        case \"u32\":\n            return 4;\n        case \"i32\":\n            return 4;\n        case \"u64\":\n            return 8;\n        case \"i64\":\n            return 8;\n        case \"u128\":\n            return 16;\n        case \"i128\":\n            return 16;\n        case \"bytes\":\n            return 1;\n        case \"string\":\n            return 1;\n        case \"publicKey\":\n            return 32;\n        default:\n            // @ts-ignore\n            if (ty.vec !== undefined) {\n                return 1;\n            }\n            // @ts-ignore\n            if (ty.option !== undefined) {\n                // @ts-ignore\n                return 1 + typeSize(idl, ty.option);\n            }\n            // @ts-ignore\n            if (ty.defined !== undefined) {\n                // @ts-ignore\n                const filtered = idl.types.filter((t)=>t.name === ty.defined);\n                if (filtered.length !== 1) {\n                    throw new _error__WEBPACK_IMPORTED_MODULE_1__.IdlError(`Type not found: ${JSON.stringify(ty)}`);\n                }\n                let typeDef = filtered[0];\n                return accountSize(idl, typeDef);\n            }\n            // @ts-ignore\n            if (ty.array !== undefined) {\n                // @ts-ignore\n                let arrayTy = ty.array[0];\n                // @ts-ignore\n                let arraySize = ty.array[1];\n                // @ts-ignore\n                return typeSize(idl, arrayTy) * arraySize;\n            }\n            throw new Error(`Invalid type ${JSON.stringify(ty)}`);\n    }\n}\n// Not technically sighash, since we don't include the arguments, as Rust\n// doesn't allow function overloading.\nfunction sighash(nameSpace, ixName) {\n    let name = (0,snake_case__WEBPACK_IMPORTED_MODULE_2__.snakeCase)(ixName);\n    let preimage = `${nameSpace}:${name}`;\n    return Buffer.from(js_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(preimage)).slice(0, 8);\n} //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/event.js":
/*!********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/coder/event.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventCoder: () => (/* binding */ EventCoder),\n/* harmony export */   eventDiscriminator: () => (/* binding */ eventDiscriminator)\n/* harmony export */ });\n/* harmony import */ var base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base64-js */ \"(ssr)/./node_modules/base64-js/index.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/js-sha256/src/sha256.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(js_sha256__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _idl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./idl */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/idl.js\");\n\n\n\nclass EventCoder {\n    constructor(idl){\n        if (idl.events === undefined) {\n            this.layouts = new Map();\n            return;\n        }\n        const layouts = idl.events.map((event)=>{\n            let eventTypeDef = {\n                name: event.name,\n                type: {\n                    kind: \"struct\",\n                    fields: event.fields.map((f)=>{\n                        return {\n                            name: f.name,\n                            type: f.type\n                        };\n                    })\n                }\n            };\n            return [\n                event.name,\n                _idl__WEBPACK_IMPORTED_MODULE_2__.IdlCoder.typeDefLayout(eventTypeDef, idl.types)\n            ];\n        });\n        // @ts-ignore\n        this.layouts = new Map(layouts);\n        this.discriminators = new Map(idl.events === undefined ? [] : idl.events.map((e)=>[\n                base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(eventDiscriminator(e.name)),\n                e.name\n            ]));\n    }\n    decode(log) {\n        let logArr;\n        // This will throw if log length is not a multiple of 4.\n        try {\n            logArr = Buffer.from(base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(log));\n        } catch (e) {\n            return null;\n        }\n        const disc = base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(logArr.slice(0, 8));\n        // Only deserialize if the discriminator implies a proper event.\n        const eventName = this.discriminators.get(disc);\n        if (eventName === undefined) {\n            return null;\n        }\n        const layout = this.layouts.get(eventName);\n        const data = layout.decode(logArr.slice(8));\n        return {\n            data,\n            name: eventName\n        };\n    }\n}\nfunction eventDiscriminator(name) {\n    return Buffer.from(js_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256.digest(`event:${name}`)).slice(0, 8);\n} //# sourceMappingURL=event.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL2NvZGVyL2V2ZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFvQztBQUNEO0FBQ0Y7QUFDMUIsTUFBTUc7SUFDVEMsWUFBWUMsR0FBRyxDQUFFO1FBQ2IsSUFBSUEsSUFBSUMsTUFBTSxLQUFLQyxXQUFXO1lBQzFCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDO1lBQ25CO1FBQ0o7UUFDQSxNQUFNRCxVQUFVSCxJQUFJQyxNQUFNLENBQUNJLEdBQUcsQ0FBQyxDQUFDQztZQUM1QixJQUFJQyxlQUFlO2dCQUNmQyxNQUFNRixNQUFNRSxJQUFJO2dCQUNoQkMsTUFBTTtvQkFDRkMsTUFBTTtvQkFDTkMsUUFBUUwsTUFBTUssTUFBTSxDQUFDTixHQUFHLENBQUMsQ0FBQ087d0JBQ3RCLE9BQU87NEJBQUVKLE1BQU1JLEVBQUVKLElBQUk7NEJBQUVDLE1BQU1HLEVBQUVILElBQUk7d0JBQUM7b0JBQ3hDO2dCQUNKO1lBQ0o7WUFDQSxPQUFPO2dCQUFDSCxNQUFNRSxJQUFJO2dCQUFFWCwwQ0FBUUEsQ0FBQ2dCLGFBQWEsQ0FBQ04sY0FBY1AsSUFBSWMsS0FBSzthQUFFO1FBQ3hFO1FBQ0EsYUFBYTtRQUNiLElBQUksQ0FBQ1gsT0FBTyxHQUFHLElBQUlDLElBQUlEO1FBQ3ZCLElBQUksQ0FBQ1ksY0FBYyxHQUFHLElBQUlYLElBQUlKLElBQUlDLE1BQU0sS0FBS0MsWUFDdkMsRUFBRSxHQUNGRixJQUFJQyxNQUFNLENBQUNJLEdBQUcsQ0FBQyxDQUFDVyxJQUFNO2dCQUNwQnJCLG9EQUFvQixDQUFDdUIsbUJBQW1CRixFQUFFUixJQUFJO2dCQUM5Q1EsRUFBRVIsSUFBSTthQUNUO0lBQ1Q7SUFDQVcsT0FBT0MsR0FBRyxFQUFFO1FBQ1IsSUFBSUM7UUFDSix3REFBd0Q7UUFDeEQsSUFBSTtZQUNBQSxTQUFTQyxPQUFPQyxJQUFJLENBQUM1QixrREFBa0IsQ0FBQ3lCO1FBQzVDLEVBQ0EsT0FBT0osR0FBRztZQUNOLE9BQU87UUFDWDtRQUNBLE1BQU1TLE9BQU85QixvREFBb0IsQ0FBQzBCLE9BQU9LLEtBQUssQ0FBQyxHQUFHO1FBQ2xELGdFQUFnRTtRQUNoRSxNQUFNQyxZQUFZLElBQUksQ0FBQ1osY0FBYyxDQUFDYSxHQUFHLENBQUNIO1FBQzFDLElBQUlFLGNBQWN6QixXQUFXO1lBQ3pCLE9BQU87UUFDWDtRQUNBLE1BQU0yQixTQUFTLElBQUksQ0FBQzFCLE9BQU8sQ0FBQ3lCLEdBQUcsQ0FBQ0Q7UUFDaEMsTUFBTUcsT0FBT0QsT0FBT1YsTUFBTSxDQUFDRSxPQUFPSyxLQUFLLENBQUM7UUFDeEMsT0FBTztZQUFFSTtZQUFNdEIsTUFBTW1CO1FBQVU7SUFDbkM7QUFDSjtBQUNPLFNBQVNULG1CQUFtQlYsSUFBSTtJQUNuQyxPQUFPYyxPQUFPQyxJQUFJLENBQUMzQiw2Q0FBTUEsQ0FBQ21DLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRXZCLEtBQUssQ0FBQyxHQUFHa0IsS0FBSyxDQUFDLEdBQUc7QUFDaEUsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS9jb2Rlci9ldmVudC5qcz82NmVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJhc2U2NCBmcm9tIFwiYmFzZTY0LWpzXCI7XG5pbXBvcnQgeyBzaGEyNTYgfSBmcm9tIFwianMtc2hhMjU2XCI7XG5pbXBvcnQgeyBJZGxDb2RlciB9IGZyb20gXCIuL2lkbFwiO1xuZXhwb3J0IGNsYXNzIEV2ZW50Q29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGlkbCkge1xuICAgICAgICBpZiAoaWRsLmV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmxheW91dHMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGF5b3V0cyA9IGlkbC5ldmVudHMubWFwKChldmVudCkgPT4ge1xuICAgICAgICAgICAgbGV0IGV2ZW50VHlwZURlZiA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBldmVudC5uYW1lLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAga2luZDogXCJzdHJ1Y3RcIixcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzOiBldmVudC5maWVsZHMubWFwKChmKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBuYW1lOiBmLm5hbWUsIHR5cGU6IGYudHlwZSB9O1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBbZXZlbnQubmFtZSwgSWRsQ29kZXIudHlwZURlZkxheW91dChldmVudFR5cGVEZWYsIGlkbC50eXBlcyldO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmxheW91dHMgPSBuZXcgTWFwKGxheW91dHMpO1xuICAgICAgICB0aGlzLmRpc2NyaW1pbmF0b3JzID0gbmV3IE1hcChpZGwuZXZlbnRzID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gW11cbiAgICAgICAgICAgIDogaWRsLmV2ZW50cy5tYXAoKGUpID0+IFtcbiAgICAgICAgICAgICAgICBiYXNlNjQuZnJvbUJ5dGVBcnJheShldmVudERpc2NyaW1pbmF0b3IoZS5uYW1lKSksXG4gICAgICAgICAgICAgICAgZS5uYW1lLFxuICAgICAgICAgICAgXSkpO1xuICAgIH1cbiAgICBkZWNvZGUobG9nKSB7XG4gICAgICAgIGxldCBsb2dBcnI7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBpZiBsb2cgbGVuZ3RoIGlzIG5vdCBhIG11bHRpcGxlIG9mIDQuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2dBcnIgPSBCdWZmZXIuZnJvbShiYXNlNjQudG9CeXRlQXJyYXkobG9nKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc2MgPSBiYXNlNjQuZnJvbUJ5dGVBcnJheShsb2dBcnIuc2xpY2UoMCwgOCkpO1xuICAgICAgICAvLyBPbmx5IGRlc2VyaWFsaXplIGlmIHRoZSBkaXNjcmltaW5hdG9yIGltcGxpZXMgYSBwcm9wZXIgZXZlbnQuXG4gICAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IHRoaXMuZGlzY3JpbWluYXRvcnMuZ2V0KGRpc2MpO1xuICAgICAgICBpZiAoZXZlbnROYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxheW91dCA9IHRoaXMubGF5b3V0cy5nZXQoZXZlbnROYW1lKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGxheW91dC5kZWNvZGUobG9nQXJyLnNsaWNlKDgpKTtcbiAgICAgICAgcmV0dXJuIHsgZGF0YSwgbmFtZTogZXZlbnROYW1lIH07XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50RGlzY3JpbWluYXRvcihuYW1lKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNoYTI1Ni5kaWdlc3QoYGV2ZW50OiR7bmFtZX1gKSkuc2xpY2UoMCwgOCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudC5qcy5tYXAiXSwibmFtZXMiOlsiYmFzZTY0Iiwic2hhMjU2IiwiSWRsQ29kZXIiLCJFdmVudENvZGVyIiwiY29uc3RydWN0b3IiLCJpZGwiLCJldmVudHMiLCJ1bmRlZmluZWQiLCJsYXlvdXRzIiwiTWFwIiwibWFwIiwiZXZlbnQiLCJldmVudFR5cGVEZWYiLCJuYW1lIiwidHlwZSIsImtpbmQiLCJmaWVsZHMiLCJmIiwidHlwZURlZkxheW91dCIsInR5cGVzIiwiZGlzY3JpbWluYXRvcnMiLCJlIiwiZnJvbUJ5dGVBcnJheSIsImV2ZW50RGlzY3JpbWluYXRvciIsImRlY29kZSIsImxvZyIsImxvZ0FyciIsIkJ1ZmZlciIsImZyb20iLCJ0b0J5dGVBcnJheSIsImRpc2MiLCJzbGljZSIsImV2ZW50TmFtZSIsImdldCIsImxheW91dCIsImRhdGEiLCJkaWdlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/event.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/idl.js":
/*!******************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/coder/idl.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IdlCoder: () => (/* binding */ IdlCoder)\n/* harmony export */ });\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! camelcase */ \"(ssr)/./node_modules/@project-serum/anchor/node_modules/camelcase/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(camelcase__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @project-serum/borsh */ \"(ssr)/./node_modules/@project-serum/borsh/dist/lib/index.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/error.js\");\n\n\n\nclass IdlCoder {\n    static fieldLayout(field, types) {\n        const fieldName = field.name !== undefined ? camelcase__WEBPACK_IMPORTED_MODULE_0___default()(field.name) : undefined;\n        switch(field.type){\n            case \"bool\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.bool(fieldName);\n                }\n            case \"u8\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.u8(fieldName);\n                }\n            case \"i8\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.i8(fieldName);\n                }\n            case \"u16\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.u16(fieldName);\n                }\n            case \"i16\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.i16(fieldName);\n                }\n            case \"u32\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.u32(fieldName);\n                }\n            case \"i32\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.i32(fieldName);\n                }\n            case \"u64\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.u64(fieldName);\n                }\n            case \"i64\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.i64(fieldName);\n                }\n            case \"u128\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.u128(fieldName);\n                }\n            case \"i128\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.i128(fieldName);\n                }\n            case \"bytes\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.vecU8(fieldName);\n                }\n            case \"string\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.str(fieldName);\n                }\n            case \"publicKey\":\n                {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.publicKey(fieldName);\n                }\n            default:\n                {\n                    // @ts-ignore\n                    if (field.type.vec) {\n                        return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.vec(IdlCoder.fieldLayout({\n                            name: undefined,\n                            // @ts-ignore\n                            type: field.type.vec\n                        }, types), fieldName);\n                    // @ts-ignore\n                    } else if (field.type.option) {\n                        return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.option(IdlCoder.fieldLayout({\n                            name: undefined,\n                            // @ts-ignore\n                            type: field.type.option\n                        }, types), fieldName);\n                    // @ts-ignore\n                    } else if (field.type.defined) {\n                        // User defined type.\n                        if (types === undefined) {\n                            throw new _error__WEBPACK_IMPORTED_MODULE_2__.IdlError(\"User defined types not provided\");\n                        }\n                        // @ts-ignore\n                        const filtered = types.filter((t)=>t.name === field.type.defined);\n                        if (filtered.length !== 1) {\n                            throw new _error__WEBPACK_IMPORTED_MODULE_2__.IdlError(`Type not found: ${JSON.stringify(field)}`);\n                        }\n                        return IdlCoder.typeDefLayout(filtered[0], types, fieldName);\n                    // @ts-ignore\n                    } else if (field.type.array) {\n                        // @ts-ignore\n                        let arrayTy = field.type.array[0];\n                        // @ts-ignore\n                        let arrayLen = field.type.array[1];\n                        let innerLayout = IdlCoder.fieldLayout({\n                            name: undefined,\n                            type: arrayTy\n                        }, types);\n                        return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.array(innerLayout, arrayLen, fieldName);\n                    } else {\n                        throw new Error(`Not yet implemented: ${field}`);\n                    }\n                }\n        }\n    }\n    static typeDefLayout(typeDef, types, name) {\n        if (typeDef.type.kind === \"struct\") {\n            const fieldLayouts = typeDef.type.fields.map((field)=>{\n                const x = IdlCoder.fieldLayout(field, types);\n                return x;\n            });\n            return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.struct(fieldLayouts, name);\n        } else if (typeDef.type.kind === \"enum\") {\n            let variants = typeDef.type.variants.map((variant)=>{\n                const name = camelcase__WEBPACK_IMPORTED_MODULE_0___default()(variant.name);\n                if (variant.fields === undefined) {\n                    return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.struct([], name);\n                }\n                // @ts-ignore\n                const fieldLayouts = variant.fields.map((f)=>{\n                    // @ts-ignore\n                    if (f.name === undefined) {\n                        throw new Error(\"Tuple enum variants not yet implemented.\");\n                    }\n                    // @ts-ignore\n                    return IdlCoder.fieldLayout(f, types);\n                });\n                return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.struct(fieldLayouts, name);\n            });\n            if (name !== undefined) {\n                // Buffer-layout lib requires the name to be null (on construction)\n                // when used as a field.\n                return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.rustEnum(variants).replicate(name);\n            }\n            return _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.rustEnum(variants, name);\n        } else {\n            throw new Error(`Unknown type kint: ${typeDef}`);\n        }\n    }\n} //# sourceMappingURL=idl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/idl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/coder/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCOUNT_DISCRIMINATOR_SIZE: () => (/* reexport safe */ _accounts__WEBPACK_IMPORTED_MODULE_1__.ACCOUNT_DISCRIMINATOR_SIZE),\n/* harmony export */   AccountsCoder: () => (/* reexport safe */ _accounts__WEBPACK_IMPORTED_MODULE_1__.AccountsCoder),\n/* harmony export */   EventCoder: () => (/* reexport safe */ _event__WEBPACK_IMPORTED_MODULE_3__.EventCoder),\n/* harmony export */   InstructionCoder: () => (/* reexport safe */ _instruction__WEBPACK_IMPORTED_MODULE_0__.InstructionCoder),\n/* harmony export */   StateCoder: () => (/* reexport safe */ _state__WEBPACK_IMPORTED_MODULE_4__.StateCoder),\n/* harmony export */   TypesCoder: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.TypesCoder),\n/* harmony export */   accountDiscriminator: () => (/* reexport safe */ _accounts__WEBPACK_IMPORTED_MODULE_1__.accountDiscriminator),\n/* harmony export */   accountSize: () => (/* reexport safe */ _common__WEBPACK_IMPORTED_MODULE_5__.accountSize),\n/* harmony export */   \"default\": () => (/* binding */ Coder),\n/* harmony export */   eventDiscriminator: () => (/* reexport safe */ _event__WEBPACK_IMPORTED_MODULE_3__.eventDiscriminator),\n/* harmony export */   stateDiscriminator: () => (/* reexport safe */ _state__WEBPACK_IMPORTED_MODULE_4__.stateDiscriminator)\n/* harmony export */ });\n/* harmony import */ var _instruction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instruction */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/instruction.js\");\n/* harmony import */ var _accounts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accounts */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/accounts.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/types.js\");\n/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./event */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/event.js\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./state */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/state.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/common.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Coder provides a facade for encoding and decoding all IDL related objects.\n */ class Coder {\n    constructor(idl){\n        this.instruction = new _instruction__WEBPACK_IMPORTED_MODULE_0__.InstructionCoder(idl);\n        this.accounts = new _accounts__WEBPACK_IMPORTED_MODULE_1__.AccountsCoder(idl);\n        this.types = new _types__WEBPACK_IMPORTED_MODULE_2__.TypesCoder(idl);\n        this.events = new _event__WEBPACK_IMPORTED_MODULE_3__.EventCoder(idl);\n        if (idl.state) {\n            this.state = new _state__WEBPACK_IMPORTED_MODULE_4__.StateCoder(idl);\n        }\n    }\n    sighash(nameSpace, ixName) {\n        return (0,_common__WEBPACK_IMPORTED_MODULE_5__.sighash)(nameSpace, ixName);\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL2NvZGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlEO0FBQ047QUFDTjtBQUNBO0FBQ0E7QUFDRjtBQUNJO0FBQ0Y7QUFDWTtBQUM2QztBQUNyQztBQUNBO0FBQ3pEOztDQUVDLEdBQ2MsTUFBTVc7SUFDakJDLFlBQVlDLEdBQUcsQ0FBRTtRQUNiLElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlkLDBEQUFnQkEsQ0FBQ2E7UUFDeEMsSUFBSSxDQUFDRSxRQUFRLEdBQUcsSUFBSWQsb0RBQWFBLENBQUNZO1FBQ2xDLElBQUksQ0FBQ0csS0FBSyxHQUFHLElBQUlkLDhDQUFVQSxDQUFDVztRQUM1QixJQUFJLENBQUNJLE1BQU0sR0FBRyxJQUFJZCw4Q0FBVUEsQ0FBQ1U7UUFDN0IsSUFBSUEsSUFBSUssS0FBSyxFQUFFO1lBQ1gsSUFBSSxDQUFDQSxLQUFLLEdBQUcsSUFBSWQsOENBQVVBLENBQUNTO1FBQ2hDO0lBQ0o7SUFDQVIsUUFBUWMsU0FBUyxFQUFFQyxNQUFNLEVBQUU7UUFDdkIsT0FBT2YsZ0RBQU9BLENBQUNjLFdBQVdDO0lBQzlCO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS9jb2Rlci9pbmRleC5qcz83NWEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluc3RydWN0aW9uQ29kZXIgfSBmcm9tIFwiLi9pbnN0cnVjdGlvblwiO1xuaW1wb3J0IHsgQWNjb3VudHNDb2RlciB9IGZyb20gXCIuL2FjY291bnRzXCI7XG5pbXBvcnQgeyBUeXBlc0NvZGVyIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IEV2ZW50Q29kZXIgfSBmcm9tIFwiLi9ldmVudFwiO1xuaW1wb3J0IHsgU3RhdGVDb2RlciB9IGZyb20gXCIuL3N0YXRlXCI7XG5pbXBvcnQgeyBzaWdoYXNoIH0gZnJvbSBcIi4vY29tbW9uXCI7XG5leHBvcnQgeyBhY2NvdW50U2l6ZSB9IGZyb20gXCIuL2NvbW1vblwiO1xuZXhwb3J0IHsgVHlwZXNDb2RlciB9IGZyb20gXCIuL3R5cGVzXCI7XG5leHBvcnQgeyBJbnN0cnVjdGlvbkNvZGVyIH0gZnJvbSBcIi4vaW5zdHJ1Y3Rpb25cIjtcbmV4cG9ydCB7IEFjY291bnRzQ29kZXIsIGFjY291bnREaXNjcmltaW5hdG9yLCBBQ0NPVU5UX0RJU0NSSU1JTkFUT1JfU0laRSwgfSBmcm9tIFwiLi9hY2NvdW50c1wiO1xuZXhwb3J0IHsgRXZlbnRDb2RlciwgZXZlbnREaXNjcmltaW5hdG9yIH0gZnJvbSBcIi4vZXZlbnRcIjtcbmV4cG9ydCB7IFN0YXRlQ29kZXIsIHN0YXRlRGlzY3JpbWluYXRvciB9IGZyb20gXCIuL3N0YXRlXCI7XG4vKipcbiAqIENvZGVyIHByb3ZpZGVzIGEgZmFjYWRlIGZvciBlbmNvZGluZyBhbmQgZGVjb2RpbmcgYWxsIElETCByZWxhdGVkIG9iamVjdHMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihpZGwpIHtcbiAgICAgICAgdGhpcy5pbnN0cnVjdGlvbiA9IG5ldyBJbnN0cnVjdGlvbkNvZGVyKGlkbCk7XG4gICAgICAgIHRoaXMuYWNjb3VudHMgPSBuZXcgQWNjb3VudHNDb2RlcihpZGwpO1xuICAgICAgICB0aGlzLnR5cGVzID0gbmV3IFR5cGVzQ29kZXIoaWRsKTtcbiAgICAgICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRDb2RlcihpZGwpO1xuICAgICAgICBpZiAoaWRsLnN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gbmV3IFN0YXRlQ29kZXIoaWRsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzaWdoYXNoKG5hbWVTcGFjZSwgaXhOYW1lKSB7XG4gICAgICAgIHJldHVybiBzaWdoYXNoKG5hbWVTcGFjZSwgaXhOYW1lKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiSW5zdHJ1Y3Rpb25Db2RlciIsIkFjY291bnRzQ29kZXIiLCJUeXBlc0NvZGVyIiwiRXZlbnRDb2RlciIsIlN0YXRlQ29kZXIiLCJzaWdoYXNoIiwiYWNjb3VudFNpemUiLCJhY2NvdW50RGlzY3JpbWluYXRvciIsIkFDQ09VTlRfRElTQ1JJTUlOQVRPUl9TSVpFIiwiZXZlbnREaXNjcmltaW5hdG9yIiwic3RhdGVEaXNjcmltaW5hdG9yIiwiQ29kZXIiLCJjb25zdHJ1Y3RvciIsImlkbCIsImluc3RydWN0aW9uIiwiYWNjb3VudHMiLCJ0eXBlcyIsImV2ZW50cyIsInN0YXRlIiwibmFtZVNwYWNlIiwiaXhOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/instruction.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/coder/instruction.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InstructionCoder: () => (/* binding */ InstructionCoder),\n/* harmony export */   SIGHASH_GLOBAL_NAMESPACE: () => (/* binding */ SIGHASH_GLOBAL_NAMESPACE),\n/* harmony export */   SIGHASH_STATE_NAMESPACE: () => (/* binding */ SIGHASH_STATE_NAMESPACE)\n/* harmony export */ });\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! camelcase */ \"(ssr)/./node_modules/@project-serum/anchor/node_modules/camelcase/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(camelcase__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @project-serum/borsh */ \"(ssr)/./node_modules/@project-serum/borsh/dist/lib/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _idl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./idl */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/idl.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/common.js\");\n\n\n\n\n\n/**\n * Namespace for state method function signatures.\n */ const SIGHASH_STATE_NAMESPACE = \"state\";\n/**\n * Namespace for global instruction function signatures (i.e. functions\n * that aren't namespaced by the state or any of its trait implementations).\n */ const SIGHASH_GLOBAL_NAMESPACE = \"global\";\n/**\n * Encodes and decodes program instructions.\n */ class InstructionCoder {\n    constructor(idl){\n        this.idl = idl;\n        this.ixLayout = InstructionCoder.parseIxLayout(idl);\n        const sighashLayouts = new Map();\n        idl.instructions.forEach((ix)=>{\n            const sh = (0,_common__WEBPACK_IMPORTED_MODULE_4__.sighash)(SIGHASH_GLOBAL_NAMESPACE, ix.name);\n            sighashLayouts.set(bs58__WEBPACK_IMPORTED_MODULE_2__.encode(sh), {\n                layout: this.ixLayout.get(ix.name),\n                name: ix.name\n            });\n        });\n        if (idl.state) {\n            idl.state.methods.map((ix)=>{\n                const sh = (0,_common__WEBPACK_IMPORTED_MODULE_4__.sighash)(SIGHASH_STATE_NAMESPACE, ix.name);\n                sighashLayouts.set(bs58__WEBPACK_IMPORTED_MODULE_2__.encode(sh), {\n                    layout: this.ixLayout.get(ix.name),\n                    name: ix.name\n                });\n            });\n        }\n        this.sighashLayouts = sighashLayouts;\n    }\n    /**\n     * Encodes a program instruction.\n     */ encode(ixName, ix) {\n        return this._encode(SIGHASH_GLOBAL_NAMESPACE, ixName, ix);\n    }\n    /**\n     * Encodes a program state instruction.\n     */ encodeState(ixName, ix) {\n        return this._encode(SIGHASH_STATE_NAMESPACE, ixName, ix);\n    }\n    _encode(nameSpace, ixName, ix) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const methodName = camelcase__WEBPACK_IMPORTED_MODULE_0___default()(ixName);\n        const len = this.ixLayout.get(methodName).encode(ix, buffer);\n        const data = buffer.slice(0, len);\n        return Buffer.concat([\n            (0,_common__WEBPACK_IMPORTED_MODULE_4__.sighash)(nameSpace, ixName),\n            data\n        ]);\n    }\n    static parseIxLayout(idl) {\n        const stateMethods = idl.state ? idl.state.methods : [];\n        const ixLayouts = stateMethods.map((m)=>{\n            let fieldLayouts = m.args.map((arg)=>{\n                return _idl__WEBPACK_IMPORTED_MODULE_3__.IdlCoder.fieldLayout(arg, idl.types);\n            });\n            const name = camelcase__WEBPACK_IMPORTED_MODULE_0___default()(m.name);\n            return [\n                name,\n                _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.struct(fieldLayouts, name)\n            ];\n        }).concat(idl.instructions.map((ix)=>{\n            let fieldLayouts = ix.args.map((arg)=>_idl__WEBPACK_IMPORTED_MODULE_3__.IdlCoder.fieldLayout(arg, idl.types));\n            const name = camelcase__WEBPACK_IMPORTED_MODULE_0___default()(ix.name);\n            return [\n                name,\n                _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.struct(fieldLayouts, name)\n            ];\n        }));\n        // @ts-ignore\n        return new Map(ixLayouts);\n    }\n    /**\n     * Dewcodes a program instruction.\n     */ decode(ix) {\n        if (typeof ix === \"string\") {\n            ix = bs58__WEBPACK_IMPORTED_MODULE_2__.decode(ix);\n        }\n        let sighash = bs58__WEBPACK_IMPORTED_MODULE_2__.encode(ix.slice(0, 8));\n        let data = ix.slice(8);\n        const decoder = this.sighashLayouts.get(sighash);\n        if (!decoder) {\n            return null;\n        }\n        return {\n            data: decoder.layout.decode(data),\n            name: decoder.name\n        };\n    }\n    /**\n     * Returns a formatted table of all the fields in the given instruction data.\n     */ format(ix, accountMetas) {\n        return InstructionFormatter.format(ix, accountMetas, this.idl);\n    }\n}\nclass InstructionFormatter {\n    static format(ix, accountMetas, idl) {\n        const idlIx = idl.instructions.filter((i)=>ix.name === i.name)[0];\n        if (idlIx === undefined) {\n            console.error(\"Invalid instruction given\");\n            return null;\n        }\n        const args = idlIx.args.map((idlField)=>{\n            return {\n                name: idlField.name,\n                type: InstructionFormatter.formatIdlType(idlField.type),\n                data: InstructionFormatter.formatIdlData(idlField, ix.data[idlField.name], idl.types)\n            };\n        });\n        const flatIdlAccounts = InstructionFormatter.flattenIdlAccounts(idlIx.accounts);\n        const accounts = accountMetas.map((meta, idx)=>{\n            if (idx < flatIdlAccounts.length) {\n                return {\n                    name: flatIdlAccounts[idx].name,\n                    ...meta\n                };\n            } else {\n                return {\n                    name: undefined,\n                    ...meta\n                };\n            }\n        });\n        return {\n            args,\n            accounts\n        };\n    }\n    static formatIdlType(idlType) {\n        if (typeof idlType === \"string\") {\n            return idlType;\n        }\n        // @ts-ignore\n        if (idlType.vec) {\n            // @ts-ignore\n            return `Vec<${this.formatIdlType(idlType.vec)}>`;\n        }\n        // @ts-ignore\n        if (idlType.option) {\n            // @ts-ignore\n            return `Option<${this.formatIdlType(idlType.option)}>`;\n        }\n        // @ts-ignore\n        if (idlType.defined) {\n            // @ts-ignore\n            return idlType.defined;\n        }\n    }\n    static formatIdlData(idlField, data, types) {\n        if (typeof idlField.type === \"string\") {\n            return data.toString();\n        }\n        // @ts-ignore\n        if (idlField.type.vec) {\n            // @ts-ignore\n            return \"[\" + data// @ts-ignore\n            .map((d)=>this.formatIdlData(// @ts-ignore\n                {\n                    name: \"\",\n                    type: idlField.type.vec\n                }, d)).join(\", \") + \"]\";\n        }\n        // @ts-ignore\n        if (idlField.type.option) {\n            // @ts-ignore\n            return data === null ? \"null\" : this.formatIdlData(// @ts-ignore\n            {\n                name: \"\",\n                type: idlField.type.option\n            }, data);\n        }\n        // @ts-ignore\n        if (idlField.type.defined) {\n            if (types === undefined) {\n                throw new Error(\"User defined types not provided\");\n            }\n            // @ts-ignore\n            const filtered = types.filter((t)=>t.name === idlField.type.defined);\n            if (filtered.length !== 1) {\n                // @ts-ignore\n                throw new Error(`Type not found: ${idlField.type.defined}`);\n            }\n            return InstructionFormatter.formatIdlDataDefined(filtered[0], data, types);\n        }\n        return \"unknown\";\n    }\n    static formatIdlDataDefined(typeDef, data, types) {\n        if (typeDef.type.kind === \"struct\") {\n            const fields = Object.keys(data).map((k)=>{\n                const f = typeDef.type.fields.filter((f)=>f.name === k)[0];\n                if (f === undefined) {\n                    throw new Error(\"Unable to find type\");\n                }\n                return k + \": \" + InstructionFormatter.formatIdlData(f, data[k], types);\n            }).join(\", \");\n            return \"{ \" + fields + \" }\";\n        } else {\n            if (typeDef.type.variants.length === 0) {\n                return \"{}\";\n            }\n            // Struct enum.\n            if (typeDef.type.variants[0].name) {\n                const variant = Object.keys(data)[0];\n                const enumType = data[variant];\n                const namedFields = Object.keys(enumType).map((f)=>{\n                    var _a;\n                    const fieldData = enumType[f];\n                    const idlField = (_a = typeDef.type.variants[variant]) === null || _a === void 0 ? void 0 : _a.filter((v)=>v.name === f)[0];\n                    if (idlField === undefined) {\n                        throw new Error(\"Unable to find variant\");\n                    }\n                    return f + \": \" + InstructionFormatter.formatIdlData(idlField, fieldData, types);\n                }).join(\", \");\n                const variantName = camelcase__WEBPACK_IMPORTED_MODULE_0___default()(variant, {\n                    pascalCase: true\n                });\n                if (namedFields.length === 0) {\n                    return variantName;\n                }\n                return `${variantName} { ${namedFields} }`;\n            } else {\n                // TODO.\n                return \"Tuple formatting not yet implemented\";\n            }\n        }\n    }\n    static flattenIdlAccounts(accounts, prefix) {\n        // @ts-ignore\n        return accounts.map((account)=>{\n            const accName = sentenceCase(account.name);\n            // @ts-ignore\n            if (account.accounts) {\n                const newPrefix = prefix ? `${prefix} > ${accName}` : accName;\n                // @ts-ignore\n                return InstructionFormatter.flattenIdlAccounts(// @ts-ignore\n                account.accounts, newPrefix);\n            } else {\n                return {\n                    ...account,\n                    name: prefix ? `${prefix} > ${accName}` : accName\n                };\n            }\n        }).flat();\n    }\n}\nfunction sentenceCase(field) {\n    const result = field.replace(/([A-Z])/g, \" $1\");\n    return result.charAt(0).toUpperCase() + result.slice(1);\n} //# sourceMappingURL=instruction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/instruction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/state.js":
/*!********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/coder/state.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StateCoder: () => (/* binding */ StateCoder),\n/* harmony export */   stateDiscriminator: () => (/* binding */ stateDiscriminator)\n/* harmony export */ });\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/js-sha256/src/sha256.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sha256__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _idl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./idl */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/idl.js\");\n/* harmony import */ var _utils_features__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/features */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/features.js\");\n\n\n\nclass StateCoder {\n    constructor(idl){\n        if (idl.state === undefined) {\n            throw new Error(\"Idl state not defined.\");\n        }\n        this.layout = _idl__WEBPACK_IMPORTED_MODULE_1__.IdlCoder.typeDefLayout(idl.state.struct, idl.types);\n    }\n    async encode(name, account) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const len = this.layout.encode(account, buffer);\n        const disc = await stateDiscriminator(name);\n        const accData = buffer.slice(0, len);\n        return Buffer.concat([\n            disc,\n            accData\n        ]);\n    }\n    decode(ix) {\n        // Chop off discriminator.\n        const data = ix.slice(8);\n        return this.layout.decode(data);\n    }\n}\n// Calculates unique 8 byte discriminator prepended to all anchor state accounts.\nasync function stateDiscriminator(name) {\n    let ns = _utils_features__WEBPACK_IMPORTED_MODULE_2__.isSet(\"anchor-deprecated-state\") ? \"account\" : \"state\";\n    return Buffer.from(js_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(`${ns}:${name}`)).slice(0, 8);\n} //# sourceMappingURL=state.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL2NvZGVyL3N0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFtQztBQUNGO0FBQ2E7QUFDdkMsTUFBTUc7SUFDVEMsWUFBWUMsR0FBRyxDQUFFO1FBQ2IsSUFBSUEsSUFBSUMsS0FBSyxLQUFLQyxXQUFXO1lBQ3pCLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLElBQUksQ0FBQ0MsTUFBTSxHQUFHUiwwQ0FBUUEsQ0FBQ1MsYUFBYSxDQUFDTCxJQUFJQyxLQUFLLENBQUNLLE1BQU0sRUFBRU4sSUFBSU8sS0FBSztJQUNwRTtJQUNBLE1BQU1DLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3hCLE1BQU1DLFNBQVNDLE9BQU9DLEtBQUssQ0FBQyxPQUFPLDhCQUE4QjtRQUNqRSxNQUFNQyxNQUFNLElBQUksQ0FBQ1YsTUFBTSxDQUFDSSxNQUFNLENBQUNFLFNBQVNDO1FBQ3hDLE1BQU1JLE9BQU8sTUFBTUMsbUJBQW1CUDtRQUN0QyxNQUFNUSxVQUFVTixPQUFPTyxLQUFLLENBQUMsR0FBR0o7UUFDaEMsT0FBT0YsT0FBT08sTUFBTSxDQUFDO1lBQUNKO1lBQU1FO1NBQVE7SUFDeEM7SUFDQUcsT0FBT0MsRUFBRSxFQUFFO1FBQ1AsMEJBQTBCO1FBQzFCLE1BQU1DLE9BQU9ELEdBQUdILEtBQUssQ0FBQztRQUN0QixPQUFPLElBQUksQ0FBQ2QsTUFBTSxDQUFDZ0IsTUFBTSxDQUFDRTtJQUM5QjtBQUNKO0FBQ0EsaUZBQWlGO0FBQzFFLGVBQWVOLG1CQUFtQlAsSUFBSTtJQUN6QyxJQUFJYyxLQUFLMUIsa0RBQWMsQ0FBQyw2QkFBNkIsWUFBWTtJQUNqRSxPQUFPZSxPQUFPYSxJQUFJLENBQUM5Qiw2Q0FBTUEsQ0FBQytCLE1BQU0sQ0FBQyxDQUFDLEVBQUVILEdBQUcsQ0FBQyxFQUFFZCxLQUFLLENBQUMsR0FBR1MsS0FBSyxDQUFDLEdBQUc7QUFDaEUsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS9jb2Rlci9zdGF0ZS5qcz9jZjY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNoYTI1NiB9IGZyb20gXCJqcy1zaGEyNTZcIjtcbmltcG9ydCB7IElkbENvZGVyIH0gZnJvbSBcIi4vaWRsXCI7XG5pbXBvcnQgKiBhcyBmZWF0dXJlcyBmcm9tIFwiLi4vdXRpbHMvZmVhdHVyZXNcIjtcbmV4cG9ydCBjbGFzcyBTdGF0ZUNvZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihpZGwpIHtcbiAgICAgICAgaWYgKGlkbC5zdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJZGwgc3RhdGUgbm90IGRlZmluZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGF5b3V0ID0gSWRsQ29kZXIudHlwZURlZkxheW91dChpZGwuc3RhdGUuc3RydWN0LCBpZGwudHlwZXMpO1xuICAgIH1cbiAgICBhc3luYyBlbmNvZGUobmFtZSwgYWNjb3VudCkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2MoMTAwMCk7IC8vIFRPRE86IHVzZSBhIHRpZ2h0ZXIgYnVmZmVyLlxuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLmxheW91dC5lbmNvZGUoYWNjb3VudCwgYnVmZmVyKTtcbiAgICAgICAgY29uc3QgZGlzYyA9IGF3YWl0IHN0YXRlRGlzY3JpbWluYXRvcihuYW1lKTtcbiAgICAgICAgY29uc3QgYWNjRGF0YSA9IGJ1ZmZlci5zbGljZSgwLCBsZW4pO1xuICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbZGlzYywgYWNjRGF0YV0pO1xuICAgIH1cbiAgICBkZWNvZGUoaXgpIHtcbiAgICAgICAgLy8gQ2hvcCBvZmYgZGlzY3JpbWluYXRvci5cbiAgICAgICAgY29uc3QgZGF0YSA9IGl4LnNsaWNlKDgpO1xuICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXQuZGVjb2RlKGRhdGEpO1xuICAgIH1cbn1cbi8vIENhbGN1bGF0ZXMgdW5pcXVlIDggYnl0ZSBkaXNjcmltaW5hdG9yIHByZXBlbmRlZCB0byBhbGwgYW5jaG9yIHN0YXRlIGFjY291bnRzLlxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXRlRGlzY3JpbWluYXRvcihuYW1lKSB7XG4gICAgbGV0IG5zID0gZmVhdHVyZXMuaXNTZXQoXCJhbmNob3ItZGVwcmVjYXRlZC1zdGF0ZVwiKSA/IFwiYWNjb3VudFwiIDogXCJzdGF0ZVwiO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzaGEyNTYuZGlnZXN0KGAke25zfToke25hbWV9YCkpLnNsaWNlKDAsIDgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGUuanMubWFwIl0sIm5hbWVzIjpbInNoYTI1NiIsIklkbENvZGVyIiwiZmVhdHVyZXMiLCJTdGF0ZUNvZGVyIiwiY29uc3RydWN0b3IiLCJpZGwiLCJzdGF0ZSIsInVuZGVmaW5lZCIsIkVycm9yIiwibGF5b3V0IiwidHlwZURlZkxheW91dCIsInN0cnVjdCIsInR5cGVzIiwiZW5jb2RlIiwibmFtZSIsImFjY291bnQiLCJidWZmZXIiLCJCdWZmZXIiLCJhbGxvYyIsImxlbiIsImRpc2MiLCJzdGF0ZURpc2NyaW1pbmF0b3IiLCJhY2NEYXRhIiwic2xpY2UiLCJjb25jYXQiLCJkZWNvZGUiLCJpeCIsImRhdGEiLCJucyIsImlzU2V0IiwiZnJvbSIsImRpZ2VzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/state.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/coder/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypesCoder: () => (/* binding */ TypesCoder)\n/* harmony export */ });\n/* harmony import */ var _idl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./idl */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/idl.js\");\n\n/**\n * Encodes and decodes user defined types.\n */ class TypesCoder {\n    constructor(idl){\n        if (idl.types === undefined) {\n            this.layouts = new Map();\n            return;\n        }\n        const layouts = idl.types.map((acc)=>{\n            return [\n                acc.name,\n                _idl__WEBPACK_IMPORTED_MODULE_0__.IdlCoder.typeDefLayout(acc, idl.types)\n            ];\n        });\n        // @ts-ignore\n        this.layouts = new Map(layouts);\n    }\n    encode(accountName, account) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const layout = this.layouts.get(accountName);\n        const len = layout.encode(account, buffer);\n        return buffer.slice(0, len);\n    }\n    decode(accountName, ix) {\n        const layout = this.layouts.get(accountName);\n        return layout.decode(ix);\n    }\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL2NvZGVyL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlDO0FBQ2pDOztDQUVDLEdBQ00sTUFBTUM7SUFDVEMsWUFBWUMsR0FBRyxDQUFFO1FBQ2IsSUFBSUEsSUFBSUMsS0FBSyxLQUFLQyxXQUFXO1lBQ3pCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDO1lBQ25CO1FBQ0o7UUFDQSxNQUFNRCxVQUFVSCxJQUFJQyxLQUFLLENBQUNJLEdBQUcsQ0FBQyxDQUFDQztZQUMzQixPQUFPO2dCQUFDQSxJQUFJQyxJQUFJO2dCQUFFViwwQ0FBUUEsQ0FBQ1csYUFBYSxDQUFDRixLQUFLTixJQUFJQyxLQUFLO2FBQUU7UUFDN0Q7UUFDQSxhQUFhO1FBQ2IsSUFBSSxDQUFDRSxPQUFPLEdBQUcsSUFBSUMsSUFBSUQ7SUFDM0I7SUFDQU0sT0FBT0MsV0FBVyxFQUFFQyxPQUFPLEVBQUU7UUFDekIsTUFBTUMsU0FBU0MsT0FBT0MsS0FBSyxDQUFDLE9BQU8sOEJBQThCO1FBQ2pFLE1BQU1DLFNBQVMsSUFBSSxDQUFDWixPQUFPLENBQUNhLEdBQUcsQ0FBQ047UUFDaEMsTUFBTU8sTUFBTUYsT0FBT04sTUFBTSxDQUFDRSxTQUFTQztRQUNuQyxPQUFPQSxPQUFPTSxLQUFLLENBQUMsR0FBR0Q7SUFDM0I7SUFDQUUsT0FBT1QsV0FBVyxFQUFFVSxFQUFFLEVBQUU7UUFDcEIsTUFBTUwsU0FBUyxJQUFJLENBQUNaLE9BQU8sQ0FBQ2EsR0FBRyxDQUFDTjtRQUNoQyxPQUFPSyxPQUFPSSxNQUFNLENBQUNDO0lBQ3pCO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS9jb2Rlci90eXBlcy5qcz9jZjQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElkbENvZGVyIH0gZnJvbSBcIi4vaWRsXCI7XG4vKipcbiAqIEVuY29kZXMgYW5kIGRlY29kZXMgdXNlciBkZWZpbmVkIHR5cGVzLlxuICovXG5leHBvcnQgY2xhc3MgVHlwZXNDb2RlciB7XG4gICAgY29uc3RydWN0b3IoaWRsKSB7XG4gICAgICAgIGlmIChpZGwudHlwZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxheW91dHMgPSBpZGwudHlwZXMubWFwKChhY2MpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBbYWNjLm5hbWUsIElkbENvZGVyLnR5cGVEZWZMYXlvdXQoYWNjLCBpZGwudHlwZXMpXTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5sYXlvdXRzID0gbmV3IE1hcChsYXlvdXRzKTtcbiAgICB9XG4gICAgZW5jb2RlKGFjY291bnROYW1lLCBhY2NvdW50KSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygxMDAwKTsgLy8gVE9ETzogdXNlIGEgdGlnaHRlciBidWZmZXIuXG4gICAgICAgIGNvbnN0IGxheW91dCA9IHRoaXMubGF5b3V0cy5nZXQoYWNjb3VudE5hbWUpO1xuICAgICAgICBjb25zdCBsZW4gPSBsYXlvdXQuZW5jb2RlKGFjY291bnQsIGJ1ZmZlcik7XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoMCwgbGVuKTtcbiAgICB9XG4gICAgZGVjb2RlKGFjY291bnROYW1lLCBpeCkge1xuICAgICAgICBjb25zdCBsYXlvdXQgPSB0aGlzLmxheW91dHMuZ2V0KGFjY291bnROYW1lKTtcbiAgICAgICAgcmV0dXJuIGxheW91dC5kZWNvZGUoaXgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJJZGxDb2RlciIsIlR5cGVzQ29kZXIiLCJjb25zdHJ1Y3RvciIsImlkbCIsInR5cGVzIiwidW5kZWZpbmVkIiwibGF5b3V0cyIsIk1hcCIsIm1hcCIsImFjYyIsIm5hbWUiLCJ0eXBlRGVmTGF5b3V0IiwiZW5jb2RlIiwiYWNjb3VudE5hbWUiLCJhY2NvdW50IiwiYnVmZmVyIiwiQnVmZmVyIiwiYWxsb2MiLCJsYXlvdXQiLCJnZXQiLCJsZW4iLCJzbGljZSIsImRlY29kZSIsIml4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/error.js":
/*!**************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/error.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IdlError: () => (/* binding */ IdlError),\n/* harmony export */   ProgramError: () => (/* binding */ ProgramError)\n/* harmony export */ });\nclass IdlError extends Error {\n}\n// An error from a user defined program.\nclass ProgramError extends Error {\n    constructor(code, msg, ...params){\n        super(...params);\n        this.code = code;\n        this.msg = msg;\n    }\n    static parse(err, idlErrors) {\n        // TODO: don't rely on the error string. web3.js should preserve the error\n        //       code information instead of giving us an untyped string.\n        let components = err.toString().split(\"custom program error: \");\n        if (components.length !== 2) {\n            return null;\n        }\n        let errorCode;\n        try {\n            errorCode = parseInt(components[1]);\n        } catch (parseErr) {\n            return null;\n        }\n        // Parse user error.\n        let errorMsg = idlErrors.get(errorCode);\n        if (errorMsg !== undefined) {\n            return new ProgramError(errorCode, errorMsg);\n        }\n        // Parse framework internal error.\n        errorMsg = LangErrorMessage.get(errorCode);\n        if (errorMsg !== undefined) {\n            return new ProgramError(errorCode, errorMsg);\n        }\n        // Unable to parse the error. Just return the untranslated error.\n        return null;\n    }\n    toString() {\n        return this.msg;\n    }\n}\nconst LangErrorCode = {\n    // Instructions.\n    InstructionMissing: 100,\n    InstructionFallbackNotFound: 101,\n    InstructionDidNotDeserialize: 102,\n    InstructionDidNotSerialize: 103,\n    // IDL instructions.\n    IdlInstructionStub: 120,\n    IdlInstructionInvalidProgram: 121,\n    // Constraints.\n    ConstraintMut: 140,\n    ConstraintHasOne: 141,\n    ConstraintSigner: 142,\n    ConstraintRaw: 143,\n    ConstraintOwner: 144,\n    ConstraintRentExempt: 145,\n    ConstraintSeeds: 146,\n    ConstraintExecutable: 147,\n    ConstraintState: 148,\n    ConstraintAssociated: 149,\n    ConstraintAssociatedInit: 150,\n    ConstraintClose: 151,\n    ConstraintAddress: 152,\n    // Accounts.\n    AccountDiscriminatorAlreadySet: 160,\n    AccountDiscriminatorNotFound: 161,\n    AccountDiscriminatorMismatch: 162,\n    AccountDidNotDeserialize: 163,\n    AccountDidNotSerialize: 164,\n    AccountNotEnoughKeys: 165,\n    AccountNotMutable: 166,\n    AccountNotProgramOwned: 167,\n    // State.\n    StateInvalidAddress: 180,\n    // Used for APIs that shouldn't be used anymore.\n    Deprecated: 299\n};\nconst LangErrorMessage = new Map([\n    // Instructions.\n    [\n        LangErrorCode.InstructionMissing,\n        \"8 byte instruction identifier not provided\"\n    ],\n    [\n        LangErrorCode.InstructionFallbackNotFound,\n        \"Fallback functions are not supported\"\n    ],\n    [\n        LangErrorCode.InstructionDidNotDeserialize,\n        \"The program could not deserialize the given instruction\"\n    ],\n    [\n        LangErrorCode.InstructionDidNotSerialize,\n        \"The program could not serialize the given instruction\"\n    ],\n    // Idl instructions.\n    [\n        LangErrorCode.IdlInstructionStub,\n        \"The program was compiled without idl instructions\"\n    ],\n    [\n        LangErrorCode.IdlInstructionInvalidProgram,\n        \"The transaction was given an invalid program for the IDL instruction\"\n    ],\n    // Constraints.\n    [\n        LangErrorCode.ConstraintMut,\n        \"A mut constraint was violated\"\n    ],\n    [\n        LangErrorCode.ConstraintHasOne,\n        \"A has_one constraint was violated\"\n    ],\n    [\n        LangErrorCode.ConstraintSigner,\n        \"A signer constraint was violated\"\n    ],\n    [\n        LangErrorCode.ConstraintRaw,\n        \"A raw constraint as violated\"\n    ],\n    [\n        LangErrorCode.ConstraintOwner,\n        \"An owner constraint was violated\"\n    ],\n    [\n        LangErrorCode.ConstraintRentExempt,\n        \"A rent exempt constraint was violated\"\n    ],\n    [\n        LangErrorCode.ConstraintSeeds,\n        \"A seeds constraint was violated\"\n    ],\n    [\n        LangErrorCode.ConstraintExecutable,\n        \"An executable constraint was violated\"\n    ],\n    [\n        LangErrorCode.ConstraintState,\n        \"A state constraint was violated\"\n    ],\n    [\n        LangErrorCode.ConstraintAssociated,\n        \"An associated constraint was violated\"\n    ],\n    [\n        LangErrorCode.ConstraintAssociatedInit,\n        \"An associated init constraint was violated\"\n    ],\n    [\n        LangErrorCode.ConstraintClose,\n        \"A close constraint was violated\"\n    ],\n    [\n        LangErrorCode.ConstraintAddress,\n        \"An address constraint was violated\"\n    ],\n    // Accounts.\n    [\n        LangErrorCode.AccountDiscriminatorAlreadySet,\n        \"The account discriminator was already set on this account\"\n    ],\n    [\n        LangErrorCode.AccountDiscriminatorNotFound,\n        \"No 8 byte discriminator was found on the account\"\n    ],\n    [\n        LangErrorCode.AccountDiscriminatorMismatch,\n        \"8 byte discriminator did not match what was expected\"\n    ],\n    [\n        LangErrorCode.AccountDidNotDeserialize,\n        \"Failed to deserialize the account\"\n    ],\n    [\n        LangErrorCode.AccountDidNotSerialize,\n        \"Failed to serialize the account\"\n    ],\n    [\n        LangErrorCode.AccountNotEnoughKeys,\n        \"Not enough account keys given to the instruction\"\n    ],\n    [\n        LangErrorCode.AccountNotMutable,\n        \"The given account is not mutable\"\n    ],\n    [\n        LangErrorCode.AccountNotProgramOwned,\n        \"The given account is not owned by the executing program\"\n    ],\n    // State.\n    [\n        LangErrorCode.StateInvalidAddress,\n        \"The given state account does not have the correct address\"\n    ],\n    // Misc.\n    [\n        LangErrorCode.Deprecated,\n        \"The API being used is deprecated and should no longer be used\"\n    ]\n]); //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL2Vycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sTUFBTUEsaUJBQWlCQztBQUM5QjtBQUNBLHdDQUF3QztBQUNqQyxNQUFNQyxxQkFBcUJEO0lBQzlCRSxZQUFZQyxJQUFJLEVBQUVDLEdBQUcsRUFBRSxHQUFHQyxNQUFNLENBQUU7UUFDOUIsS0FBSyxJQUFJQTtRQUNULElBQUksQ0FBQ0YsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsR0FBRyxHQUFHQTtJQUNmO0lBQ0EsT0FBT0UsTUFBTUMsR0FBRyxFQUFFQyxTQUFTLEVBQUU7UUFDekIsMEVBQTBFO1FBQzFFLGlFQUFpRTtRQUNqRSxJQUFJQyxhQUFhRixJQUFJRyxRQUFRLEdBQUdDLEtBQUssQ0FBQztRQUN0QyxJQUFJRixXQUFXRyxNQUFNLEtBQUssR0FBRztZQUN6QixPQUFPO1FBQ1g7UUFDQSxJQUFJQztRQUNKLElBQUk7WUFDQUEsWUFBWUMsU0FBU0wsVUFBVSxDQUFDLEVBQUU7UUFDdEMsRUFDQSxPQUFPTSxVQUFVO1lBQ2IsT0FBTztRQUNYO1FBQ0Esb0JBQW9CO1FBQ3BCLElBQUlDLFdBQVdSLFVBQVVTLEdBQUcsQ0FBQ0o7UUFDN0IsSUFBSUcsYUFBYUUsV0FBVztZQUN4QixPQUFPLElBQUlqQixhQUFhWSxXQUFXRztRQUN2QztRQUNBLGtDQUFrQztRQUNsQ0EsV0FBV0csaUJBQWlCRixHQUFHLENBQUNKO1FBQ2hDLElBQUlHLGFBQWFFLFdBQVc7WUFDeEIsT0FBTyxJQUFJakIsYUFBYVksV0FBV0c7UUFDdkM7UUFDQSxpRUFBaUU7UUFDakUsT0FBTztJQUNYO0lBQ0FOLFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQ04sR0FBRztJQUNuQjtBQUNKO0FBQ0EsTUFBTWdCLGdCQUFnQjtJQUNsQixnQkFBZ0I7SUFDaEJDLG9CQUFvQjtJQUNwQkMsNkJBQTZCO0lBQzdCQyw4QkFBOEI7SUFDOUJDLDRCQUE0QjtJQUM1QixvQkFBb0I7SUFDcEJDLG9CQUFvQjtJQUNwQkMsOEJBQThCO0lBQzlCLGVBQWU7SUFDZkMsZUFBZTtJQUNmQyxrQkFBa0I7SUFDbEJDLGtCQUFrQjtJQUNsQkMsZUFBZTtJQUNmQyxpQkFBaUI7SUFDakJDLHNCQUFzQjtJQUN0QkMsaUJBQWlCO0lBQ2pCQyxzQkFBc0I7SUFDdEJDLGlCQUFpQjtJQUNqQkMsc0JBQXNCO0lBQ3RCQywwQkFBMEI7SUFDMUJDLGlCQUFpQjtJQUNqQkMsbUJBQW1CO0lBQ25CLFlBQVk7SUFDWkMsZ0NBQWdDO0lBQ2hDQyw4QkFBOEI7SUFDOUJDLDhCQUE4QjtJQUM5QkMsMEJBQTBCO0lBQzFCQyx3QkFBd0I7SUFDeEJDLHNCQUFzQjtJQUN0QkMsbUJBQW1CO0lBQ25CQyx3QkFBd0I7SUFDeEIsU0FBUztJQUNUQyxxQkFBcUI7SUFDckIsZ0RBQWdEO0lBQ2hEQyxZQUFZO0FBQ2hCO0FBQ0EsTUFBTTlCLG1CQUFtQixJQUFJK0IsSUFBSTtJQUM3QixnQkFBZ0I7SUFDaEI7UUFDSTlCLGNBQWNDLGtCQUFrQjtRQUNoQztLQUNIO0lBQ0Q7UUFDSUQsY0FBY0UsMkJBQTJCO1FBQ3pDO0tBQ0g7SUFDRDtRQUNJRixjQUFjRyw0QkFBNEI7UUFDMUM7S0FDSDtJQUNEO1FBQ0lILGNBQWNJLDBCQUEwQjtRQUN4QztLQUNIO0lBQ0Qsb0JBQW9CO0lBQ3BCO1FBQ0lKLGNBQWNLLGtCQUFrQjtRQUNoQztLQUNIO0lBQ0Q7UUFDSUwsY0FBY00sNEJBQTRCO1FBQzFDO0tBQ0g7SUFDRCxlQUFlO0lBQ2Y7UUFBQ04sY0FBY08sYUFBYTtRQUFFO0tBQWdDO0lBQzlEO1FBQUNQLGNBQWNRLGdCQUFnQjtRQUFFO0tBQW9DO0lBQ3JFO1FBQUNSLGNBQWNTLGdCQUFnQjtRQUFFO0tBQW1DO0lBQ3BFO1FBQUNULGNBQWNVLGFBQWE7UUFBRTtLQUErQjtJQUM3RDtRQUFDVixjQUFjVyxlQUFlO1FBQUU7S0FBbUM7SUFDbkU7UUFBQ1gsY0FBY1ksb0JBQW9CO1FBQUU7S0FBd0M7SUFDN0U7UUFBQ1osY0FBY2EsZUFBZTtRQUFFO0tBQWtDO0lBQ2xFO1FBQUNiLGNBQWNjLG9CQUFvQjtRQUFFO0tBQXdDO0lBQzdFO1FBQUNkLGNBQWNlLGVBQWU7UUFBRTtLQUFrQztJQUNsRTtRQUFDZixjQUFjZ0Isb0JBQW9CO1FBQUU7S0FBd0M7SUFDN0U7UUFDSWhCLGNBQWNpQix3QkFBd0I7UUFDdEM7S0FDSDtJQUNEO1FBQUNqQixjQUFja0IsZUFBZTtRQUFFO0tBQWtDO0lBQ2xFO1FBQUNsQixjQUFjbUIsaUJBQWlCO1FBQUU7S0FBcUM7SUFDdkUsWUFBWTtJQUNaO1FBQ0luQixjQUFjb0IsOEJBQThCO1FBQzVDO0tBQ0g7SUFDRDtRQUNJcEIsY0FBY3FCLDRCQUE0QjtRQUMxQztLQUNIO0lBQ0Q7UUFDSXJCLGNBQWNzQiw0QkFBNEI7UUFDMUM7S0FDSDtJQUNEO1FBQUN0QixjQUFjdUIsd0JBQXdCO1FBQUU7S0FBb0M7SUFDN0U7UUFBQ3ZCLGNBQWN3QixzQkFBc0I7UUFBRTtLQUFrQztJQUN6RTtRQUNJeEIsY0FBY3lCLG9CQUFvQjtRQUNsQztLQUNIO0lBQ0Q7UUFBQ3pCLGNBQWMwQixpQkFBaUI7UUFBRTtLQUFtQztJQUNyRTtRQUNJMUIsY0FBYzJCLHNCQUFzQjtRQUNwQztLQUNIO0lBQ0QsU0FBUztJQUNUO1FBQ0kzQixjQUFjNEIsbUJBQW1CO1FBQ2pDO0tBQ0g7SUFDRCxRQUFRO0lBQ1I7UUFDSTVCLGNBQWM2QixVQUFVO1FBQ3hCO0tBQ0g7Q0FDSixHQUNELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL2Vycm9yLmpzPzE0OTUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIElkbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuLy8gQW4gZXJyb3IgZnJvbSBhIHVzZXIgZGVmaW5lZCBwcm9ncmFtLlxuZXhwb3J0IGNsYXNzIFByb2dyYW1FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2RlLCBtc2csIC4uLnBhcmFtcykge1xuICAgICAgICBzdXBlciguLi5wYXJhbXMpO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB0aGlzLm1zZyA9IG1zZztcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGVyciwgaWRsRXJyb3JzKSB7XG4gICAgICAgIC8vIFRPRE86IGRvbid0IHJlbHkgb24gdGhlIGVycm9yIHN0cmluZy4gd2ViMy5qcyBzaG91bGQgcHJlc2VydmUgdGhlIGVycm9yXG4gICAgICAgIC8vICAgICAgIGNvZGUgaW5mb3JtYXRpb24gaW5zdGVhZCBvZiBnaXZpbmcgdXMgYW4gdW50eXBlZCBzdHJpbmcuXG4gICAgICAgIGxldCBjb21wb25lbnRzID0gZXJyLnRvU3RyaW5nKCkuc3BsaXQoXCJjdXN0b20gcHJvZ3JhbSBlcnJvcjogXCIpO1xuICAgICAgICBpZiAoY29tcG9uZW50cy5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBlcnJvckNvZGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlcnJvckNvZGUgPSBwYXJzZUludChjb21wb25lbnRzWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAocGFyc2VFcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhcnNlIHVzZXIgZXJyb3IuXG4gICAgICAgIGxldCBlcnJvck1zZyA9IGlkbEVycm9ycy5nZXQoZXJyb3JDb2RlKTtcbiAgICAgICAgaWYgKGVycm9yTXNnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvZ3JhbUVycm9yKGVycm9yQ29kZSwgZXJyb3JNc2cpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhcnNlIGZyYW1ld29yayBpbnRlcm5hbCBlcnJvci5cbiAgICAgICAgZXJyb3JNc2cgPSBMYW5nRXJyb3JNZXNzYWdlLmdldChlcnJvckNvZGUpO1xuICAgICAgICBpZiAoZXJyb3JNc2cgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9ncmFtRXJyb3IoZXJyb3JDb2RlLCBlcnJvck1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVW5hYmxlIHRvIHBhcnNlIHRoZSBlcnJvci4gSnVzdCByZXR1cm4gdGhlIHVudHJhbnNsYXRlZCBlcnJvci5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tc2c7XG4gICAgfVxufVxuY29uc3QgTGFuZ0Vycm9yQ29kZSA9IHtcbiAgICAvLyBJbnN0cnVjdGlvbnMuXG4gICAgSW5zdHJ1Y3Rpb25NaXNzaW5nOiAxMDAsXG4gICAgSW5zdHJ1Y3Rpb25GYWxsYmFja05vdEZvdW5kOiAxMDEsXG4gICAgSW5zdHJ1Y3Rpb25EaWROb3REZXNlcmlhbGl6ZTogMTAyLFxuICAgIEluc3RydWN0aW9uRGlkTm90U2VyaWFsaXplOiAxMDMsXG4gICAgLy8gSURMIGluc3RydWN0aW9ucy5cbiAgICBJZGxJbnN0cnVjdGlvblN0dWI6IDEyMCxcbiAgICBJZGxJbnN0cnVjdGlvbkludmFsaWRQcm9ncmFtOiAxMjEsXG4gICAgLy8gQ29uc3RyYWludHMuXG4gICAgQ29uc3RyYWludE11dDogMTQwLFxuICAgIENvbnN0cmFpbnRIYXNPbmU6IDE0MSxcbiAgICBDb25zdHJhaW50U2lnbmVyOiAxNDIsXG4gICAgQ29uc3RyYWludFJhdzogMTQzLFxuICAgIENvbnN0cmFpbnRPd25lcjogMTQ0LFxuICAgIENvbnN0cmFpbnRSZW50RXhlbXB0OiAxNDUsXG4gICAgQ29uc3RyYWludFNlZWRzOiAxNDYsXG4gICAgQ29uc3RyYWludEV4ZWN1dGFibGU6IDE0NyxcbiAgICBDb25zdHJhaW50U3RhdGU6IDE0OCxcbiAgICBDb25zdHJhaW50QXNzb2NpYXRlZDogMTQ5LFxuICAgIENvbnN0cmFpbnRBc3NvY2lhdGVkSW5pdDogMTUwLFxuICAgIENvbnN0cmFpbnRDbG9zZTogMTUxLFxuICAgIENvbnN0cmFpbnRBZGRyZXNzOiAxNTIsXG4gICAgLy8gQWNjb3VudHMuXG4gICAgQWNjb3VudERpc2NyaW1pbmF0b3JBbHJlYWR5U2V0OiAxNjAsXG4gICAgQWNjb3VudERpc2NyaW1pbmF0b3JOb3RGb3VuZDogMTYxLFxuICAgIEFjY291bnREaXNjcmltaW5hdG9yTWlzbWF0Y2g6IDE2MixcbiAgICBBY2NvdW50RGlkTm90RGVzZXJpYWxpemU6IDE2MyxcbiAgICBBY2NvdW50RGlkTm90U2VyaWFsaXplOiAxNjQsXG4gICAgQWNjb3VudE5vdEVub3VnaEtleXM6IDE2NSxcbiAgICBBY2NvdW50Tm90TXV0YWJsZTogMTY2LFxuICAgIEFjY291bnROb3RQcm9ncmFtT3duZWQ6IDE2NyxcbiAgICAvLyBTdGF0ZS5cbiAgICBTdGF0ZUludmFsaWRBZGRyZXNzOiAxODAsXG4gICAgLy8gVXNlZCBmb3IgQVBJcyB0aGF0IHNob3VsZG4ndCBiZSB1c2VkIGFueW1vcmUuXG4gICAgRGVwcmVjYXRlZDogMjk5LFxufTtcbmNvbnN0IExhbmdFcnJvck1lc3NhZ2UgPSBuZXcgTWFwKFtcbiAgICAvLyBJbnN0cnVjdGlvbnMuXG4gICAgW1xuICAgICAgICBMYW5nRXJyb3JDb2RlLkluc3RydWN0aW9uTWlzc2luZyxcbiAgICAgICAgXCI4IGJ5dGUgaW5zdHJ1Y3Rpb24gaWRlbnRpZmllciBub3QgcHJvdmlkZWRcIixcbiAgICBdLFxuICAgIFtcbiAgICAgICAgTGFuZ0Vycm9yQ29kZS5JbnN0cnVjdGlvbkZhbGxiYWNrTm90Rm91bmQsXG4gICAgICAgIFwiRmFsbGJhY2sgZnVuY3Rpb25zIGFyZSBub3Qgc3VwcG9ydGVkXCIsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIExhbmdFcnJvckNvZGUuSW5zdHJ1Y3Rpb25EaWROb3REZXNlcmlhbGl6ZSxcbiAgICAgICAgXCJUaGUgcHJvZ3JhbSBjb3VsZCBub3QgZGVzZXJpYWxpemUgdGhlIGdpdmVuIGluc3RydWN0aW9uXCIsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIExhbmdFcnJvckNvZGUuSW5zdHJ1Y3Rpb25EaWROb3RTZXJpYWxpemUsXG4gICAgICAgIFwiVGhlIHByb2dyYW0gY291bGQgbm90IHNlcmlhbGl6ZSB0aGUgZ2l2ZW4gaW5zdHJ1Y3Rpb25cIixcbiAgICBdLFxuICAgIC8vIElkbCBpbnN0cnVjdGlvbnMuXG4gICAgW1xuICAgICAgICBMYW5nRXJyb3JDb2RlLklkbEluc3RydWN0aW9uU3R1YixcbiAgICAgICAgXCJUaGUgcHJvZ3JhbSB3YXMgY29tcGlsZWQgd2l0aG91dCBpZGwgaW5zdHJ1Y3Rpb25zXCIsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIExhbmdFcnJvckNvZGUuSWRsSW5zdHJ1Y3Rpb25JbnZhbGlkUHJvZ3JhbSxcbiAgICAgICAgXCJUaGUgdHJhbnNhY3Rpb24gd2FzIGdpdmVuIGFuIGludmFsaWQgcHJvZ3JhbSBmb3IgdGhlIElETCBpbnN0cnVjdGlvblwiLFxuICAgIF0sXG4gICAgLy8gQ29uc3RyYWludHMuXG4gICAgW0xhbmdFcnJvckNvZGUuQ29uc3RyYWludE11dCwgXCJBIG11dCBjb25zdHJhaW50IHdhcyB2aW9sYXRlZFwiXSxcbiAgICBbTGFuZ0Vycm9yQ29kZS5Db25zdHJhaW50SGFzT25lLCBcIkEgaGFzX29uZSBjb25zdHJhaW50IHdhcyB2aW9sYXRlZFwiXSxcbiAgICBbTGFuZ0Vycm9yQ29kZS5Db25zdHJhaW50U2lnbmVyLCBcIkEgc2lnbmVyIGNvbnN0cmFpbnQgd2FzIHZpb2xhdGVkXCJdLFxuICAgIFtMYW5nRXJyb3JDb2RlLkNvbnN0cmFpbnRSYXcsIFwiQSByYXcgY29uc3RyYWludCBhcyB2aW9sYXRlZFwiXSxcbiAgICBbTGFuZ0Vycm9yQ29kZS5Db25zdHJhaW50T3duZXIsIFwiQW4gb3duZXIgY29uc3RyYWludCB3YXMgdmlvbGF0ZWRcIl0sXG4gICAgW0xhbmdFcnJvckNvZGUuQ29uc3RyYWludFJlbnRFeGVtcHQsIFwiQSByZW50IGV4ZW1wdCBjb25zdHJhaW50IHdhcyB2aW9sYXRlZFwiXSxcbiAgICBbTGFuZ0Vycm9yQ29kZS5Db25zdHJhaW50U2VlZHMsIFwiQSBzZWVkcyBjb25zdHJhaW50IHdhcyB2aW9sYXRlZFwiXSxcbiAgICBbTGFuZ0Vycm9yQ29kZS5Db25zdHJhaW50RXhlY3V0YWJsZSwgXCJBbiBleGVjdXRhYmxlIGNvbnN0cmFpbnQgd2FzIHZpb2xhdGVkXCJdLFxuICAgIFtMYW5nRXJyb3JDb2RlLkNvbnN0cmFpbnRTdGF0ZSwgXCJBIHN0YXRlIGNvbnN0cmFpbnQgd2FzIHZpb2xhdGVkXCJdLFxuICAgIFtMYW5nRXJyb3JDb2RlLkNvbnN0cmFpbnRBc3NvY2lhdGVkLCBcIkFuIGFzc29jaWF0ZWQgY29uc3RyYWludCB3YXMgdmlvbGF0ZWRcIl0sXG4gICAgW1xuICAgICAgICBMYW5nRXJyb3JDb2RlLkNvbnN0cmFpbnRBc3NvY2lhdGVkSW5pdCxcbiAgICAgICAgXCJBbiBhc3NvY2lhdGVkIGluaXQgY29uc3RyYWludCB3YXMgdmlvbGF0ZWRcIixcbiAgICBdLFxuICAgIFtMYW5nRXJyb3JDb2RlLkNvbnN0cmFpbnRDbG9zZSwgXCJBIGNsb3NlIGNvbnN0cmFpbnQgd2FzIHZpb2xhdGVkXCJdLFxuICAgIFtMYW5nRXJyb3JDb2RlLkNvbnN0cmFpbnRBZGRyZXNzLCBcIkFuIGFkZHJlc3MgY29uc3RyYWludCB3YXMgdmlvbGF0ZWRcIl0sXG4gICAgLy8gQWNjb3VudHMuXG4gICAgW1xuICAgICAgICBMYW5nRXJyb3JDb2RlLkFjY291bnREaXNjcmltaW5hdG9yQWxyZWFkeVNldCxcbiAgICAgICAgXCJUaGUgYWNjb3VudCBkaXNjcmltaW5hdG9yIHdhcyBhbHJlYWR5IHNldCBvbiB0aGlzIGFjY291bnRcIixcbiAgICBdLFxuICAgIFtcbiAgICAgICAgTGFuZ0Vycm9yQ29kZS5BY2NvdW50RGlzY3JpbWluYXRvck5vdEZvdW5kLFxuICAgICAgICBcIk5vIDggYnl0ZSBkaXNjcmltaW5hdG9yIHdhcyBmb3VuZCBvbiB0aGUgYWNjb3VudFwiLFxuICAgIF0sXG4gICAgW1xuICAgICAgICBMYW5nRXJyb3JDb2RlLkFjY291bnREaXNjcmltaW5hdG9yTWlzbWF0Y2gsXG4gICAgICAgIFwiOCBieXRlIGRpc2NyaW1pbmF0b3IgZGlkIG5vdCBtYXRjaCB3aGF0IHdhcyBleHBlY3RlZFwiLFxuICAgIF0sXG4gICAgW0xhbmdFcnJvckNvZGUuQWNjb3VudERpZE5vdERlc2VyaWFsaXplLCBcIkZhaWxlZCB0byBkZXNlcmlhbGl6ZSB0aGUgYWNjb3VudFwiXSxcbiAgICBbTGFuZ0Vycm9yQ29kZS5BY2NvdW50RGlkTm90U2VyaWFsaXplLCBcIkZhaWxlZCB0byBzZXJpYWxpemUgdGhlIGFjY291bnRcIl0sXG4gICAgW1xuICAgICAgICBMYW5nRXJyb3JDb2RlLkFjY291bnROb3RFbm91Z2hLZXlzLFxuICAgICAgICBcIk5vdCBlbm91Z2ggYWNjb3VudCBrZXlzIGdpdmVuIHRvIHRoZSBpbnN0cnVjdGlvblwiLFxuICAgIF0sXG4gICAgW0xhbmdFcnJvckNvZGUuQWNjb3VudE5vdE11dGFibGUsIFwiVGhlIGdpdmVuIGFjY291bnQgaXMgbm90IG11dGFibGVcIl0sXG4gICAgW1xuICAgICAgICBMYW5nRXJyb3JDb2RlLkFjY291bnROb3RQcm9ncmFtT3duZWQsXG4gICAgICAgIFwiVGhlIGdpdmVuIGFjY291bnQgaXMgbm90IG93bmVkIGJ5IHRoZSBleGVjdXRpbmcgcHJvZ3JhbVwiLFxuICAgIF0sXG4gICAgLy8gU3RhdGUuXG4gICAgW1xuICAgICAgICBMYW5nRXJyb3JDb2RlLlN0YXRlSW52YWxpZEFkZHJlc3MsXG4gICAgICAgIFwiVGhlIGdpdmVuIHN0YXRlIGFjY291bnQgZG9lcyBub3QgaGF2ZSB0aGUgY29ycmVjdCBhZGRyZXNzXCIsXG4gICAgXSxcbiAgICAvLyBNaXNjLlxuICAgIFtcbiAgICAgICAgTGFuZ0Vycm9yQ29kZS5EZXByZWNhdGVkLFxuICAgICAgICBcIlRoZSBBUEkgYmVpbmcgdXNlZCBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm8gbG9uZ2VyIGJlIHVzZWRcIixcbiAgICBdLFxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiXSwibmFtZXMiOlsiSWRsRXJyb3IiLCJFcnJvciIsIlByb2dyYW1FcnJvciIsImNvbnN0cnVjdG9yIiwiY29kZSIsIm1zZyIsInBhcmFtcyIsInBhcnNlIiwiZXJyIiwiaWRsRXJyb3JzIiwiY29tcG9uZW50cyIsInRvU3RyaW5nIiwic3BsaXQiLCJsZW5ndGgiLCJlcnJvckNvZGUiLCJwYXJzZUludCIsInBhcnNlRXJyIiwiZXJyb3JNc2ciLCJnZXQiLCJ1bmRlZmluZWQiLCJMYW5nRXJyb3JNZXNzYWdlIiwiTGFuZ0Vycm9yQ29kZSIsIkluc3RydWN0aW9uTWlzc2luZyIsIkluc3RydWN0aW9uRmFsbGJhY2tOb3RGb3VuZCIsIkluc3RydWN0aW9uRGlkTm90RGVzZXJpYWxpemUiLCJJbnN0cnVjdGlvbkRpZE5vdFNlcmlhbGl6ZSIsIklkbEluc3RydWN0aW9uU3R1YiIsIklkbEluc3RydWN0aW9uSW52YWxpZFByb2dyYW0iLCJDb25zdHJhaW50TXV0IiwiQ29uc3RyYWludEhhc09uZSIsIkNvbnN0cmFpbnRTaWduZXIiLCJDb25zdHJhaW50UmF3IiwiQ29uc3RyYWludE93bmVyIiwiQ29uc3RyYWludFJlbnRFeGVtcHQiLCJDb25zdHJhaW50U2VlZHMiLCJDb25zdHJhaW50RXhlY3V0YWJsZSIsIkNvbnN0cmFpbnRTdGF0ZSIsIkNvbnN0cmFpbnRBc3NvY2lhdGVkIiwiQ29uc3RyYWludEFzc29jaWF0ZWRJbml0IiwiQ29uc3RyYWludENsb3NlIiwiQ29uc3RyYWludEFkZHJlc3MiLCJBY2NvdW50RGlzY3JpbWluYXRvckFscmVhZHlTZXQiLCJBY2NvdW50RGlzY3JpbWluYXRvck5vdEZvdW5kIiwiQWNjb3VudERpc2NyaW1pbmF0b3JNaXNtYXRjaCIsIkFjY291bnREaWROb3REZXNlcmlhbGl6ZSIsIkFjY291bnREaWROb3RTZXJpYWxpemUiLCJBY2NvdW50Tm90RW5vdWdoS2V5cyIsIkFjY291bnROb3RNdXRhYmxlIiwiQWNjb3VudE5vdFByb2dyYW1Pd25lZCIsIlN0YXRlSW52YWxpZEFkZHJlc3MiLCJEZXByZWNhdGVkIiwiTWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/idl.js":
/*!************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/idl.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeIdlAccount: () => (/* binding */ decodeIdlAccount),\n/* harmony export */   encodeIdlAccount: () => (/* binding */ encodeIdlAccount),\n/* harmony export */   idlAddress: () => (/* binding */ idlAddress),\n/* harmony export */   seed: () => (/* binding */ seed)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @project-serum/borsh */ \"(ssr)/./node_modules/@project-serum/borsh/dist/lib/index.js\");\n\n\n// Deterministic IDL address as a function of the program id.\nasync function idlAddress(programId) {\n    const base = (await _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey.findProgramAddress([], programId))[0];\n    return await _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey.createWithSeed(base, seed(), programId);\n}\n// Seed for generating the idlAddress.\nfunction seed() {\n    return \"anchor:idl\";\n}\nconst IDL_ACCOUNT_LAYOUT = _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.struct([\n    _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.publicKey(\"authority\"),\n    _project_serum_borsh__WEBPACK_IMPORTED_MODULE_1__.vecU8(\"data\")\n]);\nfunction decodeIdlAccount(data) {\n    return IDL_ACCOUNT_LAYOUT.decode(data);\n}\nfunction encodeIdlAccount(acc) {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n    const len = IDL_ACCOUNT_LAYOUT.encode(acc, buffer);\n    return buffer.slice(0, len);\n} //# sourceMappingURL=idl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL2lkbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBNEM7QUFDRTtBQUM5Qyw2REFBNkQ7QUFDdEQsZUFBZUUsV0FBV0MsU0FBUztJQUN0QyxNQUFNQyxPQUFPLENBQUMsTUFBTUosc0RBQVNBLENBQUNLLGtCQUFrQixDQUFDLEVBQUUsRUFBRUYsVUFBUyxDQUFFLENBQUMsRUFBRTtJQUNuRSxPQUFPLE1BQU1ILHNEQUFTQSxDQUFDTSxjQUFjLENBQUNGLE1BQU1HLFFBQVFKO0FBQ3hEO0FBQ0Esc0NBQXNDO0FBQy9CLFNBQVNJO0lBQ1osT0FBTztBQUNYO0FBQ0EsTUFBTUMscUJBQXFCUCx3REFBWSxDQUFDO0lBQ3BDQSwyREFBZSxDQUFDO0lBQ2hCQSx1REFBVyxDQUFDO0NBQ2Y7QUFDTSxTQUFTVyxpQkFBaUJDLElBQUk7SUFDakMsT0FBT0wsbUJBQW1CTSxNQUFNLENBQUNEO0FBQ3JDO0FBQ08sU0FBU0UsaUJBQWlCQyxHQUFHO0lBQ2hDLE1BQU1DLFNBQVNDLE9BQU9DLEtBQUssQ0FBQyxPQUFPLDhCQUE4QjtJQUNqRSxNQUFNQyxNQUFNWixtQkFBbUJhLE1BQU0sQ0FBQ0wsS0FBS0M7SUFDM0MsT0FBT0EsT0FBT0ssS0FBSyxDQUFDLEdBQUdGO0FBQzNCLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AcHJvamVjdC1zZXJ1bS9hbmNob3IvZGlzdC9lc20vaWRsLmpzP2RiZmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHVibGljS2V5IH0gZnJvbSBcIkBzb2xhbmEvd2ViMy5qc1wiO1xuaW1wb3J0ICogYXMgYm9yc2ggZnJvbSBcIkBwcm9qZWN0LXNlcnVtL2JvcnNoXCI7XG4vLyBEZXRlcm1pbmlzdGljIElETCBhZGRyZXNzIGFzIGEgZnVuY3Rpb24gb2YgdGhlIHByb2dyYW0gaWQuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaWRsQWRkcmVzcyhwcm9ncmFtSWQpIHtcbiAgICBjb25zdCBiYXNlID0gKGF3YWl0IFB1YmxpY0tleS5maW5kUHJvZ3JhbUFkZHJlc3MoW10sIHByb2dyYW1JZCkpWzBdO1xuICAgIHJldHVybiBhd2FpdCBQdWJsaWNLZXkuY3JlYXRlV2l0aFNlZWQoYmFzZSwgc2VlZCgpLCBwcm9ncmFtSWQpO1xufVxuLy8gU2VlZCBmb3IgZ2VuZXJhdGluZyB0aGUgaWRsQWRkcmVzcy5cbmV4cG9ydCBmdW5jdGlvbiBzZWVkKCkge1xuICAgIHJldHVybiBcImFuY2hvcjppZGxcIjtcbn1cbmNvbnN0IElETF9BQ0NPVU5UX0xBWU9VVCA9IGJvcnNoLnN0cnVjdChbXG4gICAgYm9yc2gucHVibGljS2V5KFwiYXV0aG9yaXR5XCIpLFxuICAgIGJvcnNoLnZlY1U4KFwiZGF0YVwiKSxcbl0pO1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUlkbEFjY291bnQoZGF0YSkge1xuICAgIHJldHVybiBJRExfQUNDT1VOVF9MQVlPVVQuZGVjb2RlKGRhdGEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUlkbEFjY291bnQoYWNjKSB7XG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKDEwMDApOyAvLyBUT0RPOiB1c2UgYSB0aWdodGVyIGJ1ZmZlci5cbiAgICBjb25zdCBsZW4gPSBJRExfQUNDT1VOVF9MQVlPVVQuZW5jb2RlKGFjYywgYnVmZmVyKTtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKDAsIGxlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGwuanMubWFwIl0sIm5hbWVzIjpbIlB1YmxpY0tleSIsImJvcnNoIiwiaWRsQWRkcmVzcyIsInByb2dyYW1JZCIsImJhc2UiLCJmaW5kUHJvZ3JhbUFkZHJlc3MiLCJjcmVhdGVXaXRoU2VlZCIsInNlZWQiLCJJRExfQUNDT1VOVF9MQVlPVVQiLCJzdHJ1Y3QiLCJwdWJsaWNLZXkiLCJ2ZWNVOCIsImRlY29kZUlkbEFjY291bnQiLCJkYXRhIiwiZGVjb2RlIiwiZW5jb2RlSWRsQWNjb3VudCIsImFjYyIsImJ1ZmZlciIsIkJ1ZmZlciIsImFsbG9jIiwibGVuIiwiZW5jb2RlIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/idl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountClient: () => (/* reexport safe */ _program_namespace__WEBPACK_IMPORTED_MODULE_7__.AccountClient),\n/* harmony export */   AccountsCoder: () => (/* reexport safe */ _coder__WEBPACK_IMPORTED_MODULE_3__.AccountsCoder),\n/* harmony export */   BN: () => (/* reexport default from dynamic */ bn_js__WEBPACK_IMPORTED_MODULE_0___default.a),\n/* harmony export */   Coder: () => (/* reexport safe */ _coder__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   EventCoder: () => (/* reexport safe */ _coder__WEBPACK_IMPORTED_MODULE_3__.EventCoder),\n/* harmony export */   InstructionCoder: () => (/* reexport safe */ _coder__WEBPACK_IMPORTED_MODULE_3__.InstructionCoder),\n/* harmony export */   Program: () => (/* reexport safe */ _program__WEBPACK_IMPORTED_MODULE_6__.Program),\n/* harmony export */   Provider: () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   StateClient: () => (/* reexport safe */ _program_namespace__WEBPACK_IMPORTED_MODULE_7__.StateClient),\n/* harmony export */   StateCoder: () => (/* reexport safe */ _coder__WEBPACK_IMPORTED_MODULE_3__.StateCoder),\n/* harmony export */   TypesCoder: () => (/* reexport safe */ _coder__WEBPACK_IMPORTED_MODULE_3__.TypesCoder),\n/* harmony export */   Wallet: () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_2__.NodeWallet),\n/* harmony export */   getProvider: () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_2__.getProvider),\n/* harmony export */   setProvider: () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_2__.setProvider),\n/* harmony export */   utils: () => (/* reexport module object */ _utils__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   web3: () => (/* reexport module object */ _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   workspace: () => (/* reexport safe */ _workspace__WEBPACK_IMPORTED_MODULE_4__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/provider.js\");\n/* harmony import */ var _coder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./coder */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/index.js\");\n/* harmony import */ var _workspace__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./workspace */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/workspace.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/index.js\");\n/* harmony import */ var _program__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./program */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/index.js\");\n/* harmony import */ var _program_namespace__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./program/namespace */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/index.js\");\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXVCO0FBQ2lCO0FBQytDO0FBQ2U7QUFDbEU7QUFDSDtBQUNHO0FBQzhCO0FBQ2tJLENBQ3BNLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL2luZGV4LmpzP2QyOTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiO1xuaW1wb3J0ICogYXMgd2ViMyBmcm9tIFwiQHNvbGFuYS93ZWIzLmpzXCI7XG5pbXBvcnQgUHJvdmlkZXIsIHsgZ2V0UHJvdmlkZXIsIHNldFByb3ZpZGVyLCBOb2RlV2FsbGV0IGFzIFdhbGxldCwgfSBmcm9tIFwiLi9wcm92aWRlclwiO1xuaW1wb3J0IENvZGVyLCB7IEluc3RydWN0aW9uQ29kZXIsIEV2ZW50Q29kZXIsIFN0YXRlQ29kZXIsIFR5cGVzQ29kZXIsIEFjY291bnRzQ29kZXIsIH0gZnJvbSBcIi4vY29kZXJcIjtcbmltcG9ydCB3b3Jrc3BhY2UgZnJvbSBcIi4vd29ya3NwYWNlXCI7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgUHJvZ3JhbSB9IGZyb20gXCIuL3Byb2dyYW1cIjtcbmltcG9ydCB7IEFjY291bnRDbGllbnQsIFN0YXRlQ2xpZW50LCB9IGZyb20gXCIuL3Byb2dyYW0vbmFtZXNwYWNlXCI7XG5leHBvcnQgeyB3b3Jrc3BhY2UsIFByb2dyYW0sIEFjY291bnRDbGllbnQsIFN0YXRlQ2xpZW50LCBDb2RlciwgSW5zdHJ1Y3Rpb25Db2RlciwgRXZlbnRDb2RlciwgU3RhdGVDb2RlciwgVHlwZXNDb2RlciwgQWNjb3VudHNDb2Rlciwgc2V0UHJvdmlkZXIsIGdldFByb3ZpZGVyLCBQcm92aWRlciwgQk4sIHdlYjMsIHV0aWxzLCBXYWxsZXQsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiQk4iLCJ3ZWIzIiwiUHJvdmlkZXIiLCJnZXRQcm92aWRlciIsInNldFByb3ZpZGVyIiwiTm9kZVdhbGxldCIsIldhbGxldCIsIkNvZGVyIiwiSW5zdHJ1Y3Rpb25Db2RlciIsIkV2ZW50Q29kZXIiLCJTdGF0ZUNvZGVyIiwiVHlwZXNDb2RlciIsIkFjY291bnRzQ29kZXIiLCJ3b3Jrc3BhY2UiLCJ1dGlscyIsIlByb2dyYW0iLCJBY2NvdW50Q2xpZW50IiwiU3RhdGVDbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/common.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/program/common.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseIdlErrors: () => (/* binding */ parseIdlErrors),\n/* harmony export */   toInstruction: () => (/* binding */ toInstruction),\n/* harmony export */   translateAddress: () => (/* binding */ translateAddress),\n/* harmony export */   validateAccounts: () => (/* binding */ validateAccounts)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n\nfunction parseIdlErrors(idl) {\n    const errors = new Map();\n    if (idl.errors) {\n        idl.errors.forEach((e)=>{\n            var _a;\n            let msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;\n            errors.set(e.code, msg);\n        });\n    }\n    return errors;\n}\n// Allow either IdLInstruction or IdlStateMethod since the types share fields.\nfunction toInstruction(idlIx, ...args) {\n    if (idlIx.args.length != args.length) {\n        throw new Error(\"Invalid argument length\");\n    }\n    const ix = {};\n    let idx = 0;\n    idlIx.args.forEach((ixArg)=>{\n        ix[ixArg.name] = args[idx];\n        idx += 1;\n    });\n    return ix;\n}\n// Throws error if any account required for the `ix` is not given.\nfunction validateAccounts(ixAccounts, accounts) {\n    ixAccounts.forEach((acc)=>{\n        // @ts-ignore\n        if (acc.accounts !== undefined) {\n            // @ts-ignore\n            validateAccounts(acc.accounts, accounts[acc.name]);\n        } else {\n            if (accounts[acc.name] === undefined) {\n                throw new Error(`Invalid arguments: ${acc.name} not provided.`);\n            }\n        }\n    });\n}\n// Translates an address to a Pubkey.\nfunction translateAddress(address) {\n    if (typeof address === \"string\") {\n        const pk = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(address);\n        return pk;\n    } else {\n        return address;\n    }\n} //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3Byb2dyYW0vY29tbW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRDO0FBQ3JDLFNBQVNDLGVBQWVDLEdBQUc7SUFDOUIsTUFBTUMsU0FBUyxJQUFJQztJQUNuQixJQUFJRixJQUFJQyxNQUFNLEVBQUU7UUFDWkQsSUFBSUMsTUFBTSxDQUFDRSxPQUFPLENBQUMsQ0FBQ0M7WUFDaEIsSUFBSUM7WUFDSixJQUFJQyxNQUFNLENBQUNELEtBQUtELEVBQUVFLEdBQUcsTUFBTSxRQUFRRCxPQUFPLEtBQUssSUFBSUEsS0FBS0QsRUFBRUcsSUFBSTtZQUM5RE4sT0FBT08sR0FBRyxDQUFDSixFQUFFSyxJQUFJLEVBQUVIO1FBQ3ZCO0lBQ0o7SUFDQSxPQUFPTDtBQUNYO0FBQ0EsOEVBQThFO0FBQ3ZFLFNBQVNTLGNBQWNDLEtBQUssRUFBRSxHQUFHQyxJQUFJO0lBQ3hDLElBQUlELE1BQU1DLElBQUksQ0FBQ0MsTUFBTSxJQUFJRCxLQUFLQyxNQUFNLEVBQUU7UUFDbEMsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsTUFBTUMsS0FBSyxDQUFDO0lBQ1osSUFBSUMsTUFBTTtJQUNWTCxNQUFNQyxJQUFJLENBQUNULE9BQU8sQ0FBQyxDQUFDYztRQUNoQkYsRUFBRSxDQUFDRSxNQUFNVixJQUFJLENBQUMsR0FBR0ssSUFBSSxDQUFDSSxJQUFJO1FBQzFCQSxPQUFPO0lBQ1g7SUFDQSxPQUFPRDtBQUNYO0FBQ0Esa0VBQWtFO0FBQzNELFNBQVNHLGlCQUFpQkMsVUFBVSxFQUFFQyxRQUFRO0lBQ2pERCxXQUFXaEIsT0FBTyxDQUFDLENBQUNrQjtRQUNoQixhQUFhO1FBQ2IsSUFBSUEsSUFBSUQsUUFBUSxLQUFLRSxXQUFXO1lBQzVCLGFBQWE7WUFDYkosaUJBQWlCRyxJQUFJRCxRQUFRLEVBQUVBLFFBQVEsQ0FBQ0MsSUFBSWQsSUFBSSxDQUFDO1FBQ3JELE9BQ0s7WUFDRCxJQUFJYSxRQUFRLENBQUNDLElBQUlkLElBQUksQ0FBQyxLQUFLZSxXQUFXO2dCQUNsQyxNQUFNLElBQUlSLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRU8sSUFBSWQsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUNsRTtRQUNKO0lBQ0o7QUFDSjtBQUNBLHFDQUFxQztBQUM5QixTQUFTZ0IsaUJBQWlCQyxPQUFPO0lBQ3BDLElBQUksT0FBT0EsWUFBWSxVQUFVO1FBQzdCLE1BQU1DLEtBQUssSUFBSTNCLHNEQUFTQSxDQUFDMEI7UUFDekIsT0FBT0M7SUFDWCxPQUNLO1FBQ0QsT0FBT0Q7SUFDWDtBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AcHJvamVjdC1zZXJ1bS9hbmNob3IvZGlzdC9lc20vcHJvZ3JhbS9jb21tb24uanM/NjJhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQdWJsaWNLZXkgfSBmcm9tIFwiQHNvbGFuYS93ZWIzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJZGxFcnJvcnMoaWRsKSB7XG4gICAgY29uc3QgZXJyb3JzID0gbmV3IE1hcCgpO1xuICAgIGlmIChpZGwuZXJyb3JzKSB7XG4gICAgICAgIGlkbC5lcnJvcnMuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgbGV0IG1zZyA9IChfYSA9IGUubXNnKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBlLm5hbWU7XG4gICAgICAgICAgICBlcnJvcnMuc2V0KGUuY29kZSwgbXNnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcnM7XG59XG4vLyBBbGxvdyBlaXRoZXIgSWRMSW5zdHJ1Y3Rpb24gb3IgSWRsU3RhdGVNZXRob2Qgc2luY2UgdGhlIHR5cGVzIHNoYXJlIGZpZWxkcy5cbmV4cG9ydCBmdW5jdGlvbiB0b0luc3RydWN0aW9uKGlkbEl4LCAuLi5hcmdzKSB7XG4gICAgaWYgKGlkbEl4LmFyZ3MubGVuZ3RoICE9IGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgbGVuZ3RoXCIpO1xuICAgIH1cbiAgICBjb25zdCBpeCA9IHt9O1xuICAgIGxldCBpZHggPSAwO1xuICAgIGlkbEl4LmFyZ3MuZm9yRWFjaCgoaXhBcmcpID0+IHtcbiAgICAgICAgaXhbaXhBcmcubmFtZV0gPSBhcmdzW2lkeF07XG4gICAgICAgIGlkeCArPSAxO1xuICAgIH0pO1xuICAgIHJldHVybiBpeDtcbn1cbi8vIFRocm93cyBlcnJvciBpZiBhbnkgYWNjb3VudCByZXF1aXJlZCBmb3IgdGhlIGBpeGAgaXMgbm90IGdpdmVuLlxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQWNjb3VudHMoaXhBY2NvdW50cywgYWNjb3VudHMpIHtcbiAgICBpeEFjY291bnRzLmZvckVhY2goKGFjYykgPT4ge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChhY2MuYWNjb3VudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdmFsaWRhdGVBY2NvdW50cyhhY2MuYWNjb3VudHMsIGFjY291bnRzW2FjYy5uYW1lXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWNjb3VudHNbYWNjLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYXJndW1lbnRzOiAke2FjYy5uYW1lfSBub3QgcHJvdmlkZWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIFRyYW5zbGF0ZXMgYW4gYWRkcmVzcyB0byBhIFB1YmtleS5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGVBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICBpZiAodHlwZW9mIGFkZHJlc3MgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29uc3QgcGsgPSBuZXcgUHVibGljS2V5KGFkZHJlc3MpO1xuICAgICAgICByZXR1cm4gcGs7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gYWRkcmVzcztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwIl0sIm5hbWVzIjpbIlB1YmxpY0tleSIsInBhcnNlSWRsRXJyb3JzIiwiaWRsIiwiZXJyb3JzIiwiTWFwIiwiZm9yRWFjaCIsImUiLCJfYSIsIm1zZyIsIm5hbWUiLCJzZXQiLCJjb2RlIiwidG9JbnN0cnVjdGlvbiIsImlkbEl4IiwiYXJncyIsImxlbmd0aCIsIkVycm9yIiwiaXgiLCJpZHgiLCJpeEFyZyIsInZhbGlkYXRlQWNjb3VudHMiLCJpeEFjY291bnRzIiwiYWNjb3VudHMiLCJhY2MiLCJ1bmRlZmluZWQiLCJ0cmFuc2xhdGVBZGRyZXNzIiwiYWRkcmVzcyIsInBrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/context.js":
/*!************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/program/context.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   splitArgsAndCtx: () => (/* binding */ splitArgsAndCtx)\n/* harmony export */ });\nfunction splitArgsAndCtx(idlIx, args) {\n    let options = {};\n    const inputLen = idlIx.args ? idlIx.args.length : 0;\n    if (args.length > inputLen) {\n        if (args.length !== inputLen + 1) {\n            throw new Error(\"provided too many arguments ${args}\");\n        }\n        options = args.pop();\n    }\n    return [\n        args,\n        options\n    ];\n} //# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3Byb2dyYW0vY29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsZ0JBQWdCQyxLQUFLLEVBQUVDLElBQUk7SUFDdkMsSUFBSUMsVUFBVSxDQUFDO0lBQ2YsTUFBTUMsV0FBV0gsTUFBTUMsSUFBSSxHQUFHRCxNQUFNQyxJQUFJLENBQUNHLE1BQU0sR0FBRztJQUNsRCxJQUFJSCxLQUFLRyxNQUFNLEdBQUdELFVBQVU7UUFDeEIsSUFBSUYsS0FBS0csTUFBTSxLQUFLRCxXQUFXLEdBQUc7WUFDOUIsTUFBTSxJQUFJRSxNQUFNO1FBQ3BCO1FBQ0FILFVBQVVELEtBQUtLLEdBQUc7SUFDdEI7SUFDQSxPQUFPO1FBQUNMO1FBQU1DO0tBQVE7QUFDMUIsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS9wcm9ncmFtL2NvbnRleHQuanM/NDM3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gc3BsaXRBcmdzQW5kQ3R4KGlkbEl4LCBhcmdzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB7fTtcbiAgICBjb25zdCBpbnB1dExlbiA9IGlkbEl4LmFyZ3MgPyBpZGxJeC5hcmdzLmxlbmd0aCA6IDA7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gaW5wdXRMZW4pIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSBpbnB1dExlbiArIDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInByb3ZpZGVkIHRvbyBtYW55IGFyZ3VtZW50cyAke2FyZ3N9XCIpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMgPSBhcmdzLnBvcCgpO1xuICAgIH1cbiAgICByZXR1cm4gW2FyZ3MsIG9wdGlvbnNdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsic3BsaXRBcmdzQW5kQ3R4IiwiaWRsSXgiLCJhcmdzIiwib3B0aW9ucyIsImlucHV0TGVuIiwibGVuZ3RoIiwiRXJyb3IiLCJwb3AiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/event.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/program/event.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventParser: () => (/* binding */ EventParser)\n/* harmony export */ });\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ \"assert\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);\n\nconst LOG_START_INDEX = \"Program log: \".length;\nclass EventParser {\n    constructor(coder, programId){\n        this.coder = coder;\n        this.programId = programId;\n    }\n    // Each log given, represents an array of messages emitted by\n    // a single transaction, which can execute many different programs across\n    // CPI boundaries. However, the subscription is only interested in the\n    // events emitted by *this* program. In achieving this, we keep track of the\n    // program execution context by parsing each log and looking for a CPI\n    // `invoke` call. If one exists, we know a new program is executing. So we\n    // push the programId onto a stack and switch the program context. This\n    // allows us to track, for a given log, which program was executing during\n    // its emission, thereby allowing us to know if a given log event was\n    // emitted by *this* program. If it was, then we parse the raw string and\n    // emit the event if the string matches the event being subscribed to.\n    parseLogs(logs, callback) {\n        const logScanner = new LogScanner(logs);\n        const execution = new ExecutionContext(logScanner.next());\n        let log = logScanner.next();\n        while(log !== null){\n            let [event, newProgram, didPop] = this.handleLog(execution, log);\n            if (event) {\n                callback(event);\n            }\n            if (newProgram) {\n                execution.push(newProgram);\n            }\n            if (didPop) {\n                execution.pop();\n            }\n            log = logScanner.next();\n        }\n    }\n    // Main log handler. Returns a three element array of the event, the\n    // next program that was invoked for CPI, and a boolean indicating if\n    // a program has completed execution (and thus should be popped off the\n    // execution stack).\n    handleLog(execution, log) {\n        // Executing program is this program.\n        if (execution.program() === this.programId.toString()) {\n            return this.handleProgramLog(log);\n        } else {\n            return [\n                null,\n                ...this.handleSystemLog(log)\n            ];\n        }\n    }\n    // Handles logs from *this* program.\n    handleProgramLog(log) {\n        // This is a `msg!` log.\n        if (log.startsWith(\"Program log:\")) {\n            const logStr = log.slice(LOG_START_INDEX);\n            const event = this.coder.events.decode(logStr);\n            return [\n                event,\n                null,\n                false\n            ];\n        } else {\n            return [\n                null,\n                ...this.handleSystemLog(log)\n            ];\n        }\n    }\n    // Handles logs when the current program being executing is *not* this.\n    handleSystemLog(log) {\n        // System component.\n        const logStart = log.split(\":\")[0];\n        // Did the program finish executing?\n        if (logStart.match(/^Program (.*) success/g) !== null) {\n            return [\n                null,\n                true\n            ];\n        // Recursive call.\n        } else if (logStart.startsWith(`Program ${this.programId.toString()} invoke`)) {\n            return [\n                this.programId.toString(),\n                false\n            ];\n        } else if (logStart.includes(\"invoke\")) {\n            return [\n                \"cpi\",\n                false\n            ]; // Any string will do.\n        } else {\n            return [\n                null,\n                false\n            ];\n        }\n    }\n}\n// Stack frame execution context, allowing one to track what program is\n// executing for a given log.\nclass ExecutionContext {\n    constructor(log){\n        // Assumes the first log in every transaction is an `invoke` log from the\n        // runtime.\n        const program = /^Program (.*) invoke.*$/g.exec(log)[1];\n        this.stack = [\n            program\n        ];\n    }\n    program() {\n        assert__WEBPACK_IMPORTED_MODULE_0__.ok(this.stack.length > 0);\n        return this.stack[this.stack.length - 1];\n    }\n    push(newProgram) {\n        this.stack.push(newProgram);\n    }\n    pop() {\n        assert__WEBPACK_IMPORTED_MODULE_0__.ok(this.stack.length > 0);\n        this.stack.pop();\n    }\n}\nclass LogScanner {\n    constructor(logs){\n        this.logs = logs;\n    }\n    next() {\n        if (this.logs.length === 0) {\n            return null;\n        }\n        let l = this.logs[0];\n        this.logs = this.logs.slice(1);\n        return l;\n    }\n} //# sourceMappingURL=event.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/event.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/program/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Program: () => (/* binding */ Program)\n/* harmony export */ });\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pako */ \"(ssr)/./node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var _idl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../idl */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/idl.js\");\n/* harmony import */ var _coder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../coder */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/index.js\");\n/* harmony import */ var _namespace__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/index.js\");\n/* harmony import */ var _utils_bytes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/bytes */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/index.js\");\n/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./event */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/event.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/common.js\");\n\n\n\n\n\n\n\n\n/**\n * ## Program\n *\n * Program provides the IDL deserialized client representation of an Anchor\n * program.\n *\n * This API is the one stop shop for all things related to communicating with\n * on-chain programs. Among other things, one can send transactions, fetch\n * deserialized accounts, decode instruction data, subscribe to account\n * changes, and listen to events.\n *\n * In addition to field accessors and methods, the object provides a set of\n * dynamically generated properties, also known as namespaces, that\n * map one-to-one to program methods and accounts. These namespaces generally\n *  can be used as follows:\n *\n * ## Usage\n *\n * ```javascript\n * program.<namespace>.<program-specific-method>\n * ```\n *\n * API specifics are namespace dependent. The examples used in the documentation\n * below will refer to the two counter examples found\n * [here](https://github.com/project-serum/anchor#examples).\n */ class Program {\n    /**\n     * @param idl       The interface definition.\n     * @param programId The on-chain address of the program.\n     * @param provider  The network and wallet context to use. If not provided\n     *                  then uses [[getProvider]].\n     */ constructor(idl, programId, provider){\n        programId = (0,_common__WEBPACK_IMPORTED_MODULE_7__.translateAddress)(programId);\n        // Fields.\n        this._idl = idl;\n        this._programId = programId;\n        this._provider = provider !== null && provider !== void 0 ? provider : (0,___WEBPACK_IMPORTED_MODULE_4__.getProvider)();\n        this._coder = new _coder__WEBPACK_IMPORTED_MODULE_2__[\"default\"](idl);\n        // Dynamic namespaces.\n        const [rpc, instruction, transaction, account, simulate, state] = _namespace__WEBPACK_IMPORTED_MODULE_3__[\"default\"].build(idl, this._coder, programId, this._provider);\n        this.rpc = rpc;\n        this.instruction = instruction;\n        this.transaction = transaction;\n        this.account = account;\n        this.simulate = simulate;\n        this.state = state;\n    }\n    /**\n     * Address of the program.\n     */ get programId() {\n        return this._programId;\n    }\n    /**\n     * IDL defining the program's interface.\n     */ get idl() {\n        return this._idl;\n    }\n    /**\n     * Coder for serializing requests.\n     */ get coder() {\n        return this._coder;\n    }\n    /**\n     * Wallet and network provider.\n     */ get provider() {\n        return this._provider;\n    }\n    /**\n     * Generates a Program client by fetching the IDL from the network.\n     *\n     * In order to use this method, an IDL must have been previously initialized\n     * via the anchor CLI's `anchor idl init` command.\n     *\n     * @param programId The on-chain address of the program.\n     * @param provider  The network and wallet context.\n     */ static async at(address, provider) {\n        const programId = (0,_common__WEBPACK_IMPORTED_MODULE_7__.translateAddress)(address);\n        const idl = await Program.fetchIdl(programId, provider);\n        return new Program(idl, programId, provider);\n    }\n    /**\n     * Fetches an idl from the blockchain.\n     *\n     * In order to use this method, an IDL must have been previously initialized\n     * via the anchor CLI's `anchor idl init` command.\n     *\n     * @param programId The on-chain address of the program.\n     * @param provider  The network and wallet context.\n     */ static async fetchIdl(address, provider) {\n        provider = provider !== null && provider !== void 0 ? provider : (0,___WEBPACK_IMPORTED_MODULE_4__.getProvider)();\n        const programId = (0,_common__WEBPACK_IMPORTED_MODULE_7__.translateAddress)(address);\n        const idlAddr = await (0,_idl__WEBPACK_IMPORTED_MODULE_1__.idlAddress)(programId);\n        const accountInfo = await provider.connection.getAccountInfo(idlAddr);\n        // Chop off account discriminator.\n        let idlAccount = (0,_idl__WEBPACK_IMPORTED_MODULE_1__.decodeIdlAccount)(accountInfo.data.slice(8));\n        const inflatedIdl = (0,pako__WEBPACK_IMPORTED_MODULE_0__.inflate)(idlAccount.data);\n        return JSON.parse(_utils_bytes__WEBPACK_IMPORTED_MODULE_5__.utf8.decode(inflatedIdl));\n    }\n    /**\n     * Invokes the given callback every time the given event is emitted.\n     *\n     * @param eventName The PascalCase name of the event, provided by the IDL.\n     * @param callback  The function to invoke whenever the event is emitted from\n     *                  program logs.\n     */ addEventListener(eventName, callback) {\n        const eventParser = new _event__WEBPACK_IMPORTED_MODULE_6__.EventParser(this._coder, this._programId);\n        return this._provider.connection.onLogs(this._programId, (logs, ctx)=>{\n            if (logs.err) {\n                console.error(logs);\n                return;\n            }\n            eventParser.parseLogs(logs.logs, (event)=>{\n                if (event.name === eventName) {\n                    callback(event.data, ctx.slot);\n                }\n            });\n        });\n    }\n    /**\n     * Unsubscribes from the given event listener.\n     */ async removeEventListener(listener) {\n        return this._provider.connection.removeOnLogsListener(listener);\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/account.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/program/namespace/account.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountClient: () => (/* binding */ AccountClient),\n/* harmony export */   \"default\": () => (/* binding */ AccountFactory)\n/* harmony export */ });\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! camelcase */ \"(ssr)/./node_modules/@project-serum/anchor/node_modules/camelcase/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(camelcase__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventemitter3 */ \"(ssr)/./node_modules/eventemitter3/index.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _coder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../coder */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/index.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/common.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../ */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/index.js\");\n/* harmony import */ var _utils_pubkey__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/pubkey */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/pubkey.js\");\n\n\n\n\n\n\n\n\nclass AccountFactory {\n    static build(idl, coder, programId, provider) {\n        const accountFns = {};\n        idl.accounts.forEach((idlAccount)=>{\n            const name = camelcase__WEBPACK_IMPORTED_MODULE_0___default()(idlAccount.name);\n            accountFns[name] = new AccountClient(idl, idlAccount, programId, provider, coder);\n        });\n        return accountFns;\n    }\n}\nclass AccountClient {\n    constructor(idl, idlAccount, programId, provider, coder){\n        this._idlAccount = idlAccount;\n        this._programId = programId;\n        this._provider = provider !== null && provider !== void 0 ? provider : (0,___WEBPACK_IMPORTED_MODULE_6__.getProvider)();\n        this._coder = coder !== null && coder !== void 0 ? coder : new _coder__WEBPACK_IMPORTED_MODULE_4__[\"default\"](idl);\n        this._size = _coder__WEBPACK_IMPORTED_MODULE_4__.ACCOUNT_DISCRIMINATOR_SIZE + (0,_coder__WEBPACK_IMPORTED_MODULE_4__.accountSize)(idl, idlAccount);\n    }\n    /**\n     * Returns the number of bytes in this account.\n     */ get size() {\n        return this._size;\n    }\n    /**\n     * Returns the program ID owning all accounts.\n     */ get programId() {\n        return this._programId;\n    }\n    /**\n     * Returns the client's wallet and network provider.\n     */ get provider() {\n        return this._provider;\n    }\n    /**\n     * Returns the coder.\n     */ get coder() {\n        return this._coder;\n    }\n    /**\n     * Returns a deserialized account.\n     *\n     * @param address The address of the account to fetch.\n     */ async fetch(address) {\n        const accountInfo = await this._provider.connection.getAccountInfo((0,_common__WEBPACK_IMPORTED_MODULE_5__.translateAddress)(address));\n        if (accountInfo === null) {\n            throw new Error(`Account does not exist ${address.toString()}`);\n        }\n        // Assert the account discriminator is correct.\n        const discriminator = await (0,_coder__WEBPACK_IMPORTED_MODULE_4__.accountDiscriminator)(this._idlAccount.name);\n        if (discriminator.compare(accountInfo.data.slice(0, 8))) {\n            throw new Error(\"Invalid account discriminator\");\n        }\n        return this._coder.accounts.decode(this._idlAccount.name, accountInfo.data);\n    }\n    /**\n     * Returns all instances of this account type for the program.\n     */ async all(filter) {\n        let bytes = await (0,_coder__WEBPACK_IMPORTED_MODULE_4__.accountDiscriminator)(this._idlAccount.name);\n        if (filter !== undefined) {\n            bytes = Buffer.concat([\n                bytes,\n                filter\n            ]);\n        }\n        let resp = await this._provider.connection.getProgramAccounts(this._programId, {\n            commitment: this._provider.connection.commitment,\n            filters: [\n                {\n                    memcmp: {\n                        offset: 0,\n                        bytes: bs58__WEBPACK_IMPORTED_MODULE_2__.encode(bytes)\n                    }\n                }\n            ]\n        });\n        return resp.map(({ pubkey, account })=>{\n            return {\n                publicKey: pubkey,\n                account: this._coder.accounts.decode(this._idlAccount.name, account.data)\n            };\n        });\n    }\n    /**\n     * Returns an `EventEmitter` emitting a \"change\" event whenever the account\n     * changes.\n     */ subscribe(address, commitment) {\n        if (subscriptions.get(address.toString())) {\n            return subscriptions.get(address.toString()).ee;\n        }\n        const ee = new (eventemitter3__WEBPACK_IMPORTED_MODULE_1___default())();\n        address = (0,_common__WEBPACK_IMPORTED_MODULE_5__.translateAddress)(address);\n        const listener = this._provider.connection.onAccountChange(address, (acc)=>{\n            const account = this._coder.accounts.decode(this._idlAccount.name, acc.data);\n            ee.emit(\"change\", account);\n        }, commitment);\n        subscriptions.set(address.toString(), {\n            ee,\n            listener\n        });\n        return ee;\n    }\n    /**\n     * Unsubscribes from the account at the given address.\n     */ unsubscribe(address) {\n        let sub = subscriptions.get(address.toString());\n        if (!sub) {\n            console.warn(\"Address is not subscribed\");\n            return;\n        }\n        if (subscriptions) {\n            this._provider.connection.removeAccountChangeListener(sub.listener).then(()=>{\n                subscriptions.delete(address.toString());\n            }).catch(console.error);\n        }\n    }\n    /**\n     * Returns an instruction for creating this account.\n     */ async createInstruction(signer, sizeOverride) {\n        const size = this.size;\n        return _solana_web3_js__WEBPACK_IMPORTED_MODULE_3__.SystemProgram.createAccount({\n            fromPubkey: this._provider.wallet.publicKey,\n            newAccountPubkey: signer.publicKey,\n            space: sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size,\n            lamports: await this._provider.connection.getMinimumBalanceForRentExemption(sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size),\n            programId: this._programId\n        });\n    }\n    /**\n     * Function returning the associated account. Args are keys to associate.\n     * Order matters.\n     */ async associated(...args) {\n        const addr = await this.associatedAddress(...args);\n        return await this.fetch(addr);\n    }\n    /**\n     * Function returning the associated address. Args are keys to associate.\n     * Order matters.\n     */ async associatedAddress(...args) {\n        return await _utils_pubkey__WEBPACK_IMPORTED_MODULE_7__.associated(this._programId, ...args);\n    }\n}\n// Tracks all subscriptions.\nconst subscriptions = new Map(); //# sourceMappingURL=account.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/program/namespace/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountClient: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_5__.AccountClient),\n/* harmony export */   StateClient: () => (/* reexport safe */ _state__WEBPACK_IMPORTED_MODULE_1__.StateClient),\n/* harmony export */   \"default\": () => (/* binding */ NamespaceFactory)\n/* harmony export */ });\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! camelcase */ \"(ssr)/./node_modules/@project-serum/anchor/node_modules/camelcase/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(camelcase__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/state.js\");\n/* harmony import */ var _instruction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instruction */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/instruction.js\");\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/transaction.js\");\n/* harmony import */ var _rpc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/rpc.js\");\n/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/account.js\");\n/* harmony import */ var _simulate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./simulate */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/simulate.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/common.js\");\n\n\n\n\n\n\n\n\n// Re-exports.\n\n\nclass NamespaceFactory {\n    /**\n     * Generates all namespaces for a given program.\n     */ static build(idl, coder, programId, provider) {\n        const rpc = {};\n        const instruction = {};\n        const transaction = {};\n        const simulate = {};\n        const idlErrors = (0,_common__WEBPACK_IMPORTED_MODULE_7__.parseIdlErrors)(idl);\n        const state = _state__WEBPACK_IMPORTED_MODULE_1__[\"default\"].build(idl, coder, programId, provider);\n        idl.instructions.forEach((idlIx)=>{\n            const ixItem = _instruction__WEBPACK_IMPORTED_MODULE_2__[\"default\"].build(idlIx, (ixName, ix)=>coder.instruction.encode(ixName, ix), programId);\n            const txItem = _transaction__WEBPACK_IMPORTED_MODULE_3__[\"default\"].build(idlIx, ixItem);\n            const rpcItem = _rpc__WEBPACK_IMPORTED_MODULE_4__[\"default\"].build(idlIx, txItem, idlErrors, provider);\n            const simulateItem = _simulate__WEBPACK_IMPORTED_MODULE_6__[\"default\"].build(idlIx, txItem, idlErrors, provider, coder, programId, idl);\n            const name = camelcase__WEBPACK_IMPORTED_MODULE_0___default()(idlIx.name);\n            instruction[name] = ixItem;\n            transaction[name] = txItem;\n            rpc[name] = rpcItem;\n            simulate[name] = simulateItem;\n        });\n        const account = idl.accounts ? _account__WEBPACK_IMPORTED_MODULE_5__[\"default\"].build(idl, coder, programId, provider) : {};\n        return [\n            rpc,\n            instruction,\n            transaction,\n            account,\n            simulate,\n            state\n        ];\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3Byb2dyYW0vbmFtZXNwYWNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFrQztBQUNDO0FBQ1k7QUFDQTtBQUNoQjtBQUNRO0FBQ0U7QUFDRTtBQUMzQyxjQUFjO0FBQ3dCO0FBQ0k7QUFDM0IsTUFBTVU7SUFDakI7O0tBRUMsR0FDRCxPQUFPQyxNQUFNQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxRQUFRLEVBQUU7UUFDMUMsTUFBTUMsTUFBTSxDQUFDO1FBQ2IsTUFBTUMsY0FBYyxDQUFDO1FBQ3JCLE1BQU1DLGNBQWMsQ0FBQztRQUNyQixNQUFNQyxXQUFXLENBQUM7UUFDbEIsTUFBTUMsWUFBWWIsdURBQWNBLENBQUNLO1FBQ2pDLE1BQU1TLFFBQVFwQiw4Q0FBWUEsQ0FBQ1UsS0FBSyxDQUFDQyxLQUFLQyxPQUFPQyxXQUFXQztRQUN4REgsSUFBSVUsWUFBWSxDQUFDQyxPQUFPLENBQUMsQ0FBQ0M7WUFDdEIsTUFBTUMsU0FBU3ZCLG9EQUFrQkEsQ0FBQ1MsS0FBSyxDQUFDYSxPQUFPLENBQUNFLFFBQVFDLEtBQU9kLE1BQU1JLFdBQVcsQ0FBQ1csTUFBTSxDQUFDRixRQUFRQyxLQUFLYjtZQUNyRyxNQUFNZSxTQUFTMUIsb0RBQWtCQSxDQUFDUSxLQUFLLENBQUNhLE9BQU9DO1lBQy9DLE1BQU1LLFVBQVUxQiw0Q0FBVUEsQ0FBQ08sS0FBSyxDQUFDYSxPQUFPSyxRQUFRVCxXQUFXTDtZQUMzRCxNQUFNZ0IsZUFBZXpCLGlEQUFlQSxDQUFDSyxLQUFLLENBQUNhLE9BQU9LLFFBQVFULFdBQVdMLFVBQVVGLE9BQU9DLFdBQVdGO1lBQ2pHLE1BQU1vQixPQUFPaEMsZ0RBQVNBLENBQUN3QixNQUFNUSxJQUFJO1lBQ2pDZixXQUFXLENBQUNlLEtBQUssR0FBR1A7WUFDcEJQLFdBQVcsQ0FBQ2MsS0FBSyxHQUFHSDtZQUNwQmIsR0FBRyxDQUFDZ0IsS0FBSyxHQUFHRjtZQUNaWCxRQUFRLENBQUNhLEtBQUssR0FBR0Q7UUFDckI7UUFDQSxNQUFNRSxVQUFVckIsSUFBSXNCLFFBQVEsR0FDdEI3QixnREFBY0EsQ0FBQ00sS0FBSyxDQUFDQyxLQUFLQyxPQUFPQyxXQUFXQyxZQUM1QyxDQUFDO1FBQ1AsT0FBTztZQUFDQztZQUFLQztZQUFhQztZQUFhZTtZQUFTZDtZQUFVRTtTQUFNO0lBQ3BFO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS9wcm9ncmFtL25hbWVzcGFjZS9pbmRleC5qcz9kNjQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjYW1lbENhc2UgZnJvbSBcImNhbWVsY2FzZVwiO1xuaW1wb3J0IFN0YXRlRmFjdG9yeSBmcm9tIFwiLi9zdGF0ZVwiO1xuaW1wb3J0IEluc3RydWN0aW9uRmFjdG9yeSBmcm9tIFwiLi9pbnN0cnVjdGlvblwiO1xuaW1wb3J0IFRyYW5zYWN0aW9uRmFjdG9yeSBmcm9tIFwiLi90cmFuc2FjdGlvblwiO1xuaW1wb3J0IFJwY0ZhY3RvcnkgZnJvbSBcIi4vcnBjXCI7XG5pbXBvcnQgQWNjb3VudEZhY3RvcnkgZnJvbSBcIi4vYWNjb3VudFwiO1xuaW1wb3J0IFNpbXVsYXRlRmFjdG9yeSBmcm9tIFwiLi9zaW11bGF0ZVwiO1xuaW1wb3J0IHsgcGFyc2VJZGxFcnJvcnMgfSBmcm9tIFwiLi4vY29tbW9uXCI7XG4vLyBSZS1leHBvcnRzLlxuZXhwb3J0IHsgU3RhdGVDbGllbnQgfSBmcm9tIFwiLi9zdGF0ZVwiO1xuZXhwb3J0IHsgQWNjb3VudENsaWVudCB9IGZyb20gXCIuL2FjY291bnRcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hbWVzcGFjZUZhY3Rvcnkge1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhbGwgbmFtZXNwYWNlcyBmb3IgYSBnaXZlbiBwcm9ncmFtLlxuICAgICAqL1xuICAgIHN0YXRpYyBidWlsZChpZGwsIGNvZGVyLCBwcm9ncmFtSWQsIHByb3ZpZGVyKSB7XG4gICAgICAgIGNvbnN0IHJwYyA9IHt9O1xuICAgICAgICBjb25zdCBpbnN0cnVjdGlvbiA9IHt9O1xuICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHt9O1xuICAgICAgICBjb25zdCBzaW11bGF0ZSA9IHt9O1xuICAgICAgICBjb25zdCBpZGxFcnJvcnMgPSBwYXJzZUlkbEVycm9ycyhpZGwpO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IFN0YXRlRmFjdG9yeS5idWlsZChpZGwsIGNvZGVyLCBwcm9ncmFtSWQsIHByb3ZpZGVyKTtcbiAgICAgICAgaWRsLmluc3RydWN0aW9ucy5mb3JFYWNoKChpZGxJeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXhJdGVtID0gSW5zdHJ1Y3Rpb25GYWN0b3J5LmJ1aWxkKGlkbEl4LCAoaXhOYW1lLCBpeCkgPT4gY29kZXIuaW5zdHJ1Y3Rpb24uZW5jb2RlKGl4TmFtZSwgaXgpLCBwcm9ncmFtSWQpO1xuICAgICAgICAgICAgY29uc3QgdHhJdGVtID0gVHJhbnNhY3Rpb25GYWN0b3J5LmJ1aWxkKGlkbEl4LCBpeEl0ZW0pO1xuICAgICAgICAgICAgY29uc3QgcnBjSXRlbSA9IFJwY0ZhY3RvcnkuYnVpbGQoaWRsSXgsIHR4SXRlbSwgaWRsRXJyb3JzLCBwcm92aWRlcik7XG4gICAgICAgICAgICBjb25zdCBzaW11bGF0ZUl0ZW0gPSBTaW11bGF0ZUZhY3RvcnkuYnVpbGQoaWRsSXgsIHR4SXRlbSwgaWRsRXJyb3JzLCBwcm92aWRlciwgY29kZXIsIHByb2dyYW1JZCwgaWRsKTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBjYW1lbENhc2UoaWRsSXgubmFtZSk7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbltuYW1lXSA9IGl4SXRlbTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uW25hbWVdID0gdHhJdGVtO1xuICAgICAgICAgICAgcnBjW25hbWVdID0gcnBjSXRlbTtcbiAgICAgICAgICAgIHNpbXVsYXRlW25hbWVdID0gc2ltdWxhdGVJdGVtO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYWNjb3VudCA9IGlkbC5hY2NvdW50c1xuICAgICAgICAgICAgPyBBY2NvdW50RmFjdG9yeS5idWlsZChpZGwsIGNvZGVyLCBwcm9ncmFtSWQsIHByb3ZpZGVyKVxuICAgICAgICAgICAgOiB7fTtcbiAgICAgICAgcmV0dXJuIFtycGMsIGluc3RydWN0aW9uLCB0cmFuc2FjdGlvbiwgYWNjb3VudCwgc2ltdWxhdGUsIHN0YXRlXTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiY2FtZWxDYXNlIiwiU3RhdGVGYWN0b3J5IiwiSW5zdHJ1Y3Rpb25GYWN0b3J5IiwiVHJhbnNhY3Rpb25GYWN0b3J5IiwiUnBjRmFjdG9yeSIsIkFjY291bnRGYWN0b3J5IiwiU2ltdWxhdGVGYWN0b3J5IiwicGFyc2VJZGxFcnJvcnMiLCJTdGF0ZUNsaWVudCIsIkFjY291bnRDbGllbnQiLCJOYW1lc3BhY2VGYWN0b3J5IiwiYnVpbGQiLCJpZGwiLCJjb2RlciIsInByb2dyYW1JZCIsInByb3ZpZGVyIiwicnBjIiwiaW5zdHJ1Y3Rpb24iLCJ0cmFuc2FjdGlvbiIsInNpbXVsYXRlIiwiaWRsRXJyb3JzIiwic3RhdGUiLCJpbnN0cnVjdGlvbnMiLCJmb3JFYWNoIiwiaWRsSXgiLCJpeEl0ZW0iLCJpeE5hbWUiLCJpeCIsImVuY29kZSIsInR4SXRlbSIsInJwY0l0ZW0iLCJzaW11bGF0ZUl0ZW0iLCJuYW1lIiwiYWNjb3VudCIsImFjY291bnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/instruction.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/program/namespace/instruction.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InstructionNamespaceFactory)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/error.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/common.js\");\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../context */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/context.js\");\n\n\n\n\nclass InstructionNamespaceFactory {\n    static build(idlIx, encodeFn, programId) {\n        if (idlIx.name === \"_inner\") {\n            throw new _error__WEBPACK_IMPORTED_MODULE_1__.IdlError(\"the _inner name is reserved\");\n        }\n        const ix = (...args)=>{\n            const [ixArgs, ctx] = (0,_context__WEBPACK_IMPORTED_MODULE_3__.splitArgsAndCtx)(idlIx, [\n                ...args\n            ]);\n            (0,_common__WEBPACK_IMPORTED_MODULE_2__.validateAccounts)(idlIx.accounts, ctx.accounts);\n            validateInstruction(idlIx, ...args);\n            const keys = ix.accounts(ctx.accounts);\n            if (ctx.remainingAccounts !== undefined) {\n                keys.push(...ctx.remainingAccounts);\n            }\n            if (ctx.__private && ctx.__private.logAccounts) {\n                console.log(\"Outgoing account metas:\", keys);\n            }\n            return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.TransactionInstruction({\n                keys,\n                programId,\n                data: encodeFn(idlIx.name, (0,_common__WEBPACK_IMPORTED_MODULE_2__.toInstruction)(idlIx, ...ixArgs))\n            });\n        };\n        // Utility fn for ordering the accounts for this instruction.\n        ix[\"accounts\"] = (accs)=>{\n            return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts);\n        };\n        return ix;\n    }\n    static accountsArray(ctx, accounts) {\n        return accounts.map((acc)=>{\n            // Nested accounts.\n            // @ts-ignore\n            const nestedAccounts = acc.accounts;\n            if (nestedAccounts !== undefined) {\n                const rpcAccs = ctx[acc.name];\n                return InstructionNamespaceFactory.accountsArray(rpcAccs, nestedAccounts).flat();\n            } else {\n                const account = acc;\n                return {\n                    pubkey: (0,_common__WEBPACK_IMPORTED_MODULE_2__.translateAddress)(ctx[acc.name]),\n                    isWritable: account.isMut,\n                    isSigner: account.isSigner\n                };\n            }\n        }).flat();\n    }\n}\n// Throws error if any argument required for the `ix` is not given.\nfunction validateInstruction(ix, ...args) {\n// todo\n} //# sourceMappingURL=instruction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3Byb2dyYW0vbmFtZXNwYWNlL2luc3RydWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlEO0FBQ2xCO0FBQ3dDO0FBQ2xDO0FBQzlCLE1BQU1NO0lBQ2pCLE9BQU9DLE1BQU1DLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUU7UUFDckMsSUFBSUYsTUFBTUcsSUFBSSxLQUFLLFVBQVU7WUFDekIsTUFBTSxJQUFJViw0Q0FBUUEsQ0FBQztRQUN2QjtRQUNBLE1BQU1XLEtBQUssQ0FBQyxHQUFHQztZQUNYLE1BQU0sQ0FBQ0MsUUFBUUMsSUFBSSxHQUFHVix5REFBZUEsQ0FBQ0csT0FBTzttQkFBSUs7YUFBSztZQUN0RFYseURBQWdCQSxDQUFDSyxNQUFNUSxRQUFRLEVBQUVELElBQUlDLFFBQVE7WUFDN0NDLG9CQUFvQlQsVUFBVUs7WUFDOUIsTUFBTUssT0FBT04sR0FBR0ksUUFBUSxDQUFDRCxJQUFJQyxRQUFRO1lBQ3JDLElBQUlELElBQUlJLGlCQUFpQixLQUFLQyxXQUFXO2dCQUNyQ0YsS0FBS0csSUFBSSxJQUFJTixJQUFJSSxpQkFBaUI7WUFDdEM7WUFDQSxJQUFJSixJQUFJTyxTQUFTLElBQUlQLElBQUlPLFNBQVMsQ0FBQ0MsV0FBVyxFQUFFO2dCQUM1Q0MsUUFBUUMsR0FBRyxDQUFDLDJCQUEyQlA7WUFDM0M7WUFDQSxPQUFPLElBQUlsQixtRUFBc0JBLENBQUM7Z0JBQzlCa0I7Z0JBQ0FSO2dCQUNBZ0IsTUFBTWpCLFNBQVNELE1BQU1HLElBQUksRUFBRVQsc0RBQWFBLENBQUNNLFVBQVVNO1lBQ3ZEO1FBQ0o7UUFDQSw2REFBNkQ7UUFDN0RGLEVBQUUsQ0FBQyxXQUFXLEdBQUcsQ0FBQ2U7WUFDZCxPQUFPckIsNEJBQTRCc0IsYUFBYSxDQUFDRCxNQUFNbkIsTUFBTVEsUUFBUTtRQUN6RTtRQUNBLE9BQU9KO0lBQ1g7SUFDQSxPQUFPZ0IsY0FBY2IsR0FBRyxFQUFFQyxRQUFRLEVBQUU7UUFDaEMsT0FBT0EsU0FDRmEsR0FBRyxDQUFDLENBQUNDO1lBQ04sbUJBQW1CO1lBQ25CLGFBQWE7WUFDYixNQUFNQyxpQkFBaUJELElBQUlkLFFBQVE7WUFDbkMsSUFBSWUsbUJBQW1CWCxXQUFXO2dCQUM5QixNQUFNWSxVQUFVakIsR0FBRyxDQUFDZSxJQUFJbkIsSUFBSSxDQUFDO2dCQUM3QixPQUFPTCw0QkFBNEJzQixhQUFhLENBQUNJLFNBQVNELGdCQUFnQkUsSUFBSTtZQUNsRixPQUNLO2dCQUNELE1BQU1DLFVBQVVKO2dCQUNoQixPQUFPO29CQUNISyxRQUFRL0IseURBQWdCQSxDQUFDVyxHQUFHLENBQUNlLElBQUluQixJQUFJLENBQUM7b0JBQ3RDeUIsWUFBWUYsUUFBUUcsS0FBSztvQkFDekJDLFVBQVVKLFFBQVFJLFFBQVE7Z0JBQzlCO1lBQ0o7UUFDSixHQUNLTCxJQUFJO0lBQ2I7QUFDSjtBQUNBLG1FQUFtRTtBQUNuRSxTQUFTaEIsb0JBQW9CTCxFQUFFLEVBQUUsR0FBR0MsSUFBSTtBQUNwQyxPQUFPO0FBQ1gsRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS9wcm9ncmFtL25hbWVzcGFjZS9pbnN0cnVjdGlvbi5qcz8xYTkxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24gfSBmcm9tIFwiQHNvbGFuYS93ZWIzLmpzXCI7XG5pbXBvcnQgeyBJZGxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvclwiO1xuaW1wb3J0IHsgdG9JbnN0cnVjdGlvbiwgdmFsaWRhdGVBY2NvdW50cywgdHJhbnNsYXRlQWRkcmVzcywgfSBmcm9tIFwiLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBzcGxpdEFyZ3NBbmRDdHggfSBmcm9tIFwiLi4vY29udGV4dFwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5zdHJ1Y3Rpb25OYW1lc3BhY2VGYWN0b3J5IHtcbiAgICBzdGF0aWMgYnVpbGQoaWRsSXgsIGVuY29kZUZuLCBwcm9ncmFtSWQpIHtcbiAgICAgICAgaWYgKGlkbEl4Lm5hbWUgPT09IFwiX2lubmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJZGxFcnJvcihcInRoZSBfaW5uZXIgbmFtZSBpcyByZXNlcnZlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpeCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbaXhBcmdzLCBjdHhdID0gc3BsaXRBcmdzQW5kQ3R4KGlkbEl4LCBbLi4uYXJnc10pO1xuICAgICAgICAgICAgdmFsaWRhdGVBY2NvdW50cyhpZGxJeC5hY2NvdW50cywgY3R4LmFjY291bnRzKTtcbiAgICAgICAgICAgIHZhbGlkYXRlSW5zdHJ1Y3Rpb24oaWRsSXgsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IGl4LmFjY291bnRzKGN0eC5hY2NvdW50cyk7XG4gICAgICAgICAgICBpZiAoY3R4LnJlbWFpbmluZ0FjY291bnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goLi4uY3R4LnJlbWFpbmluZ0FjY291bnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdHguX19wcml2YXRlICYmIGN0eC5fX3ByaXZhdGUubG9nQWNjb3VudHMpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk91dGdvaW5nIGFjY291bnQgbWV0YXM6XCIsIGtleXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcbiAgICAgICAgICAgICAgICBrZXlzLFxuICAgICAgICAgICAgICAgIHByb2dyYW1JZCxcbiAgICAgICAgICAgICAgICBkYXRhOiBlbmNvZGVGbihpZGxJeC5uYW1lLCB0b0luc3RydWN0aW9uKGlkbEl4LCAuLi5peEFyZ3MpKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBVdGlsaXR5IGZuIGZvciBvcmRlcmluZyB0aGUgYWNjb3VudHMgZm9yIHRoaXMgaW5zdHJ1Y3Rpb24uXG4gICAgICAgIGl4W1wiYWNjb3VudHNcIl0gPSAoYWNjcykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIEluc3RydWN0aW9uTmFtZXNwYWNlRmFjdG9yeS5hY2NvdW50c0FycmF5KGFjY3MsIGlkbEl4LmFjY291bnRzKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGl4O1xuICAgIH1cbiAgICBzdGF0aWMgYWNjb3VudHNBcnJheShjdHgsIGFjY291bnRzKSB7XG4gICAgICAgIHJldHVybiBhY2NvdW50c1xuICAgICAgICAgICAgLm1hcCgoYWNjKSA9PiB7XG4gICAgICAgICAgICAvLyBOZXN0ZWQgYWNjb3VudHMuXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBuZXN0ZWRBY2NvdW50cyA9IGFjYy5hY2NvdW50cztcbiAgICAgICAgICAgIGlmIChuZXN0ZWRBY2NvdW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcnBjQWNjcyA9IGN0eFthY2MubmFtZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIEluc3RydWN0aW9uTmFtZXNwYWNlRmFjdG9yeS5hY2NvdW50c0FycmF5KHJwY0FjY3MsIG5lc3RlZEFjY291bnRzKS5mbGF0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50ID0gYWNjO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHB1YmtleTogdHJhbnNsYXRlQWRkcmVzcyhjdHhbYWNjLm5hbWVdKSxcbiAgICAgICAgICAgICAgICAgICAgaXNXcml0YWJsZTogYWNjb3VudC5pc011dCxcbiAgICAgICAgICAgICAgICAgICAgaXNTaWduZXI6IGFjY291bnQuaXNTaWduZXIsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5mbGF0KCk7XG4gICAgfVxufVxuLy8gVGhyb3dzIGVycm9yIGlmIGFueSBhcmd1bWVudCByZXF1aXJlZCBmb3IgdGhlIGBpeGAgaXMgbm90IGdpdmVuLlxuZnVuY3Rpb24gdmFsaWRhdGVJbnN0cnVjdGlvbihpeCwgLi4uYXJncykge1xuICAgIC8vIHRvZG9cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJUcmFuc2FjdGlvbkluc3RydWN0aW9uIiwiSWRsRXJyb3IiLCJ0b0luc3RydWN0aW9uIiwidmFsaWRhdGVBY2NvdW50cyIsInRyYW5zbGF0ZUFkZHJlc3MiLCJzcGxpdEFyZ3NBbmRDdHgiLCJJbnN0cnVjdGlvbk5hbWVzcGFjZUZhY3RvcnkiLCJidWlsZCIsImlkbEl4IiwiZW5jb2RlRm4iLCJwcm9ncmFtSWQiLCJuYW1lIiwiaXgiLCJhcmdzIiwiaXhBcmdzIiwiY3R4IiwiYWNjb3VudHMiLCJ2YWxpZGF0ZUluc3RydWN0aW9uIiwia2V5cyIsInJlbWFpbmluZ0FjY291bnRzIiwidW5kZWZpbmVkIiwicHVzaCIsIl9fcHJpdmF0ZSIsImxvZ0FjY291bnRzIiwiY29uc29sZSIsImxvZyIsImRhdGEiLCJhY2NzIiwiYWNjb3VudHNBcnJheSIsIm1hcCIsImFjYyIsIm5lc3RlZEFjY291bnRzIiwicnBjQWNjcyIsImZsYXQiLCJhY2NvdW50IiwicHVia2V5IiwiaXNXcml0YWJsZSIsImlzTXV0IiwiaXNTaWduZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/instruction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/rpc.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/program/namespace/rpc.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RpcFactory)\n/* harmony export */ });\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/context.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/error.js\");\n\n\nclass RpcFactory {\n    static build(idlIx, txFn, idlErrors, provider) {\n        const rpc = async (...args)=>{\n            const tx = txFn(...args);\n            const [, ctx] = (0,_context__WEBPACK_IMPORTED_MODULE_0__.splitArgsAndCtx)(idlIx, [\n                ...args\n            ]);\n            try {\n                const txSig = await provider.send(tx, ctx.signers, ctx.options);\n                return txSig;\n            } catch (err) {\n                console.log(\"Translating error\", err);\n                let translatedErr = _error__WEBPACK_IMPORTED_MODULE_1__.ProgramError.parse(err, idlErrors);\n                if (translatedErr === null) {\n                    throw err;\n                }\n                throw translatedErr;\n            }\n        };\n        return rpc;\n    }\n} //# sourceMappingURL=rpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3Byb2dyYW0vbmFtZXNwYWNlL3JwYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFDRjtBQUM1QixNQUFNRTtJQUNqQixPQUFPQyxNQUFNQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsU0FBUyxFQUFFQyxRQUFRLEVBQUU7UUFDM0MsTUFBTUMsTUFBTSxPQUFPLEdBQUdDO1lBQ2xCLE1BQU1DLEtBQUtMLFFBQVFJO1lBQ25CLE1BQU0sR0FBR0UsSUFBSSxHQUFHWCx5REFBZUEsQ0FBQ0ksT0FBTzttQkFBSUs7YUFBSztZQUNoRCxJQUFJO2dCQUNBLE1BQU1HLFFBQVEsTUFBTUwsU0FBU00sSUFBSSxDQUFDSCxJQUFJQyxJQUFJRyxPQUFPLEVBQUVILElBQUlJLE9BQU87Z0JBQzlELE9BQU9IO1lBQ1gsRUFDQSxPQUFPSSxLQUFLO2dCQUNSQyxRQUFRQyxHQUFHLENBQUMscUJBQXFCRjtnQkFDakMsSUFBSUcsZ0JBQWdCbEIsZ0RBQVlBLENBQUNtQixLQUFLLENBQUNKLEtBQUtWO2dCQUM1QyxJQUFJYSxrQkFBa0IsTUFBTTtvQkFDeEIsTUFBTUg7Z0JBQ1Y7Z0JBQ0EsTUFBTUc7WUFDVjtRQUNKO1FBQ0EsT0FBT1g7SUFDWDtBQUNKLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AcHJvamVjdC1zZXJ1bS9hbmNob3IvZGlzdC9lc20vcHJvZ3JhbS9uYW1lc3BhY2UvcnBjLmpzP2Q0NzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3BsaXRBcmdzQW5kQ3R4IH0gZnJvbSBcIi4uL2NvbnRleHRcIjtcbmltcG9ydCB7IFByb2dyYW1FcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvclwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnBjRmFjdG9yeSB7XG4gICAgc3RhdGljIGJ1aWxkKGlkbEl4LCB0eEZuLCBpZGxFcnJvcnMsIHByb3ZpZGVyKSB7XG4gICAgICAgIGNvbnN0IHJwYyA9IGFzeW5jICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IHR4Rm4oLi4uYXJncyk7XG4gICAgICAgICAgICBjb25zdCBbLCBjdHhdID0gc3BsaXRBcmdzQW5kQ3R4KGlkbEl4LCBbLi4uYXJnc10pO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eFNpZyA9IGF3YWl0IHByb3ZpZGVyLnNlbmQodHgsIGN0eC5zaWduZXJzLCBjdHgub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR4U2lnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVHJhbnNsYXRpbmcgZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNsYXRlZEVyciA9IFByb2dyYW1FcnJvci5wYXJzZShlcnIsIGlkbEVycm9ycyk7XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZWRFcnIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyB0cmFuc2xhdGVkRXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcnBjO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJwYy5qcy5tYXAiXSwibmFtZXMiOlsic3BsaXRBcmdzQW5kQ3R4IiwiUHJvZ3JhbUVycm9yIiwiUnBjRmFjdG9yeSIsImJ1aWxkIiwiaWRsSXgiLCJ0eEZuIiwiaWRsRXJyb3JzIiwicHJvdmlkZXIiLCJycGMiLCJhcmdzIiwidHgiLCJjdHgiLCJ0eFNpZyIsInNlbmQiLCJzaWduZXJzIiwib3B0aW9ucyIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJ0cmFuc2xhdGVkRXJyIiwicGFyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/rpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/simulate.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/program/namespace/simulate.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SimulateFactory)\n/* harmony export */ });\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/context.js\");\n/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../event */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/event.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/error.js\");\n\n\n\nclass SimulateFactory {\n    static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n        const simulate = async (...args)=>{\n            const tx = txFn(...args);\n            const [, ctx] = (0,_context__WEBPACK_IMPORTED_MODULE_0__.splitArgsAndCtx)(idlIx, [\n                ...args\n            ]);\n            let resp = undefined;\n            try {\n                resp = await provider.simulate(tx, ctx.signers, ctx.options);\n            } catch (err) {\n                console.log(\"Translating error\", err);\n                let translatedErr = _error__WEBPACK_IMPORTED_MODULE_2__.ProgramError.parse(err, idlErrors);\n                if (translatedErr === null) {\n                    throw err;\n                }\n                throw translatedErr;\n            }\n            if (resp === undefined) {\n                throw new Error(\"Unable to simulate transaction\");\n            }\n            if (resp.value.err) {\n                throw new Error(`Simulate error: ${resp.value.err.toString()}`);\n            }\n            const logs = resp.value.logs;\n            if (!logs) {\n                throw new Error(\"Simulated logs not found\");\n            }\n            const events = [];\n            if (idl.events) {\n                let parser = new _event__WEBPACK_IMPORTED_MODULE_1__.EventParser(coder, programId);\n                parser.parseLogs(logs, (event)=>{\n                    events.push(event);\n                });\n            }\n            return {\n                events,\n                raw: logs\n            };\n        };\n        return simulate;\n    }\n} //# sourceMappingURL=simulate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3Byb2dyYW0vbmFtZXNwYWNlL3NpbXVsYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkM7QUFDTjtBQUNJO0FBQzVCLE1BQU1HO0lBQ2pCLE9BQU9DLE1BQU1DLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLEdBQUcsRUFBRTtRQUNsRSxNQUFNQyxXQUFXLE9BQU8sR0FBR0M7WUFDdkIsTUFBTUMsS0FBS1IsUUFBUU87WUFDbkIsTUFBTSxHQUFHRSxJQUFJLEdBQUdmLHlEQUFlQSxDQUFDSyxPQUFPO21CQUFJUTthQUFLO1lBQ2hELElBQUlHLE9BQU9DO1lBQ1gsSUFBSTtnQkFDQUQsT0FBTyxNQUFNUixTQUFTSSxRQUFRLENBQUNFLElBQUlDLElBQUlHLE9BQU8sRUFBRUgsSUFBSUksT0FBTztZQUMvRCxFQUNBLE9BQU9DLEtBQUs7Z0JBQ1JDLFFBQVFDLEdBQUcsQ0FBQyxxQkFBcUJGO2dCQUNqQyxJQUFJRyxnQkFBZ0JyQixnREFBWUEsQ0FBQ3NCLEtBQUssQ0FBQ0osS0FBS2I7Z0JBQzVDLElBQUlnQixrQkFBa0IsTUFBTTtvQkFDeEIsTUFBTUg7Z0JBQ1Y7Z0JBQ0EsTUFBTUc7WUFDVjtZQUNBLElBQUlQLFNBQVNDLFdBQVc7Z0JBQ3BCLE1BQU0sSUFBSVEsTUFBTTtZQUNwQjtZQUNBLElBQUlULEtBQUtVLEtBQUssQ0FBQ04sR0FBRyxFQUFFO2dCQUNoQixNQUFNLElBQUlLLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRVQsS0FBS1UsS0FBSyxDQUFDTixHQUFHLENBQUNPLFFBQVEsR0FBRyxDQUFDO1lBQ2xFO1lBQ0EsTUFBTUMsT0FBT1osS0FBS1UsS0FBSyxDQUFDRSxJQUFJO1lBQzVCLElBQUksQ0FBQ0EsTUFBTTtnQkFDUCxNQUFNLElBQUlILE1BQU07WUFDcEI7WUFDQSxNQUFNSSxTQUFTLEVBQUU7WUFDakIsSUFBSWxCLElBQUlrQixNQUFNLEVBQUU7Z0JBQ1osSUFBSUMsU0FBUyxJQUFJN0IsK0NBQVdBLENBQUNRLE9BQU9DO2dCQUNwQ29CLE9BQU9DLFNBQVMsQ0FBQ0gsTUFBTSxDQUFDSTtvQkFDcEJILE9BQU9JLElBQUksQ0FBQ0Q7Z0JBQ2hCO1lBQ0o7WUFDQSxPQUFPO2dCQUFFSDtnQkFBUUssS0FBS047WUFBSztRQUMvQjtRQUNBLE9BQU9oQjtJQUNYO0FBQ0osRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS9wcm9ncmFtL25hbWVzcGFjZS9zaW11bGF0ZS5qcz85OWRkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNwbGl0QXJnc0FuZEN0eCB9IGZyb20gXCIuLi9jb250ZXh0XCI7XG5pbXBvcnQgeyBFdmVudFBhcnNlciB9IGZyb20gXCIuLi9ldmVudFwiO1xuaW1wb3J0IHsgUHJvZ3JhbUVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW11bGF0ZUZhY3Rvcnkge1xuICAgIHN0YXRpYyBidWlsZChpZGxJeCwgdHhGbiwgaWRsRXJyb3JzLCBwcm92aWRlciwgY29kZXIsIHByb2dyYW1JZCwgaWRsKSB7XG4gICAgICAgIGNvbnN0IHNpbXVsYXRlID0gYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gdHhGbiguLi5hcmdzKTtcbiAgICAgICAgICAgIGNvbnN0IFssIGN0eF0gPSBzcGxpdEFyZ3NBbmRDdHgoaWRsSXgsIFsuLi5hcmdzXSk7XG4gICAgICAgICAgICBsZXQgcmVzcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzcCA9IGF3YWl0IHByb3ZpZGVyLnNpbXVsYXRlKHR4LCBjdHguc2lnbmVycywgY3R4Lm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVHJhbnNsYXRpbmcgZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNsYXRlZEVyciA9IFByb2dyYW1FcnJvci5wYXJzZShlcnIsIGlkbEVycm9ycyk7XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZWRFcnIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyB0cmFuc2xhdGVkRXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBzaW11bGF0ZSB0cmFuc2FjdGlvblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNwLnZhbHVlLmVycikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU2ltdWxhdGUgZXJyb3I6ICR7cmVzcC52YWx1ZS5lcnIudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvZ3MgPSByZXNwLnZhbHVlLmxvZ3M7XG4gICAgICAgICAgICBpZiAoIWxvZ3MpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaW11bGF0ZWQgbG9ncyBub3QgZm91bmRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBldmVudHMgPSBbXTtcbiAgICAgICAgICAgIGlmIChpZGwuZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhcnNlciA9IG5ldyBFdmVudFBhcnNlcihjb2RlciwgcHJvZ3JhbUlkKTtcbiAgICAgICAgICAgICAgICBwYXJzZXIucGFyc2VMb2dzKGxvZ3MsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBldmVudHMucHVzaChldmVudCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBldmVudHMsIHJhdzogbG9ncyB9O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc2ltdWxhdGU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2ltdWxhdGUuanMubWFwIl0sIm5hbWVzIjpbInNwbGl0QXJnc0FuZEN0eCIsIkV2ZW50UGFyc2VyIiwiUHJvZ3JhbUVycm9yIiwiU2ltdWxhdGVGYWN0b3J5IiwiYnVpbGQiLCJpZGxJeCIsInR4Rm4iLCJpZGxFcnJvcnMiLCJwcm92aWRlciIsImNvZGVyIiwicHJvZ3JhbUlkIiwiaWRsIiwic2ltdWxhdGUiLCJhcmdzIiwidHgiLCJjdHgiLCJyZXNwIiwidW5kZWZpbmVkIiwic2lnbmVycyIsIm9wdGlvbnMiLCJlcnIiLCJjb25zb2xlIiwibG9nIiwidHJhbnNsYXRlZEVyciIsInBhcnNlIiwiRXJyb3IiLCJ2YWx1ZSIsInRvU3RyaW5nIiwibG9ncyIsImV2ZW50cyIsInBhcnNlciIsInBhcnNlTG9ncyIsImV2ZW50IiwicHVzaCIsInJhdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/simulate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/state.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/program/namespace/state.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StateClient: () => (/* binding */ StateClient),\n/* harmony export */   \"default\": () => (/* binding */ StateFactory)\n/* harmony export */ });\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ \"(ssr)/./node_modules/eventemitter3/index.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! camelcase */ \"(ssr)/./node_modules/@project-serum/anchor/node_modules/camelcase/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(camelcase__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _coder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../coder */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/coder/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/index.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/common.js\");\n/* harmony import */ var _utils_pubkey__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/pubkey */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/pubkey.js\");\n/* harmony import */ var _instruction__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./instruction */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/instruction.js\");\n/* harmony import */ var _rpc__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/rpc.js\");\n/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/transaction.js\");\n\n\n\n\n\n\n\n\n\n\nclass StateFactory {\n    static build(idl, coder, programId, provider) {\n        if (idl.state === undefined) {\n            return undefined;\n        }\n        return new StateClient(idl, programId, provider, coder);\n    }\n}\n/**\n * A client for the program state. Similar to the base [[Program]] client,\n * one can use this to send transactions and read accounts for the state\n * abstraction.\n */ class StateClient {\n    constructor(idl, programId, provider, coder){\n        this._idl = idl;\n        this._programId = programId;\n        this._address = programStateAddress(programId);\n        this._provider = provider !== null && provider !== void 0 ? provider : (0,___WEBPACK_IMPORTED_MODULE_4__.getProvider)();\n        this._coder = coder !== null && coder !== void 0 ? coder : new _coder__WEBPACK_IMPORTED_MODULE_3__[\"default\"](idl);\n        this._sub = null;\n        // Build namespaces.\n        const [instruction, transaction, rpc] = (()=>{\n            let instruction = {};\n            let transaction = {};\n            let rpc = {};\n            idl.state.methods.forEach((m)=>{\n                // Build instruction method.\n                const ixItem = _instruction__WEBPACK_IMPORTED_MODULE_7__[\"default\"].build(m, (ixName, ix)=>coder.instruction.encodeState(ixName, ix), programId);\n                ixItem[\"accounts\"] = (accounts)=>{\n                    const keys = stateInstructionKeys(programId, provider, m, accounts);\n                    return keys.concat(_instruction__WEBPACK_IMPORTED_MODULE_7__[\"default\"].accountsArray(accounts, m.accounts));\n                };\n                // Build transaction method.\n                const txItem = _transaction__WEBPACK_IMPORTED_MODULE_9__[\"default\"].build(m, ixItem);\n                // Build RPC method.\n                const rpcItem = _rpc__WEBPACK_IMPORTED_MODULE_8__[\"default\"].build(m, txItem, (0,_common__WEBPACK_IMPORTED_MODULE_5__.parseIdlErrors)(idl), provider);\n                // Attach them all to their respective namespaces.\n                const name = camelcase__WEBPACK_IMPORTED_MODULE_1___default()(m.name);\n                instruction[name] = ixItem;\n                transaction[name] = txItem;\n                rpc[name] = rpcItem;\n            });\n            return [\n                instruction,\n                transaction,\n                rpc\n            ];\n        })();\n        this.instruction = instruction;\n        this.transaction = transaction;\n        this.rpc = rpc;\n    }\n    /**\n     * Returns the program ID owning the state.\n     */ get programId() {\n        return this._programId;\n    }\n    /**\n     * Returns the client's wallet and network provider.\n     */ get provider() {\n        return this._provider;\n    }\n    /**\n     * Returns the coder.\n     */ get coder() {\n        return this._coder;\n    }\n    /**\n     * Returns the deserialized state account.\n     */ async fetch() {\n        const addr = this.address();\n        const accountInfo = await this.provider.connection.getAccountInfo(addr);\n        if (accountInfo === null) {\n            throw new Error(`Account does not exist ${addr.toString()}`);\n        }\n        // Assert the account discriminator is correct.\n        const expectedDiscriminator = await (0,_coder__WEBPACK_IMPORTED_MODULE_3__.stateDiscriminator)(this._idl.state.struct.name);\n        if (expectedDiscriminator.compare(accountInfo.data.slice(0, 8))) {\n            throw new Error(\"Invalid account discriminator\");\n        }\n        return this.coder.state.decode(accountInfo.data);\n    }\n    /**\n     * Returns the state address.\n     */ address() {\n        return this._address;\n    }\n    /**\n     * Returns an `EventEmitter` with a `\"change\"` event that's fired whenever\n     * the state account cahnges.\n     */ subscribe(commitment) {\n        if (this._sub !== null) {\n            return this._sub.ee;\n        }\n        const ee = new (eventemitter3__WEBPACK_IMPORTED_MODULE_0___default())();\n        const listener = this.provider.connection.onAccountChange(this.address(), (acc)=>{\n            const account = this.coder.state.decode(acc.data);\n            ee.emit(\"change\", account);\n        }, commitment);\n        this._sub = {\n            ee,\n            listener\n        };\n        return ee;\n    }\n    /**\n     * Unsubscribes to state changes.\n     */ unsubscribe() {\n        if (this._sub !== null) {\n            this.provider.connection.removeAccountChangeListener(this._sub.listener).then(async ()=>{\n                this._sub = null;\n            }).catch(console.error);\n        }\n    }\n}\n// Calculates the deterministic address of the program's \"state\" account.\nfunction programStateAddress(programId) {\n    let [registrySigner] = (0,_utils_pubkey__WEBPACK_IMPORTED_MODULE_6__.findProgramAddressSync)([], programId);\n    return (0,_utils_pubkey__WEBPACK_IMPORTED_MODULE_6__.createWithSeedSync)(registrySigner, \"unversioned\", programId);\n}\n// Returns the common keys that are prepended to all instructions targeting\n// the \"state\" of a program.\nfunction stateInstructionKeys(programId, provider, m, accounts) {\n    if (m.name === \"new\") {\n        // Ctor `new` method.\n        const [programSigner] = (0,_utils_pubkey__WEBPACK_IMPORTED_MODULE_6__.findProgramAddressSync)([], programId);\n        return [\n            {\n                pubkey: provider.wallet.publicKey,\n                isWritable: false,\n                isSigner: true\n            },\n            {\n                pubkey: programStateAddress(programId),\n                isWritable: true,\n                isSigner: false\n            },\n            {\n                pubkey: programSigner,\n                isWritable: false,\n                isSigner: false\n            },\n            {\n                pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.SystemProgram.programId,\n                isWritable: false,\n                isSigner: false\n            },\n            {\n                pubkey: programId,\n                isWritable: false,\n                isSigner: false\n            },\n            {\n                pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.SYSVAR_RENT_PUBKEY,\n                isWritable: false,\n                isSigner: false\n            }\n        ];\n    } else {\n        (0,_common__WEBPACK_IMPORTED_MODULE_5__.validateAccounts)(m.accounts, accounts);\n        return [\n            {\n                pubkey: programStateAddress(programId),\n                isWritable: true,\n                isSigner: false\n            }\n        ];\n    }\n} //# sourceMappingURL=state.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/state.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/transaction.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/program/namespace/transaction.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TransactionFactory)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../context */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/context.js\");\n\n\nclass TransactionFactory {\n    static build(idlIx, ixFn) {\n        const txFn = (...args)=>{\n            const [, ctx] = (0,_context__WEBPACK_IMPORTED_MODULE_1__.splitArgsAndCtx)(idlIx, [\n                ...args\n            ]);\n            const tx = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n            if (ctx.instructions !== undefined) {\n                tx.add(...ctx.instructions);\n            }\n            tx.add(ixFn(...args));\n            return tx;\n        };\n        return txFn;\n    }\n} //# sourceMappingURL=transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3Byb2dyYW0vbmFtZXNwYWNlL3RyYW5zYWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUNEO0FBQzlCLE1BQU1FO0lBQ2pCLE9BQU9DLE1BQU1DLEtBQUssRUFBRUMsSUFBSSxFQUFFO1FBQ3RCLE1BQU1DLE9BQU8sQ0FBQyxHQUFHQztZQUNiLE1BQU0sR0FBR0MsSUFBSSxHQUFHUCx5REFBZUEsQ0FBQ0csT0FBTzttQkFBSUc7YUFBSztZQUNoRCxNQUFNRSxLQUFLLElBQUlULHdEQUFXQTtZQUMxQixJQUFJUSxJQUFJRSxZQUFZLEtBQUtDLFdBQVc7Z0JBQ2hDRixHQUFHRyxHQUFHLElBQUlKLElBQUlFLFlBQVk7WUFDOUI7WUFDQUQsR0FBR0csR0FBRyxDQUFDUCxRQUFRRTtZQUNmLE9BQU9FO1FBQ1g7UUFDQSxPQUFPSDtJQUNYO0FBQ0osRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS9wcm9ncmFtL25hbWVzcGFjZS90cmFuc2FjdGlvbi5qcz83MzQ2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSBcIkBzb2xhbmEvd2ViMy5qc1wiO1xuaW1wb3J0IHsgc3BsaXRBcmdzQW5kQ3R4IH0gZnJvbSBcIi4uL2NvbnRleHRcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zYWN0aW9uRmFjdG9yeSB7XG4gICAgc3RhdGljIGJ1aWxkKGlkbEl4LCBpeEZuKSB7XG4gICAgICAgIGNvbnN0IHR4Rm4gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgY29uc3QgWywgY3R4XSA9IHNwbGl0QXJnc0FuZEN0eChpZGxJeCwgWy4uLmFyZ3NdKTtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gbmV3IFRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAoY3R4Lmluc3RydWN0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdHguYWRkKC4uLmN0eC5pbnN0cnVjdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHguYWRkKGl4Rm4oLi4uYXJncykpO1xuICAgICAgICAgICAgcmV0dXJuIHR4O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdHhGbjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2FjdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiVHJhbnNhY3Rpb24iLCJzcGxpdEFyZ3NBbmRDdHgiLCJUcmFuc2FjdGlvbkZhY3RvcnkiLCJidWlsZCIsImlkbEl4IiwiaXhGbiIsInR4Rm4iLCJhcmdzIiwiY3R4IiwidHgiLCJpbnN0cnVjdGlvbnMiLCJ1bmRlZmluZWQiLCJhZGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/namespace/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/provider.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/provider.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeWallet: () => (/* binding */ NodeWallet),\n/* harmony export */   \"default\": () => (/* binding */ Provider),\n/* harmony export */   getProvider: () => (/* binding */ getProvider),\n/* harmony export */   setProvider: () => (/* binding */ setProvider)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/common */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/common.js\");\n\n\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */ class Provider {\n    /**\n     * @param connection The cluster connection where the program is deployed.\n     * @param wallet     The wallet used to pay for and sign all transactions.\n     * @param opts       Transaction confirmation options to use by default.\n     */ constructor(connection, wallet, opts){\n        this.connection = connection;\n        this.wallet = wallet;\n        this.opts = opts;\n    }\n    static defaultOptions() {\n        return {\n            preflightCommitment: \"recent\",\n            commitment: \"recent\"\n        };\n    }\n    /**\n     * Returns a `Provider` with a wallet read from the local filesystem.\n     *\n     * @param url  The network cluster url.\n     * @param opts The default transaction confirmation options.\n     *\n     * (This api is for Node only.)\n     */ static local(url, opts) {\n        opts = opts !== null && opts !== void 0 ? opts : Provider.defaultOptions();\n        const connection = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n        const wallet = NodeWallet.local();\n        return new Provider(connection, wallet, opts);\n    }\n    /**\n     * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n     * variable\n     *\n     * (This api is for Node only.)\n     */ static env() {\n        if (_utils_common__WEBPACK_IMPORTED_MODULE_1__.isBrowser) return;\n        const process = __webpack_require__(/*! process */ \"process\");\n        const url = process.env.ANCHOR_PROVIDER_URL;\n        if (url === undefined) {\n            throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n        }\n        const options = Provider.defaultOptions();\n        const connection = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Connection(url, options.commitment);\n        const wallet = NodeWallet.local();\n        return new Provider(connection, wallet, options);\n    }\n    /**\n     * Sends the given transaction, paid for and signed by the provider's wallet.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provdier wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */ async send(tx, signers, opts) {\n        if (signers === undefined) {\n            signers = [];\n        }\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        tx.feePayer = this.wallet.publicKey;\n        tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n        await this.wallet.signTransaction(tx);\n        signers.filter((s)=>s !== undefined).forEach((kp)=>{\n            tx.partialSign(kp);\n        });\n        const rawTx = tx.serialize();\n        const txId = await (0,_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.sendAndConfirmRawTransaction)(this.connection, rawTx, opts);\n        return txId;\n    }\n    /**\n     * Similar to `send`, but for an array of transactions and signers.\n     */ async sendAll(reqs, opts) {\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n        let txs = reqs.map((r)=>{\n            let tx = r.tx;\n            let signers = r.signers;\n            if (signers === undefined) {\n                signers = [];\n            }\n            tx.feePayer = this.wallet.publicKey;\n            tx.recentBlockhash = blockhash.blockhash;\n            signers.filter((s)=>s !== undefined).forEach((kp)=>{\n                tx.partialSign(kp);\n            });\n            return tx;\n        });\n        const signedTxs = await this.wallet.signAllTransactions(txs);\n        const sigs = [];\n        for(let k = 0; k < txs.length; k += 1){\n            const tx = signedTxs[k];\n            const rawTx = tx.serialize();\n            sigs.push(await (0,_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.sendAndConfirmRawTransaction)(this.connection, rawTx, opts));\n        }\n        return sigs;\n    }\n    /**\n     * Simulates the given transaction, returning emitted logs from execution.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provdier wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */ async simulate(tx, signers, opts) {\n        var _a, _b;\n        if (signers === undefined) {\n            signers = [];\n        }\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        tx.feePayer = this.wallet.publicKey;\n        tx.recentBlockhash = (await this.connection.getRecentBlockhash((_a = opts.preflightCommitment) !== null && _a !== void 0 ? _a : this.opts.preflightCommitment)).blockhash;\n        await this.wallet.signTransaction(tx);\n        signers.filter((s)=>s !== undefined).forEach((kp)=>{\n            tx.partialSign(kp);\n        });\n        return await simulateTransaction(this.connection, tx, (_b = opts.commitment) !== null && _b !== void 0 ? _b : this.opts.commitment);\n    }\n}\n/**\n * Node only wallet.\n */ class NodeWallet {\n    constructor(payer){\n        this.payer = payer;\n    }\n    static local() {\n        const payer = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Keypair.fromSecretKey(Buffer.from(JSON.parse((__webpack_require__(/*! fs */ \"fs\").readFileSync)((__webpack_require__(/*! os */ \"os\").homedir)() + \"/.config/solana/id.json\", {\n            encoding: \"utf-8\"\n        }))));\n        return new NodeWallet(payer);\n    }\n    async signTransaction(tx) {\n        tx.partialSign(this.payer);\n        return tx;\n    }\n    async signAllTransactions(txs) {\n        return txs.map((t)=>{\n            t.partialSign(this.payer);\n            return t;\n        });\n    }\n    get publicKey() {\n        return this.payer.publicKey;\n    }\n}\n// Copy of Connection.simulateTransaction that takes a commitment parameter.\nasync function simulateTransaction(connection, transaction, commitment) {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(// @ts-ignore\n    connection._disableBlockhashCaching);\n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString(\"base64\");\n    const config = {\n        encoding: \"base64\",\n        commitment\n    };\n    const args = [\n        encodedTransaction,\n        config\n    ];\n    // @ts-ignore\n    const res = await connection._rpcRequest(\"simulateTransaction\", args);\n    if (res.error) {\n        throw new Error(\"failed to simulate transaction: \" + res.error.message);\n    }\n    return res.result;\n}\n/**\n * Sets the default provider on the client.\n */ function setProvider(provider) {\n    _provider = provider;\n}\n/**\n * Returns the default provider being used by the client.\n */ function getProvider() {\n    if (_provider === null) {\n        return Provider.local();\n    }\n    return _provider;\n}\n// Global provider used as the default when a provider is not given.\nlet _provider = null; //# sourceMappingURL=provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/base64.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/bytes/base64.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base64-js */ \"(ssr)/./node_modules/base64-js/index.js\");\n\nfunction encode(data) {\n    return base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(data);\n}\nfunction decode(data) {\n    return Buffer.from(base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(data));\n} //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL2J5dGVzL2Jhc2U2NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0M7QUFDN0IsU0FBU0MsT0FBT0MsSUFBSTtJQUN2QixPQUFPRixvREFBb0IsQ0FBQ0U7QUFDaEM7QUFDTyxTQUFTRSxPQUFPRixJQUFJO0lBQ3ZCLE9BQU9HLE9BQU9DLElBQUksQ0FBQ04sa0RBQWtCLENBQUNFO0FBQzFDLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AcHJvamVjdC1zZXJ1bS9hbmNob3IvZGlzdC9lc20vdXRpbHMvYnl0ZXMvYmFzZTY0LmpzPzBkYzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYmFzZTY0IGZyb20gXCJiYXNlNjQtanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoZGF0YSkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShkYXRhKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoZGF0YSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShiYXNlNjQudG9CeXRlQXJyYXkoZGF0YSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTY0LmpzLm1hcCJdLCJuYW1lcyI6WyJiYXNlNjQiLCJlbmNvZGUiLCJkYXRhIiwiZnJvbUJ5dGVBcnJheSIsImRlY29kZSIsIkJ1ZmZlciIsImZyb20iLCJ0b0J5dGVBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/base64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/bs58.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/bytes/bs58.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction encode(data) {\n    return bs58__WEBPACK_IMPORTED_MODULE_0__.encode(data);\n}\nfunction decode(data) {\n    return bs58__WEBPACK_IMPORTED_MODULE_0__.decode(data);\n} //# sourceMappingURL=bs58.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL2J5dGVzL2JzNTguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QjtBQUN0QixTQUFTQyxPQUFPQyxJQUFJO0lBQ3ZCLE9BQU9GLHdDQUFXLENBQUNFO0FBQ3ZCO0FBQ08sU0FBU0MsT0FBT0QsSUFBSTtJQUN2QixPQUFPRix3Q0FBVyxDQUFDRTtBQUN2QixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL2J5dGVzL2JzNTguanM/MTQxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiczU4IGZyb20gXCJiczU4XCI7XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKGRhdGEpIHtcbiAgICByZXR1cm4gYnM1OC5lbmNvZGUoZGF0YSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKGRhdGEpIHtcbiAgICByZXR1cm4gYnM1OC5kZWNvZGUoZGF0YSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iczU4LmpzLm1hcCJdLCJuYW1lcyI6WyJiczU4IiwiZW5jb2RlIiwiZGF0YSIsImRlY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/bs58.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/hex.js":
/*!************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/bytes/hex.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\nfunction encode(data) {\n    return data.reduce((str, byte)=>str + byte.toString(16).padStart(2, \"0\"), \"0x\");\n}\nfunction decode(data) {\n    if (data.indexOf(\"0x\") === 0) {\n        data = data.substr(2);\n    }\n    if (data.length % 2 === 1) {\n        data = \"0\" + data;\n    }\n    let key = data.match(/.{2}/g);\n    if (key === null) {\n        return Buffer.from([]);\n    }\n    return Buffer.from(key.map((byte)=>parseInt(byte, 16)));\n} //# sourceMappingURL=hex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL2J5dGVzL2hleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLE9BQU9DLElBQUk7SUFDdkIsT0FBT0EsS0FBS0MsTUFBTSxDQUFDLENBQUNDLEtBQUtDLE9BQVNELE1BQU1DLEtBQUtDLFFBQVEsQ0FBQyxJQUFJQyxRQUFRLENBQUMsR0FBRyxNQUFNO0FBQ2hGO0FBQ08sU0FBU0MsT0FBT04sSUFBSTtJQUN2QixJQUFJQSxLQUFLTyxPQUFPLENBQUMsVUFBVSxHQUFHO1FBQzFCUCxPQUFPQSxLQUFLUSxNQUFNLENBQUM7SUFDdkI7SUFDQSxJQUFJUixLQUFLUyxNQUFNLEdBQUcsTUFBTSxHQUFHO1FBQ3ZCVCxPQUFPLE1BQU1BO0lBQ2pCO0lBQ0EsSUFBSVUsTUFBTVYsS0FBS1csS0FBSyxDQUFDO0lBQ3JCLElBQUlELFFBQVEsTUFBTTtRQUNkLE9BQU9FLE9BQU9DLElBQUksQ0FBQyxFQUFFO0lBQ3pCO0lBQ0EsT0FBT0QsT0FBT0MsSUFBSSxDQUFDSCxJQUFJSSxHQUFHLENBQUMsQ0FBQ1gsT0FBU1ksU0FBU1osTUFBTTtBQUN4RCxFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL2J5dGVzL2hleC5qcz8wZmMyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnJlZHVjZSgoc3RyLCBieXRlKSA9PiBzdHIgKyBieXRlLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIiksIFwiMHhcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5pbmRleE9mKFwiMHhcIikgPT09IDApIHtcbiAgICAgICAgZGF0YSA9IGRhdGEuc3Vic3RyKDIpO1xuICAgIH1cbiAgICBpZiAoZGF0YS5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgICAgIGRhdGEgPSBcIjBcIiArIGRhdGE7XG4gICAgfVxuICAgIGxldCBrZXkgPSBkYXRhLm1hdGNoKC8uezJ9L2cpO1xuICAgIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKFtdKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGtleS5tYXAoKGJ5dGUpID0+IHBhcnNlSW50KGJ5dGUsIDE2KSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJlbmNvZGUiLCJkYXRhIiwicmVkdWNlIiwic3RyIiwiYnl0ZSIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJkZWNvZGUiLCJpbmRleE9mIiwic3Vic3RyIiwibGVuZ3RoIiwia2V5IiwibWF0Y2giLCJCdWZmZXIiLCJmcm9tIiwibWFwIiwicGFyc2VJbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/hex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/bytes/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64: () => (/* reexport module object */ _base64__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   bs58: () => (/* reexport module object */ _bs58__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   hex: () => (/* reexport module object */ _hex__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   utf8: () => (/* reexport module object */ _utf8__WEBPACK_IMPORTED_MODULE_1__)\n/* harmony export */ });\n/* harmony import */ var _hex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hex */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/hex.js\");\n/* harmony import */ var _utf8__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utf8 */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/utf8.js\");\n/* harmony import */ var _bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bs58 */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/bs58.js\");\n/* harmony import */ var _base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base64 */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/base64.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL2J5dGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStCO0FBQ1A7QUFDUztBQUNQO0FBQ087QUFDUDtBQUNXO0FBQ1AsQ0FDOUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AcHJvamVjdC1zZXJ1bS9hbmNob3IvZGlzdC9lc20vdXRpbHMvYnl0ZXMvaW5kZXguanM/ZDc4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBoZXhfMSBmcm9tIFwiLi9oZXhcIjtcbmV4cG9ydCB7IGhleF8xIGFzIGhleCB9O1xuaW1wb3J0ICogYXMgdXRmOF8xIGZyb20gXCIuL3V0ZjhcIjtcbmV4cG9ydCB7IHV0ZjhfMSBhcyB1dGY4IH07XG5pbXBvcnQgKiBhcyBiczU4XzEgZnJvbSBcIi4vYnM1OFwiO1xuZXhwb3J0IHsgYnM1OF8xIGFzIGJzNTggfTtcbmltcG9ydCAqIGFzIGJhc2U2NF8xIGZyb20gXCIuL2Jhc2U2NFwiO1xuZXhwb3J0IHsgYmFzZTY0XzEgYXMgYmFzZTY0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiaGV4XzEiLCJoZXgiLCJ1dGY4XzEiLCJ1dGY4IiwiYnM1OF8xIiwiYnM1OCIsImJhc2U2NF8xIiwiYmFzZTY0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/utf8.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/bytes/utf8.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\nfunction decode(array) {\n    const decoder = typeof TextDecoder === \"undefined\" ? new (__webpack_require__(/*! util */ \"util\").TextDecoder)(\"utf-8\") // Node.\n     : new TextDecoder(\"utf-8\"); // Browser.\n    return decoder.decode(array);\n}\nfunction encode(input) {\n    const encoder = typeof TextEncoder === \"undefined\" ? new (__webpack_require__(/*! util */ \"util\").TextEncoder)(\"utf-8\") // Node.\n     : new TextEncoder(); // Browser.\n    return encoder.encode(input);\n} //# sourceMappingURL=utf8.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL2J5dGVzL3V0ZjguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSxPQUFPQyxLQUFLO0lBQ3hCLE1BQU1DLFVBQVUsT0FBT0MsZ0JBQWdCLGNBQ2pDLElBQUtDLHFEQUEyQixDQUFFLFNBQVMsUUFBUTtPQUNuRCxJQUFJRCxZQUFZLFVBQVUsV0FBVztJQUMzQyxPQUFPRCxRQUFRRixNQUFNLENBQUNDO0FBQzFCO0FBQ08sU0FBU0ksT0FBT0MsS0FBSztJQUN4QixNQUFNQyxVQUFVLE9BQU9DLGdCQUFnQixjQUNqQyxJQUFLSixxREFBMkIsQ0FBRSxTQUFTLFFBQVE7T0FDbkQsSUFBSUksZUFBZSxXQUFXO0lBQ3BDLE9BQU9ELFFBQVFGLE1BQU0sQ0FBQ0M7QUFDMUIsRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS91dGlscy9ieXRlcy91dGY4LmpzP2E0N2UiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShhcnJheSkge1xuICAgIGNvbnN0IGRlY29kZXIgPSB0eXBlb2YgVGV4dERlY29kZXIgPT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBuZXcgKHJlcXVpcmUoXCJ1dGlsXCIpLlRleHREZWNvZGVyKShcInV0Zi04XCIpIC8vIE5vZGUuXG4gICAgICAgIDogbmV3IFRleHREZWNvZGVyKFwidXRmLThcIik7IC8vIEJyb3dzZXIuXG4gICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKGFycmF5KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcbiAgICBjb25zdCBlbmNvZGVyID0gdHlwZW9mIFRleHRFbmNvZGVyID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gbmV3IChyZXF1aXJlKFwidXRpbFwiKS5UZXh0RW5jb2RlcikoXCJ1dGYtOFwiKSAvLyBOb2RlLlxuICAgICAgICA6IG5ldyBUZXh0RW5jb2RlcigpOyAvLyBCcm93c2VyLlxuICAgIHJldHVybiBlbmNvZGVyLmVuY29kZShpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGY4LmpzLm1hcCJdLCJuYW1lcyI6WyJkZWNvZGUiLCJhcnJheSIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsInJlcXVpcmUiLCJlbmNvZGUiLCJpbnB1dCIsImVuY29kZXIiLCJUZXh0RW5jb2RlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/utf8.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/common.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/common.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser)\n/* harmony export */ });\nvar _a;\n/**\n * Returns true if being run inside a web browser,\n * false if in a Node process or electron app.\n */ const isBrowser =  false && 0; //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUE7QUFDSjs7O0NBR0MsR0FDTSxNQUFNQyxZQUFZLE1BQTZCLElBQUksQ0FBc0YsQ0FBRSxDQUNsSixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS91dGlscy9jb21tb24uanM/ZDE5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2E7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBiZWluZyBydW4gaW5zaWRlIGEgd2ViIGJyb3dzZXIsXG4gKiBmYWxzZSBpZiBpbiBhIE5vZGUgcHJvY2VzcyBvciBlbGVjdHJvbiBhcHAuXG4gKi9cbmV4cG9ydCBjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmICEoKF9hID0gd2luZG93LnByb2Nlc3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5oYXNPd25Qcm9wZXJ0eShcInR5cGVcIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJfYSIsImlzQnJvd3NlciIsIndpbmRvdyIsInByb2Nlc3MiLCJoYXNPd25Qcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/features.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/features.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSet: () => (/* binding */ isSet),\n/* harmony export */   set: () => (/* binding */ set)\n/* harmony export */ });\nconst _AVAILABLE_FEATURES = new Set([\n    \"anchor-deprecated-state\"\n]);\nconst _FEATURES = new Map();\nfunction set(key) {\n    if (!_AVAILABLE_FEATURES.has(key)) {\n        throw new Error(\"Invalid feature\");\n    }\n    _FEATURES.set(key, true);\n}\nfunction isSet(key) {\n    return _FEATURES.get(key) !== undefined;\n} //# sourceMappingURL=features.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL2ZlYXR1cmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsc0JBQXNCLElBQUlDLElBQUk7SUFBQztDQUEwQjtBQUMvRCxNQUFNQyxZQUFZLElBQUlDO0FBQ2YsU0FBU0MsSUFBSUMsR0FBRztJQUNuQixJQUFJLENBQUNMLG9CQUFvQk0sR0FBRyxDQUFDRCxNQUFNO1FBQy9CLE1BQU0sSUFBSUUsTUFBTTtJQUNwQjtJQUNBTCxVQUFVRSxHQUFHLENBQUNDLEtBQUs7QUFDdkI7QUFDTyxTQUFTRyxNQUFNSCxHQUFHO0lBQ3JCLE9BQU9ILFVBQVVPLEdBQUcsQ0FBQ0osU0FBU0s7QUFDbEMsRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS91dGlscy9mZWF0dXJlcy5qcz82Y2MzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF9BVkFJTEFCTEVfRkVBVFVSRVMgPSBuZXcgU2V0KFtcImFuY2hvci1kZXByZWNhdGVkLXN0YXRlXCJdKTtcbmNvbnN0IF9GRUFUVVJFUyA9IG5ldyBNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBzZXQoa2V5KSB7XG4gICAgaWYgKCFfQVZBSUxBQkxFX0ZFQVRVUkVTLmhhcyhrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZmVhdHVyZVwiKTtcbiAgICB9XG4gICAgX0ZFQVRVUkVTLnNldChrZXksIHRydWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2V0KGtleSkge1xuICAgIHJldHVybiBfRkVBVFVSRVMuZ2V0KGtleSkgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZlYXR1cmVzLmpzLm1hcCJdLCJuYW1lcyI6WyJfQVZBSUxBQkxFX0ZFQVRVUkVTIiwiU2V0IiwiX0ZFQVRVUkVTIiwiTWFwIiwic2V0Iiwia2V5IiwiaGFzIiwiRXJyb3IiLCJpc1NldCIsImdldCIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/features.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bytes: () => (/* reexport module object */ _bytes__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   features: () => (/* reexport module object */ _features__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   publicKey: () => (/* reexport module object */ _pubkey__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   rpc: () => (/* reexport module object */ _rpc__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   sha256: () => (/* reexport module object */ _sha256__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   token: () => (/* reexport module object */ _token__WEBPACK_IMPORTED_MODULE_4__)\n/* harmony export */ });\n/* harmony import */ var _sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sha256 */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/sha256.js\");\n/* harmony import */ var _rpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/rpc.js\");\n/* harmony import */ var _pubkey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pubkey */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/pubkey.js\");\n/* harmony import */ var _bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/bytes/index.js\");\n/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./token */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/token.js\");\n/* harmony import */ var _features__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./features */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/features.js\");\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFxQztBQUNQO0FBQ0M7QUFDUDtBQUNnQjtBQUNKO0FBQ0Q7QUFDUDtBQUNPO0FBQ1A7QUFDYTtBQUNQLENBQ2xDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL2luZGV4LmpzPzk5NDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc2hhMjU2XzEgZnJvbSBcIi4vc2hhMjU2XCI7XG5leHBvcnQgeyBzaGEyNTZfMSBhcyBzaGEyNTYgfTtcbmltcG9ydCAqIGFzIHJwY18xIGZyb20gXCIuL3JwY1wiO1xuZXhwb3J0IHsgcnBjXzEgYXMgcnBjIH07XG5pbXBvcnQgKiBhcyBwdWJsaWNLZXlfMSBmcm9tIFwiLi9wdWJrZXlcIjtcbmV4cG9ydCB7IHB1YmxpY0tleV8xIGFzIHB1YmxpY0tleSB9O1xuaW1wb3J0ICogYXMgYnl0ZXNfMSBmcm9tIFwiLi9ieXRlc1wiO1xuZXhwb3J0IHsgYnl0ZXNfMSBhcyBieXRlcyB9O1xuaW1wb3J0ICogYXMgdG9rZW5fMSBmcm9tIFwiLi90b2tlblwiO1xuZXhwb3J0IHsgdG9rZW5fMSBhcyB0b2tlbiB9O1xuaW1wb3J0ICogYXMgZmVhdHVyZXNfMSBmcm9tIFwiLi9mZWF0dXJlc1wiO1xuZXhwb3J0IHsgZmVhdHVyZXNfMSBhcyBmZWF0dXJlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbInNoYTI1Nl8xIiwic2hhMjU2IiwicnBjXzEiLCJycGMiLCJwdWJsaWNLZXlfMSIsInB1YmxpY0tleSIsImJ5dGVzXzEiLCJieXRlcyIsInRva2VuXzEiLCJ0b2tlbiIsImZlYXR1cmVzXzEiLCJmZWF0dXJlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/pubkey.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/pubkey.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   associated: () => (/* binding */ associated),\n/* harmony export */   createProgramAddressSync: () => (/* binding */ createProgramAddressSync),\n/* harmony export */   createWithSeedSync: () => (/* binding */ createWithSeedSync),\n/* harmony export */   findProgramAddressSync: () => (/* binding */ findProgramAddressSync)\n/* harmony export */ });\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/js-sha256/src/sha256.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(js_sha256__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _program_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../program/common */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/common.js\");\n\n\n\n\n// Sync version of web3.PublicKey.createWithSeed.\nfunction createWithSeedSync(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([\n        fromPublicKey.toBuffer(),\n        Buffer.from(seed),\n        programId.toBuffer()\n    ]);\n    const hash = js_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256.digest(buffer);\n    return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.PublicKey(Buffer.from(hash));\n}\n// Sync version of web3.PublicKey.createProgramAddress.\nfunction createProgramAddressSync(seeds, programId) {\n    const MAX_SEED_LENGTH = 32;\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function(seed) {\n        if (seed.length > MAX_SEED_LENGTH) {\n            throw new TypeError(`Max seed length exceeded`);\n        }\n        buffer = Buffer.concat([\n            buffer,\n            toBuffer(seed)\n        ]);\n    });\n    buffer = Buffer.concat([\n        buffer,\n        programId.toBuffer(),\n        Buffer.from(\"ProgramDerivedAddress\")\n    ]);\n    let hash = (0,js_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(new Uint8Array(buffer));\n    let publicKeyBytes = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(hash, 16).toArray(undefined, 32);\n    if (_solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.PublicKey.isOnCurve(new Uint8Array(publicKeyBytes))) {\n        throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.PublicKey(publicKeyBytes);\n}\n// Sync version of web3.PublicKey.findProgramAddress.\nfunction findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while(nonce != 0){\n        try {\n            const seedsWithNonce = seeds.concat(Buffer.from([\n                nonce\n            ]));\n            address = createProgramAddressSync(seedsWithNonce, programId);\n        } catch (err) {\n            if (err instanceof TypeError) {\n                throw err;\n            }\n            nonce--;\n            continue;\n        }\n        return [\n            address,\n            nonce\n        ];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n}\nconst toBuffer = (arr)=>{\n    if (arr instanceof Buffer) {\n        return arr;\n    } else if (arr instanceof Uint8Array) {\n        return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n    } else {\n        return Buffer.from(arr);\n    }\n};\nasync function associated(programId, ...args) {\n    let seeds = [\n        Buffer.from([\n            97,\n            110,\n            99,\n            104,\n            111,\n            114\n        ])\n    ]; // b\"anchor\".\n    args.forEach((arg)=>{\n        seeds.push(// @ts-ignore\n        arg.buffer !== undefined ? arg : (0,_program_common__WEBPACK_IMPORTED_MODULE_3__.translateAddress)(arg).toBuffer());\n    });\n    const [assoc] = await _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.PublicKey.findProgramAddress(seeds, (0,_program_common__WEBPACK_IMPORTED_MODULE_3__.translateAddress)(programId));\n    return assoc;\n} //# sourceMappingURL=pubkey.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL3B1YmtleS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXVCO0FBQzBCO0FBQ0w7QUFDUztBQUNyRCxpREFBaUQ7QUFDMUMsU0FBU0ssbUJBQW1CQyxhQUFhLEVBQUVDLElBQUksRUFBRUMsU0FBUztJQUM3RCxNQUFNQyxTQUFTQyxPQUFPQyxNQUFNLENBQUM7UUFDekJMLGNBQWNNLFFBQVE7UUFDdEJGLE9BQU9HLElBQUksQ0FBQ047UUFDWkMsVUFBVUksUUFBUTtLQUNyQjtJQUNELE1BQU1FLE9BQU9aLDZDQUFVQSxDQUFDYSxNQUFNLENBQUNOO0lBQy9CLE9BQU8sSUFBSU4sc0RBQVNBLENBQUNPLE9BQU9HLElBQUksQ0FBQ0M7QUFDckM7QUFDQSx1REFBdUQ7QUFDaEQsU0FBU0UseUJBQXlCQyxLQUFLLEVBQUVULFNBQVM7SUFDckQsTUFBTVUsa0JBQWtCO0lBQ3hCLElBQUlULFNBQVNDLE9BQU9TLEtBQUssQ0FBQztJQUMxQkYsTUFBTUcsT0FBTyxDQUFDLFNBQVViLElBQUk7UUFDeEIsSUFBSUEsS0FBS2MsTUFBTSxHQUFHSCxpQkFBaUI7WUFDL0IsTUFBTSxJQUFJSSxVQUFVLENBQUMsd0JBQXdCLENBQUM7UUFDbEQ7UUFDQWIsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO1lBQUNGO1lBQVFHLFNBQVNMO1NBQU07SUFDbkQ7SUFDQUUsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO1FBQ25CRjtRQUNBRCxVQUFVSSxRQUFRO1FBQ2xCRixPQUFPRyxJQUFJLENBQUM7S0FDZjtJQUNELElBQUlDLE9BQU9aLGlEQUFVQSxDQUFDLElBQUlxQixXQUFXZDtJQUNyQyxJQUFJZSxpQkFBaUIsSUFBSXhCLDhDQUFFQSxDQUFDYyxNQUFNLElBQUlXLE9BQU8sQ0FBQ0MsV0FBVztJQUN6RCxJQUFJdkIsc0RBQVNBLENBQUN3QixTQUFTLENBQUMsSUFBSUosV0FBV0Msa0JBQWtCO1FBQ3JELE1BQU0sSUFBSUksTUFBTSxDQUFDLDhDQUE4QyxDQUFDO0lBQ3BFO0lBQ0EsT0FBTyxJQUFJekIsc0RBQVNBLENBQUNxQjtBQUN6QjtBQUNBLHFEQUFxRDtBQUM5QyxTQUFTSyx1QkFBdUJaLEtBQUssRUFBRVQsU0FBUztJQUNuRCxJQUFJc0IsUUFBUTtJQUNaLElBQUlDO0lBQ0osTUFBT0QsU0FBUyxFQUFHO1FBQ2YsSUFBSTtZQUNBLE1BQU1FLGlCQUFpQmYsTUFBTU4sTUFBTSxDQUFDRCxPQUFPRyxJQUFJLENBQUM7Z0JBQUNpQjthQUFNO1lBQ3ZEQyxVQUFVZix5QkFBeUJnQixnQkFBZ0J4QjtRQUN2RCxFQUNBLE9BQU95QixLQUFLO1lBQ1IsSUFBSUEsZUFBZVgsV0FBVztnQkFDMUIsTUFBTVc7WUFDVjtZQUNBSDtZQUNBO1FBQ0o7UUFDQSxPQUFPO1lBQUNDO1lBQVNEO1NBQU07SUFDM0I7SUFDQSxNQUFNLElBQUlGLE1BQU0sQ0FBQyw2Q0FBNkMsQ0FBQztBQUNuRTtBQUNBLE1BQU1oQixXQUFXLENBQUNzQjtJQUNkLElBQUlBLGVBQWV4QixRQUFRO1FBQ3ZCLE9BQU93QjtJQUNYLE9BQ0ssSUFBSUEsZUFBZVgsWUFBWTtRQUNoQyxPQUFPYixPQUFPRyxJQUFJLENBQUNxQixJQUFJekIsTUFBTSxFQUFFeUIsSUFBSUMsVUFBVSxFQUFFRCxJQUFJRSxVQUFVO0lBQ2pFLE9BQ0s7UUFDRCxPQUFPMUIsT0FBT0csSUFBSSxDQUFDcUI7SUFDdkI7QUFDSjtBQUNPLGVBQWVHLFdBQVc3QixTQUFTLEVBQUUsR0FBRzhCLElBQUk7SUFDL0MsSUFBSXJCLFFBQVE7UUFBQ1AsT0FBT0csSUFBSSxDQUFDO1lBQUM7WUFBSTtZQUFLO1lBQUk7WUFBSztZQUFLO1NBQUk7S0FBRSxFQUFFLGFBQWE7SUFDdEV5QixLQUFLbEIsT0FBTyxDQUFDLENBQUNtQjtRQUNWdEIsTUFBTXVCLElBQUksQ0FDVixhQUFhO1FBQ2JELElBQUk5QixNQUFNLEtBQUtpQixZQUFZYSxNQUFNbkMsaUVBQWdCQSxDQUFDbUMsS0FBSzNCLFFBQVE7SUFDbkU7SUFDQSxNQUFNLENBQUM2QixNQUFNLEdBQUcsTUFBTXRDLHNEQUFTQSxDQUFDdUMsa0JBQWtCLENBQUN6QixPQUFPYixpRUFBZ0JBLENBQUNJO0lBQzNFLE9BQU9pQztBQUNYLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AcHJvamVjdC1zZXJ1bS9hbmNob3IvZGlzdC9lc20vdXRpbHMvcHVia2V5LmpzP2Q5NzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiO1xuaW1wb3J0IHsgc2hhMjU2IGFzIHNoYTI1NlN5bmMgfSBmcm9tIFwianMtc2hhMjU2XCI7XG5pbXBvcnQgeyBQdWJsaWNLZXkgfSBmcm9tIFwiQHNvbGFuYS93ZWIzLmpzXCI7XG5pbXBvcnQgeyB0cmFuc2xhdGVBZGRyZXNzIH0gZnJvbSBcIi4uL3Byb2dyYW0vY29tbW9uXCI7XG4vLyBTeW5jIHZlcnNpb24gb2Ygd2ViMy5QdWJsaWNLZXkuY3JlYXRlV2l0aFNlZWQuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlV2l0aFNlZWRTeW5jKGZyb21QdWJsaWNLZXksIHNlZWQsIHByb2dyYW1JZCkge1xuICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW1xuICAgICAgICBmcm9tUHVibGljS2V5LnRvQnVmZmVyKCksXG4gICAgICAgIEJ1ZmZlci5mcm9tKHNlZWQpLFxuICAgICAgICBwcm9ncmFtSWQudG9CdWZmZXIoKSxcbiAgICBdKTtcbiAgICBjb25zdCBoYXNoID0gc2hhMjU2U3luYy5kaWdlc3QoYnVmZmVyKTtcbiAgICByZXR1cm4gbmV3IFB1YmxpY0tleShCdWZmZXIuZnJvbShoYXNoKSk7XG59XG4vLyBTeW5jIHZlcnNpb24gb2Ygd2ViMy5QdWJsaWNLZXkuY3JlYXRlUHJvZ3JhbUFkZHJlc3MuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvZ3JhbUFkZHJlc3NTeW5jKHNlZWRzLCBwcm9ncmFtSWQpIHtcbiAgICBjb25zdCBNQVhfU0VFRF9MRU5HVEggPSAzMjtcbiAgICBsZXQgYnVmZmVyID0gQnVmZmVyLmFsbG9jKDApO1xuICAgIHNlZWRzLmZvckVhY2goZnVuY3Rpb24gKHNlZWQpIHtcbiAgICAgICAgaWYgKHNlZWQubGVuZ3RoID4gTUFYX1NFRURfTEVOR1RIKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBNYXggc2VlZCBsZW5ndGggZXhjZWVkZWRgKTtcbiAgICAgICAgfVxuICAgICAgICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIsIHRvQnVmZmVyKHNlZWQpXSk7XG4gICAgfSk7XG4gICAgYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbXG4gICAgICAgIGJ1ZmZlcixcbiAgICAgICAgcHJvZ3JhbUlkLnRvQnVmZmVyKCksXG4gICAgICAgIEJ1ZmZlci5mcm9tKFwiUHJvZ3JhbURlcml2ZWRBZGRyZXNzXCIpLFxuICAgIF0pO1xuICAgIGxldCBoYXNoID0gc2hhMjU2U3luYyhuZXcgVWludDhBcnJheShidWZmZXIpKTtcbiAgICBsZXQgcHVibGljS2V5Qnl0ZXMgPSBuZXcgQk4oaGFzaCwgMTYpLnRvQXJyYXkodW5kZWZpbmVkLCAzMik7XG4gICAgaWYgKFB1YmxpY0tleS5pc09uQ3VydmUobmV3IFVpbnQ4QXJyYXkocHVibGljS2V5Qnl0ZXMpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2VlZHMsIGFkZHJlc3MgbXVzdCBmYWxsIG9mZiB0aGUgY3VydmVgKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQdWJsaWNLZXkocHVibGljS2V5Qnl0ZXMpO1xufVxuLy8gU3luYyB2ZXJzaW9uIG9mIHdlYjMuUHVibGljS2V5LmZpbmRQcm9ncmFtQWRkcmVzcy5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUHJvZ3JhbUFkZHJlc3NTeW5jKHNlZWRzLCBwcm9ncmFtSWQpIHtcbiAgICBsZXQgbm9uY2UgPSAyNTU7XG4gICAgbGV0IGFkZHJlc3M7XG4gICAgd2hpbGUgKG5vbmNlICE9IDApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHNlZWRzV2l0aE5vbmNlID0gc2VlZHMuY29uY2F0KEJ1ZmZlci5mcm9tKFtub25jZV0pKTtcbiAgICAgICAgICAgIGFkZHJlc3MgPSBjcmVhdGVQcm9ncmFtQWRkcmVzc1N5bmMoc2VlZHNXaXRoTm9uY2UsIHByb2dyYW1JZCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFR5cGVFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vbmNlLS07XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2FkZHJlc3MsIG5vbmNlXTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBhIHZpYWJsZSBwcm9ncmFtIGFkZHJlc3Mgbm9uY2VgKTtcbn1cbmNvbnN0IHRvQnVmZmVyID0gKGFycikgPT4ge1xuICAgIGlmIChhcnIgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXJyIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oYXJyLmJ1ZmZlciwgYXJyLmJ5dGVPZmZzZXQsIGFyci5ieXRlTGVuZ3RoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShhcnIpO1xuICAgIH1cbn07XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXNzb2NpYXRlZChwcm9ncmFtSWQsIC4uLmFyZ3MpIHtcbiAgICBsZXQgc2VlZHMgPSBbQnVmZmVyLmZyb20oWzk3LCAxMTAsIDk5LCAxMDQsIDExMSwgMTE0XSldOyAvLyBiXCJhbmNob3JcIi5cbiAgICBhcmdzLmZvckVhY2goKGFyZykgPT4ge1xuICAgICAgICBzZWVkcy5wdXNoKFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGFyZy5idWZmZXIgIT09IHVuZGVmaW5lZCA/IGFyZyA6IHRyYW5zbGF0ZUFkZHJlc3MoYXJnKS50b0J1ZmZlcigpKTtcbiAgICB9KTtcbiAgICBjb25zdCBbYXNzb2NdID0gYXdhaXQgUHVibGljS2V5LmZpbmRQcm9ncmFtQWRkcmVzcyhzZWVkcywgdHJhbnNsYXRlQWRkcmVzcyhwcm9ncmFtSWQpKTtcbiAgICByZXR1cm4gYXNzb2M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJrZXkuanMubWFwIl0sIm5hbWVzIjpbIkJOIiwic2hhMjU2Iiwic2hhMjU2U3luYyIsIlB1YmxpY0tleSIsInRyYW5zbGF0ZUFkZHJlc3MiLCJjcmVhdGVXaXRoU2VlZFN5bmMiLCJmcm9tUHVibGljS2V5Iiwic2VlZCIsInByb2dyYW1JZCIsImJ1ZmZlciIsIkJ1ZmZlciIsImNvbmNhdCIsInRvQnVmZmVyIiwiZnJvbSIsImhhc2giLCJkaWdlc3QiLCJjcmVhdGVQcm9ncmFtQWRkcmVzc1N5bmMiLCJzZWVkcyIsIk1BWF9TRUVEX0xFTkdUSCIsImFsbG9jIiwiZm9yRWFjaCIsImxlbmd0aCIsIlR5cGVFcnJvciIsIlVpbnQ4QXJyYXkiLCJwdWJsaWNLZXlCeXRlcyIsInRvQXJyYXkiLCJ1bmRlZmluZWQiLCJpc09uQ3VydmUiLCJFcnJvciIsImZpbmRQcm9ncmFtQWRkcmVzc1N5bmMiLCJub25jZSIsImFkZHJlc3MiLCJzZWVkc1dpdGhOb25jZSIsImVyciIsImFyciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiYXNzb2NpYXRlZCIsImFyZ3MiLCJhcmciLCJwdXNoIiwiYXNzb2MiLCJmaW5kUHJvZ3JhbUFkZHJlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/pubkey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/rpc.js":
/*!******************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/rpc.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMultipleAccounts: () => (/* binding */ getMultipleAccounts),\n/* harmony export */   invoke: () => (/* binding */ invoke)\n/* harmony export */ });\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ \"assert\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _program_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../program/common */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/common.js\");\n/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../provider */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/provider.js\");\n\n\n\n\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */ async function invoke(programId, accounts, data, provider) {\n    programId = (0,_program_common__WEBPACK_IMPORTED_MODULE_2__.translateAddress)(programId);\n    if (!provider) {\n        provider = (0,_provider__WEBPACK_IMPORTED_MODULE_3__.getProvider)();\n    }\n    const tx = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.Transaction();\n    tx.add(new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.TransactionInstruction({\n        programId,\n        keys: accounts !== null && accounts !== void 0 ? accounts : [],\n        data\n    }));\n    return await provider.send(tx);\n}\nasync function getMultipleAccounts(connection, publicKeys) {\n    const args = [\n        publicKeys.map((k)=>k.toBase58()),\n        {\n            commitment: \"recent\"\n        }\n    ];\n    // @ts-ignore\n    const res = await connection._rpcRequest(\"getMultipleAccounts\", args);\n    if (res.error) {\n        throw new Error(\"failed to get info about accounts \" + publicKeys.map((k)=>k.toBase58()).join(\", \") + \": \" + res.error.message);\n    }\n    assert__WEBPACK_IMPORTED_MODULE_0___default()(typeof res.result !== \"undefined\");\n    const accounts = [];\n    for (const account of res.result.value){\n        let value = null;\n        if (account === null) {\n            accounts.push(null);\n            continue;\n        }\n        if (res.result.value) {\n            const { executable, owner, lamports, data } = account;\n            assert__WEBPACK_IMPORTED_MODULE_0___default()(data[1] === \"base64\");\n            value = {\n                executable,\n                owner: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(owner),\n                lamports,\n                data: Buffer.from(data[0], \"base64\")\n            };\n        }\n        if (value === null) {\n            throw new Error(\"Invalid response\");\n        }\n        accounts.push(value);\n    }\n    return accounts.map((account, idx)=>{\n        if (account === null) {\n            return null;\n        }\n        return {\n            publicKey: publicKeys[idx],\n            account\n        };\n    });\n} //# sourceMappingURL=rpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL3JwYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTRCO0FBQ3NEO0FBQzdCO0FBQ1g7QUFDMUM7OztDQUdDLEdBQ00sZUFBZU0sT0FBT0MsU0FBUyxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsUUFBUTtJQUM1REgsWUFBWUgsaUVBQWdCQSxDQUFDRztJQUM3QixJQUFJLENBQUNHLFVBQVU7UUFDWEEsV0FBV0wsc0RBQVdBO0lBQzFCO0lBQ0EsTUFBTU0sS0FBSyxJQUFJVCx3REFBV0E7SUFDMUJTLEdBQUdDLEdBQUcsQ0FBQyxJQUFJVCxtRUFBc0JBLENBQUM7UUFDOUJJO1FBQ0FNLE1BQU1MLGFBQWEsUUFBUUEsYUFBYSxLQUFLLElBQUlBLFdBQVcsRUFBRTtRQUM5REM7SUFDSjtJQUNBLE9BQU8sTUFBTUMsU0FBU0ksSUFBSSxDQUFDSDtBQUMvQjtBQUNPLGVBQWVJLG9CQUFvQkMsVUFBVSxFQUFFQyxVQUFVO0lBQzVELE1BQU1DLE9BQU87UUFBQ0QsV0FBV0UsR0FBRyxDQUFDLENBQUNDLElBQU1BLEVBQUVDLFFBQVE7UUFBSztZQUFFQyxZQUFZO1FBQVM7S0FBRTtJQUM1RSxhQUFhO0lBQ2IsTUFBTUMsTUFBTSxNQUFNUCxXQUFXUSxXQUFXLENBQUMsdUJBQXVCTjtJQUNoRSxJQUFJSyxJQUFJRSxLQUFLLEVBQUU7UUFDWCxNQUFNLElBQUlDLE1BQU0sdUNBQ1pULFdBQVdFLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFQyxRQUFRLElBQUlNLElBQUksQ0FBQyxRQUN6QyxPQUNBSixJQUFJRSxLQUFLLENBQUNHLE9BQU87SUFDekI7SUFDQTVCLDZDQUFNQSxDQUFDLE9BQU91QixJQUFJTSxNQUFNLEtBQUs7SUFDN0IsTUFBTXJCLFdBQVcsRUFBRTtJQUNuQixLQUFLLE1BQU1zQixXQUFXUCxJQUFJTSxNQUFNLENBQUNFLEtBQUssQ0FBRTtRQUNwQyxJQUFJQSxRQUFRO1FBQ1osSUFBSUQsWUFBWSxNQUFNO1lBQ2xCdEIsU0FBU3dCLElBQUksQ0FBQztZQUNkO1FBQ0o7UUFDQSxJQUFJVCxJQUFJTSxNQUFNLENBQUNFLEtBQUssRUFBRTtZQUNsQixNQUFNLEVBQUVFLFVBQVUsRUFBRUMsS0FBSyxFQUFFQyxRQUFRLEVBQUUxQixJQUFJLEVBQUUsR0FBR3FCO1lBQzlDOUIsNkNBQU1BLENBQUNTLElBQUksQ0FBQyxFQUFFLEtBQUs7WUFDbkJzQixRQUFRO2dCQUNKRTtnQkFDQUMsT0FBTyxJQUFJakMsc0RBQVNBLENBQUNpQztnQkFDckJDO2dCQUNBMUIsTUFBTTJCLE9BQU9DLElBQUksQ0FBQzVCLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDL0I7UUFDSjtRQUNBLElBQUlzQixVQUFVLE1BQU07WUFDaEIsTUFBTSxJQUFJTCxNQUFNO1FBQ3BCO1FBQ0FsQixTQUFTd0IsSUFBSSxDQUFDRDtJQUNsQjtJQUNBLE9BQU92QixTQUFTVyxHQUFHLENBQUMsQ0FBQ1csU0FBU1E7UUFDMUIsSUFBSVIsWUFBWSxNQUFNO1lBQ2xCLE9BQU87UUFDWDtRQUNBLE9BQU87WUFDSFMsV0FBV3RCLFVBQVUsQ0FBQ3FCLElBQUk7WUFDMUJSO1FBQ0o7SUFDSjtBQUNKLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpZnQtdHJhZGluZy11aS8uL25vZGVfbW9kdWxlcy9AcHJvamVjdC1zZXJ1bS9hbmNob3IvZGlzdC9lc20vdXRpbHMvcnBjLmpzP2U3ZmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5pbXBvcnQgeyBQdWJsaWNLZXksIFRyYW5zYWN0aW9uLCBUcmFuc2FjdGlvbkluc3RydWN0aW9uLCB9IGZyb20gXCJAc29sYW5hL3dlYjMuanNcIjtcbmltcG9ydCB7IHRyYW5zbGF0ZUFkZHJlc3MgfSBmcm9tIFwiLi4vcHJvZ3JhbS9jb21tb25cIjtcbmltcG9ydCB7IGdldFByb3ZpZGVyIH0gZnJvbSBcIi4uL3Byb3ZpZGVyXCI7XG4vKipcbiAqIFNlbmRzIGEgdHJhbnNhY3Rpb24gdG8gYSBwcm9ncmFtIHdpdGggdGhlIGdpdmVuIGFjY291bnRzIGFuZCBpbnN0cnVjdGlvblxuICogZGF0YS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGludm9rZShwcm9ncmFtSWQsIGFjY291bnRzLCBkYXRhLCBwcm92aWRlcikge1xuICAgIHByb2dyYW1JZCA9IHRyYW5zbGF0ZUFkZHJlc3MocHJvZ3JhbUlkKTtcbiAgICBpZiAoIXByb3ZpZGVyKSB7XG4gICAgICAgIHByb3ZpZGVyID0gZ2V0UHJvdmlkZXIoKTtcbiAgICB9XG4gICAgY29uc3QgdHggPSBuZXcgVHJhbnNhY3Rpb24oKTtcbiAgICB0eC5hZGQobmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xuICAgICAgICBwcm9ncmFtSWQsXG4gICAgICAgIGtleXM6IGFjY291bnRzICE9PSBudWxsICYmIGFjY291bnRzICE9PSB2b2lkIDAgPyBhY2NvdW50cyA6IFtdLFxuICAgICAgICBkYXRhLFxuICAgIH0pKTtcbiAgICByZXR1cm4gYXdhaXQgcHJvdmlkZXIuc2VuZCh0eCk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TXVsdGlwbGVBY2NvdW50cyhjb25uZWN0aW9uLCBwdWJsaWNLZXlzKSB7XG4gICAgY29uc3QgYXJncyA9IFtwdWJsaWNLZXlzLm1hcCgoaykgPT4gay50b0Jhc2U1OCgpKSwgeyBjb21taXRtZW50OiBcInJlY2VudFwiIH1dO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjb25uZWN0aW9uLl9ycGNSZXF1ZXN0KFwiZ2V0TXVsdGlwbGVBY2NvdW50c1wiLCBhcmdzKTtcbiAgICBpZiAocmVzLmVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImZhaWxlZCB0byBnZXQgaW5mbyBhYm91dCBhY2NvdW50cyBcIiArXG4gICAgICAgICAgICBwdWJsaWNLZXlzLm1hcCgoaykgPT4gay50b0Jhc2U1OCgpKS5qb2luKFwiLCBcIikgK1xuICAgICAgICAgICAgXCI6IFwiICtcbiAgICAgICAgICAgIHJlcy5lcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gICAgYXNzZXJ0KHR5cGVvZiByZXMucmVzdWx0ICE9PSBcInVuZGVmaW5lZFwiKTtcbiAgICBjb25zdCBhY2NvdW50cyA9IFtdO1xuICAgIGZvciAoY29uc3QgYWNjb3VudCBvZiByZXMucmVzdWx0LnZhbHVlKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XG4gICAgICAgIGlmIChhY2NvdW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICBhY2NvdW50cy5wdXNoKG51bGwpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcy5yZXN1bHQudmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZXhlY3V0YWJsZSwgb3duZXIsIGxhbXBvcnRzLCBkYXRhIH0gPSBhY2NvdW50O1xuICAgICAgICAgICAgYXNzZXJ0KGRhdGFbMV0gPT09IFwiYmFzZTY0XCIpO1xuICAgICAgICAgICAgdmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgZXhlY3V0YWJsZSxcbiAgICAgICAgICAgICAgICBvd25lcjogbmV3IFB1YmxpY0tleShvd25lciksXG4gICAgICAgICAgICAgICAgbGFtcG9ydHMsXG4gICAgICAgICAgICAgICAgZGF0YTogQnVmZmVyLmZyb20oZGF0YVswXSwgXCJiYXNlNjRcIiksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByZXNwb25zZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBhY2NvdW50cy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY291bnRzLm1hcCgoYWNjb3VudCwgaWR4KSA9PiB7XG4gICAgICAgIGlmIChhY2NvdW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHVibGljS2V5OiBwdWJsaWNLZXlzW2lkeF0sXG4gICAgICAgICAgICBhY2NvdW50LFxuICAgICAgICB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnBjLmpzLm1hcCJdLCJuYW1lcyI6WyJhc3NlcnQiLCJQdWJsaWNLZXkiLCJUcmFuc2FjdGlvbiIsIlRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24iLCJ0cmFuc2xhdGVBZGRyZXNzIiwiZ2V0UHJvdmlkZXIiLCJpbnZva2UiLCJwcm9ncmFtSWQiLCJhY2NvdW50cyIsImRhdGEiLCJwcm92aWRlciIsInR4IiwiYWRkIiwia2V5cyIsInNlbmQiLCJnZXRNdWx0aXBsZUFjY291bnRzIiwiY29ubmVjdGlvbiIsInB1YmxpY0tleXMiLCJhcmdzIiwibWFwIiwiayIsInRvQmFzZTU4IiwiY29tbWl0bWVudCIsInJlcyIsIl9ycGNSZXF1ZXN0IiwiZXJyb3IiLCJFcnJvciIsImpvaW4iLCJtZXNzYWdlIiwicmVzdWx0IiwiYWNjb3VudCIsInZhbHVlIiwicHVzaCIsImV4ZWN1dGFibGUiLCJvd25lciIsImxhbXBvcnRzIiwiQnVmZmVyIiwiZnJvbSIsImlkeCIsInB1YmxpY0tleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/rpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/sha256.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/sha256.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hash: () => (/* binding */ hash)\n/* harmony export */ });\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/js-sha256/src/sha256.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sha256__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction hash(data) {\n    return (0,js_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256)(data);\n} //# sourceMappingURL=sha256.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL3NoYTI1Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDNUIsU0FBU0MsS0FBS0MsSUFBSTtJQUNyQixPQUFPRixpREFBTUEsQ0FBQ0U7QUFDbEIsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL2FuY2hvci9kaXN0L2VzbS91dGlscy9zaGEyNTYuanM/NWI1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaGEyNTYgfSBmcm9tIFwianMtc2hhMjU2XCI7XG5leHBvcnQgZnVuY3Rpb24gaGFzaChkYXRhKSB7XG4gICAgcmV0dXJuIHNoYTI1NihkYXRhKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTI1Ni5qcy5tYXAiXSwibmFtZXMiOlsic2hhMjU2IiwiaGFzaCIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/token.js":
/*!********************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/utils/token.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   associatedAddress: () => (/* binding */ associatedAddress)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n\nconst TOKEN_PROGRAM_ID = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\nconst ASSOCIATED_PROGRAM_ID = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\nasync function associatedAddress({ mint, owner }) {\n    return (await _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey.findProgramAddress([\n        owner.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        mint.toBuffer()\n    ], ASSOCIATED_PROGRAM_ID))[0];\n} //# sourceMappingURL=token.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL3Rva2VuLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDLE1BQU1DLG1CQUFtQixJQUFJRCxzREFBU0EsQ0FBQztBQUN2QyxNQUFNRSx3QkFBd0IsSUFBSUYsc0RBQVNBLENBQUM7QUFDckMsZUFBZUcsa0JBQWtCLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFHO0lBQ3BELE9BQU8sQ0FBQyxNQUFNTCxzREFBU0EsQ0FBQ00sa0JBQWtCLENBQUM7UUFBQ0QsTUFBTUUsUUFBUTtRQUFJTixpQkFBaUJNLFFBQVE7UUFBSUgsS0FBS0csUUFBUTtLQUFHLEVBQUVMLHNCQUFxQixDQUFFLENBQUMsRUFBRTtBQUMzSSxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL2Rpc3QvZXNtL3V0aWxzL3Rva2VuLmpzPzQ3NDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHVibGljS2V5IH0gZnJvbSBcIkBzb2xhbmEvd2ViMy5qc1wiO1xuY29uc3QgVE9LRU5fUFJPR1JBTV9JRCA9IG5ldyBQdWJsaWNLZXkoXCJUb2tlbmtlZ1FmZVp5aU53QUpiTmJHS1BGWENXdUJ2ZjlTczYyM1ZRNURBXCIpO1xuY29uc3QgQVNTT0NJQVRFRF9QUk9HUkFNX0lEID0gbmV3IFB1YmxpY0tleShcIkFUb2tlbkdQdmJkR1Z4cjFiMmh2WmJzaXFXNXhXSDI1ZWZUTnNMSkE4a25MXCIpO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFzc29jaWF0ZWRBZGRyZXNzKHsgbWludCwgb3duZXIsIH0pIHtcbiAgICByZXR1cm4gKGF3YWl0IFB1YmxpY0tleS5maW5kUHJvZ3JhbUFkZHJlc3MoW293bmVyLnRvQnVmZmVyKCksIFRPS0VOX1BST0dSQU1fSUQudG9CdWZmZXIoKSwgbWludC50b0J1ZmZlcigpXSwgQVNTT0NJQVRFRF9QUk9HUkFNX0lEKSlbMF07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbi5qcy5tYXAiXSwibmFtZXMiOlsiUHVibGljS2V5IiwiVE9LRU5fUFJPR1JBTV9JRCIsIkFTU09DSUFURURfUFJPR1JBTV9JRCIsImFzc29jaWF0ZWRBZGRyZXNzIiwibWludCIsIm93bmVyIiwiZmluZFByb2dyYW1BZGRyZXNzIiwidG9CdWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/token.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/dist/esm/workspace.js":
/*!******************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/dist/esm/workspace.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! camelcase */ \"(ssr)/./node_modules/@project-serum/anchor/node_modules/camelcase/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(camelcase__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var toml__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! toml */ \"(ssr)/./node_modules/toml/index.js\");\n/* harmony import */ var toml__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(toml__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _program__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./program */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/program/index.js\");\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/common */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/utils/common.js\");\n\n\n\n\n\nlet _populatedWorkspace = false;\n/**\n * The `workspace` namespace provides a convenience API to automatically\n * search for and deserialize [[Program]] objects defined by compiled IDLs\n * in an Anchor workspace.\n *\n * This API is for Node only.\n */ const workspace = new Proxy({}, {\n    get (workspaceCache, programName) {\n        if (_utils_common__WEBPACK_IMPORTED_MODULE_4__.isBrowser) {\n            console.log(\"Workspaces aren't available in the browser\");\n            return undefined;\n        }\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const process = __webpack_require__(/*! process */ \"process\");\n        if (!_populatedWorkspace) {\n            const path = __webpack_require__(/*! path */ \"path\");\n            let projectRoot = process.cwd();\n            while(!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))){\n                const parentDir = path.dirname(projectRoot);\n                if (parentDir === projectRoot) {\n                    projectRoot = undefined;\n                }\n                projectRoot = parentDir;\n            }\n            if (projectRoot === undefined) {\n                throw new Error(\"Could not find workspace root.\");\n            }\n            const idlFolder = `${projectRoot}/target/idl`;\n            if (!fs.existsSync(idlFolder)) {\n                throw new Error(`${idlFolder} doesn't exist. Did you use \"anchor build\"?`);\n            }\n            const idlMap = new Map();\n            fs.readdirSync(idlFolder).forEach((file)=>{\n                const filePath = `${idlFolder}/${file}`;\n                const idlStr = fs.readFileSync(filePath);\n                const idl = JSON.parse(idlStr);\n                idlMap.set(idl.name, idl);\n                const name = camelcase__WEBPACK_IMPORTED_MODULE_0___default()(idl.name, {\n                    pascalCase: true\n                });\n                if (idl.metadata && idl.metadata.address) {\n                    workspaceCache[name] = new _program__WEBPACK_IMPORTED_MODULE_3__.Program(idl, new _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.PublicKey(idl.metadata.address));\n                }\n            });\n            // Override the workspace programs if the user put them in the config.\n            const anchorToml = toml__WEBPACK_IMPORTED_MODULE_1__.parse(fs.readFileSync(path.join(projectRoot, \"Anchor.toml\"), \"utf-8\"));\n            const clusterId = anchorToml.provider.cluster;\n            if (anchorToml.clusters && anchorToml.clusters[clusterId]) {\n                attachWorkspaceOverride(workspaceCache, anchorToml.clusters[clusterId], idlMap);\n            }\n            _populatedWorkspace = true;\n        }\n        return workspaceCache[programName];\n    }\n});\nfunction attachWorkspaceOverride(workspaceCache, overrideConfig, idlMap) {\n    Object.keys(overrideConfig).forEach((programName)=>{\n        const wsProgramName = camelcase__WEBPACK_IMPORTED_MODULE_0___default()(programName, {\n            pascalCase: true\n        });\n        const entry = overrideConfig[programName];\n        const overrideAddress = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.PublicKey(typeof entry === \"string\" ? entry : entry.address);\n        let idl = idlMap.get(programName);\n        if (typeof entry !== \"string\" && entry.idl) {\n            idl = JSON.parse((__webpack_require__(/*! fs */ \"fs\").readFileSync)(entry.idl, \"utf-8\"));\n        }\n        workspaceCache[wsProgramName] = new _program__WEBPACK_IMPORTED_MODULE_3__.Program(idl, overrideAddress);\n    });\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (workspace); //# sourceMappingURL=workspace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/dist/esm/workspace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/anchor/node_modules/camelcase/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@project-serum/anchor/node_modules/camelcase/index.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\nconst preserveCamelCase = (string)=>{\n    let isLastCharLower = false;\n    let isLastCharUpper = false;\n    let isLastLastCharUpper = false;\n    for(let i = 0; i < string.length; i++){\n        const character = string[i];\n        if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n            string = string.slice(0, i) + \"-\" + string.slice(i);\n            isLastCharLower = false;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = true;\n            i++;\n        } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n            string = string.slice(0, i - 1) + \"-\" + string.slice(i - 1);\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = false;\n            isLastCharLower = true;\n        } else {\n            isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n        }\n    }\n    return string;\n};\nconst camelCase = (input, options)=>{\n    if (!(typeof input === \"string\" || Array.isArray(input))) {\n        throw new TypeError(\"Expected the input to be `string | string[]`\");\n    }\n    options = Object.assign({\n        pascalCase: false\n    }, options);\n    const postProcess = (x)=>options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n    if (Array.isArray(input)) {\n        input = input.map((x)=>x.trim()).filter((x)=>x.length).join(\"-\");\n    } else {\n        input = input.trim();\n    }\n    if (input.length === 0) {\n        return \"\";\n    }\n    if (input.length === 1) {\n        return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n    }\n    const hasUpperCase = input !== input.toLowerCase();\n    if (hasUpperCase) {\n        input = preserveCamelCase(input);\n    }\n    input = input.replace(/^[_.\\- ]+/, \"\").toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, (_, p1)=>p1.toUpperCase()).replace(/\\d+(\\w|$)/g, (m)=>m.toUpperCase());\n    return postProcess(input);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports[\"default\"] = camelCase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL25vZGVfbW9kdWxlcy9jYW1lbGNhc2UvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxvQkFBb0JDLENBQUFBO0lBQ3pCLElBQUlDLGtCQUFrQjtJQUN0QixJQUFJQyxrQkFBa0I7SUFDdEIsSUFBSUMsc0JBQXNCO0lBRTFCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSixPQUFPSyxNQUFNLEVBQUVELElBQUs7UUFDdkMsTUFBTUUsWUFBWU4sTUFBTSxDQUFDSSxFQUFFO1FBRTNCLElBQUlILG1CQUFtQixXQUFXTSxJQUFJLENBQUNELGNBQWNBLFVBQVVFLFdBQVcsT0FBT0YsV0FBVztZQUMzRk4sU0FBU0EsT0FBT1MsS0FBSyxDQUFDLEdBQUdMLEtBQUssTUFBTUosT0FBT1MsS0FBSyxDQUFDTDtZQUNqREgsa0JBQWtCO1lBQ2xCRSxzQkFBc0JEO1lBQ3RCQSxrQkFBa0I7WUFDbEJFO1FBQ0QsT0FBTyxJQUFJRixtQkFBbUJDLHVCQUF1QixXQUFXSSxJQUFJLENBQUNELGNBQWNBLFVBQVVJLFdBQVcsT0FBT0osV0FBVztZQUN6SE4sU0FBU0EsT0FBT1MsS0FBSyxDQUFDLEdBQUdMLElBQUksS0FBSyxNQUFNSixPQUFPUyxLQUFLLENBQUNMLElBQUk7WUFDekRELHNCQUFzQkQ7WUFDdEJBLGtCQUFrQjtZQUNsQkQsa0JBQWtCO1FBQ25CLE9BQU87WUFDTkEsa0JBQWtCSyxVQUFVSSxXQUFXLE9BQU9KLGFBQWFBLFVBQVVFLFdBQVcsT0FBT0Y7WUFDdkZILHNCQUFzQkQ7WUFDdEJBLGtCQUFrQkksVUFBVUUsV0FBVyxPQUFPRixhQUFhQSxVQUFVSSxXQUFXLE9BQU9KO1FBQ3hGO0lBQ0Q7SUFFQSxPQUFPTjtBQUNSO0FBRUEsTUFBTVcsWUFBWSxDQUFDQyxPQUFPQztJQUN6QixJQUFJLENBQUUsUUFBT0QsVUFBVSxZQUFZRSxNQUFNQyxPQUFPLENBQUNILE1BQUssR0FBSTtRQUN6RCxNQUFNLElBQUlJLFVBQVU7SUFDckI7SUFFQUgsVUFBVUksT0FBT0MsTUFBTSxDQUFDO1FBQ3ZCQyxZQUFZO0lBQ2IsR0FBR047SUFFSCxNQUFNTyxjQUFjQyxDQUFBQSxJQUFLUixRQUFRTSxVQUFVLEdBQUdFLEVBQUVDLE1BQU0sQ0FBQyxHQUFHZCxXQUFXLEtBQUthLEVBQUVaLEtBQUssQ0FBQyxLQUFLWTtJQUV2RixJQUFJUCxNQUFNQyxPQUFPLENBQUNILFFBQVE7UUFDekJBLFFBQVFBLE1BQU1XLEdBQUcsQ0FBQ0YsQ0FBQUEsSUFBS0EsRUFBRUcsSUFBSSxJQUMzQkMsTUFBTSxDQUFDSixDQUFBQSxJQUFLQSxFQUFFaEIsTUFBTSxFQUNwQnFCLElBQUksQ0FBQztJQUNSLE9BQU87UUFDTmQsUUFBUUEsTUFBTVksSUFBSTtJQUNuQjtJQUVBLElBQUlaLE1BQU1QLE1BQU0sS0FBSyxHQUFHO1FBQ3ZCLE9BQU87SUFDUjtJQUVBLElBQUlPLE1BQU1QLE1BQU0sS0FBSyxHQUFHO1FBQ3ZCLE9BQU9RLFFBQVFNLFVBQVUsR0FBR1AsTUFBTUosV0FBVyxLQUFLSSxNQUFNRixXQUFXO0lBQ3BFO0lBRUEsTUFBTWlCLGVBQWVmLFVBQVVBLE1BQU1GLFdBQVc7SUFFaEQsSUFBSWlCLGNBQWM7UUFDakJmLFFBQVFiLGtCQUFrQmE7SUFDM0I7SUFFQUEsUUFBUUEsTUFDTmdCLE9BQU8sQ0FBQyxhQUFhLElBQ3JCbEIsV0FBVyxHQUNYa0IsT0FBTyxDQUFDLG1CQUFtQixDQUFDQyxHQUFHQyxLQUFPQSxHQUFHdEIsV0FBVyxJQUNwRG9CLE9BQU8sQ0FBQyxjQUFjRyxDQUFBQSxJQUFLQSxFQUFFdkIsV0FBVztJQUUxQyxPQUFPWSxZQUFZUjtBQUNwQjtBQUVBb0IsT0FBT0MsT0FBTyxHQUFHdEI7QUFDakIsK0NBQStDO0FBQy9DcUIseUJBQXNCLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vYW5jaG9yL25vZGVfbW9kdWxlcy9jYW1lbGNhc2UvaW5kZXguanM/Njc1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHByZXNlcnZlQ2FtZWxDYXNlID0gc3RyaW5nID0+IHtcblx0bGV0IGlzTGFzdENoYXJMb3dlciA9IGZhbHNlO1xuXHRsZXQgaXNMYXN0Q2hhclVwcGVyID0gZmFsc2U7XG5cdGxldCBpc0xhc3RMYXN0Q2hhclVwcGVyID0gZmFsc2U7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBjaGFyYWN0ZXIgPSBzdHJpbmdbaV07XG5cblx0XHRpZiAoaXNMYXN0Q2hhckxvd2VyICYmIC9bYS16QS1aXS8udGVzdChjaGFyYWN0ZXIpICYmIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpID09PSBjaGFyYWN0ZXIpIHtcblx0XHRcdHN0cmluZyA9IHN0cmluZy5zbGljZSgwLCBpKSArICctJyArIHN0cmluZy5zbGljZShpKTtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IGZhbHNlO1xuXHRcdFx0aXNMYXN0TGFzdENoYXJVcHBlciA9IGlzTGFzdENoYXJVcHBlcjtcblx0XHRcdGlzTGFzdENoYXJVcHBlciA9IHRydWU7XG5cdFx0XHRpKys7XG5cdFx0fSBlbHNlIGlmIChpc0xhc3RDaGFyVXBwZXIgJiYgaXNMYXN0TGFzdENoYXJVcHBlciAmJiAvW2EtekEtWl0vLnRlc3QoY2hhcmFjdGVyKSAmJiBjaGFyYWN0ZXIudG9Mb3dlckNhc2UoKSA9PT0gY2hhcmFjdGVyKSB7XG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgaSAtIDEpICsgJy0nICsgc3RyaW5nLnNsaWNlKGkgLSAxKTtcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSBmYWxzZTtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpID09PSBjaGFyYWN0ZXIgJiYgY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCkgIT09IGNoYXJhY3Rlcjtcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKSA9PT0gY2hhcmFjdGVyICYmIGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpICE9PSBjaGFyYWN0ZXI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cmluZztcbn07XG5cbmNvbnN0IGNhbWVsQ2FzZSA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuXHRpZiAoISh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoaW5wdXQpKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBpbnB1dCB0byBiZSBgc3RyaW5nIHwgc3RyaW5nW11gJyk7XG5cdH1cblxuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0cGFzY2FsQ2FzZTogZmFsc2Vcblx0fSwgb3B0aW9ucyk7XG5cblx0Y29uc3QgcG9zdFByb2Nlc3MgPSB4ID0+IG9wdGlvbnMucGFzY2FsQ2FzZSA/IHguY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB4LnNsaWNlKDEpIDogeDtcblxuXHRpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0XHRpbnB1dCA9IGlucHV0Lm1hcCh4ID0+IHgudHJpbSgpKVxuXHRcdFx0LmZpbHRlcih4ID0+IHgubGVuZ3RoKVxuXHRcdFx0LmpvaW4oJy0nKTtcblx0fSBlbHNlIHtcblx0XHRpbnB1dCA9IGlucHV0LnRyaW0oKTtcblx0fVxuXG5cdGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRpZiAoaW5wdXQubGVuZ3RoID09PSAxKSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMucGFzY2FsQ2FzZSA/IGlucHV0LnRvVXBwZXJDYXNlKCkgOiBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuXHR9XG5cblx0Y29uc3QgaGFzVXBwZXJDYXNlID0gaW5wdXQgIT09IGlucHV0LnRvTG93ZXJDYXNlKCk7XG5cblx0aWYgKGhhc1VwcGVyQ2FzZSkge1xuXHRcdGlucHV0ID0gcHJlc2VydmVDYW1lbENhc2UoaW5wdXQpO1xuXHR9XG5cblx0aW5wdXQgPSBpbnB1dFxuXHRcdC5yZXBsYWNlKC9eW18uXFwtIF0rLywgJycpXG5cdFx0LnRvTG93ZXJDYXNlKClcblx0XHQucmVwbGFjZSgvW18uXFwtIF0rKFxcd3wkKS9nLCAoXywgcDEpID0+IHAxLnRvVXBwZXJDYXNlKCkpXG5cdFx0LnJlcGxhY2UoL1xcZCsoXFx3fCQpL2csIG0gPT4gbS50b1VwcGVyQ2FzZSgpKTtcblxuXHRyZXR1cm4gcG9zdFByb2Nlc3MoaW5wdXQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbENhc2U7XG4vLyBUT0RPOiBSZW1vdmUgdGhpcyBmb3IgdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGNhbWVsQ2FzZTtcbiJdLCJuYW1lcyI6WyJwcmVzZXJ2ZUNhbWVsQ2FzZSIsInN0cmluZyIsImlzTGFzdENoYXJMb3dlciIsImlzTGFzdENoYXJVcHBlciIsImlzTGFzdExhc3RDaGFyVXBwZXIiLCJpIiwibGVuZ3RoIiwiY2hhcmFjdGVyIiwidGVzdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSIsImNhbWVsQ2FzZSIsImlucHV0Iiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsIlR5cGVFcnJvciIsIk9iamVjdCIsImFzc2lnbiIsInBhc2NhbENhc2UiLCJwb3N0UHJvY2VzcyIsIngiLCJjaGFyQXQiLCJtYXAiLCJ0cmltIiwiZmlsdGVyIiwiam9pbiIsImhhc1VwcGVyQ2FzZSIsInJlcGxhY2UiLCJfIiwicDEiLCJtIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/anchor/node_modules/camelcase/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/borsh/dist/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@project-serum/borsh/dist/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.map = exports.array = exports.rustEnum = exports.str = exports.vecU8 = exports.tagged = exports.vec = exports.bool = exports.option = exports.publicKey = exports.i128 = exports.u128 = exports.i64 = exports.u64 = exports.struct = exports.f64 = exports.f32 = exports.i32 = exports.u32 = exports.i16 = exports.u16 = exports.i8 = exports.u8 = void 0;\nconst buffer_layout_1 = __webpack_require__(/*! buffer-layout */ \"(ssr)/./node_modules/buffer-layout/lib/Layout.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\nvar buffer_layout_2 = __webpack_require__(/*! buffer-layout */ \"(ssr)/./node_modules/buffer-layout/lib/Layout.js\");\nObject.defineProperty(exports, \"u8\", ({\n    enumerable: true,\n    get: function() {\n        return buffer_layout_2.u8;\n    }\n}));\nObject.defineProperty(exports, \"i8\", ({\n    enumerable: true,\n    get: function() {\n        return buffer_layout_2.s8;\n    }\n}));\nObject.defineProperty(exports, \"u16\", ({\n    enumerable: true,\n    get: function() {\n        return buffer_layout_2.u16;\n    }\n}));\nObject.defineProperty(exports, \"i16\", ({\n    enumerable: true,\n    get: function() {\n        return buffer_layout_2.s16;\n    }\n}));\nObject.defineProperty(exports, \"u32\", ({\n    enumerable: true,\n    get: function() {\n        return buffer_layout_2.u32;\n    }\n}));\nObject.defineProperty(exports, \"i32\", ({\n    enumerable: true,\n    get: function() {\n        return buffer_layout_2.s32;\n    }\n}));\nObject.defineProperty(exports, \"f32\", ({\n    enumerable: true,\n    get: function() {\n        return buffer_layout_2.f32;\n    }\n}));\nObject.defineProperty(exports, \"f64\", ({\n    enumerable: true,\n    get: function() {\n        return buffer_layout_2.f64;\n    }\n}));\nObject.defineProperty(exports, \"struct\", ({\n    enumerable: true,\n    get: function() {\n        return buffer_layout_2.struct;\n    }\n}));\nclass BNLayout extends buffer_layout_1.Layout {\n    constructor(span, signed, property){\n        super(span, property);\n        this.blob = buffer_layout_1.blob(span);\n        this.signed = signed;\n    }\n    decode(b, offset = 0) {\n        const num = new bn_js_1.default(this.blob.decode(b, offset), 10, \"le\");\n        if (this.signed) {\n            return num.fromTwos(this.span * 8).clone();\n        }\n        return num;\n    }\n    encode(src, b, offset = 0) {\n        if (this.signed) {\n            src = src.toTwos(this.span * 8);\n        }\n        return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\n    }\n}\nfunction u64(property) {\n    return new BNLayout(8, false, property);\n}\nexports.u64 = u64;\nfunction i64(property) {\n    return new BNLayout(8, true, property);\n}\nexports.i64 = i64;\nfunction u128(property) {\n    return new BNLayout(16, false, property);\n}\nexports.u128 = u128;\nfunction i128(property) {\n    return new BNLayout(16, true, property);\n}\nexports.i128 = i128;\nclass WrappedLayout extends buffer_layout_1.Layout {\n    constructor(layout, decoder, encoder, property){\n        super(layout.span, property);\n        this.layout = layout;\n        this.decoder = decoder;\n        this.encoder = encoder;\n    }\n    decode(b, offset) {\n        return this.decoder(this.layout.decode(b, offset));\n    }\n    encode(src, b, offset) {\n        return this.layout.encode(this.encoder(src), b, offset);\n    }\n    getSpan(b, offset) {\n        return this.layout.getSpan(b, offset);\n    }\n}\nfunction publicKey(property) {\n    return new WrappedLayout(buffer_layout_1.blob(32), (b)=>new web3_js_1.PublicKey(b), (key)=>key.toBuffer(), property);\n}\nexports.publicKey = publicKey;\nclass OptionLayout extends buffer_layout_1.Layout {\n    constructor(layout, property){\n        super(-1, property);\n        this.layout = layout;\n        this.discriminator = buffer_layout_1.u8();\n    }\n    encode(src, b, offset = 0) {\n        if (src === null || src === undefined) {\n            return this.discriminator.encode(0, b, offset);\n        }\n        this.discriminator.encode(1, b, offset);\n        return this.layout.encode(src, b, offset + 1) + 1;\n    }\n    decode(b, offset = 0) {\n        const discriminator = this.discriminator.decode(b, offset);\n        if (discriminator === 0) {\n            return null;\n        } else if (discriminator === 1) {\n            return this.layout.decode(b, offset + 1);\n        }\n        throw new Error(\"Invalid option \" + this.property);\n    }\n    getSpan(b, offset = 0) {\n        const discriminator = this.discriminator.decode(b, offset);\n        if (discriminator === 0) {\n            return 1;\n        } else if (discriminator === 1) {\n            return this.layout.getSpan(b, offset + 1) + 1;\n        }\n        throw new Error(\"Invalid option \" + this.property);\n    }\n}\nfunction option(layout, property) {\n    return new OptionLayout(layout, property);\n}\nexports.option = option;\nfunction bool(property) {\n    return new WrappedLayout(buffer_layout_1.u8(), decodeBool, encodeBool, property);\n}\nexports.bool = bool;\nfunction decodeBool(value) {\n    if (value === 0) {\n        return false;\n    } else if (value === 1) {\n        return true;\n    }\n    throw new Error(\"Invalid bool: \" + value);\n}\nfunction encodeBool(value) {\n    return value ? 1 : 0;\n}\nfunction vec(elementLayout, property) {\n    const length = buffer_layout_1.u32(\"length\");\n    const layout = buffer_layout_1.struct([\n        length,\n        buffer_layout_1.seq(elementLayout, buffer_layout_1.offset(length, -length.span), \"values\")\n    ]);\n    return new WrappedLayout(layout, ({ values })=>values, (values)=>({\n            values\n        }), property);\n}\nexports.vec = vec;\nfunction tagged(tag, layout, property) {\n    const wrappedLayout = buffer_layout_1.struct([\n        u64(\"tag\"),\n        layout.replicate(\"data\")\n    ]);\n    function decodeTag({ tag: receivedTag, data }) {\n        if (!receivedTag.eq(tag)) {\n            throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\n        }\n        return data;\n    }\n    return new WrappedLayout(wrappedLayout, decodeTag, (data)=>({\n            tag,\n            data\n        }), property);\n}\nexports.tagged = tagged;\nfunction vecU8(property) {\n    const length = buffer_layout_1.u32(\"length\");\n    const layout = buffer_layout_1.struct([\n        length,\n        buffer_layout_1.blob(buffer_layout_1.offset(length, -length.span), \"data\")\n    ]);\n    return new WrappedLayout(layout, ({ data })=>data, (data)=>({\n            data\n        }), property);\n}\nexports.vecU8 = vecU8;\nfunction str(property) {\n    return new WrappedLayout(vecU8(), (data)=>data.toString(\"utf-8\"), (s)=>Buffer.from(s, \"utf-8\"), property);\n}\nexports.str = str;\nfunction rustEnum(variants, property, discriminant) {\n    const unionLayout = buffer_layout_1.union(discriminant !== null && discriminant !== void 0 ? discriminant : buffer_layout_1.u8(), property);\n    variants.forEach((variant, index)=>unionLayout.addVariant(index, variant, variant.property));\n    return unionLayout;\n}\nexports.rustEnum = rustEnum;\nfunction array(elementLayout, length, property) {\n    const layout = buffer_layout_1.struct([\n        buffer_layout_1.seq(elementLayout, length, \"values\")\n    ]);\n    return new WrappedLayout(layout, ({ values })=>values, (values)=>({\n            values\n        }), property);\n}\nexports.array = array;\nclass MapEntryLayout extends buffer_layout_1.Layout {\n    constructor(keyLayout, valueLayout, property){\n        super(keyLayout.span + valueLayout.span, property);\n        this.keyLayout = keyLayout;\n        this.valueLayout = valueLayout;\n    }\n    decode(b, offset) {\n        offset = offset || 0;\n        const key = this.keyLayout.decode(b, offset);\n        const value = this.valueLayout.decode(b, offset + this.keyLayout.getSpan(b, offset));\n        return [\n            key,\n            value\n        ];\n    }\n    encode(src, b, offset) {\n        offset = offset || 0;\n        const keyBytes = this.keyLayout.encode(src[0], b, offset);\n        const valueBytes = this.valueLayout.encode(src[1], b, offset + keyBytes);\n        return keyBytes + valueBytes;\n    }\n    getSpan(b, offset) {\n        return this.keyLayout.getSpan(b, offset) + this.valueLayout.getSpan(b, offset);\n    }\n}\nfunction map(keyLayout, valueLayout, property) {\n    const length = buffer_layout_1.u32(\"length\");\n    const layout = buffer_layout_1.struct([\n        length,\n        buffer_layout_1.seq(new MapEntryLayout(keyLayout, valueLayout), buffer_layout_1.offset(length, -length.span), \"values\")\n    ]);\n    return new WrappedLayout(layout, ({ values })=>new Map(values), (values)=>({\n            values: Array.from(values.entries())\n        }), property);\n}\nexports.map = map; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/borsh/dist/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/error.js":
/*!********************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/error.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseInstructionErrorResponse = exports.KNOWN_PROGRAMS = exports.DexError = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst tokens_and_markets_1 = __webpack_require__(/*! ./tokens_and_markets */ \"(ssr)/./node_modules/@project-serum/serum/lib/tokens_and_markets.js\");\nconst token_instructions_1 = __webpack_require__(/*! ./token-instructions */ \"(ssr)/./node_modules/@project-serum/serum/lib/token-instructions.js\");\nvar DexError;\n(function(DexError) {\n    DexError[DexError[\"InvalidMarketFlags\"] = 0] = \"InvalidMarketFlags\";\n    DexError[DexError[\"InvalidAskFlags\"] = 1] = \"InvalidAskFlags\";\n    DexError[DexError[\"InvalidBidFlags\"] = 2] = \"InvalidBidFlags\";\n    DexError[DexError[\"InvalidQueueLength\"] = 3] = \"InvalidQueueLength\";\n    DexError[DexError[\"OwnerAccountNotProvided\"] = 4] = \"OwnerAccountNotProvided\";\n    DexError[DexError[\"ConsumeEventsQueueFailure\"] = 5] = \"ConsumeEventsQueueFailure\";\n    DexError[DexError[\"WrongCoinVault\"] = 6] = \"WrongCoinVault\";\n    DexError[DexError[\"WrongPcVault\"] = 7] = \"WrongPcVault\";\n    DexError[DexError[\"WrongCoinMint\"] = 8] = \"WrongCoinMint\";\n    DexError[DexError[\"WrongPcMint\"] = 9] = \"WrongPcMint\";\n    DexError[DexError[\"CoinVaultProgramId\"] = 10] = \"CoinVaultProgramId\";\n    DexError[DexError[\"PcVaultProgramId\"] = 11] = \"PcVaultProgramId\";\n    DexError[DexError[\"CoinMintProgramId\"] = 12] = \"CoinMintProgramId\";\n    DexError[DexError[\"PcMintProgramId\"] = 13] = \"PcMintProgramId\";\n    DexError[DexError[\"WrongCoinMintSize\"] = 14] = \"WrongCoinMintSize\";\n    DexError[DexError[\"WrongPcMintSize\"] = 15] = \"WrongPcMintSize\";\n    DexError[DexError[\"WrongCoinVaultSize\"] = 16] = \"WrongCoinVaultSize\";\n    DexError[DexError[\"WrongPcVaultSize\"] = 17] = \"WrongPcVaultSize\";\n    DexError[DexError[\"UninitializedVault\"] = 18] = \"UninitializedVault\";\n    DexError[DexError[\"UninitializedMint\"] = 19] = \"UninitializedMint\";\n    DexError[DexError[\"CoinMintUninitialized\"] = 20] = \"CoinMintUninitialized\";\n    DexError[DexError[\"PcMintUninitialized\"] = 21] = \"PcMintUninitialized\";\n    DexError[DexError[\"WrongMint\"] = 22] = \"WrongMint\";\n    DexError[DexError[\"WrongVaultOwner\"] = 23] = \"WrongVaultOwner\";\n    DexError[DexError[\"VaultHasDelegate\"] = 24] = \"VaultHasDelegate\";\n    DexError[DexError[\"AlreadyInitialized\"] = 25] = \"AlreadyInitialized\";\n    DexError[DexError[\"WrongAccountDataAlignment\"] = 26] = \"WrongAccountDataAlignment\";\n    DexError[DexError[\"WrongAccountDataPaddingLength\"] = 27] = \"WrongAccountDataPaddingLength\";\n    DexError[DexError[\"WrongAccountHeadPadding\"] = 28] = \"WrongAccountHeadPadding\";\n    DexError[DexError[\"WrongAccountTailPadding\"] = 29] = \"WrongAccountTailPadding\";\n    DexError[DexError[\"RequestQueueEmpty\"] = 30] = \"RequestQueueEmpty\";\n    DexError[DexError[\"EventQueueTooSmall\"] = 31] = \"EventQueueTooSmall\";\n    DexError[DexError[\"SlabTooSmall\"] = 32] = \"SlabTooSmall\";\n    DexError[DexError[\"BadVaultSignerNonce\"] = 33] = \"BadVaultSignerNonce\";\n    DexError[DexError[\"InsufficientFunds\"] = 34] = \"InsufficientFunds\";\n    DexError[DexError[\"SplAccountProgramId\"] = 35] = \"SplAccountProgramId\";\n    DexError[DexError[\"SplAccountLen\"] = 36] = \"SplAccountLen\";\n    DexError[DexError[\"WrongFeeDiscountAccountOwner\"] = 37] = \"WrongFeeDiscountAccountOwner\";\n    DexError[DexError[\"WrongFeeDiscountMint\"] = 38] = \"WrongFeeDiscountMint\";\n    DexError[DexError[\"CoinPayerProgramId\"] = 39] = \"CoinPayerProgramId\";\n    DexError[DexError[\"PcPayerProgramId\"] = 40] = \"PcPayerProgramId\";\n    DexError[DexError[\"ClientIdNotFound\"] = 41] = \"ClientIdNotFound\";\n    DexError[DexError[\"TooManyOpenOrders\"] = 42] = \"TooManyOpenOrders\";\n    DexError[DexError[\"FakeErrorSoWeDontChangeNumbers\"] = 43] = \"FakeErrorSoWeDontChangeNumbers\";\n    DexError[DexError[\"BorrowError\"] = 44] = \"BorrowError\";\n    DexError[DexError[\"WrongOrdersAccount\"] = 45] = \"WrongOrdersAccount\";\n    DexError[DexError[\"WrongBidsAccount\"] = 46] = \"WrongBidsAccount\";\n    DexError[DexError[\"WrongAsksAccount\"] = 47] = \"WrongAsksAccount\";\n    DexError[DexError[\"WrongRequestQueueAccount\"] = 48] = \"WrongRequestQueueAccount\";\n    DexError[DexError[\"WrongEventQueueAccount\"] = 49] = \"WrongEventQueueAccount\";\n    DexError[DexError[\"RequestQueueFull\"] = 50] = \"RequestQueueFull\";\n    DexError[DexError[\"EventQueueFull\"] = 51] = \"EventQueueFull\";\n    DexError[DexError[\"MarketIsDisabled\"] = 52] = \"MarketIsDisabled\";\n    DexError[DexError[\"WrongSigner\"] = 53] = \"WrongSigner\";\n    DexError[DexError[\"TransferFailed\"] = 54] = \"TransferFailed\";\n    DexError[DexError[\"ClientOrderIdIsZero\"] = 55] = \"ClientOrderIdIsZero\";\n    DexError[DexError[\"WrongRentSysvarAccount\"] = 56] = \"WrongRentSysvarAccount\";\n    DexError[DexError[\"RentNotProvided\"] = 57] = \"RentNotProvided\";\n    DexError[DexError[\"OrdersNotRentExempt\"] = 58] = \"OrdersNotRentExempt\";\n    DexError[DexError[\"OrderNotFound\"] = 59] = \"OrderNotFound\";\n    DexError[DexError[\"OrderNotYours\"] = 60] = \"OrderNotYours\";\n    DexError[DexError[\"WouldSelfTrade\"] = 61] = \"WouldSelfTrade\";\n    DexError[DexError[\"Unknown\"] = 1000] = \"Unknown\";\n})(DexError = exports.DexError || (exports.DexError = {}));\nexports.KNOWN_PROGRAMS = {\n    [token_instructions_1.TOKEN_PROGRAM_ID.toString()]: \"Token program\",\n    [web3_js_1.SystemProgram.programId.toString()]: \"System program\"\n};\nfunction parseInstructionErrorResponse(transaction, errorResponse) {\n    const [failedInstructionIndex, customError] = errorResponse;\n    const failedInstruction = transaction.instructions[failedInstructionIndex];\n    let parsedError;\n    if (failedInstruction.programId.toString() in tokens_and_markets_1.PROGRAM_LAYOUT_VERSIONS) {\n        parsedError = DexError[customError[\"Custom\"]];\n    } else if (failedInstruction.programId.toString() in exports.KNOWN_PROGRAMS) {\n        const program = exports.KNOWN_PROGRAMS[failedInstruction.programId.toString()];\n        parsedError = `${program} error ${customError[\"Custom\"]}`;\n    } else {\n        parsedError = `Unknown program ${failedInstruction.programId.toString()} custom error: ${customError[\"Custom\"]}`;\n    }\n    return {\n        failedInstructionIndex,\n        error: parsedError,\n        failedProgram: failedInstruction.programId.toString()\n    };\n}\nexports.parseInstructionErrorResponse = parseInstructionErrorResponse; //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/fees.js":
/*!*******************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/fees.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getFeeTier = exports.getFeeRates = exports.supportsSrmFeeDiscounts = void 0;\nconst tokens_and_markets_1 = __webpack_require__(/*! ./tokens_and_markets */ \"(ssr)/./node_modules/@project-serum/serum/lib/tokens_and_markets.js\");\nfunction supportsSrmFeeDiscounts(programId) {\n    return tokens_and_markets_1.getLayoutVersion(programId) > 1;\n}\nexports.supportsSrmFeeDiscounts = supportsSrmFeeDiscounts;\nfunction getFeeRates(feeTier) {\n    if (feeTier === 1) {\n        // SRM2\n        return {\n            taker: 0.002,\n            maker: -0.0003\n        };\n    } else if (feeTier === 2) {\n        // SRM3\n        return {\n            taker: 0.0018,\n            maker: -0.0003\n        };\n    } else if (feeTier === 3) {\n        // SRM4\n        return {\n            taker: 0.0016,\n            maker: -0.0003\n        };\n    } else if (feeTier === 4) {\n        // SRM5\n        return {\n            taker: 0.0014,\n            maker: -0.0003\n        };\n    } else if (feeTier === 5) {\n        // SRM6\n        return {\n            taker: 0.0012,\n            maker: -0.0003\n        };\n    } else if (feeTier === 6) {\n        // MSRM\n        return {\n            taker: 0.001,\n            maker: -0.0005\n        };\n    }\n    // Base\n    return {\n        taker: 0.0022,\n        maker: -0.0003\n    };\n}\nexports.getFeeRates = getFeeRates;\nfunction getFeeTier(msrmBalance, srmBalance) {\n    if (msrmBalance >= 1) {\n        return 6;\n    } else if (srmBalance >= 1000000) {\n        return 5;\n    } else if (srmBalance >= 100000) {\n        return 4;\n    } else if (srmBalance >= 10000) {\n        return 3;\n    } else if (srmBalance >= 1000) {\n        return 2;\n    } else if (srmBalance >= 100) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\nexports.getFeeTier = getFeeTier; //# sourceMappingURL=fees.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vc2VydW0vbGliL2ZlZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHQSxtQkFBbUIsR0FBR0EsK0JBQStCLEdBQUcsS0FBSztBQUNsRixNQUFNSyx1QkFBdUJDLG1CQUFPQSxDQUFDLGlHQUFzQjtBQUMzRCxTQUFTRix3QkFBd0JHLFNBQVM7SUFDdEMsT0FBT0YscUJBQXFCRyxnQkFBZ0IsQ0FBQ0QsYUFBYTtBQUM5RDtBQUNBUCwrQkFBK0IsR0FBR0k7QUFDbEMsU0FBU0QsWUFBWU0sT0FBTztJQUN4QixJQUFJQSxZQUFZLEdBQUc7UUFDZixPQUFPO1FBQ1AsT0FBTztZQUFFQyxPQUFPO1lBQU9DLE9BQU8sQ0FBQztRQUFPO0lBQzFDLE9BQ0ssSUFBSUYsWUFBWSxHQUFHO1FBQ3BCLE9BQU87UUFDUCxPQUFPO1lBQUVDLE9BQU87WUFBUUMsT0FBTyxDQUFDO1FBQU87SUFDM0MsT0FDSyxJQUFJRixZQUFZLEdBQUc7UUFDcEIsT0FBTztRQUNQLE9BQU87WUFBRUMsT0FBTztZQUFRQyxPQUFPLENBQUM7UUFBTztJQUMzQyxPQUNLLElBQUlGLFlBQVksR0FBRztRQUNwQixPQUFPO1FBQ1AsT0FBTztZQUFFQyxPQUFPO1lBQVFDLE9BQU8sQ0FBQztRQUFPO0lBQzNDLE9BQ0ssSUFBSUYsWUFBWSxHQUFHO1FBQ3BCLE9BQU87UUFDUCxPQUFPO1lBQUVDLE9BQU87WUFBUUMsT0FBTyxDQUFDO1FBQU87SUFDM0MsT0FDSyxJQUFJRixZQUFZLEdBQUc7UUFDcEIsT0FBTztRQUNQLE9BQU87WUFBRUMsT0FBTztZQUFPQyxPQUFPLENBQUM7UUFBTztJQUMxQztJQUNBLE9BQU87SUFDUCxPQUFPO1FBQUVELE9BQU87UUFBUUMsT0FBTyxDQUFDO0lBQU87QUFDM0M7QUFDQVgsbUJBQW1CLEdBQUdHO0FBQ3RCLFNBQVNELFdBQVdVLFdBQVcsRUFBRUMsVUFBVTtJQUN2QyxJQUFJRCxlQUFlLEdBQUc7UUFDbEIsT0FBTztJQUNYLE9BQ0ssSUFBSUMsY0FBYyxTQUFTO1FBQzVCLE9BQU87SUFDWCxPQUNLLElBQUlBLGNBQWMsUUFBUTtRQUMzQixPQUFPO0lBQ1gsT0FDSyxJQUFJQSxjQUFjLE9BQU87UUFDMUIsT0FBTztJQUNYLE9BQ0ssSUFBSUEsY0FBYyxNQUFNO1FBQ3pCLE9BQU87SUFDWCxPQUNLLElBQUlBLGNBQWMsS0FBSztRQUN4QixPQUFPO0lBQ1gsT0FDSztRQUNELE9BQU87SUFDWDtBQUNKO0FBQ0FiLGtCQUFrQixHQUFHRSxZQUNyQixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL3NlcnVtL2xpYi9mZWVzLmpzP2I2ODYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEZlZVRpZXIgPSBleHBvcnRzLmdldEZlZVJhdGVzID0gZXhwb3J0cy5zdXBwb3J0c1NybUZlZURpc2NvdW50cyA9IHZvaWQgMDtcbmNvbnN0IHRva2Vuc19hbmRfbWFya2V0c18xID0gcmVxdWlyZShcIi4vdG9rZW5zX2FuZF9tYXJrZXRzXCIpO1xuZnVuY3Rpb24gc3VwcG9ydHNTcm1GZWVEaXNjb3VudHMocHJvZ3JhbUlkKSB7XG4gICAgcmV0dXJuIHRva2Vuc19hbmRfbWFya2V0c18xLmdldExheW91dFZlcnNpb24ocHJvZ3JhbUlkKSA+IDE7XG59XG5leHBvcnRzLnN1cHBvcnRzU3JtRmVlRGlzY291bnRzID0gc3VwcG9ydHNTcm1GZWVEaXNjb3VudHM7XG5mdW5jdGlvbiBnZXRGZWVSYXRlcyhmZWVUaWVyKSB7XG4gICAgaWYgKGZlZVRpZXIgPT09IDEpIHtcbiAgICAgICAgLy8gU1JNMlxuICAgICAgICByZXR1cm4geyB0YWtlcjogMC4wMDIsIG1ha2VyOiAtMC4wMDAzIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGZlZVRpZXIgPT09IDIpIHtcbiAgICAgICAgLy8gU1JNM1xuICAgICAgICByZXR1cm4geyB0YWtlcjogMC4wMDE4LCBtYWtlcjogLTAuMDAwMyB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChmZWVUaWVyID09PSAzKSB7XG4gICAgICAgIC8vIFNSTTRcbiAgICAgICAgcmV0dXJuIHsgdGFrZXI6IDAuMDAxNiwgbWFrZXI6IC0wLjAwMDMgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmVlVGllciA9PT0gNCkge1xuICAgICAgICAvLyBTUk01XG4gICAgICAgIHJldHVybiB7IHRha2VyOiAwLjAwMTQsIG1ha2VyOiAtMC4wMDAzIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGZlZVRpZXIgPT09IDUpIHtcbiAgICAgICAgLy8gU1JNNlxuICAgICAgICByZXR1cm4geyB0YWtlcjogMC4wMDEyLCBtYWtlcjogLTAuMDAwMyB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChmZWVUaWVyID09PSA2KSB7XG4gICAgICAgIC8vIE1TUk1cbiAgICAgICAgcmV0dXJuIHsgdGFrZXI6IDAuMDAxLCBtYWtlcjogLTAuMDAwNSB9O1xuICAgIH1cbiAgICAvLyBCYXNlXG4gICAgcmV0dXJuIHsgdGFrZXI6IDAuMDAyMiwgbWFrZXI6IC0wLjAwMDMgfTtcbn1cbmV4cG9ydHMuZ2V0RmVlUmF0ZXMgPSBnZXRGZWVSYXRlcztcbmZ1bmN0aW9uIGdldEZlZVRpZXIobXNybUJhbGFuY2UsIHNybUJhbGFuY2UpIHtcbiAgICBpZiAobXNybUJhbGFuY2UgPj0gMSkge1xuICAgICAgICByZXR1cm4gNjtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3JtQmFsYW5jZSA+PSAxMDAwMDAwKSB7XG4gICAgICAgIHJldHVybiA1O1xuICAgIH1cbiAgICBlbHNlIGlmIChzcm1CYWxhbmNlID49IDEwMDAwMCkge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3JtQmFsYW5jZSA+PSAxMDAwMCkge1xuICAgICAgICByZXR1cm4gMztcbiAgICB9XG4gICAgZWxzZSBpZiAoc3JtQmFsYW5jZSA+PSAxMDAwKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH1cbiAgICBlbHNlIGlmIChzcm1CYWxhbmNlID49IDEwMCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0RmVlVGllciA9IGdldEZlZVRpZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZWVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldEZlZVRpZXIiLCJnZXRGZWVSYXRlcyIsInN1cHBvcnRzU3JtRmVlRGlzY291bnRzIiwidG9rZW5zX2FuZF9tYXJrZXRzXzEiLCJyZXF1aXJlIiwicHJvZ3JhbUlkIiwiZ2V0TGF5b3V0VmVyc2lvbiIsImZlZVRpZXIiLCJ0YWtlciIsIm1ha2VyIiwibXNybUJhbGFuY2UiLCJzcm1CYWxhbmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/fees.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Logger = exports.PermissionedCrank = exports.ReferralFees = exports.OpenOrdersPda = exports.MarketProxyBuilder = exports.MarketProxy = exports.TokenInstructions = exports.EVENT_QUEUE_LAYOUT = exports.REQUEST_QUEUE_LAYOUT = exports.decodeRequestQueue = exports.decodeEventQueue = exports.getLayoutVersion = exports.MARKETS = exports.TOKEN_MINTS = exports.supportsSrmFeeDiscounts = exports.getFeeRates = exports.getFeeTier = exports.NEW_ORDER_V3_OWNER_INDEX = exports.NEW_ORDER_V3_OPEN_ORDERS_INDEX = exports.NEW_ORDER_OWNER_INDEX = exports.NEW_ORDER_OPEN_ORDERS_INDEX = exports.SETTLE_FUNDS_QUOTE_WALLET_INDEX = exports.SETTLE_FUNDS_BASE_WALLET_INDEX = exports.decodeInstructionV2 = exports.decodeInstruction = exports.DexInstructions = exports.MARKET_STATE_LAYOUT_V2 = exports.MARKET_STATE_LAYOUT_V3 = exports.OpenOrders = exports.Orderbook = exports.Market = void 0;\nvar market_1 = __webpack_require__(/*! ./market */ \"(ssr)/./node_modules/@project-serum/serum/lib/market.js\");\nObject.defineProperty(exports, \"Market\", ({\n    enumerable: true,\n    get: function() {\n        return market_1.Market;\n    }\n}));\nObject.defineProperty(exports, \"Orderbook\", ({\n    enumerable: true,\n    get: function() {\n        return market_1.Orderbook;\n    }\n}));\nObject.defineProperty(exports, \"OpenOrders\", ({\n    enumerable: true,\n    get: function() {\n        return market_1.OpenOrders;\n    }\n}));\nObject.defineProperty(exports, \"MARKET_STATE_LAYOUT_V3\", ({\n    enumerable: true,\n    get: function() {\n        return market_1.MARKET_STATE_LAYOUT_V3;\n    }\n}));\nObject.defineProperty(exports, \"MARKET_STATE_LAYOUT_V2\", ({\n    enumerable: true,\n    get: function() {\n        return market_1.MARKET_STATE_LAYOUT_V2;\n    }\n}));\nvar instructions_1 = __webpack_require__(/*! ./instructions */ \"(ssr)/./node_modules/@project-serum/serum/lib/instructions.js\");\nObject.defineProperty(exports, \"DexInstructions\", ({\n    enumerable: true,\n    get: function() {\n        return instructions_1.DexInstructions;\n    }\n}));\nObject.defineProperty(exports, \"decodeInstruction\", ({\n    enumerable: true,\n    get: function() {\n        return instructions_1.decodeInstruction;\n    }\n}));\nObject.defineProperty(exports, \"decodeInstructionV2\", ({\n    enumerable: true,\n    get: function() {\n        return instructions_1.decodeInstructionV2;\n    }\n}));\nObject.defineProperty(exports, \"SETTLE_FUNDS_BASE_WALLET_INDEX\", ({\n    enumerable: true,\n    get: function() {\n        return instructions_1.SETTLE_FUNDS_BASE_WALLET_INDEX;\n    }\n}));\nObject.defineProperty(exports, \"SETTLE_FUNDS_QUOTE_WALLET_INDEX\", ({\n    enumerable: true,\n    get: function() {\n        return instructions_1.SETTLE_FUNDS_QUOTE_WALLET_INDEX;\n    }\n}));\nObject.defineProperty(exports, \"NEW_ORDER_OPEN_ORDERS_INDEX\", ({\n    enumerable: true,\n    get: function() {\n        return instructions_1.NEW_ORDER_OPEN_ORDERS_INDEX;\n    }\n}));\nObject.defineProperty(exports, \"NEW_ORDER_OWNER_INDEX\", ({\n    enumerable: true,\n    get: function() {\n        return instructions_1.NEW_ORDER_OWNER_INDEX;\n    }\n}));\nObject.defineProperty(exports, \"NEW_ORDER_V3_OPEN_ORDERS_INDEX\", ({\n    enumerable: true,\n    get: function() {\n        return instructions_1.NEW_ORDER_V3_OPEN_ORDERS_INDEX;\n    }\n}));\nObject.defineProperty(exports, \"NEW_ORDER_V3_OWNER_INDEX\", ({\n    enumerable: true,\n    get: function() {\n        return instructions_1.NEW_ORDER_V3_OWNER_INDEX;\n    }\n}));\nvar fees_1 = __webpack_require__(/*! ./fees */ \"(ssr)/./node_modules/@project-serum/serum/lib/fees.js\");\nObject.defineProperty(exports, \"getFeeTier\", ({\n    enumerable: true,\n    get: function() {\n        return fees_1.getFeeTier;\n    }\n}));\nObject.defineProperty(exports, \"getFeeRates\", ({\n    enumerable: true,\n    get: function() {\n        return fees_1.getFeeRates;\n    }\n}));\nObject.defineProperty(exports, \"supportsSrmFeeDiscounts\", ({\n    enumerable: true,\n    get: function() {\n        return fees_1.supportsSrmFeeDiscounts;\n    }\n}));\nvar tokens_and_markets_1 = __webpack_require__(/*! ./tokens_and_markets */ \"(ssr)/./node_modules/@project-serum/serum/lib/tokens_and_markets.js\");\nObject.defineProperty(exports, \"TOKEN_MINTS\", ({\n    enumerable: true,\n    get: function() {\n        return tokens_and_markets_1.TOKEN_MINTS;\n    }\n}));\nObject.defineProperty(exports, \"MARKETS\", ({\n    enumerable: true,\n    get: function() {\n        return tokens_and_markets_1.MARKETS;\n    }\n}));\nObject.defineProperty(exports, \"getLayoutVersion\", ({\n    enumerable: true,\n    get: function() {\n        return tokens_and_markets_1.getLayoutVersion;\n    }\n}));\nvar queue_1 = __webpack_require__(/*! ./queue */ \"(ssr)/./node_modules/@project-serum/serum/lib/queue.js\");\nObject.defineProperty(exports, \"decodeEventQueue\", ({\n    enumerable: true,\n    get: function() {\n        return queue_1.decodeEventQueue;\n    }\n}));\nObject.defineProperty(exports, \"decodeRequestQueue\", ({\n    enumerable: true,\n    get: function() {\n        return queue_1.decodeRequestQueue;\n    }\n}));\nObject.defineProperty(exports, \"REQUEST_QUEUE_LAYOUT\", ({\n    enumerable: true,\n    get: function() {\n        return queue_1.REQUEST_QUEUE_LAYOUT;\n    }\n}));\nObject.defineProperty(exports, \"EVENT_QUEUE_LAYOUT\", ({\n    enumerable: true,\n    get: function() {\n        return queue_1.EVENT_QUEUE_LAYOUT;\n    }\n}));\nexports.TokenInstructions = __importStar(__webpack_require__(/*! ./token-instructions */ \"(ssr)/./node_modules/@project-serum/serum/lib/token-instructions.js\"));\n__exportStar(__webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@project-serum/serum/lib/error.js\"), exports);\nvar market_proxy_1 = __webpack_require__(/*! ./market-proxy */ \"(ssr)/./node_modules/@project-serum/serum/lib/market-proxy/index.js\");\nObject.defineProperty(exports, \"MarketProxy\", ({\n    enumerable: true,\n    get: function() {\n        return market_proxy_1.MarketProxy;\n    }\n}));\nObject.defineProperty(exports, \"MarketProxyBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return market_proxy_1.MarketProxyBuilder;\n    }\n}));\nvar middleware_1 = __webpack_require__(/*! ./market-proxy/middleware */ \"(ssr)/./node_modules/@project-serum/serum/lib/market-proxy/middleware.js\");\nObject.defineProperty(exports, \"OpenOrdersPda\", ({\n    enumerable: true,\n    get: function() {\n        return middleware_1.OpenOrdersPda;\n    }\n}));\nObject.defineProperty(exports, \"ReferralFees\", ({\n    enumerable: true,\n    get: function() {\n        return middleware_1.ReferralFees;\n    }\n}));\nObject.defineProperty(exports, \"PermissionedCrank\", ({\n    enumerable: true,\n    get: function() {\n        return middleware_1.PermissionedCrank;\n    }\n}));\nObject.defineProperty(exports, \"Logger\", ({\n    enumerable: true,\n    get: function() {\n        return middleware_1.Logger;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/instructions.js":
/*!***************************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/instructions.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DexInstructions = exports.decodeInstructionV2 = exports.decodeInstruction = exports.encodeInstructionV2 = exports.encodeInstruction = exports.INSTRUCTION_LAYOUT_V2 = exports.INSTRUCTION_LAYOUT = exports.NEW_ORDER_V3_OWNER_INDEX = exports.NEW_ORDER_V3_OPEN_ORDERS_INDEX = exports.NEW_ORDER_OWNER_INDEX = exports.NEW_ORDER_OPEN_ORDERS_INDEX = exports.SETTLE_FUNDS_QUOTE_WALLET_INDEX = exports.SETTLE_FUNDS_BASE_WALLET_INDEX = void 0;\nconst buffer_layout_1 = __webpack_require__(/*! buffer-layout */ \"(ssr)/./node_modules/buffer-layout/lib/Layout.js\");\nconst layout_1 = __webpack_require__(/*! ./layout */ \"(ssr)/./node_modules/@project-serum/serum/lib/layout.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst token_instructions_1 = __webpack_require__(/*! ./token-instructions */ \"(ssr)/./node_modules/@project-serum/serum/lib/token-instructions.js\");\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\n// NOTE: Update these if the position of arguments for the settleFunds instruction changes\nexports.SETTLE_FUNDS_BASE_WALLET_INDEX = 5;\nexports.SETTLE_FUNDS_QUOTE_WALLET_INDEX = 6;\n// NOTE: Update these if the position of arguments for the newOrder instruction changes\nexports.NEW_ORDER_OPEN_ORDERS_INDEX = 1;\nexports.NEW_ORDER_OWNER_INDEX = 4;\n// NOTE: Update these if the position of arguments for the newOrder instruction changes\nexports.NEW_ORDER_V3_OPEN_ORDERS_INDEX = 1;\nexports.NEW_ORDER_V3_OWNER_INDEX = 7;\nexports.INSTRUCTION_LAYOUT = new layout_1.VersionedLayout(0, buffer_layout_1.union(buffer_layout_1.u32(\"instruction\")));\nexports.INSTRUCTION_LAYOUT.inner.addVariant(0, buffer_layout_1.struct([\n    layout_1.u64(\"baseLotSize\"),\n    layout_1.u64(\"quoteLotSize\"),\n    buffer_layout_1.u16(\"feeRateBps\"),\n    layout_1.u64(\"vaultSignerNonce\"),\n    layout_1.u64(\"quoteDustThreshold\")\n]), \"initializeMarket\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(1, buffer_layout_1.struct([\n    layout_1.sideLayout(\"side\"),\n    layout_1.u64(\"limitPrice\"),\n    layout_1.u64(\"maxQuantity\"),\n    layout_1.orderTypeLayout(\"orderType\"),\n    layout_1.u64(\"clientId\")\n]), \"newOrder\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(2, buffer_layout_1.struct([\n    buffer_layout_1.u16(\"limit\")\n]), \"matchOrders\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(3, buffer_layout_1.struct([\n    buffer_layout_1.u16(\"limit\")\n]), \"consumeEvents\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(4, buffer_layout_1.struct([\n    layout_1.sideLayout(\"side\"),\n    layout_1.u128(\"orderId\"),\n    layout_1.publicKeyLayout(\"openOrders\"),\n    buffer_layout_1.u8(\"openOrdersSlot\")\n]), \"cancelOrder\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(5, buffer_layout_1.struct([]), \"settleFunds\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(6, buffer_layout_1.struct([\n    layout_1.u64(\"clientId\")\n]), \"cancelOrderByClientId\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(10, buffer_layout_1.struct([\n    layout_1.sideLayout(\"side\"),\n    layout_1.u64(\"limitPrice\"),\n    layout_1.u64(\"maxBaseQuantity\"),\n    layout_1.u64(\"maxQuoteQuantity\"),\n    layout_1.selfTradeBehaviorLayout(\"selfTradeBehavior\"),\n    layout_1.orderTypeLayout(\"orderType\"),\n    layout_1.u64(\"clientId\"),\n    buffer_layout_1.u16(\"limit\")\n]), \"newOrderV3\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(11, buffer_layout_1.struct([\n    layout_1.sideLayout(\"side\"),\n    layout_1.u128(\"orderId\")\n]), \"cancelOrderV2\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(12, buffer_layout_1.struct([\n    layout_1.u64(\"clientId\")\n]), \"cancelOrderByClientIdV2\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(14, buffer_layout_1.struct([]), \"closeOpenOrders\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(15, buffer_layout_1.struct([]), \"initOpenOrders\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(16, buffer_layout_1.struct([\n    buffer_layout_1.u16(\"limit\")\n]), \"prune\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(17, buffer_layout_1.struct([\n    buffer_layout_1.u16(\"limit\")\n]), \"consumeEventsPermissioned\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(18, buffer_layout_1.struct([\n    buffer_layout_1.seq(layout_1.u64(), 8, \"clientIds\")\n]), \"cancelOrdersByClientIds\");\nconst orderStruct = ()=>buffer_layout_1.struct([\n        layout_1.sideLayout(\"side\"),\n        layout_1.u64(\"limitPrice\"),\n        layout_1.u64(\"maxBaseQuantity\"),\n        layout_1.u64(\"maxQuoteQuantity\"),\n        layout_1.selfTradeBehaviorLayout(\"selfTradeBehavior\"),\n        layout_1.orderTypeLayout(\"orderType\"),\n        layout_1.u64(\"clientId\"),\n        buffer_layout_1.u16(\"limit\"),\n        layout_1.i64(\"maxTs\")\n    ]);\nexports.INSTRUCTION_LAYOUT.inner.addVariant(19, orderStruct(), \"replaceOrderByClientId\");\nexports.INSTRUCTION_LAYOUT.inner.addVariant(20, buffer_layout_1.struct([\n    layout_1.u64(\"orderAmount\"),\n    buffer_layout_1.seq(orderStruct(), 8, \"orders\")\n]), \"replaceOrdersByClientIds\");\nexports.INSTRUCTION_LAYOUT_V2 = new layout_1.VersionedLayout(0, buffer_layout_1.union(buffer_layout_1.u32(\"instruction\")));\nexports.INSTRUCTION_LAYOUT_V2.inner.addVariant(10, orderStruct(), \"newOrderV3\");\nfunction encodeInstruction(instruction, maxLength = 100) {\n    const b = Buffer.alloc(maxLength);\n    return b.slice(0, exports.INSTRUCTION_LAYOUT.encode(instruction, b));\n}\nexports.encodeInstruction = encodeInstruction;\nfunction encodeInstructionV2(instruction) {\n    const b = Buffer.alloc(100);\n    return b.slice(0, exports.INSTRUCTION_LAYOUT_V2.encode(instruction, b));\n}\nexports.encodeInstructionV2 = encodeInstructionV2;\nfunction decodeInstruction(message) {\n    return exports.INSTRUCTION_LAYOUT.decode(message);\n}\nexports.decodeInstruction = decodeInstruction;\nfunction decodeInstructionV2(message) {\n    return exports.INSTRUCTION_LAYOUT_V2.decode(message);\n}\nexports.decodeInstructionV2 = decodeInstructionV2;\nclass DexInstructions {\n    static initializeMarket({ market, requestQueue, eventQueue, bids, asks, baseVault, quoteVault, baseMint, quoteMint, baseLotSize, quoteLotSize, feeRateBps, vaultSignerNonce, quoteDustThreshold, programId, authority = undefined, pruneAuthority = undefined, crankAuthority = undefined }) {\n        let rentSysvar = new web3_js_1.PublicKey(\"SysvarRent111111111111111111111111111111111\");\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: market,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: requestQueue,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: eventQueue,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: bids,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: asks,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: baseVault,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: quoteVault,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: baseMint,\n                    isSigner: false,\n                    isWritable: false\n                },\n                {\n                    pubkey: quoteMint,\n                    isSigner: false,\n                    isWritable: false\n                },\n                // Use a dummy address if using the new dex upgrade to save tx space.\n                {\n                    pubkey: authority ? quoteMint : web3_js_1.SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false\n                }\n            ].concat(authority ? {\n                pubkey: authority,\n                isSigner: false,\n                isWritable: false\n            } : []).concat(authority && pruneAuthority ? {\n                pubkey: pruneAuthority,\n                isSigner: false,\n                isWritable: false\n            } : []).concat(authority && pruneAuthority && crankAuthority ? {\n                pubkey: crankAuthority,\n                isSigner: false,\n                isWritable: false\n            } : []),\n            programId,\n            data: encodeInstruction({\n                initializeMarket: {\n                    baseLotSize,\n                    quoteLotSize,\n                    feeRateBps,\n                    vaultSignerNonce,\n                    quoteDustThreshold\n                }\n            })\n        });\n    }\n    static newOrder({ market, openOrders, payer, owner, requestQueue, baseVault, quoteVault, side, limitPrice, maxQuantity, orderType, clientId, programId, feeDiscountPubkey = null }) {\n        const keys = [\n            {\n                pubkey: market,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: openOrders,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: requestQueue,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: payer,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            },\n            {\n                pubkey: baseVault,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: quoteVault,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: token_instructions_1.TOKEN_PROGRAM_ID,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        if (feeDiscountPubkey) {\n            keys.push({\n                pubkey: feeDiscountPubkey,\n                isSigner: false,\n                isWritable: false\n            });\n        }\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId,\n            data: encodeInstruction({\n                newOrder: clientId ? {\n                    side,\n                    limitPrice,\n                    maxQuantity,\n                    orderType,\n                    clientId\n                } : {\n                    side,\n                    limitPrice,\n                    maxQuantity,\n                    orderType\n                }\n            })\n        });\n    }\n    static newOrderV3({ market, openOrders, payer, owner, requestQueue, eventQueue, bids, asks, baseVault, quoteVault, side, limitPrice, maxBaseQuantity, maxQuoteQuantity, orderType, clientId, programId, selfTradeBehavior, feeDiscountPubkey = null, maxTs = null, replaceIfExists = false }) {\n        const keys = [\n            {\n                pubkey: market,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: openOrders,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: requestQueue,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: eventQueue,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: bids,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: asks,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: payer,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            },\n            {\n                pubkey: baseVault,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: quoteVault,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: token_instructions_1.TOKEN_PROGRAM_ID,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        if (feeDiscountPubkey) {\n            keys.push({\n                pubkey: feeDiscountPubkey,\n                isSigner: false,\n                isWritable: false\n            });\n        }\n        let instructionName, encoder;\n        if (replaceIfExists) {\n            instructionName = \"replaceOrderByClientId\";\n            encoder = encodeInstruction;\n        } else {\n            instructionName = \"newOrderV3\";\n            encoder = maxTs ? encodeInstructionV2 : encodeInstruction;\n        }\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId,\n            data: encoder({\n                [instructionName]: {\n                    side,\n                    limitPrice,\n                    maxBaseQuantity,\n                    maxQuoteQuantity,\n                    selfTradeBehavior,\n                    orderType,\n                    clientId,\n                    limit: 65535,\n                    maxTs: new bn_js_1.default(maxTs !== null && maxTs !== void 0 ? maxTs : \"9223372036854775807\")\n                }\n            })\n        });\n    }\n    static replaceOrdersByClientIds({ market, openOrders, payer, owner, requestQueue, eventQueue, bids, asks, baseVault, quoteVault, feeDiscountPubkey = null, programId, orders }) {\n        const keys = [\n            {\n                pubkey: market,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: openOrders,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: requestQueue,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: eventQueue,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: bids,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: asks,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: payer,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            },\n            {\n                pubkey: baseVault,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: quoteVault,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: token_instructions_1.TOKEN_PROGRAM_ID,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        if (feeDiscountPubkey) {\n            keys.push({\n                pubkey: feeDiscountPubkey,\n                isSigner: false,\n                isWritable: false\n            });\n        }\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId,\n            data: encodeInstruction({\n                replaceOrdersByClientIds: {\n                    orderAmount: new bn_js_1.default(orders.length),\n                    orders: orders.map((order)=>{\n                        var _a;\n                        return {\n                            ...order,\n                            maxTs: new bn_js_1.default((_a = order.maxTs) !== null && _a !== void 0 ? _a : \"9223372036854775807\"),\n                            limit: 65535\n                        };\n                    })\n                }\n            }, 15 + orders.length * 60).slice(0, 13 + orders.length * 54)\n        });\n    }\n    static matchOrders({ market, requestQueue, eventQueue, bids, asks, baseVault, quoteVault, limit, programId }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: market,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: requestQueue,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: eventQueue,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: bids,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: asks,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: baseVault,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: quoteVault,\n                    isSigner: false,\n                    isWritable: true\n                }\n            ],\n            programId,\n            data: encodeInstruction({\n                matchOrders: {\n                    limit\n                }\n            })\n        });\n    }\n    static consumeEvents({ market, eventQueue, coinFee, pcFee, openOrdersAccounts, limit, programId }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                ...openOrdersAccounts.map((account)=>({\n                        pubkey: account,\n                        isSigner: false,\n                        isWritable: true\n                    })),\n                {\n                    pubkey: market,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: eventQueue,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: coinFee,\n                    isSigner: false,\n                    isWriteable: true\n                },\n                {\n                    pubkey: pcFee,\n                    isSigner: false,\n                    isWritable: true\n                }\n            ],\n            programId,\n            data: encodeInstruction({\n                consumeEvents: {\n                    limit\n                }\n            })\n        });\n    }\n    static consumeEventsPermissioned({ market, eventQueue, crankAuthority, openOrdersAccounts, limit, programId }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                ...openOrdersAccounts.map((account)=>({\n                        pubkey: account,\n                        isSigner: false,\n                        isWritable: true\n                    })),\n                {\n                    pubkey: market,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: eventQueue,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: crankAuthority,\n                    isSigner: true,\n                    isWritable: false\n                }\n            ],\n            programId,\n            data: encodeInstruction({\n                consumeEventsPermissioned: {\n                    limit\n                }\n            })\n        });\n    }\n    static cancelOrder({ market, openOrders, owner, requestQueue, side, orderId, openOrdersSlot, programId }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: market,\n                    isSigner: false,\n                    isWritable: false\n                },\n                {\n                    pubkey: openOrders,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: requestQueue,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: owner,\n                    isSigner: true,\n                    isWritable: false\n                }\n            ],\n            programId,\n            data: encodeInstruction({\n                cancelOrder: {\n                    side,\n                    orderId,\n                    openOrders,\n                    openOrdersSlot\n                }\n            })\n        });\n    }\n    static cancelOrderV2(order) {\n        const { market, bids, asks, eventQueue, openOrders, owner, side, orderId, programId } = order;\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: market,\n                    isSigner: false,\n                    isWritable: false\n                },\n                {\n                    pubkey: bids,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: asks,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: openOrders,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: owner,\n                    isSigner: true,\n                    isWritable: false\n                },\n                {\n                    pubkey: eventQueue,\n                    isSigner: false,\n                    isWritable: true\n                }\n            ],\n            programId,\n            data: encodeInstruction({\n                cancelOrderV2: {\n                    side,\n                    orderId\n                }\n            })\n        });\n    }\n    static cancelOrderByClientId({ market, openOrders, owner, requestQueue, clientId, programId }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: market,\n                    isSigner: false,\n                    isWritable: false\n                },\n                {\n                    pubkey: openOrders,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: requestQueue,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: owner,\n                    isSigner: true,\n                    isWritable: false\n                }\n            ],\n            programId,\n            data: encodeInstruction({\n                cancelOrderByClientId: {\n                    clientId\n                }\n            })\n        });\n    }\n    static cancelOrderByClientIdV2({ market, openOrders, owner, bids, asks, eventQueue, clientId, programId }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: market,\n                    isSigner: false,\n                    isWritable: false\n                },\n                {\n                    pubkey: bids,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: asks,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: openOrders,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: owner,\n                    isSigner: true,\n                    isWritable: false\n                },\n                {\n                    pubkey: eventQueue,\n                    isSigner: false,\n                    isWritable: true\n                }\n            ],\n            programId,\n            data: encodeInstruction({\n                cancelOrderByClientIdV2: {\n                    clientId\n                }\n            })\n        });\n    }\n    static cancelOrdersByClientIds({ market, openOrders, owner, bids, asks, eventQueue, clientIds, programId }) {\n        if (clientIds.length > 8) {\n            throw new Error(\"Number of client ids cannot exceed 8!\");\n        }\n        while(clientIds.length < 8){\n            clientIds.push(new bn_js_1.default(0));\n        }\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: market,\n                    isSigner: false,\n                    isWritable: false\n                },\n                {\n                    pubkey: bids,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: asks,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: openOrders,\n                    isSigner: false,\n                    isWritable: true\n                },\n                {\n                    pubkey: owner,\n                    isSigner: true,\n                    isWritable: false\n                },\n                {\n                    pubkey: eventQueue,\n                    isSigner: false,\n                    isWritable: true\n                }\n            ],\n            programId,\n            data: encodeInstruction({\n                cancelOrdersByClientIds: {\n                    clientIds\n                }\n            })\n        });\n    }\n    static settleFunds({ market, openOrders, owner, baseVault, quoteVault, baseWallet, quoteWallet, vaultSigner, programId, referrerQuoteWallet = null }) {\n        const keys = [\n            {\n                pubkey: market,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: openOrders,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            },\n            {\n                pubkey: baseVault,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: quoteVault,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: baseWallet,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: quoteWallet,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: vaultSigner,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: token_instructions_1.TOKEN_PROGRAM_ID,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        if (referrerQuoteWallet) {\n            keys.push({\n                pubkey: referrerQuoteWallet,\n                isSigner: false,\n                isWritable: true\n            });\n        }\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId,\n            data: encodeInstruction({\n                settleFunds: {}\n            })\n        });\n    }\n    static closeOpenOrders({ market, openOrders, owner, solWallet, programId }) {\n        const keys = [\n            {\n                pubkey: openOrders,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            },\n            {\n                pubkey: solWallet,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: market,\n                isSigner: false,\n                isWritable: false\n            }\n        ];\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId,\n            data: encodeInstruction({\n                closeOpenOrders: {}\n            })\n        });\n    }\n    static initOpenOrders({ market, openOrders, owner, programId, marketAuthority }) {\n        const keys = [\n            {\n                pubkey: openOrders,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: owner,\n                isSigner: true,\n                isWritable: false\n            },\n            {\n                pubkey: market,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                isSigner: false,\n                isWritable: false\n            }\n        ].concat(marketAuthority ? {\n            pubkey: marketAuthority,\n            isSigner: false,\n            isWritable: false\n        } : []);\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId,\n            data: encodeInstruction({\n                initOpenOrders: {}\n            })\n        });\n    }\n    static prune({ market, bids, asks, eventQueue, pruneAuthority, openOrders, openOrdersOwner, programId, limit }) {\n        const keys = [\n            {\n                pubkey: market,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: bids,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: asks,\n                isSigner: false,\n                isWritable: true\n            },\n            // Keep signer false so that one can use a PDA.\n            {\n                pubkey: pruneAuthority,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: openOrders,\n                isSigner: false,\n                isWritable: true\n            },\n            {\n                pubkey: openOrdersOwner,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: eventQueue,\n                isSigner: false,\n                isWritable: true\n            }\n        ];\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId,\n            data: encodeInstruction({\n                prune: {\n                    limit\n                }\n            })\n        });\n    }\n}\nexports.DexInstructions = DexInstructions; //# sourceMappingURL=instructions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/instructions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/layout.js":
/*!*********************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/layout.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// @ts-nocheck\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setLayoutEncoder = exports.setLayoutDecoder = exports.accountFlagsLayout = exports.selfTradeBehaviorLayout = exports.orderTypeLayout = exports.sideLayout = exports.VersionedLayout = exports.WideBits = exports.u128 = exports.i64 = exports.u64 = exports.publicKeyLayout = exports.zeros = void 0;\nconst buffer_layout_1 = __webpack_require__(/*! buffer-layout */ \"(ssr)/./node_modules/buffer-layout/lib/Layout.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\nclass Zeros extends buffer_layout_1.Blob {\n    decode(b, offset) {\n        const slice = super.decode(b, offset);\n        if (!slice.every((v)=>v === 0)) {\n            throw new Error(\"nonzero padding bytes\");\n        }\n        return slice;\n    }\n}\nfunction zeros(length) {\n    return new Zeros(length);\n}\nexports.zeros = zeros;\nclass PublicKeyLayout extends buffer_layout_1.Blob {\n    constructor(property){\n        super(32, property);\n    }\n    decode(b, offset) {\n        return new web3_js_1.PublicKey(super.decode(b, offset));\n    }\n    encode(src, b, offset) {\n        return super.encode(src.toBuffer(), b, offset);\n    }\n}\nfunction publicKeyLayout(property) {\n    return new PublicKeyLayout(property);\n}\nexports.publicKeyLayout = publicKeyLayout;\nclass BNLayout extends buffer_layout_1.Blob {\n    decode(b, offset) {\n        return new bn_js_1.default(super.decode(b, offset), 10, \"le\");\n    }\n    encode(src, b, offset) {\n        return super.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\n    }\n}\nfunction u64(property) {\n    return new BNLayout(8, property);\n}\nexports.u64 = u64;\nfunction i64(property) {\n    return new BNLayout(8, property);\n}\nexports.i64 = i64;\nfunction u128(property) {\n    return new BNLayout(16, property);\n}\nexports.u128 = u128;\nclass WideBits extends buffer_layout_1.Layout {\n    constructor(property){\n        super(8, property);\n        this._lower = buffer_layout_1.bits(buffer_layout_1.u32(), false);\n        this._upper = buffer_layout_1.bits(buffer_layout_1.u32(), false);\n    }\n    addBoolean(property) {\n        if (this._lower.fields.length < 32) {\n            this._lower.addBoolean(property);\n        } else {\n            this._upper.addBoolean(property);\n        }\n    }\n    decode(b, offset = 0) {\n        const lowerDecoded = this._lower.decode(b, offset);\n        const upperDecoded = this._upper.decode(b, offset + this._lower.span);\n        return {\n            ...lowerDecoded,\n            ...upperDecoded\n        };\n    }\n    encode(src, b, offset = 0) {\n        return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\n    }\n}\nexports.WideBits = WideBits;\nclass VersionedLayout extends buffer_layout_1.Layout {\n    constructor(version, inner, property){\n        super(inner.span > 0 ? inner.span + 1 : inner.span, property);\n        this.version = version;\n        this.inner = inner;\n    }\n    decode(b, offset = 0) {\n        // if (b.readUInt8(offset) !== this._version) {\n        //   throw new Error('invalid version');\n        // }\n        return this.inner.decode(b, offset + 1);\n    }\n    encode(src, b, offset = 0) {\n        b.writeUInt8(this.version, offset);\n        return 1 + this.inner.encode(src, b, offset + 1);\n    }\n    getSpan(b, offset = 0) {\n        return 1 + this.inner.getSpan(b, offset + 1);\n    }\n}\nexports.VersionedLayout = VersionedLayout;\nclass EnumLayout extends buffer_layout_1.UInt {\n    constructor(values, span, property){\n        super(span, property);\n        this.values = values;\n    }\n    encode(src, b, offset) {\n        if (this.values[src] !== undefined) {\n            return super.encode(this.values[src], b, offset);\n        }\n        throw new Error(\"Invalid \" + this.property);\n    }\n    decode(b, offset) {\n        const decodedValue = super.decode(b, offset);\n        const entry = Object.entries(this.values).find(([, value])=>value === decodedValue);\n        if (entry) {\n            return entry[0];\n        }\n        throw new Error(\"Invalid \" + this.property);\n    }\n}\nfunction sideLayout(property) {\n    return new EnumLayout({\n        buy: 0,\n        sell: 1\n    }, 4, property);\n}\nexports.sideLayout = sideLayout;\nfunction orderTypeLayout(property) {\n    return new EnumLayout({\n        limit: 0,\n        ioc: 1,\n        postOnly: 2\n    }, 4, property);\n}\nexports.orderTypeLayout = orderTypeLayout;\nfunction selfTradeBehaviorLayout(property) {\n    return new EnumLayout({\n        decrementTake: 0,\n        cancelProvide: 1,\n        abortTransaction: 2\n    }, 4, property);\n}\nexports.selfTradeBehaviorLayout = selfTradeBehaviorLayout;\nconst ACCOUNT_FLAGS_LAYOUT = new WideBits();\nACCOUNT_FLAGS_LAYOUT.addBoolean(\"initialized\");\nACCOUNT_FLAGS_LAYOUT.addBoolean(\"market\");\nACCOUNT_FLAGS_LAYOUT.addBoolean(\"openOrders\");\nACCOUNT_FLAGS_LAYOUT.addBoolean(\"requestQueue\");\nACCOUNT_FLAGS_LAYOUT.addBoolean(\"eventQueue\");\nACCOUNT_FLAGS_LAYOUT.addBoolean(\"bids\");\nACCOUNT_FLAGS_LAYOUT.addBoolean(\"asks\");\nfunction accountFlagsLayout(property = \"accountFlags\") {\n    return ACCOUNT_FLAGS_LAYOUT.replicate(property);\n}\nexports.accountFlagsLayout = accountFlagsLayout;\nfunction setLayoutDecoder(layout, decoder) {\n    const originalDecode = layout.decode;\n    layout.decode = function decode(b, offset = 0) {\n        return decoder(originalDecode.call(this, b, offset));\n    };\n}\nexports.setLayoutDecoder = setLayoutDecoder;\nfunction setLayoutEncoder(layout, encoder) {\n    const originalEncode = layout.encode;\n    layout.encode = function encode(src, b, offset) {\n        return originalEncode.call(this, encoder(src), b, offset);\n    };\n    return layout;\n}\nexports.setLayoutEncoder = setLayoutEncoder; //# sourceMappingURL=layout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/layout.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/market-proxy/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/market-proxy/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MarketProxyBuilder = exports.MarketProxyInstruction = exports.MarketProxy = void 0;\nconst anchor_1 = __webpack_require__(/*! @project-serum/anchor */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/index.js\");\nconst market_1 = __webpack_require__(/*! ../market */ \"(ssr)/./node_modules/@project-serum/serum/lib/market.js\");\nconst instructions_1 = __webpack_require__(/*! ../instructions */ \"(ssr)/./node_modules/@project-serum/serum/lib/instructions.js\");\n// MarketProxy provides an API for constructing transactions to an on-chain\n// DEX proxy, which relays all instructions to the orderbook. Minimally, this\n// requires two modifications for DEX instructions.\n//\n// 1. Transasctions are sent to the proxy program--not the DEX.\n// 2. The DEX program ID must be inserted as the first account in instructions\n//    using the proxy relay, so that the proxy can use the account for CPI.\n//    The program is responsible for removing this account before relaying to\n//    the dex.\n//\n// Additionally, a middleware abstraction is provided so that one can configure\n// both the client and the smart contract with the ability to send and processs\n// arbitrary accounts and instruction data *in addition* to what the Serum DEX\n// expects.\n//\n// Similar to the layers of an onion, each middleware wraps a transaction\n// request with additional accounts and instruction data before sending it to\n// the program. Upon receiving the request, the program--with its own set of\n// middleware-- unwraps and processes each layer. The process ends with all\n// layers being unwrapped and the proxy relaying the transaction to the DEX.\n//\n// As a result, the order of the middleware matters and the client should\n// process middleware in the *reverse* order of the proxy smart contract.\nclass MarketProxy {\n    // Ctor.\n    constructor(market, instruction){\n        this._market = market;\n        this._instruction = instruction;\n    }\n    // DEX market being proxied.\n    get market() {\n        return this._market;\n    }\n    // Instruction namespace.\n    get instruction() {\n        return this._instruction;\n    }\n    // Serum DEX program ID.\n    get dexProgramId() {\n        return this._market.programId;\n    }\n    // Proxy program ID.\n    get proxyProgramId() {\n        return this._instruction.proxyProgramId;\n    }\n}\nexports.MarketProxy = MarketProxy;\n// Instruction builder for the market proxy.\nclass MarketProxyInstruction {\n    constructor(proxyProgramId, dexProgramId, market, middlewares){\n        this._proxyProgramId = proxyProgramId;\n        this._dexProgramId = dexProgramId;\n        this._market = market;\n        this._middlewares = middlewares;\n    }\n    // Program ID of the permissioning proxy program.\n    get proxyProgramId() {\n        return this._proxyProgramId;\n    }\n    newOrderV3(params) {\n        const tradeIx = this._market.makeNewOrderV3Instruction({\n            ...params,\n            programId: this._proxyProgramId\n        });\n        this._middlewares.forEach((mw)=>mw.newOrderV3(tradeIx));\n        return this.proxy(tradeIx);\n    }\n    initOpenOrders(owner, market, openOrders, marketAuthority) {\n        const ix = instructions_1.DexInstructions.initOpenOrders({\n            market,\n            openOrders,\n            owner,\n            programId: this._proxyProgramId,\n            marketAuthority\n        });\n        this._middlewares.forEach((mw)=>mw.initOpenOrders(ix));\n        return this.proxy(ix);\n    }\n    cancelOrder(owner, order) {\n        const ix = instructions_1.DexInstructions.cancelOrderV2({\n            market: this._market.address,\n            owner,\n            openOrders: order.openOrdersAddress,\n            bids: this._market.decoded.bids,\n            asks: this._market.decoded.asks,\n            eventQueue: this._market.decoded.eventQueue,\n            side: order.side,\n            orderId: order.orderId,\n            openOrdersSlot: order.openOrdersSlot,\n            programId: this._proxyProgramId\n        });\n        this._middlewares.forEach((mw)=>mw.cancelOrderV2(ix));\n        return this.proxy(ix);\n    }\n    cancelOrderByClientId(owner, openOrders, clientId) {\n        const ix = instructions_1.DexInstructions.cancelOrderByClientIdV2({\n            market: this._market.address,\n            openOrders,\n            owner,\n            bids: this._market.decoded.bids,\n            asks: this._market.decoded.asks,\n            eventQueue: this._market.decoded.eventQueue,\n            clientId,\n            programId: this._proxyProgramId\n        });\n        this._middlewares.forEach((mw)=>mw.cancelOrderByClientIdV2(ix));\n        return this.proxy(ix);\n    }\n    settleFunds(openOrders, owner, baseWallet, quoteWallet, referrerQuoteWallet) {\n        const ix = instructions_1.DexInstructions.settleFunds({\n            market: this._market.address,\n            openOrders,\n            owner,\n            baseVault: this._market.decoded.baseVault,\n            quoteVault: this._market.decoded.quoteVault,\n            baseWallet,\n            quoteWallet,\n            vaultSigner: anchor_1.utils.publicKey.createProgramAddressSync([\n                this._market.address.toBuffer(),\n                this._market.decoded.vaultSignerNonce.toArrayLike(Buffer, \"le\", 8)\n            ], this._dexProgramId),\n            programId: this._proxyProgramId,\n            referrerQuoteWallet\n        });\n        this._middlewares.forEach((mw)=>mw.settleFunds(ix));\n        return this.proxy(ix);\n    }\n    closeOpenOrders(openOrders, owner, solWallet) {\n        const ix = instructions_1.DexInstructions.closeOpenOrders({\n            market: this._market.address,\n            openOrders,\n            owner,\n            solWallet,\n            programId: this._proxyProgramId\n        });\n        this._middlewares.forEach((mw)=>mw.closeOpenOrders(ix));\n        return this.proxy(ix);\n    }\n    prune(openOrders, openOrdersOwner, limit) {\n        if (!limit) {\n            limit = 65535;\n        }\n        const ix = instructions_1.DexInstructions.prune({\n            market: this._market.address,\n            bids: this._market.decoded.bids,\n            asks: this._market.decoded.asks,\n            eventQueue: this._market.decoded.eventQueue,\n            pruneAuthority: this._market.decoded.pruneAuthority,\n            openOrders,\n            openOrdersOwner,\n            programId: this._proxyProgramId,\n            limit\n        });\n        this._middlewares.forEach((mw)=>mw.prune(ix));\n        return this.proxy(ix);\n    }\n    consumeEvents(openOrdersAccounts, limit) {\n        const ix = instructions_1.DexInstructions.consumeEvents({\n            market: this._market.address,\n            eventQueue: this._market.decoded.eventQueue,\n            coinFee: this._market.decoded.eventQueue,\n            pcFee: this._market.decoded.eventQueue,\n            openOrdersAccounts,\n            limit,\n            programId: this._proxyProgramId\n        });\n        this._middlewares.forEach((mw)=>mw.consumeEvents(ix));\n        return this.proxy(ix);\n    }\n    consumeEventsPermissioned(openOrdersAccounts, limit) {\n        const ix = instructions_1.DexInstructions.consumeEventsPermissioned({\n            market: this._market.address,\n            eventQueue: this._market.decoded.eventQueue,\n            crankAuthority: this._market.decoded.consumeEventsAuthority,\n            openOrdersAccounts,\n            limit,\n            programId: this._proxyProgramId\n        });\n        this._middlewares.forEach((mw)=>mw.consumeEventsPermissioned(ix));\n        return this.proxy(ix);\n    }\n    // Adds the serum dex account to the instruction so that proxies can\n    // relay (CPI requires the executable account).\n    proxy(ix) {\n        ix.keys = [\n            {\n                pubkey: this._dexProgramId,\n                isWritable: false,\n                isSigner: false\n            },\n            ...ix.keys\n        ];\n        return ix;\n    }\n}\nexports.MarketProxyInstruction = MarketProxyInstruction;\nclass MarketProxyBuilder {\n    constructor(){\n        this._middlewares = [];\n    }\n    middleware(mw) {\n        this._middlewares.push(mw);\n        return this;\n    }\n    async load({ connection, market, options = {}, dexProgramId, proxyProgramId }) {\n        const marketClient = await market_1.Market.load(connection, market, options, dexProgramId, market_1.MARKET_STATE_LAYOUT_V3);\n        const instruction = new MarketProxyInstruction(proxyProgramId, dexProgramId, marketClient, this._middlewares);\n        return new MarketProxy(marketClient, instruction);\n    }\n}\nexports.MarketProxyBuilder = MarketProxyBuilder; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/market-proxy/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/market-proxy/middleware.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/market-proxy/middleware.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Logger = exports.PermissionedCrank = exports.ReferralFees = exports.OpenOrdersPda = void 0;\nconst anchor_1 = __webpack_require__(/*! @project-serum/anchor */ \"(ssr)/./node_modules/@project-serum/anchor/dist/esm/index.js\");\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nclass OpenOrdersPda {\n    constructor({ proxyProgramId, dexProgramId }){\n        this._proxyProgramId = proxyProgramId;\n        this._dexProgramId = dexProgramId;\n    }\n    // PDA authorized to create open orders accounts.\n    static async marketAuthority(market, dexProgramId, proxyProgramId) {\n        // b\"open-orders-init\"\n        const openOrdersStr = Buffer.from([\n            111,\n            112,\n            101,\n            110,\n            45,\n            111,\n            114,\n            100,\n            101,\n            114,\n            115,\n            45,\n            105,\n            110,\n            105,\n            116\n        ]);\n        const [addr] = await web3_js_1.PublicKey.findProgramAddress([\n            openOrdersStr,\n            dexProgramId.toBuffer(),\n            market.toBuffer()\n        ], proxyProgramId);\n        return addr;\n    }\n    static async openOrdersAddress(market, owner, dexProgramId, proxyProgramId) {\n        // b\"open-orders\".\n        const openOrdersStr = Buffer.from([\n            111,\n            112,\n            101,\n            110,\n            45,\n            111,\n            114,\n            100,\n            101,\n            114,\n            115\n        ]);\n        const [addr] = await web3_js_1.PublicKey.findProgramAddress([\n            openOrdersStr,\n            dexProgramId.toBuffer(),\n            market.toBuffer(),\n            owner.toBuffer()\n        ], proxyProgramId);\n        return addr;\n    }\n    initOpenOrders(ix) {\n        const market = ix.keys[2].pubkey;\n        const owner = ix.keys[1].pubkey;\n        // b\"open-orders\"\n        const openOrdersSeed = Buffer.from([\n            111,\n            112,\n            101,\n            110,\n            45,\n            111,\n            114,\n            100,\n            101,\n            114,\n            115\n        ]);\n        // b\"open-orders-init\"\n        const openOrdersInitSeed = Buffer.from([\n            111,\n            112,\n            101,\n            110,\n            45,\n            111,\n            114,\n            100,\n            101,\n            114,\n            115,\n            45,\n            105,\n            110,\n            105,\n            116\n        ]);\n        const [openOrders, bump] = anchor_1.utils.publicKey.findProgramAddressSync([\n            openOrdersSeed,\n            this._dexProgramId.toBuffer(),\n            market.toBuffer(),\n            owner.toBuffer()\n        ], this._proxyProgramId);\n        const [marketAuthority, bumpInit] = anchor_1.utils.publicKey.findProgramAddressSync([\n            openOrdersInitSeed,\n            this._dexProgramId.toBuffer(),\n            market.toBuffer()\n        ], this._proxyProgramId);\n        // Override the open orders account and market authority.\n        ix.keys[0].pubkey = openOrders;\n        ix.keys[4].pubkey = marketAuthority;\n        // Writable because it must pay for the PDA initialization.\n        ix.keys[1].isWritable = true;\n        // Prepend to the account list extra accounts needed for PDA initialization.\n        ix.keys = [\n            {\n                pubkey: this._dexProgramId,\n                isSigner: false,\n                isWritable: false\n            },\n            {\n                pubkey: web3_js_1.SystemProgram.programId,\n                isSigner: false,\n                isWritable: false\n            },\n            ...ix.keys\n        ];\n        // Prepend the ix discriminator, bump, and bumpInit to the instruction data,\n        // which saves the program compute by avoiding recalculating them in the\n        // program.\n        ix.data = Buffer.concat([\n            Buffer.from([\n                0,\n                bump,\n                bumpInit\n            ]),\n            ix.data\n        ]);\n    }\n    newOrderV3(ix) {\n        ix.data = Buffer.concat([\n            Buffer.from([\n                1\n            ]),\n            ix.data\n        ]);\n    }\n    cancelOrderV2(ix) {\n        ix.data = Buffer.concat([\n            Buffer.from([\n                2\n            ]),\n            ix.data\n        ]);\n    }\n    cancelOrderByClientIdV2(ix) {\n        ix.data = Buffer.concat([\n            Buffer.from([\n                3\n            ]),\n            ix.data\n        ]);\n    }\n    settleFunds(ix) {\n        ix.data = Buffer.concat([\n            Buffer.from([\n                4\n            ]),\n            ix.data\n        ]);\n    }\n    closeOpenOrders(ix) {\n        ix.data = Buffer.concat([\n            Buffer.from([\n                5\n            ]),\n            ix.data\n        ]);\n    }\n    prune(ix) {\n        ix.data = Buffer.concat([\n            Buffer.from([\n                6\n            ]),\n            ix.data\n        ]);\n    }\n    consumeEvents(ix) {\n        ix.data = Buffer.concat([\n            Buffer.from([\n                7\n            ]),\n            ix.data\n        ]);\n    }\n    consumeEventsPermissioned(ix) {\n        ix.data = Buffer.concat([\n            Buffer.from([\n                8\n            ]),\n            ix.data\n        ]);\n    }\n}\nexports.OpenOrdersPda = OpenOrdersPda;\nclass ReferralFees {\n    // eslint-disable-next-line\n    initOpenOrders(_ix) {}\n    // eslint-disable-next-line\n    newOrderV3(_ix) {}\n    // eslint-disable-next-line\n    cancelOrderV2(_ix) {}\n    // eslint-disable-next-line\n    cancelOrderByClientIdV2(_ix) {}\n    // eslint-disable-next-line\n    settleFunds(_ix) {}\n    // eslint-disable-next-line\n    closeOpenOrders(_ix) {}\n    // eslint-disable-next-line\n    prune(_ix) {}\n    // eslint-disable-next-line\n    consumeEvents(_ix) {}\n    // eslint-disable-next-line\n    consumeEventsPermissioned(_ix) {}\n}\nexports.ReferralFees = ReferralFees;\nclass PermissionedCrank {\n    // eslint-disable-next-line\n    initOpenOrders(_ix) {}\n    // eslint-disable-next-line\n    newOrderV3(_ix) {}\n    // eslint-disable-next-line\n    cancelOrderV2(_ix) {}\n    // eslint-disable-next-line\n    cancelOrderByClientIdV2(_ix) {}\n    // eslint-disable-next-line\n    settleFunds(_ix) {}\n    // eslint-disable-next-line\n    closeOpenOrders(_ix) {}\n    // eslint-disable-next-line\n    prune(_ix) {}\n    // eslint-disable-next-line\n    consumeEvents(_ix) {}\n    // eslint-disable-next-line\n    consumeEventsPermissioned(ix) {\n        ix.keys[ix.keys.length - 1].isSigner = false;\n    }\n}\nexports.PermissionedCrank = PermissionedCrank;\nclass Logger {\n    initOpenOrders(ix) {\n        console.log(\"Proxying initOpenOrders\", this.ixToDisplay(ix));\n    }\n    newOrderV3(ix) {\n        console.log(\"Proxying newOrderV3\", this.ixToDisplay(ix));\n    }\n    cancelOrderV2(ix) {\n        console.log(\"Proxying cancelOrderV2\", this.ixToDisplay(ix));\n    }\n    cancelOrderByClientIdV2(ix) {\n        console.log(\"Proxying cancelOrderByClientIdV2\", this.ixToDisplay(ix));\n    }\n    settleFunds(ix) {\n        console.log(\"Proxying settleFunds\", this.ixToDisplay(ix));\n    }\n    closeOpenOrders(ix) {\n        console.log(\"Proxying closeOpenOrders\", this.ixToDisplay(ix));\n    }\n    prune(ix) {\n        console.log(\"Proxying prune\", this.ixToDisplay(ix));\n    }\n    consumeEvents(ix) {\n        console.log(\"Proxying consumeEvents\", this.ixToDisplay(ix));\n    }\n    consumeEventsPermissioned(ix) {\n        console.log(\"Proxying consumeEventsPermissioned\", this.ixToDisplay(ix));\n    }\n    ixToDisplay(ix) {\n        const keys = ix.keys.map((i)=>{\n            return {\n                ...i,\n                pubkey: i.pubkey.toString()\n            };\n        });\n        const programId = ix.programId.toString();\n        const data = new Uint8Array(ix.data);\n        return {\n            keys,\n            programId,\n            data\n        };\n    }\n}\nexports.Logger = Logger; //# sourceMappingURL=middleware.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/market-proxy/middleware.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/market.js":
/*!*********************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/market.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getMintDecimals = exports.Orderbook = exports.ORDERBOOK_LAYOUT = exports.OpenOrders = exports._OPEN_ORDERS_LAYOUT_V2 = exports._OPEN_ORDERS_LAYOUT_V1 = exports.Market = exports.MARKET_STATE_LAYOUT_V3 = exports.MARKET_STATE_LAYOUT_V2 = exports._MARKET_STAT_LAYOUT_V1 = void 0;\nconst buffer_layout_1 = __webpack_require__(/*! buffer-layout */ \"(ssr)/./node_modules/buffer-layout/lib/Layout.js\");\nconst layout_1 = __webpack_require__(/*! ./layout */ \"(ssr)/./node_modules/@project-serum/serum/lib/layout.js\");\nconst slab_1 = __webpack_require__(/*! ./slab */ \"(ssr)/./node_modules/@project-serum/serum/lib/slab.js\");\nconst instructions_1 = __webpack_require__(/*! ./instructions */ \"(ssr)/./node_modules/@project-serum/serum/lib/instructions.js\");\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst queue_1 = __webpack_require__(/*! ./queue */ \"(ssr)/./node_modules/@project-serum/serum/lib/queue.js\");\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst fees_1 = __webpack_require__(/*! ./fees */ \"(ssr)/./node_modules/@project-serum/serum/lib/fees.js\");\nconst token_instructions_1 = __webpack_require__(/*! ./token-instructions */ \"(ssr)/./node_modules/@project-serum/serum/lib/token-instructions.js\");\nconst tokens_and_markets_1 = __webpack_require__(/*! ./tokens_and_markets */ \"(ssr)/./node_modules/@project-serum/serum/lib/tokens_and_markets.js\");\nexports._MARKET_STAT_LAYOUT_V1 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout(\"accountFlags\"),\n    layout_1.publicKeyLayout(\"ownAddress\"),\n    layout_1.u64(\"vaultSignerNonce\"),\n    layout_1.publicKeyLayout(\"baseMint\"),\n    layout_1.publicKeyLayout(\"quoteMint\"),\n    layout_1.publicKeyLayout(\"baseVault\"),\n    layout_1.u64(\"baseDepositsTotal\"),\n    layout_1.u64(\"baseFeesAccrued\"),\n    layout_1.publicKeyLayout(\"quoteVault\"),\n    layout_1.u64(\"quoteDepositsTotal\"),\n    layout_1.u64(\"quoteFeesAccrued\"),\n    layout_1.u64(\"quoteDustThreshold\"),\n    layout_1.publicKeyLayout(\"requestQueue\"),\n    layout_1.publicKeyLayout(\"eventQueue\"),\n    layout_1.publicKeyLayout(\"bids\"),\n    layout_1.publicKeyLayout(\"asks\"),\n    layout_1.u64(\"baseLotSize\"),\n    layout_1.u64(\"quoteLotSize\"),\n    layout_1.u64(\"feeRateBps\"),\n    buffer_layout_1.blob(7)\n]);\nexports.MARKET_STATE_LAYOUT_V2 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout(\"accountFlags\"),\n    layout_1.publicKeyLayout(\"ownAddress\"),\n    layout_1.u64(\"vaultSignerNonce\"),\n    layout_1.publicKeyLayout(\"baseMint\"),\n    layout_1.publicKeyLayout(\"quoteMint\"),\n    layout_1.publicKeyLayout(\"baseVault\"),\n    layout_1.u64(\"baseDepositsTotal\"),\n    layout_1.u64(\"baseFeesAccrued\"),\n    layout_1.publicKeyLayout(\"quoteVault\"),\n    layout_1.u64(\"quoteDepositsTotal\"),\n    layout_1.u64(\"quoteFeesAccrued\"),\n    layout_1.u64(\"quoteDustThreshold\"),\n    layout_1.publicKeyLayout(\"requestQueue\"),\n    layout_1.publicKeyLayout(\"eventQueue\"),\n    layout_1.publicKeyLayout(\"bids\"),\n    layout_1.publicKeyLayout(\"asks\"),\n    layout_1.u64(\"baseLotSize\"),\n    layout_1.u64(\"quoteLotSize\"),\n    layout_1.u64(\"feeRateBps\"),\n    layout_1.u64(\"referrerRebatesAccrued\"),\n    buffer_layout_1.blob(7)\n]);\nexports.MARKET_STATE_LAYOUT_V3 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout(\"accountFlags\"),\n    layout_1.publicKeyLayout(\"ownAddress\"),\n    layout_1.u64(\"vaultSignerNonce\"),\n    layout_1.publicKeyLayout(\"baseMint\"),\n    layout_1.publicKeyLayout(\"quoteMint\"),\n    layout_1.publicKeyLayout(\"baseVault\"),\n    layout_1.u64(\"baseDepositsTotal\"),\n    layout_1.u64(\"baseFeesAccrued\"),\n    layout_1.publicKeyLayout(\"quoteVault\"),\n    layout_1.u64(\"quoteDepositsTotal\"),\n    layout_1.u64(\"quoteFeesAccrued\"),\n    layout_1.u64(\"quoteDustThreshold\"),\n    layout_1.publicKeyLayout(\"requestQueue\"),\n    layout_1.publicKeyLayout(\"eventQueue\"),\n    layout_1.publicKeyLayout(\"bids\"),\n    layout_1.publicKeyLayout(\"asks\"),\n    layout_1.u64(\"baseLotSize\"),\n    layout_1.u64(\"quoteLotSize\"),\n    layout_1.u64(\"feeRateBps\"),\n    layout_1.u64(\"referrerRebatesAccrued\"),\n    layout_1.publicKeyLayout(\"authority\"),\n    layout_1.publicKeyLayout(\"pruneAuthority\"),\n    layout_1.publicKeyLayout(\"consumeEventsAuthority\"),\n    buffer_layout_1.blob(992),\n    buffer_layout_1.blob(7)\n]);\nclass Market {\n    constructor(decoded, baseMintDecimals, quoteMintDecimals, options = {}, programId, layoutOverride){\n        const { skipPreflight = false, commitment = \"recent\" } = options;\n        if (!decoded.accountFlags.initialized || !decoded.accountFlags.market) {\n            throw new Error(\"Invalid market state\");\n        }\n        this._decoded = decoded;\n        this._baseSplTokenDecimals = baseMintDecimals;\n        this._quoteSplTokenDecimals = quoteMintDecimals;\n        this._skipPreflight = skipPreflight;\n        this._commitment = commitment;\n        this._programId = programId;\n        this._openOrdersAccountsCache = {};\n        this._feeDiscountKeysCache = {};\n        this._layoutOverride = layoutOverride;\n    }\n    static getLayout(programId) {\n        if (tokens_and_markets_1.getLayoutVersion(programId) === 1) {\n            return exports._MARKET_STAT_LAYOUT_V1;\n        }\n        return exports.MARKET_STATE_LAYOUT_V2;\n    }\n    static async findAccountsByMints(connection, baseMintAddress, quoteMintAddress, programId) {\n        const filters = [\n            {\n                memcmp: {\n                    offset: this.getLayout(programId).offsetOf(\"baseMint\"),\n                    bytes: baseMintAddress.toBase58()\n                }\n            },\n            {\n                memcmp: {\n                    offset: Market.getLayout(programId).offsetOf(\"quoteMint\"),\n                    bytes: quoteMintAddress.toBase58()\n                }\n            }\n        ];\n        return getFilteredProgramAccounts(connection, programId, filters);\n    }\n    static async load(connection, address, options = {}, programId, layoutOverride) {\n        const { owner, data } = throwIfNull(await connection.getAccountInfo(address), \"Market not found\");\n        if (!owner.equals(programId)) {\n            throw new Error(\"Address not owned by program: \" + owner.toBase58());\n        }\n        const decoded = (layoutOverride !== null && layoutOverride !== void 0 ? layoutOverride : this.getLayout(programId)).decode(data);\n        if (!decoded.accountFlags.initialized || !decoded.accountFlags.market || !decoded.ownAddress.equals(address)) {\n            throw new Error(\"Invalid market\");\n        }\n        const [baseMintDecimals, quoteMintDecimals] = await Promise.all([\n            getMintDecimals(connection, decoded.baseMint),\n            getMintDecimals(connection, decoded.quoteMint)\n        ]);\n        return new Market(decoded, baseMintDecimals, quoteMintDecimals, options, programId, layoutOverride);\n    }\n    get programId() {\n        return this._programId;\n    }\n    get address() {\n        return this._decoded.ownAddress;\n    }\n    get publicKey() {\n        return this.address;\n    }\n    get baseMintAddress() {\n        return this._decoded.baseMint;\n    }\n    get quoteMintAddress() {\n        return this._decoded.quoteMint;\n    }\n    get bidsAddress() {\n        return this._decoded.bids;\n    }\n    get asksAddress() {\n        return this._decoded.asks;\n    }\n    get decoded() {\n        return this._decoded;\n    }\n    async loadBids(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.bids));\n        return Orderbook.decode(this, data);\n    }\n    async loadAsks(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.asks));\n        return Orderbook.decode(this, data);\n    }\n    async loadOrdersForOwner(connection, ownerAddress, cacheDurationMs = 0) {\n        const [bids, asks, openOrdersAccounts] = await Promise.all([\n            this.loadBids(connection),\n            this.loadAsks(connection),\n            this.findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs)\n        ]);\n        return this.filterForOpenOrders(bids, asks, openOrdersAccounts);\n    }\n    filterForOpenOrders(bids, asks, openOrdersAccounts) {\n        return [\n            ...bids,\n            ...asks\n        ].filter((order)=>openOrdersAccounts.some((openOrders)=>order.openOrdersAddress.equals(openOrders.address)));\n    }\n    async findBaseTokenAccountsForOwner(connection, ownerAddress, includeUnwrappedSol = false) {\n        if (this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && includeUnwrappedSol) {\n            const [wrapped, unwrapped] = await Promise.all([\n                this.findBaseTokenAccountsForOwner(connection, ownerAddress, false),\n                connection.getAccountInfo(ownerAddress)\n            ]);\n            if (unwrapped !== null) {\n                return [\n                    {\n                        pubkey: ownerAddress,\n                        account: unwrapped\n                    },\n                    ...wrapped\n                ];\n            }\n            return wrapped;\n        }\n        return await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, this.baseMintAddress);\n    }\n    async getTokenAccountsByOwnerForMint(connection, ownerAddress, mintAddress) {\n        return (await connection.getTokenAccountsByOwner(ownerAddress, {\n            mint: mintAddress\n        })).value;\n    }\n    async findQuoteTokenAccountsForOwner(connection, ownerAddress, includeUnwrappedSol = false) {\n        if (this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && includeUnwrappedSol) {\n            const [wrapped, unwrapped] = await Promise.all([\n                this.findQuoteTokenAccountsForOwner(connection, ownerAddress, false),\n                connection.getAccountInfo(ownerAddress)\n            ]);\n            if (unwrapped !== null) {\n                return [\n                    {\n                        pubkey: ownerAddress,\n                        account: unwrapped\n                    },\n                    ...wrapped\n                ];\n            }\n            return wrapped;\n        }\n        return await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, this.quoteMintAddress);\n    }\n    async findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs = 0) {\n        const strOwner = ownerAddress.toBase58();\n        const now = new Date().getTime();\n        if (strOwner in this._openOrdersAccountsCache && now - this._openOrdersAccountsCache[strOwner].ts < cacheDurationMs) {\n            return this._openOrdersAccountsCache[strOwner].accounts;\n        }\n        const openOrdersAccountsForOwner = await OpenOrders.findForMarketAndOwner(connection, this.address, ownerAddress, this._programId);\n        this._openOrdersAccountsCache[strOwner] = {\n            accounts: openOrdersAccountsForOwner,\n            ts: now\n        };\n        return openOrdersAccountsForOwner;\n    }\n    async replaceOrders(connection, accounts, orders, cacheDurationMs = 0) {\n        var _a;\n        if (!accounts.openOrdersAccount && !accounts.openOrdersAddressKey) {\n            const ownerAddress = (_a = accounts.owner.publicKey) !== null && _a !== void 0 ? _a : accounts.owner;\n            const openOrdersAccounts = await this.findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs);\n            accounts.openOrdersAddressKey = openOrdersAccounts[0].address;\n        }\n        const transaction = new web3_js_1.Transaction();\n        transaction.add(this.makeReplaceOrdersByClientIdsInstruction(accounts, orders));\n        return await this._sendTransaction(connection, transaction, [\n            accounts.owner\n        ]);\n    }\n    async placeOrder(connection, { owner, payer, side, price, size, orderType = \"limit\", clientId, openOrdersAddressKey, openOrdersAccount, feeDiscountPubkey, maxTs, replaceIfExists = false }) {\n        const { transaction, signers } = await this.makePlaceOrderTransaction(connection, {\n            owner,\n            payer,\n            side,\n            price,\n            size,\n            orderType,\n            clientId,\n            openOrdersAddressKey,\n            openOrdersAccount,\n            feeDiscountPubkey,\n            maxTs,\n            replaceIfExists\n        });\n        return await this._sendTransaction(connection, transaction, [\n            owner,\n            ...signers\n        ]);\n    }\n    getSplTokenBalanceFromAccountInfo(accountInfo, decimals) {\n        return divideBnToNumber(new bn_js_1.default(accountInfo.data.slice(64, 72), 10, \"le\"), new bn_js_1.default(10).pow(new bn_js_1.default(decimals)));\n    }\n    get supportsSrmFeeDiscounts() {\n        return fees_1.supportsSrmFeeDiscounts(this._programId);\n    }\n    get supportsReferralFees() {\n        return tokens_and_markets_1.getLayoutVersion(this._programId) > 1;\n    }\n    get usesRequestQueue() {\n        return tokens_and_markets_1.getLayoutVersion(this._programId) <= 2;\n    }\n    async findFeeDiscountKeys(connection, ownerAddress, cacheDurationMs = 0) {\n        let sortedAccounts = [];\n        const now = new Date().getTime();\n        const strOwner = ownerAddress.toBase58();\n        if (strOwner in this._feeDiscountKeysCache && now - this._feeDiscountKeysCache[strOwner].ts < cacheDurationMs) {\n            return this._feeDiscountKeysCache[strOwner].accounts;\n        }\n        if (this.supportsSrmFeeDiscounts) {\n            // Fee discounts based on (M)SRM holdings supported in newer versions\n            const msrmAccounts = (await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, token_instructions_1.MSRM_MINT)).map(({ pubkey, account })=>{\n                const balance = this.getSplTokenBalanceFromAccountInfo(account, token_instructions_1.MSRM_DECIMALS);\n                return {\n                    pubkey,\n                    mint: token_instructions_1.MSRM_MINT,\n                    balance,\n                    feeTier: fees_1.getFeeTier(balance, 0)\n                };\n            });\n            const srmAccounts = (await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, token_instructions_1.SRM_MINT)).map(({ pubkey, account })=>{\n                const balance = this.getSplTokenBalanceFromAccountInfo(account, token_instructions_1.SRM_DECIMALS);\n                return {\n                    pubkey,\n                    mint: token_instructions_1.SRM_MINT,\n                    balance,\n                    feeTier: fees_1.getFeeTier(0, balance)\n                };\n            });\n            sortedAccounts = msrmAccounts.concat(srmAccounts).sort((a, b)=>{\n                if (a.feeTier > b.feeTier) {\n                    return -1;\n                } else if (a.feeTier < b.feeTier) {\n                    return 1;\n                } else {\n                    if (a.balance > b.balance) {\n                        return -1;\n                    } else if (a.balance < b.balance) {\n                        return 1;\n                    } else {\n                        return 0;\n                    }\n                }\n            });\n        }\n        this._feeDiscountKeysCache[strOwner] = {\n            accounts: sortedAccounts,\n            ts: now\n        };\n        return sortedAccounts;\n    }\n    async findBestFeeDiscountKey(connection, ownerAddress, cacheDurationMs = 30000) {\n        const accounts = await this.findFeeDiscountKeys(connection, ownerAddress, cacheDurationMs);\n        if (accounts.length > 0) {\n            return {\n                pubkey: accounts[0].pubkey,\n                feeTier: accounts[0].feeTier\n            };\n        }\n        return {\n            pubkey: null,\n            feeTier: 0\n        };\n    }\n    async makePlaceOrderTransaction(connection, { owner, payer, side, price, size, orderType = \"limit\", clientId, openOrdersAddressKey, openOrdersAccount, feeDiscountPubkey = undefined, selfTradeBehavior = \"decrementTake\", maxTs, replaceIfExists = false }, cacheDurationMs = 0, feeDiscountPubkeyCacheDurationMs = 0) {\n        var _a, _b;\n        // @ts-ignore\n        const ownerAddress = (_a = owner.publicKey) !== null && _a !== void 0 ? _a : owner;\n        const openOrdersAccounts = await this.findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs);\n        const transaction = new web3_js_1.Transaction();\n        const signers = [];\n        // Fetch an SRM fee discount key if the market supports discounts and it is not supplied\n        let useFeeDiscountPubkey;\n        if (feeDiscountPubkey) {\n            useFeeDiscountPubkey = feeDiscountPubkey;\n        } else if (feeDiscountPubkey === undefined && this.supportsSrmFeeDiscounts) {\n            useFeeDiscountPubkey = (await this.findBestFeeDiscountKey(connection, ownerAddress, feeDiscountPubkeyCacheDurationMs)).pubkey;\n        } else {\n            useFeeDiscountPubkey = null;\n        }\n        let openOrdersAddress;\n        if (openOrdersAccounts.length === 0) {\n            let account;\n            if (openOrdersAccount) {\n                account = openOrdersAccount;\n            } else {\n                account = new web3_js_1.Account();\n            }\n            transaction.add(await OpenOrders.makeCreateAccountTransaction(connection, this.address, ownerAddress, account.publicKey, this._programId));\n            openOrdersAddress = account.publicKey;\n            signers.push(account);\n            // refresh the cache of open order accounts on next fetch\n            this._openOrdersAccountsCache[ownerAddress.toBase58()].ts = 0;\n        } else if (openOrdersAccount) {\n            openOrdersAddress = openOrdersAccount.publicKey;\n        } else if (openOrdersAddressKey) {\n            openOrdersAddress = openOrdersAddressKey;\n        } else {\n            openOrdersAddress = openOrdersAccounts[0].address;\n        }\n        let wrappedSolAccount = null;\n        if (payer.equals(ownerAddress)) {\n            if (side === \"buy\" && this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) || side === \"sell\" && this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT)) {\n                wrappedSolAccount = new web3_js_1.Account();\n                let lamports;\n                if (side === \"buy\") {\n                    lamports = Math.round(price * size * 1.01 * web3_js_1.LAMPORTS_PER_SOL);\n                    if (openOrdersAccounts.length > 0) {\n                        lamports -= openOrdersAccounts[0].quoteTokenFree.toNumber();\n                    }\n                } else {\n                    lamports = Math.round(size * web3_js_1.LAMPORTS_PER_SOL);\n                    if (openOrdersAccounts.length > 0) {\n                        lamports -= openOrdersAccounts[0].baseTokenFree.toNumber();\n                    }\n                }\n                lamports = Math.max(lamports, 0) + 1e7;\n                transaction.add(web3_js_1.SystemProgram.createAccount({\n                    fromPubkey: ownerAddress,\n                    newAccountPubkey: wrappedSolAccount.publicKey,\n                    lamports,\n                    space: 165,\n                    programId: token_instructions_1.TOKEN_PROGRAM_ID\n                }));\n                transaction.add(token_instructions_1.initializeAccount({\n                    account: wrappedSolAccount.publicKey,\n                    mint: token_instructions_1.WRAPPED_SOL_MINT,\n                    owner: ownerAddress\n                }));\n                signers.push(wrappedSolAccount);\n            } else {\n                throw new Error(\"Invalid payer account\");\n            }\n        }\n        const placeOrderInstruction = this.makePlaceOrderInstruction(connection, {\n            owner,\n            payer: (_b = wrappedSolAccount === null || wrappedSolAccount === void 0 ? void 0 : wrappedSolAccount.publicKey) !== null && _b !== void 0 ? _b : payer,\n            side,\n            price,\n            size,\n            orderType,\n            clientId,\n            openOrdersAddressKey: openOrdersAddress,\n            feeDiscountPubkey: useFeeDiscountPubkey,\n            selfTradeBehavior,\n            maxTs,\n            replaceIfExists\n        });\n        transaction.add(placeOrderInstruction);\n        if (wrappedSolAccount) {\n            transaction.add(token_instructions_1.closeAccount({\n                source: wrappedSolAccount.publicKey,\n                destination: ownerAddress,\n                owner: ownerAddress\n            }));\n        }\n        return {\n            transaction,\n            signers,\n            payer: owner\n        };\n    }\n    makePlaceOrderInstruction(connection, params) {\n        var _a;\n        const { owner, payer, side, price, size, orderType = \"limit\", clientId, openOrdersAddressKey, openOrdersAccount, feeDiscountPubkey = null } = params;\n        // @ts-ignore\n        const ownerAddress = (_a = owner.publicKey) !== null && _a !== void 0 ? _a : owner;\n        if (this.baseSizeNumberToLots(size).lte(new bn_js_1.default(0))) {\n            throw new Error(\"size too small\");\n        }\n        if (this.priceNumberToLots(price).lte(new bn_js_1.default(0))) {\n            throw new Error(\"invalid price\");\n        }\n        if (this.usesRequestQueue) {\n            return instructions_1.DexInstructions.newOrder({\n                market: this.address,\n                requestQueue: this._decoded.requestQueue,\n                baseVault: this._decoded.baseVault,\n                quoteVault: this._decoded.quoteVault,\n                openOrders: openOrdersAccount ? openOrdersAccount.publicKey : openOrdersAddressKey,\n                owner: ownerAddress,\n                payer,\n                side,\n                limitPrice: this.priceNumberToLots(price),\n                maxQuantity: this.baseSizeNumberToLots(size),\n                orderType,\n                clientId,\n                programId: this._programId,\n                // @ts-ignore\n                feeDiscountPubkey: this.supportsSrmFeeDiscounts ? feeDiscountPubkey : null\n            });\n        } else {\n            return this.makeNewOrderV3Instruction(params);\n        }\n    }\n    makeNewOrderV3Instruction(params) {\n        var _a;\n        const { owner, payer, side, price, size, orderType = \"limit\", clientId, openOrdersAddressKey, openOrdersAccount, feeDiscountPubkey = null, selfTradeBehavior = \"decrementTake\", programId, maxTs, replaceIfExists } = params;\n        // @ts-ignore\n        const ownerAddress = (_a = owner.publicKey) !== null && _a !== void 0 ? _a : owner;\n        return instructions_1.DexInstructions.newOrderV3({\n            market: this.address,\n            bids: this._decoded.bids,\n            asks: this._decoded.asks,\n            requestQueue: this._decoded.requestQueue,\n            eventQueue: this._decoded.eventQueue,\n            baseVault: this._decoded.baseVault,\n            quoteVault: this._decoded.quoteVault,\n            openOrders: openOrdersAccount ? openOrdersAccount.publicKey : openOrdersAddressKey,\n            owner: ownerAddress,\n            payer,\n            side,\n            limitPrice: this.priceNumberToLots(price),\n            maxBaseQuantity: this.baseSizeNumberToLots(size),\n            maxQuoteQuantity: new bn_js_1.default(this._decoded.quoteLotSize.toNumber()).mul(this.baseSizeNumberToLots(size).mul(this.priceNumberToLots(price))),\n            orderType,\n            clientId,\n            programId: programId !== null && programId !== void 0 ? programId : this._programId,\n            selfTradeBehavior,\n            // @ts-ignore\n            feeDiscountPubkey: this.supportsSrmFeeDiscounts ? feeDiscountPubkey : null,\n            // @ts-ignore\n            maxTs,\n            replaceIfExists\n        });\n    }\n    makeReplaceOrdersByClientIdsInstruction(accounts, orders) {\n        var _a, _b;\n        // @ts-ignore\n        const ownerAddress = (_a = accounts.owner.publicKey) !== null && _a !== void 0 ? _a : accounts.owner;\n        return instructions_1.DexInstructions.replaceOrdersByClientIds({\n            market: this.address,\n            bids: this._decoded.bids,\n            asks: this._decoded.asks,\n            requestQueue: this._decoded.requestQueue,\n            eventQueue: this._decoded.eventQueue,\n            baseVault: this._decoded.baseVault,\n            quoteVault: this._decoded.quoteVault,\n            openOrders: accounts.openOrdersAccount ? accounts.openOrdersAccount.publicKey : accounts.openOrdersAddressKey,\n            owner: ownerAddress,\n            payer: accounts.payer,\n            programId: (_b = accounts.programId) !== null && _b !== void 0 ? _b : this._programId,\n            // @ts-ignore\n            feeDiscountPubkey: this.supportsSrmFeeDiscounts ? accounts.feeDiscountPubkey : null,\n            orders: orders.map((order)=>{\n                var _a;\n                return {\n                    side: order.side,\n                    limitPrice: this.priceNumberToLots(order.price),\n                    maxBaseQuantity: this.baseSizeNumberToLots(order.size),\n                    maxQuoteQuantity: new bn_js_1.default(this._decoded.quoteLotSize.toNumber()).mul(this.baseSizeNumberToLots(order.size).mul(this.priceNumberToLots(order.price))),\n                    orderType: order.orderType,\n                    clientId: order.clientId,\n                    programId: (_a = accounts.programId) !== null && _a !== void 0 ? _a : this._programId,\n                    selfTradeBehavior: order.selfTradeBehavior,\n                    // @ts-ignore\n                    maxTs: order.maxTs\n                };\n            })\n        });\n    }\n    async _sendTransaction(connection, transaction, signers) {\n        const signature = await connection.sendTransaction(transaction, signers, {\n            skipPreflight: this._skipPreflight\n        });\n        const { value } = await connection.confirmTransaction(signature, this._commitment);\n        if (value === null || value === void 0 ? void 0 : value.err) {\n            throw new Error(JSON.stringify(value.err));\n        }\n        return signature;\n    }\n    async cancelOrderByClientId(connection, owner, openOrders, clientId) {\n        const transaction = await this.makeCancelOrderByClientIdTransaction(connection, owner.publicKey, openOrders, clientId);\n        return await this._sendTransaction(connection, transaction, [\n            owner\n        ]);\n    }\n    async cancelOrdersByClientIds(connection, owner, openOrders, clientIds) {\n        const transaction = await this.makeCancelOrdersByClientIdsTransaction(connection, owner.publicKey, openOrders, clientIds);\n        return await this._sendTransaction(connection, transaction, [\n            owner\n        ]);\n    }\n    async makeCancelOrderByClientIdTransaction(connection, owner, openOrders, clientId) {\n        const transaction = new web3_js_1.Transaction();\n        if (this.usesRequestQueue) {\n            transaction.add(instructions_1.DexInstructions.cancelOrderByClientId({\n                market: this.address,\n                owner,\n                openOrders,\n                requestQueue: this._decoded.requestQueue,\n                clientId,\n                programId: this._programId\n            }));\n        } else {\n            transaction.add(instructions_1.DexInstructions.cancelOrderByClientIdV2({\n                market: this.address,\n                openOrders,\n                owner,\n                bids: this._decoded.bids,\n                asks: this._decoded.asks,\n                eventQueue: this._decoded.eventQueue,\n                clientId,\n                programId: this._programId\n            }));\n        }\n        return transaction;\n    }\n    async makeCancelOrdersByClientIdsTransaction(connection, owner, openOrders, clientIds) {\n        const transaction = new web3_js_1.Transaction();\n        transaction.add(instructions_1.DexInstructions.cancelOrdersByClientIds({\n            market: this.address,\n            openOrders,\n            owner,\n            bids: this._decoded.bids,\n            asks: this._decoded.asks,\n            eventQueue: this._decoded.eventQueue,\n            clientIds,\n            programId: this._programId\n        }));\n        return transaction;\n    }\n    async cancelOrder(connection, owner, order) {\n        const transaction = await this.makeCancelOrderTransaction(connection, owner.publicKey, order);\n        return await this._sendTransaction(connection, transaction, [\n            owner\n        ]);\n    }\n    async makeCancelOrderTransaction(connection, owner, order) {\n        const transaction = new web3_js_1.Transaction();\n        transaction.add(this.makeCancelOrderInstruction(connection, owner, order));\n        return transaction;\n    }\n    makeCancelOrderInstruction(connection, owner, order) {\n        if (this.usesRequestQueue) {\n            return instructions_1.DexInstructions.cancelOrder({\n                market: this.address,\n                owner,\n                openOrders: order.openOrdersAddress,\n                requestQueue: this._decoded.requestQueue,\n                side: order.side,\n                orderId: order.orderId,\n                openOrdersSlot: order.openOrdersSlot,\n                programId: this._programId\n            });\n        } else {\n            return instructions_1.DexInstructions.cancelOrderV2({\n                market: this.address,\n                owner,\n                openOrders: order.openOrdersAddress,\n                bids: this._decoded.bids,\n                asks: this._decoded.asks,\n                eventQueue: this._decoded.eventQueue,\n                side: order.side,\n                orderId: order.orderId,\n                openOrdersSlot: order.openOrdersSlot,\n                programId: this._programId\n            });\n        }\n    }\n    makeConsumeEventsInstruction(openOrdersAccounts, limit) {\n        return instructions_1.DexInstructions.consumeEvents({\n            market: this.address,\n            eventQueue: this._decoded.eventQueue,\n            coinFee: this._decoded.eventQueue,\n            pcFee: this._decoded.eventQueue,\n            openOrdersAccounts,\n            limit,\n            programId: this._programId\n        });\n    }\n    makeConsumeEventsPermissionedInstruction(openOrdersAccounts, limit) {\n        return instructions_1.DexInstructions.consumeEventsPermissioned({\n            market: this.address,\n            eventQueue: this._decoded.eventQueue,\n            crankAuthority: this._decoded.consumeEventsAuthority,\n            openOrdersAccounts,\n            limit,\n            programId: this._programId\n        });\n    }\n    async settleFunds(connection, owner, openOrders, baseWallet, quoteWallet, referrerQuoteWallet = null) {\n        if (!openOrders.owner.equals(owner.publicKey)) {\n            throw new Error(\"Invalid open orders account\");\n        }\n        if (referrerQuoteWallet && !this.supportsReferralFees) {\n            throw new Error(\"This program ID does not support referrerQuoteWallet\");\n        }\n        const { transaction, signers } = await this.makeSettleFundsTransaction(connection, openOrders, baseWallet, quoteWallet, referrerQuoteWallet);\n        return await this._sendTransaction(connection, transaction, [\n            owner,\n            ...signers\n        ]);\n    }\n    async makeSettleFundsTransaction(connection, openOrders, baseWallet, quoteWallet, referrerQuoteWallet = null) {\n        // @ts-ignore\n        const vaultSigner = await web3_js_1.PublicKey.createProgramAddress([\n            this.address.toBuffer(),\n            this._decoded.vaultSignerNonce.toArrayLike(buffer_1.Buffer, \"le\", 8)\n        ], this._programId);\n        const transaction = new web3_js_1.Transaction();\n        const signers = [];\n        let wrappedSolAccount = null;\n        if (this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && baseWallet.equals(openOrders.owner) || this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && quoteWallet.equals(openOrders.owner)) {\n            wrappedSolAccount = new web3_js_1.Account();\n            transaction.add(web3_js_1.SystemProgram.createAccount({\n                fromPubkey: openOrders.owner,\n                newAccountPubkey: wrappedSolAccount.publicKey,\n                lamports: await connection.getMinimumBalanceForRentExemption(165),\n                space: 165,\n                programId: token_instructions_1.TOKEN_PROGRAM_ID\n            }));\n            transaction.add(token_instructions_1.initializeAccount({\n                account: wrappedSolAccount.publicKey,\n                mint: token_instructions_1.WRAPPED_SOL_MINT,\n                owner: openOrders.owner\n            }));\n            signers.push(wrappedSolAccount);\n        }\n        transaction.add(instructions_1.DexInstructions.settleFunds({\n            market: this.address,\n            openOrders: openOrders.address,\n            owner: openOrders.owner,\n            baseVault: this._decoded.baseVault,\n            quoteVault: this._decoded.quoteVault,\n            baseWallet: baseWallet.equals(openOrders.owner) && wrappedSolAccount ? wrappedSolAccount.publicKey : baseWallet,\n            quoteWallet: quoteWallet.equals(openOrders.owner) && wrappedSolAccount ? wrappedSolAccount.publicKey : quoteWallet,\n            vaultSigner,\n            programId: this._programId,\n            referrerQuoteWallet\n        }));\n        if (wrappedSolAccount) {\n            transaction.add(token_instructions_1.closeAccount({\n                source: wrappedSolAccount.publicKey,\n                destination: openOrders.owner,\n                owner: openOrders.owner\n            }));\n        }\n        return {\n            transaction,\n            signers,\n            payer: openOrders.owner\n        };\n    }\n    async matchOrders(connection, feePayer, limit) {\n        const tx = this.makeMatchOrdersTransaction(limit);\n        return await this._sendTransaction(connection, tx, [\n            feePayer\n        ]);\n    }\n    makeMatchOrdersTransaction(limit) {\n        const tx = new web3_js_1.Transaction();\n        tx.add(instructions_1.DexInstructions.matchOrders({\n            market: this.address,\n            requestQueue: this._decoded.requestQueue,\n            eventQueue: this._decoded.eventQueue,\n            bids: this._decoded.bids,\n            asks: this._decoded.asks,\n            baseVault: this._decoded.baseVault,\n            quoteVault: this._decoded.quoteVault,\n            limit,\n            programId: this._programId\n        }));\n        return tx;\n    }\n    async loadRequestQueue(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.requestQueue));\n        return queue_1.decodeRequestQueue(data);\n    }\n    async loadEventQueue(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.eventQueue));\n        return queue_1.decodeEventQueue(data);\n    }\n    async loadFills(connection, limit = 100) {\n        // TODO: once there's a separate source of fills use that instead\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.eventQueue));\n        const events = queue_1.decodeEventQueue(data, limit);\n        return events.filter((event)=>event.eventFlags.fill && event.nativeQuantityPaid.gtn(0)).map(this.parseFillEvent.bind(this));\n    }\n    parseFillEvent(event) {\n        let size, price, side, priceBeforeFees;\n        if (event.eventFlags.bid) {\n            side = \"buy\";\n            priceBeforeFees = event.eventFlags.maker ? event.nativeQuantityPaid.add(event.nativeFeeOrRebate) : event.nativeQuantityPaid.sub(event.nativeFeeOrRebate);\n            price = divideBnToNumber(priceBeforeFees.mul(this._baseSplTokenMultiplier), this._quoteSplTokenMultiplier.mul(event.nativeQuantityReleased));\n            size = divideBnToNumber(event.nativeQuantityReleased, this._baseSplTokenMultiplier);\n        } else {\n            side = \"sell\";\n            priceBeforeFees = event.eventFlags.maker ? event.nativeQuantityReleased.sub(event.nativeFeeOrRebate) : event.nativeQuantityReleased.add(event.nativeFeeOrRebate);\n            price = divideBnToNumber(priceBeforeFees.mul(this._baseSplTokenMultiplier), this._quoteSplTokenMultiplier.mul(event.nativeQuantityPaid));\n            size = divideBnToNumber(event.nativeQuantityPaid, this._baseSplTokenMultiplier);\n        }\n        return {\n            ...event,\n            side,\n            price,\n            feeCost: this.quoteSplSizeToNumber(event.nativeFeeOrRebate) * (event.eventFlags.maker ? -1 : 1),\n            size\n        };\n    }\n    get _baseSplTokenMultiplier() {\n        return new bn_js_1.default(10).pow(new bn_js_1.default(this._baseSplTokenDecimals));\n    }\n    get _quoteSplTokenMultiplier() {\n        return new bn_js_1.default(10).pow(new bn_js_1.default(this._quoteSplTokenDecimals));\n    }\n    priceLotsToNumber(price) {\n        return divideBnToNumber(price.mul(this._decoded.quoteLotSize).mul(this._baseSplTokenMultiplier), this._decoded.baseLotSize.mul(this._quoteSplTokenMultiplier));\n    }\n    priceNumberToLots(price) {\n        return new bn_js_1.default(Math.round(price * Math.pow(10, this._quoteSplTokenDecimals) * this._decoded.baseLotSize.toNumber() / (Math.pow(10, this._baseSplTokenDecimals) * this._decoded.quoteLotSize.toNumber())));\n    }\n    baseSplSizeToNumber(size) {\n        return divideBnToNumber(size, this._baseSplTokenMultiplier);\n    }\n    quoteSplSizeToNumber(size) {\n        return divideBnToNumber(size, this._quoteSplTokenMultiplier);\n    }\n    baseSizeLotsToNumber(size) {\n        return divideBnToNumber(size.mul(this._decoded.baseLotSize), this._baseSplTokenMultiplier);\n    }\n    baseSizeNumberToLots(size) {\n        const native = new bn_js_1.default(Math.round(size * Math.pow(10, this._baseSplTokenDecimals)));\n        // rounds down to the nearest lot size\n        return native.div(this._decoded.baseLotSize);\n    }\n    quoteSizeLotsToNumber(size) {\n        return divideBnToNumber(size.mul(this._decoded.quoteLotSize), this._quoteSplTokenMultiplier);\n    }\n    quoteSizeNumberToLots(size) {\n        const native = new bn_js_1.default(Math.round(size * Math.pow(10, this._quoteSplTokenDecimals)));\n        // rounds down to the nearest lot size\n        return native.div(this._decoded.quoteLotSize);\n    }\n    get minOrderSize() {\n        return this.baseSizeLotsToNumber(new bn_js_1.default(1));\n    }\n    get tickSize() {\n        return this.priceLotsToNumber(new bn_js_1.default(1));\n    }\n}\nexports.Market = Market;\nexports._OPEN_ORDERS_LAYOUT_V1 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout(\"accountFlags\"),\n    layout_1.publicKeyLayout(\"market\"),\n    layout_1.publicKeyLayout(\"owner\"),\n    // These are in spl-token (i.e. not lot) units\n    layout_1.u64(\"baseTokenFree\"),\n    layout_1.u64(\"baseTokenTotal\"),\n    layout_1.u64(\"quoteTokenFree\"),\n    layout_1.u64(\"quoteTokenTotal\"),\n    layout_1.u128(\"freeSlotBits\"),\n    layout_1.u128(\"isBidBits\"),\n    buffer_layout_1.seq(layout_1.u128(), 128, \"orders\"),\n    buffer_layout_1.seq(layout_1.u64(), 128, \"clientIds\"),\n    buffer_layout_1.blob(7)\n]);\nexports._OPEN_ORDERS_LAYOUT_V2 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout(\"accountFlags\"),\n    layout_1.publicKeyLayout(\"market\"),\n    layout_1.publicKeyLayout(\"owner\"),\n    // These are in spl-token (i.e. not lot) units\n    layout_1.u64(\"baseTokenFree\"),\n    layout_1.u64(\"baseTokenTotal\"),\n    layout_1.u64(\"quoteTokenFree\"),\n    layout_1.u64(\"quoteTokenTotal\"),\n    layout_1.u128(\"freeSlotBits\"),\n    layout_1.u128(\"isBidBits\"),\n    buffer_layout_1.seq(layout_1.u128(), 128, \"orders\"),\n    buffer_layout_1.seq(layout_1.u64(), 128, \"clientIds\"),\n    layout_1.u64(\"referrerRebatesAccrued\"),\n    buffer_layout_1.blob(7)\n]);\nclass OpenOrders {\n    constructor(address, decoded, programId){\n        this.address = address;\n        this._programId = programId;\n        Object.assign(this, decoded);\n    }\n    static getLayout(programId) {\n        if (tokens_and_markets_1.getLayoutVersion(programId) === 1) {\n            return exports._OPEN_ORDERS_LAYOUT_V1;\n        }\n        return exports._OPEN_ORDERS_LAYOUT_V2;\n    }\n    static async findForOwner(connection, ownerAddress, programId) {\n        const filters = [\n            {\n                memcmp: {\n                    offset: this.getLayout(programId).offsetOf(\"owner\"),\n                    bytes: ownerAddress.toBase58()\n                }\n            },\n            {\n                dataSize: this.getLayout(programId).span\n            }\n        ];\n        const accounts = await getFilteredProgramAccounts(connection, programId, filters);\n        return accounts.map(({ publicKey, accountInfo })=>OpenOrders.fromAccountInfo(publicKey, accountInfo, programId));\n    }\n    static async findForMarketAndOwner(connection, marketAddress, ownerAddress, programId) {\n        const filters = [\n            {\n                memcmp: {\n                    offset: this.getLayout(programId).offsetOf(\"market\"),\n                    bytes: marketAddress.toBase58()\n                }\n            },\n            {\n                memcmp: {\n                    offset: this.getLayout(programId).offsetOf(\"owner\"),\n                    bytes: ownerAddress.toBase58()\n                }\n            },\n            {\n                dataSize: this.getLayout(programId).span\n            }\n        ];\n        const accounts = await getFilteredProgramAccounts(connection, programId, filters);\n        return accounts.map(({ publicKey, accountInfo })=>OpenOrders.fromAccountInfo(publicKey, accountInfo, programId));\n    }\n    static async load(connection, address, programId) {\n        const accountInfo = await connection.getAccountInfo(address);\n        if (accountInfo === null) {\n            throw new Error(\"Open orders account not found\");\n        }\n        return OpenOrders.fromAccountInfo(address, accountInfo, programId);\n    }\n    static fromAccountInfo(address, accountInfo, programId) {\n        const { owner, data } = accountInfo;\n        if (!owner.equals(programId)) {\n            throw new Error(\"Address not owned by program\");\n        }\n        const decoded = this.getLayout(programId).decode(data);\n        if (!decoded.accountFlags.initialized || !decoded.accountFlags.openOrders) {\n            throw new Error(\"Invalid open orders account\");\n        }\n        return new OpenOrders(address, decoded, programId);\n    }\n    static async makeCreateAccountTransaction(connection, marketAddress, ownerAddress, newAccountAddress, programId) {\n        return web3_js_1.SystemProgram.createAccount({\n            fromPubkey: ownerAddress,\n            newAccountPubkey: newAccountAddress,\n            lamports: await connection.getMinimumBalanceForRentExemption(this.getLayout(programId).span),\n            space: this.getLayout(programId).span,\n            programId\n        });\n    }\n    get publicKey() {\n        return this.address;\n    }\n}\nexports.OpenOrders = OpenOrders;\nexports.ORDERBOOK_LAYOUT = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout(\"accountFlags\"),\n    slab_1.SLAB_LAYOUT.replicate(\"slab\"),\n    buffer_layout_1.blob(7)\n]);\nclass Orderbook {\n    constructor(market, accountFlags, slab){\n        if (!accountFlags.initialized || !(accountFlags.bids ^ accountFlags.asks)) {\n            throw new Error(\"Invalid orderbook\");\n        }\n        this.market = market;\n        this.isBids = accountFlags.bids;\n        this.slab = slab;\n    }\n    static get LAYOUT() {\n        return exports.ORDERBOOK_LAYOUT;\n    }\n    static decode(market, buffer) {\n        const { accountFlags, slab } = exports.ORDERBOOK_LAYOUT.decode(buffer);\n        return new Orderbook(market, accountFlags, slab);\n    }\n    getL2(depth) {\n        const descending = this.isBids;\n        const levels = []; // (price, size)\n        for (const { key, quantity } of this.slab.items(descending)){\n            const price = getPriceFromKey(key);\n            if (levels.length > 0 && levels[levels.length - 1][0].eq(price)) {\n                levels[levels.length - 1][1] = levels[levels.length - 1][1].add(quantity);\n            } else if (levels.length === depth) {\n                break;\n            } else {\n                levels.push([\n                    price,\n                    quantity\n                ]);\n            }\n        }\n        return levels.map(([priceLots, sizeLots])=>[\n                this.market.priceLotsToNumber(priceLots),\n                this.market.baseSizeLotsToNumber(sizeLots),\n                priceLots,\n                sizeLots\n            ]);\n    }\n    [Symbol.iterator]() {\n        return this.items(false);\n    }\n    *items(descending = false) {\n        for (const { key, ownerSlot, owner, quantity, feeTier, clientOrderId } of this.slab.items(descending)){\n            const price = getPriceFromKey(key);\n            yield {\n                orderId: key,\n                clientId: clientOrderId,\n                openOrdersAddress: owner,\n                openOrdersSlot: ownerSlot,\n                feeTier,\n                price: this.market.priceLotsToNumber(price),\n                priceLots: price,\n                size: this.market.baseSizeLotsToNumber(quantity),\n                sizeLots: quantity,\n                side: this.isBids ? \"buy\" : \"sell\"\n            };\n        }\n    }\n}\nexports.Orderbook = Orderbook;\nfunction getPriceFromKey(key) {\n    return key.ushrn(64);\n}\nfunction divideBnToNumber(numerator, denominator) {\n    const quotient = numerator.div(denominator).toNumber();\n    const rem = numerator.umod(denominator);\n    const gcd = rem.gcd(denominator);\n    return quotient + rem.div(gcd).toNumber() / denominator.div(gcd).toNumber();\n}\nconst MINT_LAYOUT = buffer_layout_1.struct([\n    buffer_layout_1.blob(44),\n    buffer_layout_1.u8(\"decimals\"),\n    buffer_layout_1.blob(37)\n]);\nasync function getMintDecimals(connection, mint) {\n    if (mint.equals(token_instructions_1.WRAPPED_SOL_MINT)) {\n        return 9;\n    }\n    const { data } = throwIfNull(await connection.getAccountInfo(mint), \"mint not found\");\n    const { decimals } = MINT_LAYOUT.decode(data);\n    return decimals;\n}\nexports.getMintDecimals = getMintDecimals;\nasync function getFilteredProgramAccounts(connection, programId, filters) {\n    // @ts-ignore\n    const resp = await connection._rpcRequest(\"getProgramAccounts\", [\n        programId.toBase58(),\n        {\n            commitment: connection.commitment,\n            filters,\n            encoding: \"base64\"\n        }\n    ]);\n    if (resp.error) {\n        throw new Error(resp.error.message);\n    }\n    return resp.result.map(({ pubkey, account: { data, executable, owner, lamports } })=>({\n            publicKey: new web3_js_1.PublicKey(pubkey),\n            accountInfo: {\n                data: buffer_1.Buffer.from(data[0], \"base64\"),\n                executable,\n                owner: new web3_js_1.PublicKey(owner),\n                lamports\n            }\n        }));\n}\nfunction throwIfNull(value, message = \"account not found\") {\n    if (value === null) {\n        throw new Error(message);\n    }\n    return value;\n} //# sourceMappingURL=market.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/market.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/queue.js":
/*!********************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/queue.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EVENT_QUEUE_LAYOUT = exports.REQUEST_QUEUE_LAYOUT = exports.decodeEventQueue = exports.decodeRequestQueue = exports.decodeEventsSince = void 0;\nconst buffer_layout_1 = __webpack_require__(/*! buffer-layout */ \"(ssr)/./node_modules/buffer-layout/lib/Layout.js\");\nconst layout_1 = __webpack_require__(/*! ./layout */ \"(ssr)/./node_modules/@project-serum/serum/lib/layout.js\");\nconst REQUEST_QUEUE_HEADER = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout(\"accountFlags\"),\n    buffer_layout_1.u32(\"head\"),\n    layout_1.zeros(4),\n    buffer_layout_1.u32(\"count\"),\n    layout_1.zeros(4),\n    buffer_layout_1.u32(\"nextSeqNum\"),\n    layout_1.zeros(4)\n]);\nconst REQUEST_FLAGS = buffer_layout_1.bits(buffer_layout_1.u8(), false, \"requestFlags\");\nREQUEST_FLAGS.addBoolean(\"newOrder\");\nREQUEST_FLAGS.addBoolean(\"cancelOrder\");\nREQUEST_FLAGS.addBoolean(\"bid\");\nREQUEST_FLAGS.addBoolean(\"postOnly\");\nREQUEST_FLAGS.addBoolean(\"ioc\");\nconst REQUEST = buffer_layout_1.struct([\n    REQUEST_FLAGS,\n    buffer_layout_1.u8(\"openOrdersSlot\"),\n    buffer_layout_1.u8(\"feeTier\"),\n    buffer_layout_1.blob(5),\n    layout_1.u64(\"maxBaseSizeOrCancelId\"),\n    layout_1.u64(\"nativeQuoteQuantityLocked\"),\n    layout_1.u128(\"orderId\"),\n    layout_1.publicKeyLayout(\"openOrders\"),\n    layout_1.u64(\"clientOrderId\")\n]);\nconst EVENT_QUEUE_HEADER = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout(\"accountFlags\"),\n    buffer_layout_1.u32(\"head\"),\n    layout_1.zeros(4),\n    buffer_layout_1.u32(\"count\"),\n    layout_1.zeros(4),\n    buffer_layout_1.u32(\"seqNum\"),\n    layout_1.zeros(4)\n]);\nconst EVENT_FLAGS = buffer_layout_1.bits(buffer_layout_1.u8(), false, \"eventFlags\");\nEVENT_FLAGS.addBoolean(\"fill\");\nEVENT_FLAGS.addBoolean(\"out\");\nEVENT_FLAGS.addBoolean(\"bid\");\nEVENT_FLAGS.addBoolean(\"maker\");\nconst EVENT = buffer_layout_1.struct([\n    EVENT_FLAGS,\n    buffer_layout_1.u8(\"openOrdersSlot\"),\n    buffer_layout_1.u8(\"feeTier\"),\n    buffer_layout_1.blob(5),\n    layout_1.u64(\"nativeQuantityReleased\"),\n    layout_1.u64(\"nativeQuantityPaid\"),\n    layout_1.u64(\"nativeFeeOrRebate\"),\n    layout_1.u128(\"orderId\"),\n    layout_1.publicKeyLayout(\"openOrders\"),\n    layout_1.u64(\"clientOrderId\")\n]);\nfunction decodeQueueItem(headerLayout, nodeLayout, buffer, nodeIndex) {\n    return nodeLayout.decode(buffer, headerLayout.span + nodeIndex * nodeLayout.span);\n}\nfunction decodeQueue(headerLayout, nodeLayout, buffer, history) {\n    const header = headerLayout.decode(buffer);\n    const allocLen = Math.floor((buffer.length - headerLayout.span) / nodeLayout.span);\n    const nodes = [];\n    if (history) {\n        for(let i = 0; i < Math.min(history, allocLen); ++i){\n            const nodeIndex = (header.head + header.count + allocLen - 1 - i) % allocLen;\n            nodes.push(decodeQueueItem(headerLayout, nodeLayout, buffer, nodeIndex));\n        }\n    } else {\n        for(let i = 0; i < header.count; ++i){\n            const nodeIndex = (header.head + i) % allocLen;\n            nodes.push(decodeQueueItem(headerLayout, nodeLayout, buffer, nodeIndex));\n        }\n    }\n    return {\n        header,\n        nodes\n    };\n}\nfunction decodeEventsSince(buffer, lastSeqNum) {\n    const header = EVENT_QUEUE_HEADER.decode(buffer);\n    const allocLen = Math.floor((buffer.length - EVENT_QUEUE_HEADER.span) / EVENT.span);\n    // calculate number of missed events\n    // account for u32 & ringbuffer overflows\n    const modulo32Uint = 0x100000000;\n    let missedEvents = (header.seqNum - lastSeqNum + modulo32Uint) % modulo32Uint;\n    if (missedEvents > allocLen) {\n        missedEvents = allocLen - 1;\n    }\n    const startSeq = (header.seqNum - missedEvents + modulo32Uint) % modulo32Uint;\n    // define boundary indexes in ring buffer [start;end)\n    const endIndex = (header.head + header.count) % allocLen;\n    const startIndex = (endIndex - missedEvents + allocLen) % allocLen;\n    const results = [];\n    for(let i = 0; i < missedEvents; ++i){\n        const nodeIndex = (startIndex + i) % allocLen;\n        const event = decodeQueueItem(EVENT_QUEUE_HEADER, EVENT, buffer, nodeIndex);\n        event.seqNum = (startSeq + i) % modulo32Uint;\n        results.push(event);\n    }\n    return results;\n}\nexports.decodeEventsSince = decodeEventsSince;\nfunction decodeRequestQueue(buffer, history) {\n    const { header, nodes } = decodeQueue(REQUEST_QUEUE_HEADER, REQUEST, buffer, history);\n    if (!header.accountFlags.initialized || !header.accountFlags.requestQueue) {\n        throw new Error(\"Invalid requests queue\");\n    }\n    return nodes;\n}\nexports.decodeRequestQueue = decodeRequestQueue;\nfunction decodeEventQueue(buffer, history) {\n    const { header, nodes } = decodeQueue(EVENT_QUEUE_HEADER, EVENT, buffer, history);\n    if (!header.accountFlags.initialized || !header.accountFlags.eventQueue) {\n        throw new Error(\"Invalid events queue\");\n    }\n    return nodes;\n}\nexports.decodeEventQueue = decodeEventQueue;\nexports.REQUEST_QUEUE_LAYOUT = {\n    HEADER: REQUEST_QUEUE_HEADER,\n    NODE: REQUEST\n};\nexports.EVENT_QUEUE_LAYOUT = {\n    HEADER: EVENT_QUEUE_HEADER,\n    NODE: EVENT\n}; //# sourceMappingURL=queue.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/queue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/slab.js":
/*!*******************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/slab.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Slab = exports.SLAB_LAYOUT = void 0;\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\nconst buffer_layout_1 = __webpack_require__(/*! buffer-layout */ \"(ssr)/./node_modules/buffer-layout/lib/Layout.js\");\nconst layout_1 = __webpack_require__(/*! ./layout */ \"(ssr)/./node_modules/@project-serum/serum/lib/layout.js\");\nconst SLAB_HEADER_LAYOUT = buffer_layout_1.struct([\n    // Number of modified slab nodes\n    buffer_layout_1.u32(\"bumpIndex\"),\n    layout_1.zeros(4),\n    // Linked list of unused nodes\n    buffer_layout_1.u32(\"freeListLen\"),\n    layout_1.zeros(4),\n    buffer_layout_1.u32(\"freeListHead\"),\n    buffer_layout_1.u32(\"root\"),\n    buffer_layout_1.u32(\"leafCount\"),\n    layout_1.zeros(4)\n], \"header\");\nconst SLAB_NODE_LAYOUT = buffer_layout_1.union(buffer_layout_1.u32(\"tag\"), buffer_layout_1.blob(68), \"node\");\nSLAB_NODE_LAYOUT.addVariant(0, buffer_layout_1.struct([]), \"uninitialized\");\nSLAB_NODE_LAYOUT.addVariant(1, buffer_layout_1.struct([\n    // Only the first prefixLen high-order bits of key are meaningful\n    buffer_layout_1.u32(\"prefixLen\"),\n    layout_1.u128(\"key\"),\n    buffer_layout_1.seq(buffer_layout_1.u32(), 2, \"children\")\n]), \"innerNode\");\nSLAB_NODE_LAYOUT.addVariant(2, buffer_layout_1.struct([\n    buffer_layout_1.u8(\"ownerSlot\"),\n    buffer_layout_1.u8(\"feeTier\"),\n    buffer_layout_1.blob(2),\n    layout_1.u128(\"key\"),\n    layout_1.publicKeyLayout(\"owner\"),\n    layout_1.u64(\"quantity\"),\n    layout_1.u64(\"clientOrderId\")\n]), \"leafNode\");\nSLAB_NODE_LAYOUT.addVariant(3, buffer_layout_1.struct([\n    buffer_layout_1.u32(\"next\")\n]), \"freeNode\");\nSLAB_NODE_LAYOUT.addVariant(4, buffer_layout_1.struct([]), \"lastFreeNode\");\nexports.SLAB_LAYOUT = buffer_layout_1.struct([\n    SLAB_HEADER_LAYOUT,\n    buffer_layout_1.seq(SLAB_NODE_LAYOUT, buffer_layout_1.offset(SLAB_HEADER_LAYOUT.layoutFor(\"bumpIndex\"), SLAB_HEADER_LAYOUT.offsetOf(\"bumpIndex\") - SLAB_HEADER_LAYOUT.span), \"nodes\")\n]);\nclass Slab {\n    constructor(header, nodes){\n        this.header = header;\n        this.nodes = nodes;\n    }\n    static decode(buffer) {\n        return exports.SLAB_LAYOUT.decode(buffer);\n    }\n    get(searchKey) {\n        if (this.header.leafCount === 0) {\n            return null;\n        }\n        if (!(searchKey instanceof bn_js_1.default)) {\n            searchKey = new bn_js_1.default(searchKey);\n        }\n        let index = this.header.root;\n        while(true){\n            const { leafNode, innerNode } = this.nodes[index];\n            if (leafNode) {\n                if (leafNode.key.eq(searchKey)) {\n                    return leafNode;\n                }\n                return null;\n            } else if (innerNode) {\n                if (!innerNode.key.xor(searchKey).iushrn(128 - innerNode.prefixLen).isZero()) {\n                    return null;\n                }\n                index = innerNode.children[searchKey.testn(128 - innerNode.prefixLen - 1) ? 1 : 0];\n            } else {\n                throw new Error(\"Invalid slab\");\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this.items(false);\n    }\n    *items(descending = false) {\n        if (this.header.leafCount === 0) {\n            return;\n        }\n        const stack = [\n            this.header.root\n        ];\n        while(stack.length > 0){\n            const index = stack.pop();\n            const { leafNode, innerNode } = this.nodes[index];\n            if (leafNode) {\n                yield leafNode;\n            } else if (innerNode) {\n                if (descending) {\n                    stack.push(innerNode.children[0], innerNode.children[1]);\n                } else {\n                    stack.push(innerNode.children[1], innerNode.children[0]);\n                }\n            }\n        }\n    }\n}\nexports.Slab = Slab;\nlayout_1.setLayoutDecoder(exports.SLAB_LAYOUT, ({ header, nodes })=>new Slab(header, nodes)); //# sourceMappingURL=slab.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/slab.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/token-instructions.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/token-instructions.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.closeAccount = exports.mintTo = exports.setAuthority = exports.revoke = exports.approve = exports.transfer = exports.initializeAccount = exports.initializeMint = exports.decodeTokenInstructionData = exports.SRM_DECIMALS = exports.SRM_MINT = exports.MSRM_DECIMALS = exports.MSRM_MINT = exports.WRAPPED_SOL_MINT = exports.TOKEN_PROGRAM_ID = exports.CLOSE_ACCOUNT_OWNER_INDEX = exports.CLOSE_ACCOUNT_DESTINATION_INDEX = exports.CLOSE_ACCOUNT_SOURCE_INDEX = exports.TRANSFER_OWNER_INDEX = exports.TRANSFER_DESTINATION_INDEX = exports.TRANSFER_SOURCE_INDEX = exports.INITIALIZE_ACCOUNT_OWNER_INDEX = exports.INITIALIZE_ACCOUNT_MINT_INDEX = exports.INITIALIZE_ACCOUNT_ACCOUNT_INDEX = void 0;\nconst BufferLayout = __importStar(__webpack_require__(/*! buffer-layout */ \"(ssr)/./node_modules/buffer-layout/lib/Layout.js\"));\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst layout_1 = __webpack_require__(/*! ./layout */ \"(ssr)/./node_modules/@project-serum/serum/lib/layout.js\");\n// NOTE: Update these if the position of arguments for the initializeAccount instruction changes\nexports.INITIALIZE_ACCOUNT_ACCOUNT_INDEX = 0;\nexports.INITIALIZE_ACCOUNT_MINT_INDEX = 1;\nexports.INITIALIZE_ACCOUNT_OWNER_INDEX = 2;\n// NOTE: Update these if the position of arguments for the transfer instruction changes\nexports.TRANSFER_SOURCE_INDEX = 0;\nexports.TRANSFER_DESTINATION_INDEX = 1;\nexports.TRANSFER_OWNER_INDEX = 2;\n// NOTE: Update these if the position of arguments for the closeAccount instruction changes\nexports.CLOSE_ACCOUNT_SOURCE_INDEX = 0;\nexports.CLOSE_ACCOUNT_DESTINATION_INDEX = 1;\nexports.CLOSE_ACCOUNT_OWNER_INDEX = 2;\nexports.TOKEN_PROGRAM_ID = new web3_js_1.PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\nexports.WRAPPED_SOL_MINT = new web3_js_1.PublicKey(\"So11111111111111111111111111111111111111112\");\nexports.MSRM_MINT = new web3_js_1.PublicKey(\"MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L\");\nexports.MSRM_DECIMALS = 0;\nexports.SRM_MINT = new web3_js_1.PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\nexports.SRM_DECIMALS = 6;\nconst LAYOUT = BufferLayout.union(BufferLayout.u8(\"instruction\"));\nLAYOUT.addVariant(0, BufferLayout.struct([\n    BufferLayout.u8(\"decimals\"),\n    layout_1.publicKeyLayout(\"mintAuthority\"),\n    BufferLayout.u8(\"freezeAuthorityOption\"),\n    layout_1.publicKeyLayout(\"freezeAuthority\")\n]), \"initializeMint\");\nLAYOUT.addVariant(1, BufferLayout.struct([]), \"initializeAccount\");\nLAYOUT.addVariant(3, BufferLayout.struct([\n    BufferLayout.nu64(\"amount\")\n]), \"transfer\");\nLAYOUT.addVariant(4, BufferLayout.struct([\n    BufferLayout.nu64(\"amount\")\n]), \"approve\");\nLAYOUT.addVariant(5, BufferLayout.struct([]), \"revoke\");\nLAYOUT.addVariant(6, BufferLayout.struct([\n    BufferLayout.u8(\"authorityType\"),\n    BufferLayout.u8(\"newAuthorityOption\"),\n    layout_1.publicKeyLayout(\"newAuthority\")\n]), \"setAuthority\");\nLAYOUT.addVariant(7, BufferLayout.struct([\n    BufferLayout.nu64(\"amount\")\n]), \"mintTo\");\nLAYOUT.addVariant(8, BufferLayout.struct([\n    BufferLayout.nu64(\"amount\")\n]), \"burn\");\nLAYOUT.addVariant(9, BufferLayout.struct([]), \"closeAccount\");\nconst instructionMaxSpan = Math.max(...Object.values(LAYOUT.registry).map((r)=>r.span));\nfunction encodeTokenInstructionData(instruction) {\n    const b = Buffer.alloc(instructionMaxSpan);\n    const span = LAYOUT.encode(instruction, b);\n    return b.slice(0, span);\n}\nfunction decodeTokenInstructionData(instruction) {\n    return LAYOUT.decode(instruction);\n}\nexports.decodeTokenInstructionData = decodeTokenInstructionData;\nfunction initializeMint({ mint, decimals, mintAuthority, freezeAuthority = null }) {\n    const keys = [\n        {\n            pubkey: mint,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false\n        }\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            initializeMint: {\n                decimals,\n                mintAuthority,\n                freezeAuthorityOption: !!freezeAuthority,\n                freezeAuthority: freezeAuthority || new web3_js_1.PublicKey(0)\n            }\n        }),\n        programId: exports.TOKEN_PROGRAM_ID\n    });\n}\nexports.initializeMint = initializeMint;\nfunction initializeAccount({ account, mint, owner }) {\n    const keys = [\n        {\n            pubkey: account,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: mint,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: owner,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false\n        }\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            initializeAccount: {}\n        }),\n        programId: exports.TOKEN_PROGRAM_ID\n    });\n}\nexports.initializeAccount = initializeAccount;\nfunction transfer({ source, destination, amount, owner }) {\n    const keys = [\n        {\n            pubkey: source,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: destination,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: owner,\n            isSigner: true,\n            isWritable: false\n        }\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            transfer: {\n                amount\n            }\n        }),\n        programId: exports.TOKEN_PROGRAM_ID\n    });\n}\nexports.transfer = transfer;\nfunction approve({ source, delegate, amount, owner }) {\n    const keys = [\n        {\n            pubkey: source,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: delegate,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: owner,\n            isSigner: true,\n            isWritable: false\n        }\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            approve: {\n                amount\n            }\n        }),\n        programId: exports.TOKEN_PROGRAM_ID\n    });\n}\nexports.approve = approve;\nfunction revoke({ source, owner }) {\n    const keys = [\n        {\n            pubkey: source,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: owner,\n            isSigner: true,\n            isWritable: false\n        }\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            revoke: {}\n        }),\n        programId: exports.TOKEN_PROGRAM_ID\n    });\n}\nexports.revoke = revoke;\nfunction setAuthority({ target, currentAuthority, newAuthority, authorityType }) {\n    const keys = [\n        {\n            pubkey: target,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: currentAuthority,\n            isSigner: true,\n            isWritable: false\n        }\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            setAuthority: {\n                authorityType,\n                newAuthorityOption: !!newAuthority,\n                newAuthority\n            }\n        }),\n        programId: exports.TOKEN_PROGRAM_ID\n    });\n}\nexports.setAuthority = setAuthority;\nfunction mintTo({ mint, destination, amount, mintAuthority }) {\n    const keys = [\n        {\n            pubkey: mint,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: destination,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: mintAuthority,\n            isSigner: true,\n            isWritable: false\n        }\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            mintTo: {\n                amount\n            }\n        }),\n        programId: exports.TOKEN_PROGRAM_ID\n    });\n}\nexports.mintTo = mintTo;\nfunction closeAccount({ source, destination, owner }) {\n    const keys = [\n        {\n            pubkey: source,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: destination,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: owner,\n            isSigner: true,\n            isWritable: false\n        }\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            closeAccount: {}\n        }),\n        programId: exports.TOKEN_PROGRAM_ID\n    });\n}\nexports.closeAccount = closeAccount; //# sourceMappingURL=token-instructions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/token-instructions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/tokens_and_markets.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/tokens_and_markets.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MARKETS = exports.TOKEN_MINTS = exports.getLayoutVersion = exports.PROGRAM_LAYOUT_VERSIONS = void 0;\nconst web3_js_1 = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nconst markets_json_1 = __importDefault(__webpack_require__(/*! ./markets.json */ \"(ssr)/./node_modules/@project-serum/serum/lib/markets.json\"));\nconst token_mints_json_1 = __importDefault(__webpack_require__(/*! ./token-mints.json */ \"(ssr)/./node_modules/@project-serum/serum/lib/token-mints.json\"));\nexports.PROGRAM_LAYOUT_VERSIONS = {\n    \"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn\": 1,\n    BJ3jrUzddfuSrZHXSCxMUUQsjKEyLmuuyZebkcaFp2fg: 1,\n    EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o: 2,\n    \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\": 3\n};\nfunction getLayoutVersion(programId) {\n    return exports.PROGRAM_LAYOUT_VERSIONS[programId.toString()] || 3;\n}\nexports.getLayoutVersion = getLayoutVersion;\nexports.TOKEN_MINTS = token_mints_json_1.default.map((mint)=>{\n    return {\n        address: new web3_js_1.PublicKey(mint.address),\n        name: mint.name\n    };\n});\nexports.MARKETS = markets_json_1.default.map((market)=>{\n    return {\n        address: new web3_js_1.PublicKey(market.address),\n        name: market.name,\n        programId: new web3_js_1.PublicKey(market.programId),\n        deprecated: market.deprecated\n    };\n}); //# sourceMappingURL=tokens_and_markets.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb2plY3Qtc2VydW0vc2VydW0vbGliL3Rva2Vuc19hbmRfbWFya2V0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHQSxtQkFBbUIsR0FBR0Esd0JBQXdCLEdBQUdBLCtCQUErQixHQUFHLEtBQUs7QUFDMUcsTUFBTU0sWUFBWUMsbUJBQU9BLENBQUMsOEVBQWlCO0FBQzNDLE1BQU1DLGlCQUFpQmIsZ0JBQWdCWSxtQkFBT0EsQ0FBQyxrRkFBZ0I7QUFDL0QsTUFBTUUscUJBQXFCZCxnQkFBZ0JZLG1CQUFPQSxDQUFDLDBGQUFvQjtBQUN2RVAsK0JBQStCLEdBQUc7SUFDOUIsZ0RBQWdEO0lBQ2hEVSw4Q0FBOEM7SUFDOUNDLDhDQUE4QztJQUM5QyxnREFBZ0Q7QUFDcEQ7QUFDQSxTQUFTUCxpQkFBaUJRLFNBQVM7SUFDL0IsT0FBT1osUUFBUUssdUJBQXVCLENBQUNPLFVBQVVDLFFBQVEsR0FBRyxJQUFJO0FBQ3BFO0FBQ0FiLHdCQUF3QixHQUFHSTtBQUMzQkosbUJBQW1CLEdBQUdTLG1CQUFtQkssT0FBTyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0M7SUFDbEQsT0FBTztRQUNIQyxTQUFTLElBQUlYLFVBQVVZLFNBQVMsQ0FBQ0YsS0FBS0MsT0FBTztRQUM3Q0UsTUFBTUgsS0FBS0csSUFBSTtJQUNuQjtBQUNKO0FBQ0FuQixlQUFlLEdBQUdRLGVBQWVNLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQUNLO0lBQzFDLE9BQU87UUFDSEgsU0FBUyxJQUFJWCxVQUFVWSxTQUFTLENBQUNFLE9BQU9ILE9BQU87UUFDL0NFLE1BQU1DLE9BQU9ELElBQUk7UUFDakJQLFdBQVcsSUFBSU4sVUFBVVksU0FBUyxDQUFDRSxPQUFPUixTQUFTO1FBQ25EUyxZQUFZRCxPQUFPQyxVQUFVO0lBQ2pDO0FBQ0osSUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcmlmdC10cmFkaW5nLXVpLy4vbm9kZV9tb2R1bGVzL0Bwcm9qZWN0LXNlcnVtL3NlcnVtL2xpYi90b2tlbnNfYW5kX21hcmtldHMuanM/MzA2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTUFSS0VUUyA9IGV4cG9ydHMuVE9LRU5fTUlOVFMgPSBleHBvcnRzLmdldExheW91dFZlcnNpb24gPSBleHBvcnRzLlBST0dSQU1fTEFZT1VUX1ZFUlNJT05TID0gdm9pZCAwO1xuY29uc3Qgd2ViM19qc18xID0gcmVxdWlyZShcIkBzb2xhbmEvd2ViMy5qc1wiKTtcbmNvbnN0IG1hcmtldHNfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcmtldHMuanNvblwiKSk7XG5jb25zdCB0b2tlbl9taW50c19qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdG9rZW4tbWludHMuanNvblwiKSk7XG5leHBvcnRzLlBST0dSQU1fTEFZT1VUX1ZFUlNJT05TID0ge1xuICAgICc0Y2ttRGdHZHhRb1BETFVrRFQzdkhnU0FrekEzUVJkTnE1eXd3WTRzVVNKbic6IDEsXG4gICAgQkozanJVemRkZnVTclpIWFNDeE1VVVFzaktFeUxtdXV5WmVia2NhRnAyZmc6IDEsXG4gICAgRVVxb2p3V0EycmQxOUZacnplQm5jSnNtMzhKbTFoRWhFM3pzbVgzYlJjMm86IDIsXG4gICAgJzl4UWVXdkc4MTZiVXg5RVBqSG1hVDIzeXZWTTJaV2JycnBaYjlQdXNWRmluJzogMyxcbn07XG5mdW5jdGlvbiBnZXRMYXlvdXRWZXJzaW9uKHByb2dyYW1JZCkge1xuICAgIHJldHVybiBleHBvcnRzLlBST0dSQU1fTEFZT1VUX1ZFUlNJT05TW3Byb2dyYW1JZC50b1N0cmluZygpXSB8fCAzO1xufVxuZXhwb3J0cy5nZXRMYXlvdXRWZXJzaW9uID0gZ2V0TGF5b3V0VmVyc2lvbjtcbmV4cG9ydHMuVE9LRU5fTUlOVFMgPSB0b2tlbl9taW50c19qc29uXzEuZGVmYXVsdC5tYXAoKG1pbnQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRyZXNzOiBuZXcgd2ViM19qc18xLlB1YmxpY0tleShtaW50LmFkZHJlc3MpLFxuICAgICAgICBuYW1lOiBtaW50Lm5hbWUsXG4gICAgfTtcbn0pO1xuZXhwb3J0cy5NQVJLRVRTID0gbWFya2V0c19qc29uXzEuZGVmYXVsdC5tYXAoKG1hcmtldCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZHJlc3M6IG5ldyB3ZWIzX2pzXzEuUHVibGljS2V5KG1hcmtldC5hZGRyZXNzKSxcbiAgICAgICAgbmFtZTogbWFya2V0Lm5hbWUsXG4gICAgICAgIHByb2dyYW1JZDogbmV3IHdlYjNfanNfMS5QdWJsaWNLZXkobWFya2V0LnByb2dyYW1JZCksXG4gICAgICAgIGRlcHJlY2F0ZWQ6IG1hcmtldC5kZXByZWNhdGVkLFxuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2Vuc19hbmRfbWFya2V0cy5qcy5tYXAiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTUFSS0VUUyIsIlRPS0VOX01JTlRTIiwiZ2V0TGF5b3V0VmVyc2lvbiIsIlBST0dSQU1fTEFZT1VUX1ZFUlNJT05TIiwid2ViM19qc18xIiwicmVxdWlyZSIsIm1hcmtldHNfanNvbl8xIiwidG9rZW5fbWludHNfanNvbl8xIiwiQkozanJVemRkZnVTclpIWFNDeE1VVVFzaktFeUxtdXV5WmVia2NhRnAyZmciLCJFVXFvandXQTJyZDE5RlpyemVCbmNKc20zOEptMWhFaEUzenNtWDNiUmMybyIsInByb2dyYW1JZCIsInRvU3RyaW5nIiwiZGVmYXVsdCIsIm1hcCIsIm1pbnQiLCJhZGRyZXNzIiwiUHVibGljS2V5IiwibmFtZSIsIm1hcmtldCIsImRlcHJlY2F0ZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@project-serum/serum/lib/tokens_and_markets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/markets.json":
/*!************************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/markets.json ***!
  \************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('[{"address":"B37pZmwrwXHjpgvd9hHDAx1yeDsNevTnbbrN9W12BoGK","deprecated":true,"name":"soALEPH/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"CAgAeMD7quTdnr6RPa7JySQpjf3irAmefYNdTb6anemq","deprecated":true,"name":"BTC/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"ASKiV944nKg1W9vsf7hf3fTsjawK6DwLwrnB2LH9n61c","deprecated":true,"name":"soETH/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"Cdp72gDcYMCLLk3aDkPxjeiirKoFqK38ECm8Ywvk94Wi","deprecated":true,"name":"SOL/soUSDC","programId":"BJ3jrUzddfuSrZHXSCxMUUQsjKEyLmuuyZebkcaFp2fg"},{"address":"68J6nkWToik6oM9rTatKSR5ibVSykAtzftBUEAvpRsys","deprecated":true,"name":"SRM/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"8Jzed8Fafu1RU1CQDWdiETSrqAJy1ukZ5JL6Pma3p3a2","deprecated":true,"name":"SRM/SOL","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"9wDmxsfwaDb2ysmZpBLzxKzoWrF1zHzBN7PV5EmJe19R","deprecated":true,"name":"soSUSHI/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"GbQSffne1NcJbS4jsewZEpRGYVR4RNnuVUN8Ht6vAGb6","deprecated":true,"name":"soSXP/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"7kgkDyW7dmyMeP8KFXzbcUZz1R2WHsovDZ7n3ihZuNDS","deprecated":true,"name":"MSRM/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"FZqrBXz7ADGsmDf1TM9YgysPUfvtG8rJiNUrqDpHc9Au","deprecated":true,"name":"soFTT/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"FJg9FUtbN3fg3YFbMCFiZKjGh5Bn4gtzxZmtxFzmz9kT","deprecated":true,"name":"soYFI/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"7GZ59DMgJ7D6dfoJTpszPayTRyua9jwcaGJXaRMMF1my","deprecated":true,"name":"soLINK/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"uPNcBgFhrLW3FtvyYYbBUi53BBEQf9e4NPgwxaLu5Hn","deprecated":true,"name":"soHGET/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"3puWJFZyCso14EdxhywjD7xqyTarpsULx483mzvqxQRW","deprecated":true,"name":"soCREAM/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"8Ae7Uhigx8k4fKdJG7irdPCVDZLvWsJfeTH2t5fr3TVD","deprecated":true,"name":"soUBXT/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"Hze5AUX4Qp1cTujiJ4CsAMRGn4g6ZpgXsmptFn3xxhWg","deprecated":true,"name":"soHNT/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"FJq4HX3bUSgF3yQZ8ADALtJYfAyr9fz36SNG18hc3dgF","deprecated":true,"name":"soFRONT/soUSDC","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"BZMuoQ2i2noNUXMdrRDivc7MwjGspNJTCfZkdHMwK18T","deprecated":true,"name":"soALEPH/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"5LgJphS6D5zXwUVPU7eCryDBkyta3AidrJ5vjNU6BcGW","deprecated":true,"name":"BTC/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"DmEDKZPXXkWgaYiKgWws2ZXWWKCh41eryDPRVD4zKnD9","deprecated":true,"name":"soETH/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"EBFTQNg2QjyxV7WDDenoLbfLLXLcbSz6w1YrdTCGPWT5","deprecated":true,"name":"SOL/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"8YmQZRXGizZXYPCDmxgjwB8X8XN4PZG7MMwNg76iAmPZ","deprecated":true,"name":"SRM/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"9vFuX2BizwinWjkZLQTmThDcNMFEcY3wVXYuqnRQtcD","deprecated":true,"name":"soSUSHI/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"C5NReXAeQhfjiDCGPFj1UUmDxDqF8v2CUVKoYuQqb4eW","deprecated":true,"name":"soSXP/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"58H7ZRmiyWtsrz2sQGz1qQCMW6n7447xhNNehUSQGPj5","deprecated":true,"name":"MSRM/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"ES8skmkEeyH1BYFThd2FtyaFKhkqtwH7XWp8mXptv3vg","deprecated":true,"name":"soFTT/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"Gw78CYLLFbgmmn4rps9KoPAnNtBQ2S1foL2Mn6Z5ZHYB","deprecated":true,"name":"soYFI/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"WjfsTPyrvUUrhGJ9hVQFubMnKDcnQS8VxSXU7L2gLcA","deprecated":true,"name":"soLINK/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"2ZmB255T4FVUugpeXTFxD6Yz5GE47yTByYvqSTDUbk3G","deprecated":true,"name":"soHGET/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"FGJtCDXoHLHjagP5Ht6xcUFt2rW3z8MJPe87rFKP2ZW6","deprecated":true,"name":"soCREAM/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"7K6MPog6LskZmyaYwqtLvRUuedoiE68nirbQ9tK3LasE","deprecated":true,"name":"soUBXT/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"9RyozJe3bkAFfH3jmoiKHjkWCoLTxn7aBQSi6YfaV6ab","deprecated":true,"name":"soHNT/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"AGtBbGuJZiv3Ko3dfT4v6g4kCqnNc9DXfoGLe5HpjmWx","deprecated":true,"name":"soFRONT/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"AA1HSrsMcRNzjaQfRMTNarHR9B7e4U79LJ2319UtiqPF","deprecated":true,"name":"soAKRO/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"AUAobJdffexcoJBMeyLorpShu3ZtG9VvPEPjoeTN4u5Z","deprecated":true,"name":"soHXRO/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"GpdYLFbKHeSeDGqsnQ4jnP7D1294iBpQcsN1VPwhoaFS","deprecated":true,"name":"soUNI/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"sxS9EdTx1UPe4j2c6Au9f1GKZXrFj5pTgNKgjGGtGdY","deprecated":true,"name":"soKEEP/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"CfnnU38ACScF6pcurxSB3FLXeZmfFYunVKExeUyosu5P","deprecated":true,"name":"soMATH/soUSDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"7NR5GDouQYkkfppVkNhpa4HfJ2LwqUQymE3b4CYQiYHa","deprecated":true,"name":"soALEPH/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"CVfYa8RGXnuDBeGmniCcdkBwoLqVxh92xB1JqgRQx3F","deprecated":true,"name":"BTC/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"H5uzEytiByuXt964KampmuNCurNDwkVVypkym75J2DQW","deprecated":true,"name":"soETH/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"7xMDbYTCqQEcK2aM9LbetGtNFJpzKdfXzLL5juaLh4GJ","deprecated":true,"name":"SOL/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"CDdR97S8y96v3To93aKvi3nCnjUrbuVSuumw8FLvbVeg","deprecated":true,"name":"SRM/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"7LVJtqSrF6RudMaz5rKGTmR3F3V5TKoDcN6bnk68biYZ","deprecated":true,"name":"soSUSHI/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"13vjJ8pxDMmzen26bQ5UrouX8dkXYPW1p3VLVDjxXrKR","deprecated":true,"name":"soSXP/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"AwvPwwSprfDZ86beBJDNH5vocFvuw4ZbVQ6upJDbSCXZ","deprecated":true,"name":"MSRM/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"FfDb3QZUdMW2R2aqJQgzeieys4ETb3rPrFFfPSemzq7R","deprecated":true,"name":"soFTT/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"4QL5AQvXdMSCVZmnKXiuMMU83Kq3LCwVfU8CyznqZELG","deprecated":true,"name":"soYFI/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"7JCG9TsCx3AErSV3pvhxiW4AbkKRcJ6ZAveRmJwrgQ16","deprecated":true,"name":"soLINK/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"3otQFkeQ7GNUKT3i2p3aGTQKS2SAw6NLYPE5qxh3PoqZ","deprecated":true,"name":"soHGET/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"2M8EBxFbLANnCoHydypL1jupnRHG782RofnvkatuKyLL","deprecated":true,"name":"soCREAM/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"3UqXdFtNBZsFrFtRGAWGvy9R8H6GJR2hAyGRdYT9BgG3","deprecated":true,"name":"soUBXT/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"9jiasgdYGGh34fAbBQSwkKe1dYSapXbjy2sLsYpetqFp","deprecated":true,"name":"soHNT/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"7oKqJhnz9b8af8Mw47dieTiuxeaHnRYYGBiqCrRpzTRD","deprecated":true,"name":"soFRONT/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"F1rxD8Ns5w4WzVcTRdaJ96LG7YKaA5a25BBmM32yFP4b","deprecated":true,"name":"soAKRO/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"6ToedDwjRCvrcKX7fnHSTA9uABQe1dcLK6YgS5B9M3wo","deprecated":true,"name":"soHXRO/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"FURvCsDUiuUaxZ13pZqQbbfktFGWmQVTHz7tL992LQVZ","deprecated":true,"name":"soUNI/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"EcfDRMrEJ3yW4SgrRyyxTPoKqAZDNSBV8EerigT7BNSS","deprecated":true,"name":"soKEEP/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"2bPsJ6bZ9KDLfJ8QgSN1Eb4mRsbAiaGyHN6cJkoVLpwd","deprecated":true,"name":"soMATH/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"B1GypajMh7S8zJVp6M1xMfu6zGsMgvYrt3cSn9wG7Dd6","deprecated":true,"name":"soTOMO/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"rPTGvVrNFYzBeTEcYnHiaWGNnkSXsWNNjUgk771LkwJ","deprecated":true,"name":"soLUA/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"FrDavxi4QawYnQY259PVfYUjUvuyPNfqSXbLBqMnbfWJ","deprecated":true,"name":"FIDA/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"CVn1nJ5Utuseyy2qqwrpYoJz9Y7jjYonVL4UYvcCepDH","deprecated":true,"name":"KIN/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"BqjGW7ousAizgs8VrHo5SR1LxTksAQPtb8cKZZiNvX5D","deprecated":true,"name":"MAPS/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"GcoKtAmTy5QyuijXSmJKBtFdt99e6Buza18Js7j9AJ6e","deprecated":false,"name":"soALEPH/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"A8YFbxQYFVqKZaoYJLLUVcQiWP7G2MeEgW5wsAQgMvFw","deprecated":false,"name":"BTC/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"4tSvZvnbyzHXLMTiFonMyxZoHmFqau1XArcRCVHLZ5gX","deprecated":false,"name":"soETH/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"ByRys5tuUWDgL73G8JBAEfkdFf8JWBzPBDHsBVQ5vbQA","deprecated":false,"name":"SRM/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"A1Q9iJDVVS8Wsswr9ajeZugmj64bQVCYLZQLra2TMBMo","deprecated":false,"name":"soSUSHI/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"4LUro5jaPaTurXK737QAxgJywdhABnFAMQkXX4ZyqqaZ","deprecated":false,"name":"soSXP/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"4VKLSYdvrQ5ngQrt1d2VS8o4ewvb2MMUZLiejbnGPV33","deprecated":false,"name":"MSRM/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"2Pbh1CvRVku1TgewMfycemghf6sU9EyuFDcNXqvRmSxc","deprecated":false,"name":"soFTT/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"7qcCo8jqepnjjvB5swP4Afsr3keVBs6gNpBTNubd1Kr2","deprecated":false,"name":"soYFI/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"3hwH1txjJVS8qv588tWrjHfRxdqNjBykM1kMcit484up","deprecated":false,"name":"soLINK/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"88vztw7RTN6yJQchVvxrs6oXUDryvpv9iJaFa1EEmg87","deprecated":false,"name":"soHGET/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"7nZP6feE94eAz9jmfakNJWPwEKaeezuKKC5D1vrnqyo2","deprecated":false,"name":"soCREAM/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"2wr3Ab29KNwGhtzr5HaPCyfU1qGJzTUAN4amCLZWaD1H","deprecated":false,"name":"soUBXT/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"CnUV42ZykoKUnMDdyefv5kP6nDSJf7jFd7WXAecC6LYr","deprecated":false,"name":"soHNT/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"9Zx1CvxSVdroKMMWf2z8RwrnrLiQZ9VkQ7Ex3syQqdSH","deprecated":false,"name":"soFRONT/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"5CZXTTgVZKSzgSA3AFMN5a2f3hmwmmJ6hU8BHTEJ3PX8","deprecated":false,"name":"soAKRO/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"6Pn1cSiRos3qhBf54uBP9ZQg8x3JTardm1dL3n4p29tA","deprecated":false,"name":"soHXRO/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"6JYHjaQBx6AtKSSsizDMwozAEDEZ5KBsSUzH7kRjGJon","deprecated":false,"name":"soUNI/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"J7cPYBrXVy8Qeki2crZkZavcojf2sMRyQU7nx438Mf8t","deprecated":false,"name":"soMATH/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"8BdpjpSD5n3nk8DQLqPUyTZvVqFu6kcff5bzUX5dqDpy","deprecated":false,"name":"soTOMO/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"4xyWjQ74Eifq17vbue5Ut9xfFNfuVB116tZLEpiZuAn8","deprecated":false,"name":"soLUA/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"jyei9Fpj2GtHLDDGgcuhDacxYLLiSyxU4TY7KxB2xai","deprecated":false,"name":"SRM/SOL","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT","deprecated":false,"name":"SOL/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"E14BKBhDWD4EuTkWj1ooZezesGxMW8LPCps4W5PuzZJo","deprecated":false,"name":"FIDA/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"Bn6NPyr6UzrFAwC4WmvPvDr2Vm8XSUnFykM2aQroedgn","deprecated":false,"name":"KIN/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"3A8XQRWXC7BjLpgLDDBhQJLT5yPCzS16cGYRKHkKxvYo","deprecated":false,"name":"MAPS/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"3rgacody9SvM88QR83GHaNdEEx4Fe2V2ed5GJp2oeKDr","deprecated":false,"name":"soKEEP/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"EmCzMQfXMgNHcnRoFwAdPe1i2SuiSzMj1mx6wu3KN2uA","deprecated":true,"name":"soALEPH/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"8AcVjMG2LTbpkjNoyq8RwysokqZunkjy3d5JDzxC6BJa","deprecated":true,"name":"BTC/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"HfCZdJ1wfsWKfYP2qyWdXTT5PWAGWFctzFjLH48U1Hsd","deprecated":true,"name":"soETH/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"8mDuvJJSgoodovMRYArtVVYBbixWYdGzR47GPrRT65YJ","deprecated":true,"name":"SOL/soUSDT","programId":"BJ3jrUzddfuSrZHXSCxMUUQsjKEyLmuuyZebkcaFp2fg"},{"address":"HARFLhSq8nECZk4DVFKvzqXMNMA9a3hjvridGMFizeLa","deprecated":true,"name":"SRM/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"DzFjazak6EKHnaB2w6qSsArnj28CV1TKd2Smcj9fqtHW","deprecated":true,"name":"soSUSHI/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"GuvWMATdEV6DExWnXncPYEzn4ePWYkvGdC8pu8gsn7m7","deprecated":true,"name":"soSXP/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"H4snTKK9adiU15gP22ErfZYtro3aqR9BTMXiH3AwiUTQ","deprecated":true,"name":"MSRM/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"DHDdghmkBhEpReno3tbzBPtsxCt6P3KrMzZvxavTktJt","deprecated":true,"name":"soFTT/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"5zu5bTZZvqESAAgFsr12CUMxdQvMrvU9CgvC1GW8vJdf","deprecated":true,"name":"soYFI/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"F5xschQBMpu1gD2q1babYEAVJHR1buj1YazLiXyQNqSW","deprecated":true,"name":"soLINK/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"BAbc9baz4hV1hnYjWSJ6cZDRjfvziWbYGQu9UFkcdUmx","deprecated":true,"name":"soHGET/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"EBxJWA2nLV57ZntbjizxH527ZjPNLT5cpUHMnY5k3oq","deprecated":true,"name":"soCREAM/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"46VdEkj4MJwZinwVb3Y7DUDpVXLNb9YW7P2waKU3vCqr","deprecated":true,"name":"soUBXT/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"Hc22rHKrhbrZBaQMmhJvPTkp1yDr31PDusU8wKoqFSZV","deprecated":true,"name":"soHNT/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"HFoca5HKwiTPpw9iUY5iXWqzkXdu88dS7YrpSvt2uhyF","deprecated":true,"name":"soFRONT/soUSDT","programId":"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn"},{"address":"5xnYnWca2bFwC6cPufpdsCbDJhMjYCC59YgwoZHEfiee","deprecated":true,"name":"soALEPH/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"EXnGBBSamqzd3uxEdRLUiYzjJkTwQyorAaFXdfteuGXe","deprecated":true,"name":"BTC/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"5abZGhrELnUnfM9ZUnvK6XJPoBU5eShZwfFPkdhAC7o","deprecated":true,"name":"soETH/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"7xLk17EQQ5KLDLDe44wCmupJKJjTGd8hs3eSVVhCx932","deprecated":true,"name":"SOL/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"H3APNWA8bZW2gLMSq5sRL41JSMmEJ648AqoEdDgLcdvB","deprecated":true,"name":"SRM/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"4uZTPc72sCDcVRfKKii67dTPm2Xe4ri3TYnGcUQrtnU9","deprecated":true,"name":"soSUSHI/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"33GHmwG9woY95JuWNi74Aa8uKvysSXxif9P1EwwkrCRz","deprecated":true,"name":"soSXP/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"FUaF58sDrgbqakHTR8RUwRLauSofRTjqyCsqThFPh6YM","deprecated":true,"name":"MSRM/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"5NqjQVXLuLSDnsnQMfWp3rF9gbWDusWG4B1Xwtk3rZ5S","deprecated":true,"name":"soFTT/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"97NiXHUNkpYd1eb2HthSDGhaPfepuqMAV3QsZhAgb1wm","deprecated":true,"name":"soYFI/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"hBswhpNyz4m5nt4KwtCA7jYXvh7VmyZ4TuuPmpaKQb1","deprecated":true,"name":"soLINK/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"GaeUpY7CT8rjoeVGjY1t3mJJDd1bdXxYWtrGSpsVFors","deprecated":true,"name":"soHGET/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"7qq9BABQvTWKZuJ5fX2PeTKX6XVtduEs9zW9WS21fSzN","deprecated":true,"name":"soCREAM/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"DCHvVahuLTNWBGUtEzF5GrTdx5FRpxqEJiS6Ru1hrDfD","deprecated":true,"name":"soUBXT/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"DWjJ8VHdGYBxDQYdrRBVDWkHswrgjuBFEv5pBhiRoPBz","deprecated":true,"name":"soHNT/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"56eqxJYzPigm4FkigiBdsfebjMgAbKNh24E7oiKLBtye","deprecated":true,"name":"soFRONT/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"FQbCNSVH3RgosCPB4CJRstkLh5hXkvuXzAjQzT11oMYo","deprecated":true,"name":"soAKRO/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"Fs5xtGUmJTYo8Ao75M3R3m3mVX53KMUhzfXCmyRLnp2P","deprecated":true,"name":"soHXRO/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"ChKV7mxecPqFPGYJjhzowPHDiLKFWXXVujUiE3EWxFcg","deprecated":true,"name":"soUNI/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"6N3oU7ALvn2RPwdpYVzPBgQJ8njT29inBbS2tSrwx8fh","deprecated":true,"name":"soKEEP/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"5P6dJbyKySFXMYNWiEcNQu8xPRYsehYzCeVpae9Ueqrg","deprecated":true,"name":"soMATH/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"H7c8FcQPJ2E5tJmpWBPSi7xCAbk8immdtUxKFRUyE4Ro","deprecated":true,"name":"soTOMO/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"7PSeX1AEtBY9KvgegF5rUh452VemMh7oDzFtJgH7sxMG","deprecated":true,"name":"soLUA/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"AF2oQQaLtcrTnQyVs3EPTdyw57TPaK6njKYDq2Qw7LqP","deprecated":true,"name":"soSWAG/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"9TE15E5h61zJ5VmQAAHkGrAuQdFTth33aBbKdcrppZBp","deprecated":true,"name":"FIDA/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"8HEaA1vSA5mGQoHcvRPNibnuZvnUpSjJJru9HJNH3SqM","deprecated":true,"name":"KIN/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"8EuuEwULFM7n7zthPjC7kA64LPRzYkpAyuLFiLuVg7D4","deprecated":true,"name":"soUSDT/USDC","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"8grUs4WZoTs4KJ8LfRNUBs6SNkMTp5BnVRzJgQ2ranDT","deprecated":true,"name":"MAPS/soUSDT","programId":"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o"},{"address":"FoCuWt4KboucUg2PwmQ3dbkvLqYPLnAo1Rsm8p7QPyf","deprecated":true,"name":"soALEPH/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"5r8FfnbNYcQbS1m4CYmoHYGjBtu6bxfo6UJHNRfzPiYH","deprecated":true,"name":"BTC/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"71CtEComq2XdhGNbXBuYPmosAjMCPSedcgbNi5jDaGbR","deprecated":true,"name":"soETH/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"EZyQ9zyqQsw3QcsLksoWyd1UFVjHZkzRx8N4ZMnZQrS2","deprecated":true,"name":"SRM/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"6ERBjj692XHLWwWSRAUpiKenXshcwmPqhMy7RMapeoKa","deprecated":true,"name":"soSUSHI/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"CQ3kAGxPmpBbak2RSHWyMeRhyLYbH6oVZHJxgjzDLpLW","deprecated":true,"name":"soSXP/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"2Hqn46jhwaQMQ3zEnHtxrWxQZom6qwLXAgdsFJM1Srwh","deprecated":true,"name":"MSRM/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"G5jqZNo2UVCTnJxgEhKCYvqFRs3MxsnH8Bervq3rfLoL","deprecated":true,"name":"soFTT/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"CbwtTHEpfTnCyLw4GoTbKk7WyrXkuATLfLadY2odBSsY","deprecated":true,"name":"soYFI/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"5GjhBAYx8pYeCeUQt7rt93KQZnoQFuDq9Jx4iqq97Mip","deprecated":true,"name":"soLINK/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"9jMPV9E23pTirMjC7vz5suRNkd25311G3Httg7jTib8R","deprecated":true,"name":"soCREAM/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"DsSz9KWT97T4RewRTqTNDpNFQyxMPcuYNAJw2xHAzSiZ","deprecated":true,"name":"soUBXT/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"3k1sURztjxhjYczjyioQ7y2UkMB6K5Ksi3SWvLeLx6Ex","deprecated":true,"name":"soHNT/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"B791G8UCahfmABVcR2wPAMK6LJnuqxSAqiG6wX3mmVVM","deprecated":true,"name":"soFRONT/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"95f7fxfUh8WqUTrdjorHRXm6rTfkWqr23ioGMmKMjedP","deprecated":true,"name":"soAKRO/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"H4RxtmQ4P3TYPt78G3DuHgaGzyFct6MfaeYneLB5PyeG","deprecated":true,"name":"soHXRO/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"7myaZEGZf9m72T1Mqm8GTx5MnmSFS5NCXSwRP18W4EA3","deprecated":true,"name":"soUNI/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"7cRKzNoqjF9VtzvdnP129VYP3izivk9iY3jMJBMzREVT","deprecated":true,"name":"soHGET/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"GV9fYzdwipoaagXFxe5tzDMPcmSVQati5CUvBPsEZThH","deprecated":true,"name":"soMATH/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"AaMLXcwYYi5fA41JNCB2ukAmQyKHitYx5NnpsiWWev6R","deprecated":true,"name":"soTOMO/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"5ZeNLrduGi3WkH9CPwv2Zpbkh38MH8v63aSi2aBUW23g","deprecated":true,"name":"soLUA/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"Ec1aq54XKH9o5fe169cU2sCcxxTP54eeQCe77SpizKuc","deprecated":true,"name":"soUSDT/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"G3uhFg2rBFunHUXtCera13vyQ5KCS8Hx3d4HohLoZbT5","deprecated":true,"name":"SOL/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"2NMTG7tFZidRpQk9Sf4dgQyJb9HxKCyXjQdiuXww3sKm","deprecated":true,"name":"soSWAG/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"7QpJAiwGmqY1SiucjfPXvgeWwCobyV6hZSgzMysZX6Ww","deprecated":true,"name":"FIDA/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"CmLhvXARncLncE1949XBfQWeJh6Zvw3FE5A3Z5ecPYQH","deprecated":true,"name":"KIN/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"FhP3X2ptdi7L1RtWK9Vfow5dyzD92gfXiA57e8eqxvka","deprecated":true,"name":"MAPS/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"DE7xJE2EkaV81wLabDMuhBzUwFhhwfURLdz1aXBBQZQ1","deprecated":true,"name":"soKEEP/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"5nLJ22h1DUfeCfwbFxPYK8zbfbri7nA9bXoDcR8AcJjs","deprecated":false,"name":"MSRM/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"7dLVkUfBVfCGkFhSXDCq1ukM9usathSgS716t643iFGF","deprecated":false,"name":"soETH/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"8afKwzHR3wJE7W7Y5hvQkngXh6iTepSZuutRMMy96MjR","deprecated":false,"name":"soSXP/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"cgani53cMZgYfRMgSrNekJTMaLmccRfspsfTbXWRg7u","deprecated":false,"name":"soCEL/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"Gyp1UGRgbrb6z8t7fpssxEKQgEmcJ4pVnWW3ds2p6ZPY","deprecated":false,"name":"soALEPH/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"4ztJEvQyryoYagj2uieep3dyPwG2pyEwb2dKXTwmXe82","deprecated":false,"name":"soCREAM/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"HEGnaVL5i48ubPBqWAhodnZo8VsSLzEM3Gfc451DnFj9","deprecated":false,"name":"soKEEP/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"8FpuMGLtMZ7Wt9ZvyTGuTVwTwwzLYfS5NZWcHxbP1Wuh","deprecated":false,"name":"soHNT/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"5GAPymgnnWieGcRrcghZdA3aanefqa4cZx1ZSE8UTyMV","deprecated":false,"name":"soMAPS/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"AADohBGxvf7bvixs2HKC3dG2RuU3xpZDwaTzYFJThM8U","deprecated":false,"name":"TRYB/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"EbV7pPpEvheLizuYX3gUCvWM8iySbSRAhu2mQ5Vz2Mxf","deprecated":false,"name":"FIDA/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"FcPet5fz9NLdbXwVM6kw2WTHzRAD7mT78UjwTpawd7hJ","deprecated":false,"name":"soRSR/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"AtNnsY1AyRERWJ8xCskfz38YdvruWVJQUVXgScC1iPb","deprecated":false,"name":"SRM/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"teE55QrL4a4QSfydR9dnHF97jgCfptpuigbb53Lo95g","deprecated":false,"name":"RAY/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"C1EuT9VokAKLiW7i2ASnZUvxDoKuKkCpDDeNxAptuNe4","deprecated":false,"name":"BTC/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"Hr3wzG8mZXNHV7TuL6YqtgfVUesCqMxGYCEyP3otywZE","deprecated":false,"name":"soFTT/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"HLvRdctRB48F9yLnu9E24LUTRt89D48Z35yi1HcxayDf","deprecated":false,"name":"soAKRO/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"2SSnWNrc83otLpfRo792P6P3PESZpdr8cu2r8zCE6bMD","deprecated":false,"name":"soUNI/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"F1T7b6pnR8Pge3qmfNUfW6ZipRDiGpMww6TKTrRU4NiL","deprecated":false,"name":"soUBXT/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1","deprecated":false,"name":"SOL/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"35tV8UsHH8FnSAi3YFRrgCu4K9tb883wKnAXpnihot5r","deprecated":false,"name":"soLUA/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"6DgQRTpJTnAYBSShngAVZZDq7j9ogRN1GfSQ3cq9tubW","deprecated":false,"name":"soSUSHI/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"2WghiBkDL2yRhHdvm8CpprrkmfguuQGJTCDfPSudKBAZ","deprecated":false,"name":"soMATH/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"ErQXxiNfJgd4fqQ58PuEw5xY35TZG84tHT6FXf5s4UxY","deprecated":false,"name":"soHGET/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"CGC4UgWwqA9PET6Tfx6o6dLv94EK2coVkPtxgNHuBtxj","deprecated":false,"name":"soFRONT/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"GnKPri4thaGipzTbp8hhSGSrHgG4F8MFiZVrbRn16iG2","deprecated":false,"name":"soTOMO/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"6bxuB5N3bt3qW8UnPNLgMMzDq5sEH8pFmYJYGgzvE11V","deprecated":false,"name":"soAAVE/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"7cknqHAuGpfVXPtFoJpFvUjJ8wkmyEfbFusmwMfNy3FE","deprecated":false,"name":"MAPS/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"4absuMsgemvdjfkgdLQq1zKEjw3dHBoCWkzKoctndyqd","deprecated":false,"name":"soHXRO/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"4nCFQr8sahhhL4XJ7kngGFBmpkmyf3xLzemuMhn6mWTm","deprecated":false,"name":"KIN/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"3Xg9Q4VtZhD4bVYJbTfgGWFV5zjE3U7ztSHa938zizte","deprecated":false,"name":"soYFI/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"3yEZ9ZpXSQapmKjLAGKZEzUNA1rcupJtsDp5mPBWmGZR","deprecated":false,"name":"soLINK/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"J2XSt77XWim5HwtUM8RUwQvmRXNZsbMKpp5GTKpHafvf","deprecated":false,"name":"soSWAG/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"77quYg4MGneUdjgXCunt9GgM1usmrxKY31twEy3WHwcS","deprecated":false,"name":"USDT/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"GKLev6UHeX1KSDCyo2bzyG6wqhByEzDBkmYTxEdmYJgB","deprecated":false,"name":"OXY/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"address":"HdBhZrnrxpje39ggXnTb6WuTWVvj5YKcSHwYGQCRsVj","deprecated":false,"name":"OXY/soUSDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"name":"OXY/USDC","address":"GZ3WBFsqntmERPwumFEYgrX2B7J7G11MzNZAy7Hje27X","deprecated":false,"programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"name":"xCOPE/USDC","address":"7MpMwArporUHEGW7quUpkPZp5L5cHPs9eKUfKCdaPHq2","deprecated":false,"programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"name":"COPE/USDC","address":"6fc7v3PmjZG9Lk2XTot6BywGyYLkBQuzuFKd4FpCsPxk","deprecated":false,"programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"name":"MER/USDC","address":"HhvDWug3ftYNx5148ZmrQxzvEmohN2pKVNiRT4TVoekF","deprecated":true,"programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"name":"MER/USDT","address":"6HwcY27nbeb933UkEcxqJejtjWLfNQFWkGCjAVNes6g7","deprecated":false,"programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"name":"MER/USDC","address":"G4LcexdCzzJUKZfqyVDQFzpkjhB1JoCNL8Kooxi9nJz5","deprecated":false,"programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"name":"SNY/USDC","address":"DPfj2jYwPaezkCmUNm5SSYfkrkz8WFqwGLcxDDUsN3gA","deprecated":false,"programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"name":"SLRS/USDC","address":"2Gx3UfV831BAh8uQv1FKSPKS9yajfeeD8GJ4ZNb2o2YP","deprecated":false,"programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"},{"name":"ETHV/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"HrgkuJryyKRserkoz7LBFYkASzhXHWp9XA6fRYCA6PHb"},{"name":"IETHV/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"5aoLj1bySDhhWjo7cLfT3pF2gqNGd63uEJ9HMSfASESL"},{"name":"SBR/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"HXBi8YBwbh4TXF6PjVw81m8Z3Cc4WBofvauj5SBFdgUs"},{"name":"renBTC/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"74Ciu5yRzhe8TFTHvQuEVbFZJrbnCMRoohBK33NNiPtv"},{"name":"renDOGE/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"5FpKCWYXgHWZ9CdDMHjwxAfqxJLdw2PRXuAmtECkzADk"},{"name":"DXL/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"DYfigimKWc5VhavR4moPBibx9sMcWYVSjVdWvPztBPTa"},{"name":"MNGO/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"3d4rzwpy9iGdCZvgxcu7B1YocYffVLsQXPXkBZKt2zLc"},{"name":"CYS/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"6V6y6QFi17QZC9qNRpVp7SaPiHpCTp2skbRQkUyZZXPW"},{"name":"POLIS/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"HxFLKUAmAMLz1jtT3hbvCMELwH5H9tpM2QugP8sKyfhW"},{"name":"ATLAS/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"Di66GTLsV64JgCCYGVcY21RZ173BHkjJVgPyezNN7P1K"},{"name":"LIKE/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"3WptgZZu34aiDrLMUiPntTYZGNZ72yT1yxHYxSdbTArX"},{"name":"MSOL/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"6oGsL2puUgySccKzn9XA9afqF217LfxP5ocq4B3LWsjy"},{"name":"MSOL/SOL","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"5cLrMai1DsLRYc1Nio9qMTicsWtvzjzZfJPXyAoF4t1Z"},{"name":"AAVE/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"8WZrmdpLckptiVKd2fPHPjewRVYQGQkjxi9vzRYG1sfs"},{"name":"AAVE/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"LghsMERQWQFK3zWMTrUkoyAJARQw2wSmcYZjexeN3zy"},{"name":"AKRO/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"G3h8NZgJozk9crme2me6sKDJuSQ12mNCtvC9NbSWqGuk"},{"name":"AKRO/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"DvbiPxKzuXZPcmUcYDqBz1tvUrXYPsNrRAjSeuwHtmEA"},{"name":"ALEPH/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"Fw4mvuE7KZmTjQPxP2sRpHwPDfRMWnKBupFZGyW9CAQH"},{"name":"ALEPH/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"GZeHR8uCTVoHVDZFRVXTgm386DK1EKehy9yMS3BFChcL"},{"name":"CEL/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"79ESpYSb2hM14KTRXPZUwDkxUGC5irE2esd1vxdXfnZz"},{"name":"CEL/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"J9ww1yufRNDDbUbDXmew2mW2ozkx7cme7dMvKjMQVHrL"},{"name":"CREAM/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"4pdQ2D4gehMhGu4z9jeQbEPUFbTxB5qcPr3zCynjJGyp"},{"name":"CREAM/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"6fspxMfBmYFTGFBDN5MU33A55i2MkGr7eSjBLPCAU6y9"},{"name":"ETH/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"8Gmi2HhZmwQPVdCwzS7CM66MGstMXPcTVHA7jF19cLZz"},{"name":"ETH/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"ch7kmPrtoQUSEPBggcNAvLGiMQkJagVwd3gDYfd8m7Q"},{"name":"FRONT/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"B95oZN5HCLGmFAhbzReWBA9cuSGPFQAXeuhm2FfpdrML"},{"name":"FRONT/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"DZTYyy1L5Pr6DmTtYY5bEuU9g3LQ4XGvuYiN3zS25yG7"},{"name":"FTT/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"2wteg25ch227n4Rh1CN4WNrDZXBpRBpWJ48mEC2K7f4r"},{"name":"FTT/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"BoHojHESAv4McZx9gXd1bWTZMq25JYyGz4qL1m5C3nvk"},{"name":"HGET/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"27e1mB6UoPohbc3MmwMXu5QM7b2E3k5Mbhwv6JguwyXg"},{"name":"HGET/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"BdRzTEKb7Qdu4tWts5zXjwcpQErZxEzvShKZ5QcthMag"},{"name":"HXRO/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"CBb5zXwNRB73WVjs2m21P5prcEZa6SWmej74Vzxh8dRm"},{"name":"HXRO/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"3BScwNxtMrEcQ5VTHyXHYQR98dTaxfyXGaLkuSjBY1dW"},{"name":"LINK/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"FJMjxMCiDKn16TLhXUdEbVDH5wC6k9EHYJTcrH6NcbDE"},{"name":"LINK/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"Gr2KmhK7Upr4uW56B1QQrJuhhgmot6zAHJeZALTMStiX"},{"name":"LUA/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"J9imTcEeahZqKuaoQaPcCeSGCMWL8qSACpK4B7bC8NN4"},{"name":"LUA/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"BMJ3CvQZ57cNnuc3Lz5Pb6cW6Sr9kZGz3qz2bJQTE24A"},{"name":"MATH/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"G8L1YLrktaG1t8YBMJs3CwV96nExvJJCSpw3DARPDjE2"},{"name":"MATH/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"CkvNfATB7nky8zPLuwS9bgcFbVRkQdkd5zuKEovyo9rs"},{"name":"RAY/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"2xiv8A5xrJ7RnGdxXB42uFEkYHJjszEhaJyKKt4WaLep"},{"name":"RSR/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"GqgkxEswUwHBntmzb5GpUhKrVpJhzreSruZycuJwdNwB"},{"name":"RSR/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"2j2or38X2FUbpkK4gkgvjDtqN3ibkKw3v5yn7o2gHqPc"},{"name":"SUSHI/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"3uWVMWu7cwMnYMAAdtsZNwaaqeeeZHARGZwcExnQiFay"},{"name":"SUSHI/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"T3aC6qcPAJtX1gqkckfSxBPdPWziz5fLYRt5Dz3Nafq"},{"name":"SWAG/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"wSkeLMv3ktJyLm51bvQWxY2saGKqGxbnUFimPxbgEvQ"},{"name":"SWAG/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"6URQ4zFWvPm1fhJCKKWorrh8X3mmTFiDDyXEUmSf8Rb2"},{"name":"SXP/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"G5F84rfqmWqzZv5GBpSn8mMwW8zJ2B4Y1GpGupiwjHNM"},{"name":"SXP/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"2FQbPW1ticJz2SMMbEXxbKWJKmw1wLc6ggSP2HyzdMen"},{"name":"UBXT/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"Hh4p7tJpqkGW6xsHM2LiPPMpJg43fwn5TbmVmfrURdLY"},{"name":"UBXT/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"5xhjc3ZtAwnBK3qsaro28VChL7WrxY9N4SG6UZpYxpGc"},{"name":"UNI/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"B7b5rjQuqQCuGqmUBWmcCTqaL3Z1462mo4NArqty6QFR"},{"name":"UNI/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"FrKM6kJtAjXknHPEpkrQtJSXZwUxV5dq26wDpc4YjQST"},{"name":"YFI/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"BiJXGFc1c4gyPpv9HLRJoKbZewWQrTCHGuxYKjYMQJpC"},{"name":"YFI/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"9sue9TZAeUhNtNAPPGb9dke7rkJeXktGD3u8ZC37GWnQ"},{"name":"AVAX/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"E8JQstcwjuqN5kdMyUJLNuaectymnhffkvfg1j286UCr"},{"name":"AXSet/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"HZCheduA4nsSuQpVww1TiyKZpXSAitqaXxjBD2ymg22X"},{"name":"BNB/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"4UPUurKveNEJgBqJzqHPyi8DhedvpYsMXi7d43CjAg2f"},{"name":"BNB/USDT","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"FjbKNZME5yVSC1R3HJM99kB3yir3q3frS5MteMFD72sV"},{"name":"GALA/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"F7WJsoxTWQRmAwAyFe9APmuVv4HqmhchFtdbR9dvAUDm"},{"name":"MATICpo/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"5WRoQxE59966N2XfD2wYy1uhuyKeoVJ9NBMH6r6RNYEF"},{"name":"ROSE/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"EybAYkmRKCyD4w8AErTG1bqmnvT85LFuPQPMCc8J3yD"},{"name":"SAND/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"3FE2g3cadTJjN3C7gNRavwnv7Yh9Midq7h9KgTVUE7tR"},{"name":"LUNA/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"HBTu8hNaoT3VyiSSzJYa8jwt9sDGKtJviSwFa11iXdmE"},{"name":"SHIB/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"Er7Jp4PADPVHifykFwbVoHdkL1RtZSsx9zGJrPJTrCgW"},{"name":"UST/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"8WmckvEoVGZvtN8knjdzFGbWJ3Sr4BcWdyzSYuCrD4YK"},{"name":"FAB/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"Cud48DK2qoxsWNzQeTL5D8sAiHsGwG8Ev1VMNcYLayxt"},{"name":"JET/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"6pQMoHDC2o8eeFxyTKtfnsr8d48hKFWsRpLHAqVHH2ZP"},{"name":"scnSOL/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"D52sefGCWho2nd5UGxWd7wCftAzeNEMNYZkdEPGEdQTb"},{"name":"stSOL/USDC","programId":"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin","deprecated":false,"address":"5F7LGsP1LPtaRV7vVKgxwNYX4Vf22xvuzyXjyar7jJqp"}]');

/***/ }),

/***/ "(ssr)/./node_modules/@project-serum/serum/lib/token-mints.json":
/*!****************************************************************!*\
  !*** ./node_modules/@project-serum/serum/lib/token-mints.json ***!
  \****************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('[{"address":"9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E","name":"BTC"},{"address":"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk","name":"ETH"},{"address":"AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3","name":"FTT"},{"address":"3JSf5tPeuscJGtaCp5giEiDhv51gQ4v3zWg8DGgyLfAB","name":"YFI"},{"address":"CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG","name":"LINK"},{"address":"Ga2AXHpfAF6mv2ekZwcsJFqu7wB4NV331qNH7fW9Nst8","name":"XRP"},{"address":"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB","name":"USDT"},{"address":"BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4","name":"WUSDT"},{"address":"BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW","name":"WUSDC"},{"address":"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v","name":"USDC"},{"address":"MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L","name":"MSRM"},{"address":"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt","name":"SRM"},{"address":"AR1Mtgh7zAtxuxGd2XPovXPVjcSdY3i4rQYisNadjfKy","name":"SUSHI"},{"address":"SF3oTvfWzEP3DTwGSvUXRrGTvr75pdZNnBLAH9bzMuX","name":"SXP"},{"address":"CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K","name":"ALEPH"},{"address":"BtZQfWqDGbk9Wf2rXEiWyQBdBY1etnUUn6zEphvVS7yN","name":"HGET"},{"address":"5Fu5UUgbjpUvdBveb3a1JTNirL8rXtiYeSMWvKjtUNQv","name":"CREAM"},{"address":"873KLxCbz7s9Kc4ZzgYRtNmhfkQrhfyWGZJBmyCbC3ei","name":"UBXT"},{"address":"HqB7uswoVg4suaQiDP3wjxob1G5WdZ144zhdStwMCq7e","name":"HNT"},{"address":"9S4t2NEAiJVMvPdRYKVrfJpBafPBLtvbvyS3DecojQHw","name":"FRONT"},{"address":"6WNVCuxCGJzNjmMZoKyhZJwvJ5tYpsLyAtagzYASqBoF","name":"AKRO"},{"address":"DJafV9qemGp7mLMEn5wrfqaFwxsbLgUsGVS16zKRk9kc","name":"HXRO"},{"address":"DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw","name":"UNI"},{"address":"GUohe4DJUA5FKPWo3joiPgsB7yzer7LpDmt1Vhzy3Zht","name":"KEEP"},{"address":"GeDS162t9yGJuLEHPWXXGrb1zwkzinCgRwnT8vHYjKza","name":"MATH"},{"address":"So11111111111111111111111111111111111111112","name":"SOL"},{"address":"GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd","name":"TOMO"},{"address":"EqWCKXfs3x47uVosDpTRgFniThL9Y8iCztJaapxbEaVX","name":"LUA"},{"address":"9F9fNTT6qwjsu4X4yWYKZpsbw5qT7o6yR2i57JF2jagy","name":"SWAG"},{"address":"EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp","name":"FIDA"},{"address":"kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6","name":"KIN"},{"address":"MAPS41MDahZ9QdKXhVa4dWB9RuyfV4XqhyAZ8XcYepb","name":"MAPS"},{"address":"z3dn17yLaGMKffVogeFHQ9zWVcXgqgf3PQnDsNs2g6M","name":"OXY"},{"address":"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R","name":"RAY"},{"address":"3K6rftdAaQYMPunrtNRHgnK2UAtjm2JwyT2oCiTDouYE","name":"xCOPE"},{"address":"dK83wTVypEpa1pqiBbHY3MNuUnT3ADUZM4wk9VZXZEc","name":"AAVE"},{"address":"DgHK9mfhMtUwwv54GChRrU54T2Em5cuszq2uMuen1ZVE","name":"CEL"},{"address":"7ncCLJpP3MNww17LW8bRvx8odQQnubNtfNZBL5BgAEHW","name":"RSR"},{"address":"6ry4WBDvAwAnrYJVv6MCog4J8zx6S3cPgSqnTsDZ73AR","name":"TRYB"},{"address":"8HGyAAB1yoM1ttS7pXjHMa3dukTFGQggnFFH3hJZgzQh","name":"COPE"},{"address":"MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K","name":"MER"},{"address":"4dmKkXNHdgYsXqBHCuMikNQWwVomZURhYvkkX5c4pQ7y","name":"SNY"},{"address":"SLRSSpSLUTP7okbCUBYStWCo1vUgyt775faPqz8HUMr","name":"SLRS"},{"address":"CDJWUqTcYTVAKXAVXoQZFes5JUFc7owSeq7eMQcDSbo5","name":"renBTC"},{"address":"ArUkYE2XDKzqy77PRRGjo4wREWwqk6RXTfM9NeqzPvjU","name":"renDOGE"},{"address":"GsNzxJfFn6zQdJGeYsupJWzUAm57Ba7335mfhWvFiE9Z","name":"DXL"}]');

/***/ })

};
;