"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/toml";
exports.ids = ["vendor-chunks/toml"];
exports.modules = {

/***/ "(ssr)/./node_modules/toml/index.js":
/*!************************************!*\
  !*** ./node_modules/toml/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar parser = __webpack_require__(/*! ./lib/parser */ \"(ssr)/./node_modules/toml/lib/parser.js\");\nvar compiler = __webpack_require__(/*! ./lib/compiler */ \"(ssr)/./node_modules/toml/lib/compiler.js\");\nmodule.exports = {\n    parse: function(input) {\n        var nodes = parser.parse(input.toString());\n        return compiler.compile(nodes);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdG9tbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUM7QUFFdkJFLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxPQUFPLFNBQVNDLEtBQUs7UUFDbkIsSUFBSUMsUUFBUVAsT0FBT0ssS0FBSyxDQUFDQyxNQUFNRSxRQUFRO1FBQ3ZDLE9BQU9OLFNBQVNPLE9BQU8sQ0FBQ0Y7SUFDMUI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2RyaWZ0LXRyYWRpbmctdWkvLi9ub2RlX21vZHVsZXMvdG9tbC9pbmRleC5qcz9jOGZiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwYXJzZXIgPSByZXF1aXJlKCcuL2xpYi9wYXJzZXInKTtcbnZhciBjb21waWxlciA9IHJlcXVpcmUoJy4vbGliL2NvbXBpbGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZTogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICB2YXIgbm9kZXMgPSBwYXJzZXIucGFyc2UoaW5wdXQudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIGNvbXBpbGVyLmNvbXBpbGUobm9kZXMpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbInBhcnNlciIsInJlcXVpcmUiLCJjb21waWxlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZSIsImlucHV0Iiwibm9kZXMiLCJ0b1N0cmluZyIsImNvbXBpbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/toml/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/toml/lib/compiler.js":
/*!*******************************************!*\
  !*** ./node_modules/toml/lib/compiler.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\nfunction compile(nodes) {\n    var assignedPaths = [];\n    var valueAssignments = [];\n    var currentPath = \"\";\n    var data = Object.create(null);\n    var context = data;\n    var arrayMode = false;\n    return reduce(nodes);\n    function reduce(nodes) {\n        var node;\n        for(var i = 0; i < nodes.length; i++){\n            node = nodes[i];\n            switch(node.type){\n                case \"Assign\":\n                    assign(node);\n                    break;\n                case \"ObjectPath\":\n                    setPath(node);\n                    break;\n                case \"ArrayPath\":\n                    addTableArray(node);\n                    break;\n            }\n        }\n        return data;\n    }\n    function genError(err, line, col) {\n        var ex = new Error(err);\n        ex.line = line;\n        ex.column = col;\n        throw ex;\n    }\n    function assign(node) {\n        var key = node.key;\n        var value = node.value;\n        var line = node.line;\n        var column = node.column;\n        var fullPath;\n        if (currentPath) {\n            fullPath = currentPath + \".\" + key;\n        } else {\n            fullPath = key;\n        }\n        if (typeof context[key] !== \"undefined\") {\n            genError(\"Cannot redefine existing key '\" + fullPath + \"'.\", line, column);\n        }\n        context[key] = reduceValueNode(value);\n        if (!pathAssigned(fullPath)) {\n            assignedPaths.push(fullPath);\n            valueAssignments.push(fullPath);\n        }\n    }\n    function pathAssigned(path) {\n        return assignedPaths.indexOf(path) !== -1;\n    }\n    function reduceValueNode(node) {\n        if (node.type === \"Array\") {\n            return reduceArrayWithTypeChecking(node.value);\n        } else if (node.type === \"InlineTable\") {\n            return reduceInlineTableNode(node.value);\n        } else {\n            return node.value;\n        }\n    }\n    function reduceInlineTableNode(values) {\n        var obj = Object.create(null);\n        for(var i = 0; i < values.length; i++){\n            var val = values[i];\n            if (val.value.type === \"InlineTable\") {\n                obj[val.key] = reduceInlineTableNode(val.value.value);\n            } else if (val.type === \"InlineTableValue\") {\n                obj[val.key] = reduceValueNode(val.value);\n            }\n        }\n        return obj;\n    }\n    function setPath(node) {\n        var path = node.value;\n        var quotedPath = path.map(quoteDottedString).join(\".\");\n        var line = node.line;\n        var column = node.column;\n        if (pathAssigned(quotedPath)) {\n            genError(\"Cannot redefine existing key '\" + path + \"'.\", line, column);\n        }\n        assignedPaths.push(quotedPath);\n        context = deepRef(data, path, Object.create(null), line, column);\n        currentPath = path;\n    }\n    function addTableArray(node) {\n        var path = node.value;\n        var quotedPath = path.map(quoteDottedString).join(\".\");\n        var line = node.line;\n        var column = node.column;\n        if (!pathAssigned(quotedPath)) {\n            assignedPaths.push(quotedPath);\n        }\n        assignedPaths = assignedPaths.filter(function(p) {\n            return p.indexOf(quotedPath) !== 0;\n        });\n        assignedPaths.push(quotedPath);\n        context = deepRef(data, path, [], line, column);\n        currentPath = quotedPath;\n        if (context instanceof Array) {\n            var newObj = Object.create(null);\n            context.push(newObj);\n            context = newObj;\n        } else {\n            genError(\"Cannot redefine existing key '\" + path + \"'.\", line, column);\n        }\n    }\n    // Given a path 'a.b.c', create (as necessary) `start.a`,\n    // `start.a.b`, and `start.a.b.c`, assigning `value` to `start.a.b.c`.\n    // If `a` or `b` are arrays and have items in them, the last item in the\n    // array is used as the context for the next sub-path.\n    function deepRef(start, keys, value, line, column) {\n        var traversed = [];\n        var traversedPath = \"\";\n        var path = keys.join(\".\");\n        var ctx = start;\n        for(var i = 0; i < keys.length; i++){\n            var key = keys[i];\n            traversed.push(key);\n            traversedPath = traversed.join(\".\");\n            if (typeof ctx[key] === \"undefined\") {\n                if (i === keys.length - 1) {\n                    ctx[key] = value;\n                } else {\n                    ctx[key] = Object.create(null);\n                }\n            } else if (i !== keys.length - 1 && valueAssignments.indexOf(traversedPath) > -1) {\n                // already a non-object value at key, can't be used as part of a new path\n                genError(\"Cannot redefine existing key '\" + traversedPath + \"'.\", line, column);\n            }\n            ctx = ctx[key];\n            if (ctx instanceof Array && ctx.length && i < keys.length - 1) {\n                ctx = ctx[ctx.length - 1];\n            }\n        }\n        return ctx;\n    }\n    function reduceArrayWithTypeChecking(array) {\n        // Ensure that all items in the array are of the same type\n        var firstType = null;\n        for(var i = 0; i < array.length; i++){\n            var node = array[i];\n            if (firstType === null) {\n                firstType = node.type;\n            } else {\n                if (node.type !== firstType) {\n                    genError(\"Cannot add value of type \" + node.type + \" to array of type \" + firstType + \".\", node.line, node.column);\n                }\n            }\n        }\n        // Recursively reduce array of nodes into array of the nodes' values\n        return array.map(reduceValueNode);\n    }\n    function quoteDottedString(str) {\n        if (str.indexOf(\".\") > -1) {\n            return '\"' + str + '\"';\n        } else {\n            return str;\n        }\n    }\n}\nmodule.exports = {\n    compile: compile\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/toml/lib/compiler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/toml/lib/parser.js":
/*!*****************************************!*\
  !*** ./node_modules/toml/lib/parser.js ***!
  \*****************************************/
/***/ ((module) => {

eval("\nmodule.exports = function() {\n    /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */ function peg$subclass(child, parent) {\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n    }\n    function SyntaxError(message, expected, found, offset, line, column) {\n        this.message = message;\n        this.expected = expected;\n        this.found = found;\n        this.offset = offset;\n        this.line = line;\n        this.column = column;\n        this.name = \"SyntaxError\";\n    }\n    peg$subclass(SyntaxError, Error);\n    function parse(input) {\n        var options = arguments.length > 1 ? arguments[1] : {}, peg$FAILED = {}, peg$startRuleFunctions = {\n            start: peg$parsestart\n        }, peg$startRuleFunction = peg$parsestart, peg$c0 = [], peg$c1 = function() {\n            return nodes;\n        }, peg$c2 = peg$FAILED, peg$c3 = \"#\", peg$c4 = {\n            type: \"literal\",\n            value: \"#\",\n            description: '\"#\"'\n        }, peg$c5 = void 0, peg$c6 = {\n            type: \"any\",\n            description: \"any character\"\n        }, peg$c7 = \"[\", peg$c8 = {\n            type: \"literal\",\n            value: \"[\",\n            description: '\"[\"'\n        }, peg$c9 = \"]\", peg$c10 = {\n            type: \"literal\",\n            value: \"]\",\n            description: '\"]\"'\n        }, peg$c11 = function(name) {\n            addNode(node(\"ObjectPath\", name, line, column));\n        }, peg$c12 = function(name) {\n            addNode(node(\"ArrayPath\", name, line, column));\n        }, peg$c13 = function(parts, name) {\n            return parts.concat(name);\n        }, peg$c14 = function(name) {\n            return [\n                name\n            ];\n        }, peg$c15 = function(name) {\n            return name;\n        }, peg$c16 = \".\", peg$c17 = {\n            type: \"literal\",\n            value: \".\",\n            description: '\".\"'\n        }, peg$c18 = \"=\", peg$c19 = {\n            type: \"literal\",\n            value: \"=\",\n            description: '\"=\"'\n        }, peg$c20 = function(key, value) {\n            addNode(node(\"Assign\", value, line, column, key));\n        }, peg$c21 = function(chars) {\n            return chars.join(\"\");\n        }, peg$c22 = function(node) {\n            return node.value;\n        }, peg$c23 = '\"\"\"', peg$c24 = {\n            type: \"literal\",\n            value: '\"\"\"',\n            description: '\"\\\\\"\\\\\"\\\\\"\"'\n        }, peg$c25 = null, peg$c26 = function(chars) {\n            return node(\"String\", chars.join(\"\"), line, column);\n        }, peg$c27 = '\"', peg$c28 = {\n            type: \"literal\",\n            value: '\"',\n            description: '\"\\\\\"\"'\n        }, peg$c29 = \"'''\", peg$c30 = {\n            type: \"literal\",\n            value: \"'''\",\n            description: \"\\\"'''\\\"\"\n        }, peg$c31 = \"'\", peg$c32 = {\n            type: \"literal\",\n            value: \"'\",\n            description: '\"\\'\"'\n        }, peg$c33 = function(char) {\n            return char;\n        }, peg$c34 = function(char) {\n            return char;\n        }, peg$c35 = \"\\\\\", peg$c36 = {\n            type: \"literal\",\n            value: \"\\\\\",\n            description: '\"\\\\\\\\\"'\n        }, peg$c37 = function() {\n            return \"\";\n        }, peg$c38 = \"e\", peg$c39 = {\n            type: \"literal\",\n            value: \"e\",\n            description: '\"e\"'\n        }, peg$c40 = \"E\", peg$c41 = {\n            type: \"literal\",\n            value: \"E\",\n            description: '\"E\"'\n        }, peg$c42 = function(left, right) {\n            return node(\"Float\", parseFloat(left + \"e\" + right), line, column);\n        }, peg$c43 = function(text) {\n            return node(\"Float\", parseFloat(text), line, column);\n        }, peg$c44 = \"+\", peg$c45 = {\n            type: \"literal\",\n            value: \"+\",\n            description: '\"+\"'\n        }, peg$c46 = function(digits) {\n            return digits.join(\"\");\n        }, peg$c47 = \"-\", peg$c48 = {\n            type: \"literal\",\n            value: \"-\",\n            description: '\"-\"'\n        }, peg$c49 = function(digits) {\n            return \"-\" + digits.join(\"\");\n        }, peg$c50 = function(text) {\n            return node(\"Integer\", parseInt(text, 10), line, column);\n        }, peg$c51 = \"true\", peg$c52 = {\n            type: \"literal\",\n            value: \"true\",\n            description: '\"true\"'\n        }, peg$c53 = function() {\n            return node(\"Boolean\", true, line, column);\n        }, peg$c54 = \"false\", peg$c55 = {\n            type: \"literal\",\n            value: \"false\",\n            description: '\"false\"'\n        }, peg$c56 = function() {\n            return node(\"Boolean\", false, line, column);\n        }, peg$c57 = function() {\n            return node(\"Array\", [], line, column);\n        }, peg$c58 = function(value) {\n            return node(\"Array\", value ? [\n                value\n            ] : [], line, column);\n        }, peg$c59 = function(values) {\n            return node(\"Array\", values, line, column);\n        }, peg$c60 = function(values, value) {\n            return node(\"Array\", values.concat(value), line, column);\n        }, peg$c61 = function(value) {\n            return value;\n        }, peg$c62 = \",\", peg$c63 = {\n            type: \"literal\",\n            value: \",\",\n            description: '\",\"'\n        }, peg$c64 = \"{\", peg$c65 = {\n            type: \"literal\",\n            value: \"{\",\n            description: '\"{\"'\n        }, peg$c66 = \"}\", peg$c67 = {\n            type: \"literal\",\n            value: \"}\",\n            description: '\"}\"'\n        }, peg$c68 = function(values) {\n            return node(\"InlineTable\", values, line, column);\n        }, peg$c69 = function(key, value) {\n            return node(\"InlineTableValue\", value, line, column, key);\n        }, peg$c70 = function(digits) {\n            return \".\" + digits;\n        }, peg$c71 = function(date) {\n            return date.join(\"\");\n        }, peg$c72 = \":\", peg$c73 = {\n            type: \"literal\",\n            value: \":\",\n            description: '\":\"'\n        }, peg$c74 = function(time) {\n            return time.join(\"\");\n        }, peg$c75 = \"T\", peg$c76 = {\n            type: \"literal\",\n            value: \"T\",\n            description: '\"T\"'\n        }, peg$c77 = \"Z\", peg$c78 = {\n            type: \"literal\",\n            value: \"Z\",\n            description: '\"Z\"'\n        }, peg$c79 = function(date, time) {\n            return node(\"Date\", new Date(date + \"T\" + time + \"Z\"), line, column);\n        }, peg$c80 = function(date, time) {\n            return node(\"Date\", new Date(date + \"T\" + time), line, column);\n        }, peg$c81 = /^[ \\t]/, peg$c82 = {\n            type: \"class\",\n            value: \"[ \\\\t]\",\n            description: \"[ \\\\t]\"\n        }, peg$c83 = \"\\n\", peg$c84 = {\n            type: \"literal\",\n            value: \"\\n\",\n            description: '\"\\\\n\"'\n        }, peg$c85 = \"\\r\", peg$c86 = {\n            type: \"literal\",\n            value: \"\\r\",\n            description: '\"\\\\r\"'\n        }, peg$c87 = /^[0-9a-f]/i, peg$c88 = {\n            type: \"class\",\n            value: \"[0-9a-f]i\",\n            description: \"[0-9a-f]i\"\n        }, peg$c89 = /^[0-9]/, peg$c90 = {\n            type: \"class\",\n            value: \"[0-9]\",\n            description: \"[0-9]\"\n        }, peg$c91 = \"_\", peg$c92 = {\n            type: \"literal\",\n            value: \"_\",\n            description: '\"_\"'\n        }, peg$c93 = function() {\n            return \"\";\n        }, peg$c94 = /^[A-Za-z0-9_\\-]/, peg$c95 = {\n            type: \"class\",\n            value: \"[A-Za-z0-9_\\\\-]\",\n            description: \"[A-Za-z0-9_\\\\-]\"\n        }, peg$c96 = function(d) {\n            return d.join(\"\");\n        }, peg$c97 = '\\\\\"', peg$c98 = {\n            type: \"literal\",\n            value: '\\\\\"',\n            description: '\"\\\\\\\\\\\\\"\"'\n        }, peg$c99 = function() {\n            return '\"';\n        }, peg$c100 = \"\\\\\\\\\", peg$c101 = {\n            type: \"literal\",\n            value: \"\\\\\\\\\",\n            description: '\"\\\\\\\\\\\\\\\\\"'\n        }, peg$c102 = function() {\n            return \"\\\\\";\n        }, peg$c103 = \"\\\\b\", peg$c104 = {\n            type: \"literal\",\n            value: \"\\\\b\",\n            description: '\"\\\\\\\\b\"'\n        }, peg$c105 = function() {\n            return \"\\b\";\n        }, peg$c106 = \"\\\\t\", peg$c107 = {\n            type: \"literal\",\n            value: \"\\\\t\",\n            description: '\"\\\\\\\\t\"'\n        }, peg$c108 = function() {\n            return \"\t\";\n        }, peg$c109 = \"\\\\n\", peg$c110 = {\n            type: \"literal\",\n            value: \"\\\\n\",\n            description: '\"\\\\\\\\n\"'\n        }, peg$c111 = function() {\n            return \"\\n\";\n        }, peg$c112 = \"\\\\f\", peg$c113 = {\n            type: \"literal\",\n            value: \"\\\\f\",\n            description: '\"\\\\\\\\f\"'\n        }, peg$c114 = function() {\n            return \"\\f\";\n        }, peg$c115 = \"\\\\r\", peg$c116 = {\n            type: \"literal\",\n            value: \"\\\\r\",\n            description: '\"\\\\\\\\r\"'\n        }, peg$c117 = function() {\n            return \"\\r\";\n        }, peg$c118 = \"\\\\U\", peg$c119 = {\n            type: \"literal\",\n            value: \"\\\\U\",\n            description: '\"\\\\\\\\U\"'\n        }, peg$c120 = function(digits) {\n            return convertCodePoint(digits.join(\"\"));\n        }, peg$c121 = \"\\\\u\", peg$c122 = {\n            type: \"literal\",\n            value: \"\\\\u\",\n            description: '\"\\\\\\\\u\"'\n        }, peg$currPos = 0, peg$reportedPos = 0, peg$cachedPos = 0, peg$cachedPosDetails = {\n            line: 1,\n            column: 1,\n            seenCR: false\n        }, peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$cache = {}, peg$result;\n        if (\"startRule\" in options) {\n            if (!(options.startRule in peg$startRuleFunctions)) {\n                throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + '\".');\n            }\n            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n        }\n        function text() {\n            return input.substring(peg$reportedPos, peg$currPos);\n        }\n        function offset() {\n            return peg$reportedPos;\n        }\n        function line() {\n            return peg$computePosDetails(peg$reportedPos).line;\n        }\n        function column() {\n            return peg$computePosDetails(peg$reportedPos).column;\n        }\n        function expected(description) {\n            throw peg$buildException(null, [\n                {\n                    type: \"other\",\n                    description: description\n                }\n            ], peg$reportedPos);\n        }\n        function error(message) {\n            throw peg$buildException(message, null, peg$reportedPos);\n        }\n        function peg$computePosDetails(pos) {\n            function advance(details, startPos, endPos) {\n                var p, ch;\n                for(p = startPos; p < endPos; p++){\n                    ch = input.charAt(p);\n                    if (ch === \"\\n\") {\n                        if (!details.seenCR) {\n                            details.line++;\n                        }\n                        details.column = 1;\n                        details.seenCR = false;\n                    } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n                        details.line++;\n                        details.column = 1;\n                        details.seenCR = true;\n                    } else {\n                        details.column++;\n                        details.seenCR = false;\n                    }\n                }\n            }\n            if (peg$cachedPos !== pos) {\n                if (peg$cachedPos > pos) {\n                    peg$cachedPos = 0;\n                    peg$cachedPosDetails = {\n                        line: 1,\n                        column: 1,\n                        seenCR: false\n                    };\n                }\n                advance(peg$cachedPosDetails, peg$cachedPos, pos);\n                peg$cachedPos = pos;\n            }\n            return peg$cachedPosDetails;\n        }\n        function peg$fail(expected) {\n            if (peg$currPos < peg$maxFailPos) {\n                return;\n            }\n            if (peg$currPos > peg$maxFailPos) {\n                peg$maxFailPos = peg$currPos;\n                peg$maxFailExpected = [];\n            }\n            peg$maxFailExpected.push(expected);\n        }\n        function peg$buildException(message, expected, pos) {\n            function cleanupExpected(expected) {\n                var i = 1;\n                expected.sort(function(a, b) {\n                    if (a.description < b.description) {\n                        return -1;\n                    } else if (a.description > b.description) {\n                        return 1;\n                    } else {\n                        return 0;\n                    }\n                });\n                while(i < expected.length){\n                    if (expected[i - 1] === expected[i]) {\n                        expected.splice(i, 1);\n                    } else {\n                        i++;\n                    }\n                }\n            }\n            function buildMessage(expected, found) {\n                function stringEscape(s) {\n                    function hex(ch) {\n                        return ch.charCodeAt(0).toString(16).toUpperCase();\n                    }\n                    return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\x08/g, \"\\\\b\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\f/g, \"\\\\f\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) {\n                        return \"\\\\x0\" + hex(ch);\n                    }).replace(/[\\x10-\\x1F\\x80-\\xFF]/g, function(ch) {\n                        return \"\\\\x\" + hex(ch);\n                    }).replace(/[\\u0180-\\u0FFF]/g, function(ch) {\n                        return \"\\\\u0\" + hex(ch);\n                    }).replace(/[\\u1080-\\uFFFF]/g, function(ch) {\n                        return \"\\\\u\" + hex(ch);\n                    });\n                }\n                var expectedDescs = new Array(expected.length), expectedDesc, foundDesc, i;\n                for(i = 0; i < expected.length; i++){\n                    expectedDescs[i] = expected[i].description;\n                }\n                expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(\", \") + \" or \" + expectedDescs[expected.length - 1] : expectedDescs[0];\n                foundDesc = found ? '\"' + stringEscape(found) + '\"' : \"end of input\";\n                return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n            }\n            var posDetails = peg$computePosDetails(pos), found = pos < input.length ? input.charAt(pos) : null;\n            if (expected !== null) {\n                cleanupExpected(expected);\n            }\n            return new SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, pos, posDetails.line, posDetails.column);\n        }\n        function peg$parsestart() {\n            var s0, s1, s2;\n            var key = peg$currPos * 49 + 0, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parseline();\n            while(s2 !== peg$FAILED){\n                s1.push(s2);\n                s2 = peg$parseline();\n            }\n            if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c1();\n            }\n            s0 = s1;\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseline() {\n            var s0, s1, s2, s3, s4, s5, s6;\n            var key = peg$currPos * 49 + 1, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parseS();\n            while(s2 !== peg$FAILED){\n                s1.push(s2);\n                s2 = peg$parseS();\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parseexpression();\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parseS();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parseS();\n                    }\n                    if (s3 !== peg$FAILED) {\n                        s4 = [];\n                        s5 = peg$parsecomment();\n                        while(s5 !== peg$FAILED){\n                            s4.push(s5);\n                            s5 = peg$parsecomment();\n                        }\n                        if (s4 !== peg$FAILED) {\n                            s5 = [];\n                            s6 = peg$parseNL();\n                            if (s6 !== peg$FAILED) {\n                                while(s6 !== peg$FAILED){\n                                    s5.push(s6);\n                                    s6 = peg$parseNL();\n                                }\n                            } else {\n                                s5 = peg$c2;\n                            }\n                            if (s5 === peg$FAILED) {\n                                s5 = peg$parseEOF();\n                            }\n                            if (s5 !== peg$FAILED) {\n                                s1 = [\n                                    s1,\n                                    s2,\n                                    s3,\n                                    s4,\n                                    s5\n                                ];\n                                s0 = s1;\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parseS();\n                if (s2 !== peg$FAILED) {\n                    while(s2 !== peg$FAILED){\n                        s1.push(s2);\n                        s2 = peg$parseS();\n                    }\n                } else {\n                    s1 = peg$c2;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parseNL();\n                    if (s3 !== peg$FAILED) {\n                        while(s3 !== peg$FAILED){\n                            s2.push(s3);\n                            s3 = peg$parseNL();\n                        }\n                    } else {\n                        s2 = peg$c2;\n                    }\n                    if (s2 === peg$FAILED) {\n                        s2 = peg$parseEOF();\n                    }\n                    if (s2 !== peg$FAILED) {\n                        s1 = [\n                            s1,\n                            s2\n                        ];\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parseNL();\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseexpression() {\n            var s0;\n            var key = peg$currPos * 49 + 2, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$parsecomment();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parsepath();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parsetablearray();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseassignment();\n                    }\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsecomment() {\n            var s0, s1, s2, s3, s4, s5;\n            var key = peg$currPos * 49 + 3, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 35) {\n                s1 = peg$c3;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c4);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$currPos;\n                s4 = peg$currPos;\n                peg$silentFails++;\n                s5 = peg$parseNL();\n                if (s5 === peg$FAILED) {\n                    s5 = peg$parseEOF();\n                }\n                peg$silentFails--;\n                if (s5 === peg$FAILED) {\n                    s4 = peg$c5;\n                } else {\n                    peg$currPos = s4;\n                    s4 = peg$c2;\n                }\n                if (s4 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s5 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c6);\n                        }\n                    }\n                    if (s5 !== peg$FAILED) {\n                        s4 = [\n                            s4,\n                            s5\n                        ];\n                        s3 = s4;\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s3;\n                    s3 = peg$c2;\n                }\n                while(s3 !== peg$FAILED){\n                    s2.push(s3);\n                    s3 = peg$currPos;\n                    s4 = peg$currPos;\n                    peg$silentFails++;\n                    s5 = peg$parseNL();\n                    if (s5 === peg$FAILED) {\n                        s5 = peg$parseEOF();\n                    }\n                    peg$silentFails--;\n                    if (s5 === peg$FAILED) {\n                        s4 = peg$c5;\n                    } else {\n                        peg$currPos = s4;\n                        s4 = peg$c2;\n                    }\n                    if (s4 !== peg$FAILED) {\n                        if (input.length > peg$currPos) {\n                            s5 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c6);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s4 = [\n                                s4,\n                                s5\n                            ];\n                            s3 = s4;\n                        } else {\n                            peg$currPos = s3;\n                            s3 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$c2;\n                    }\n                }\n                if (s2 !== peg$FAILED) {\n                    s1 = [\n                        s1,\n                        s2\n                    ];\n                    s0 = s1;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsepath() {\n            var s0, s1, s2, s3, s4, s5;\n            var key = peg$currPos * 49 + 4, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 91) {\n                s1 = peg$c7;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c8);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$parseS();\n                while(s3 !== peg$FAILED){\n                    s2.push(s3);\n                    s3 = peg$parseS();\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = peg$parsetable_key();\n                    if (s3 !== peg$FAILED) {\n                        s4 = [];\n                        s5 = peg$parseS();\n                        while(s5 !== peg$FAILED){\n                            s4.push(s5);\n                            s5 = peg$parseS();\n                        }\n                        if (s4 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 93) {\n                                s5 = peg$c9;\n                                peg$currPos++;\n                            } else {\n                                s5 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c10);\n                                }\n                            }\n                            if (s5 !== peg$FAILED) {\n                                peg$reportedPos = s0;\n                                s1 = peg$c11(s3);\n                                s0 = s1;\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsetablearray() {\n            var s0, s1, s2, s3, s4, s5, s6, s7;\n            var key = peg$currPos * 49 + 5, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 91) {\n                s1 = peg$c7;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c8);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 91) {\n                    s2 = peg$c7;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c8);\n                    }\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parseS();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parseS();\n                    }\n                    if (s3 !== peg$FAILED) {\n                        s4 = peg$parsetable_key();\n                        if (s4 !== peg$FAILED) {\n                            s5 = [];\n                            s6 = peg$parseS();\n                            while(s6 !== peg$FAILED){\n                                s5.push(s6);\n                                s6 = peg$parseS();\n                            }\n                            if (s5 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 93) {\n                                    s6 = peg$c9;\n                                    peg$currPos++;\n                                } else {\n                                    s6 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c10);\n                                    }\n                                }\n                                if (s6 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 93) {\n                                        s7 = peg$c9;\n                                        peg$currPos++;\n                                    } else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c10);\n                                        }\n                                    }\n                                    if (s7 !== peg$FAILED) {\n                                        peg$reportedPos = s0;\n                                        s1 = peg$c12(s4);\n                                        s0 = s1;\n                                    } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$c2;\n                                    }\n                                } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c2;\n                                }\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsetable_key() {\n            var s0, s1, s2;\n            var key = peg$currPos * 49 + 6, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parsedot_ended_table_key_part();\n            if (s2 !== peg$FAILED) {\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parsedot_ended_table_key_part();\n                }\n            } else {\n                s1 = peg$c2;\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsetable_key_part();\n                if (s2 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c13(s1, s2);\n                    s0 = s1;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsetable_key_part();\n                if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c14(s1);\n                }\n                s0 = s1;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsetable_key_part() {\n            var s0, s1, s2, s3, s4;\n            var key = peg$currPos * 49 + 7, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parseS();\n            while(s2 !== peg$FAILED){\n                s1.push(s2);\n                s2 = peg$parseS();\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsekey();\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parseS();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parseS();\n                    }\n                    if (s3 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c15(s2);\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parseS();\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parseS();\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parsequoted_key();\n                    if (s2 !== peg$FAILED) {\n                        s3 = [];\n                        s4 = peg$parseS();\n                        while(s4 !== peg$FAILED){\n                            s3.push(s4);\n                            s4 = peg$parseS();\n                        }\n                        if (s3 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c15(s2);\n                            s0 = s1;\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsedot_ended_table_key_part() {\n            var s0, s1, s2, s3, s4, s5, s6;\n            var key = peg$currPos * 49 + 8, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parseS();\n            while(s2 !== peg$FAILED){\n                s1.push(s2);\n                s2 = peg$parseS();\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsekey();\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parseS();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parseS();\n                    }\n                    if (s3 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 46) {\n                            s4 = peg$c16;\n                            peg$currPos++;\n                        } else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c17);\n                            }\n                        }\n                        if (s4 !== peg$FAILED) {\n                            s5 = [];\n                            s6 = peg$parseS();\n                            while(s6 !== peg$FAILED){\n                                s5.push(s6);\n                                s6 = peg$parseS();\n                            }\n                            if (s5 !== peg$FAILED) {\n                                peg$reportedPos = s0;\n                                s1 = peg$c15(s2);\n                                s0 = s1;\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parseS();\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parseS();\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parsequoted_key();\n                    if (s2 !== peg$FAILED) {\n                        s3 = [];\n                        s4 = peg$parseS();\n                        while(s4 !== peg$FAILED){\n                            s3.push(s4);\n                            s4 = peg$parseS();\n                        }\n                        if (s3 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 46) {\n                                s4 = peg$c16;\n                                peg$currPos++;\n                            } else {\n                                s4 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c17);\n                                }\n                            }\n                            if (s4 !== peg$FAILED) {\n                                s5 = [];\n                                s6 = peg$parseS();\n                                while(s6 !== peg$FAILED){\n                                    s5.push(s6);\n                                    s6 = peg$parseS();\n                                }\n                                if (s5 !== peg$FAILED) {\n                                    peg$reportedPos = s0;\n                                    s1 = peg$c15(s2);\n                                    s0 = s1;\n                                } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c2;\n                                }\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseassignment() {\n            var s0, s1, s2, s3, s4, s5;\n            var key = peg$currPos * 49 + 9, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = peg$parsekey();\n            if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$parseS();\n                while(s3 !== peg$FAILED){\n                    s2.push(s3);\n                    s3 = peg$parseS();\n                }\n                if (s2 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 61) {\n                        s3 = peg$c18;\n                        peg$currPos++;\n                    } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c19);\n                        }\n                    }\n                    if (s3 !== peg$FAILED) {\n                        s4 = [];\n                        s5 = peg$parseS();\n                        while(s5 !== peg$FAILED){\n                            s4.push(s5);\n                            s5 = peg$parseS();\n                        }\n                        if (s4 !== peg$FAILED) {\n                            s5 = peg$parsevalue();\n                            if (s5 !== peg$FAILED) {\n                                peg$reportedPos = s0;\n                                s1 = peg$c20(s1, s5);\n                                s0 = s1;\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsequoted_key();\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parseS();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parseS();\n                    }\n                    if (s2 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 61) {\n                            s3 = peg$c18;\n                            peg$currPos++;\n                        } else {\n                            s3 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c19);\n                            }\n                        }\n                        if (s3 !== peg$FAILED) {\n                            s4 = [];\n                            s5 = peg$parseS();\n                            while(s5 !== peg$FAILED){\n                                s4.push(s5);\n                                s5 = peg$parseS();\n                            }\n                            if (s4 !== peg$FAILED) {\n                                s5 = peg$parsevalue();\n                                if (s5 !== peg$FAILED) {\n                                    peg$reportedPos = s0;\n                                    s1 = peg$c20(s1, s5);\n                                    s0 = s1;\n                                } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c2;\n                                }\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsekey() {\n            var s0, s1, s2;\n            var key = peg$currPos * 49 + 10, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parseASCII_BASIC();\n            if (s2 !== peg$FAILED) {\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parseASCII_BASIC();\n                }\n            } else {\n                s1 = peg$c2;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c21(s1);\n            }\n            s0 = s1;\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsequoted_key() {\n            var s0, s1;\n            var key = peg$currPos * 49 + 11, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = peg$parsedouble_quoted_single_line_string();\n            if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c22(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsesingle_quoted_single_line_string();\n                if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c22(s1);\n                }\n                s0 = s1;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsevalue() {\n            var s0;\n            var key = peg$currPos * 49 + 12, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$parsestring();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parsedatetime();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parsefloat();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseinteger();\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$parseboolean();\n                            if (s0 === peg$FAILED) {\n                                s0 = peg$parsearray();\n                                if (s0 === peg$FAILED) {\n                                    s0 = peg$parseinline_table();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsestring() {\n            var s0;\n            var key = peg$currPos * 49 + 13, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$parsedouble_quoted_multiline_string();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parsedouble_quoted_single_line_string();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parsesingle_quoted_multiline_string();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parsesingle_quoted_single_line_string();\n                    }\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsedouble_quoted_multiline_string() {\n            var s0, s1, s2, s3, s4;\n            var key = peg$currPos * 49 + 14, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 3) === peg$c23) {\n                s1 = peg$c23;\n                peg$currPos += 3;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c24);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parseNL();\n                if (s2 === peg$FAILED) {\n                    s2 = peg$c25;\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parsemultiline_string_char();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parsemultiline_string_char();\n                    }\n                    if (s3 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 3) === peg$c23) {\n                            s4 = peg$c23;\n                            peg$currPos += 3;\n                        } else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                            }\n                        }\n                        if (s4 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c26(s3);\n                            s0 = s1;\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsedouble_quoted_single_line_string() {\n            var s0, s1, s2, s3;\n            var key = peg$currPos * 49 + 15, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 34) {\n                s1 = peg$c27;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c28);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$parsestring_char();\n                while(s3 !== peg$FAILED){\n                    s2.push(s3);\n                    s3 = peg$parsestring_char();\n                }\n                if (s2 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                        s3 = peg$c27;\n                        peg$currPos++;\n                    } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c28);\n                        }\n                    }\n                    if (s3 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c26(s2);\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsesingle_quoted_multiline_string() {\n            var s0, s1, s2, s3, s4;\n            var key = peg$currPos * 49 + 16, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 3) === peg$c29) {\n                s1 = peg$c29;\n                peg$currPos += 3;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c30);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parseNL();\n                if (s2 === peg$FAILED) {\n                    s2 = peg$c25;\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parsemultiline_literal_char();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parsemultiline_literal_char();\n                    }\n                    if (s3 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 3) === peg$c29) {\n                            s4 = peg$c29;\n                            peg$currPos += 3;\n                        } else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c30);\n                            }\n                        }\n                        if (s4 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c26(s3);\n                            s0 = s1;\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsesingle_quoted_single_line_string() {\n            var s0, s1, s2, s3;\n            var key = peg$currPos * 49 + 17, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n                s1 = peg$c31;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c32);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$parseliteral_char();\n                while(s3 !== peg$FAILED){\n                    s2.push(s3);\n                    s3 = peg$parseliteral_char();\n                }\n                if (s2 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                        s3 = peg$c31;\n                        peg$currPos++;\n                    } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c32);\n                        }\n                    }\n                    if (s3 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c26(s2);\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsestring_char() {\n            var s0, s1, s2;\n            var key = peg$currPos * 49 + 18, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$parseESCAPED();\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$currPos;\n                peg$silentFails++;\n                if (input.charCodeAt(peg$currPos) === 34) {\n                    s2 = peg$c27;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c28);\n                    }\n                }\n                peg$silentFails--;\n                if (s2 === peg$FAILED) {\n                    s1 = peg$c5;\n                } else {\n                    peg$currPos = s1;\n                    s1 = peg$c2;\n                }\n                if (s1 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s2 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c6);\n                        }\n                    }\n                    if (s2 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c33(s2);\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseliteral_char() {\n            var s0, s1, s2;\n            var key = peg$currPos * 49 + 19, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 39) {\n                s2 = peg$c31;\n                peg$currPos++;\n            } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c32);\n                }\n            }\n            peg$silentFails--;\n            if (s2 === peg$FAILED) {\n                s1 = peg$c5;\n            } else {\n                peg$currPos = s1;\n                s1 = peg$c2;\n            }\n            if (s1 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                    s2 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c6);\n                    }\n                }\n                if (s2 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c33(s2);\n                    s0 = s1;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsemultiline_string_char() {\n            var s0, s1, s2;\n            var key = peg$currPos * 49 + 20, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$parseESCAPED();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parsemultiline_string_delim();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$currPos;\n                    peg$silentFails++;\n                    if (input.substr(peg$currPos, 3) === peg$c23) {\n                        s2 = peg$c23;\n                        peg$currPos += 3;\n                    } else {\n                        s2 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c24);\n                        }\n                    }\n                    peg$silentFails--;\n                    if (s2 === peg$FAILED) {\n                        s1 = peg$c5;\n                    } else {\n                        peg$currPos = s1;\n                        s1 = peg$c2;\n                    }\n                    if (s1 !== peg$FAILED) {\n                        if (input.length > peg$currPos) {\n                            s2 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s2 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c6);\n                            }\n                        }\n                        if (s2 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c34(s2);\n                            s0 = s1;\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsemultiline_string_delim() {\n            var s0, s1, s2, s3, s4;\n            var key = peg$currPos * 49 + 21, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 92) {\n                s1 = peg$c35;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c36);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parseNL();\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parseNLS();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parseNLS();\n                    }\n                    if (s3 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c37();\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsemultiline_literal_char() {\n            var s0, s1, s2;\n            var key = peg$currPos * 49 + 22, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            peg$silentFails++;\n            if (input.substr(peg$currPos, 3) === peg$c29) {\n                s2 = peg$c29;\n                peg$currPos += 3;\n            } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c30);\n                }\n            }\n            peg$silentFails--;\n            if (s2 === peg$FAILED) {\n                s1 = peg$c5;\n            } else {\n                peg$currPos = s1;\n                s1 = peg$c2;\n            }\n            if (s1 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                    s2 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c6);\n                    }\n                }\n                if (s2 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c33(s2);\n                    s0 = s1;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsefloat() {\n            var s0, s1, s2, s3;\n            var key = peg$currPos * 49 + 23, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = peg$parsefloat_text();\n            if (s1 === peg$FAILED) {\n                s1 = peg$parseinteger_text();\n            }\n            if (s1 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 101) {\n                    s2 = peg$c38;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c39);\n                    }\n                }\n                if (s2 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 69) {\n                        s2 = peg$c40;\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c41);\n                        }\n                    }\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = peg$parseinteger_text();\n                    if (s3 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c42(s1, s3);\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsefloat_text();\n                if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c43(s1);\n                }\n                s0 = s1;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsefloat_text() {\n            var s0, s1, s2, s3, s4, s5;\n            var key = peg$currPos * 49 + 24, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 43) {\n                s1 = peg$c44;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c45);\n                }\n            }\n            if (s1 === peg$FAILED) {\n                s1 = peg$c25;\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$currPos;\n                s3 = peg$parseDIGITS();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 46) {\n                        s4 = peg$c16;\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c17);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parseDIGITS();\n                        if (s5 !== peg$FAILED) {\n                            s3 = [\n                                s3,\n                                s4,\n                                s5\n                            ];\n                            s2 = s3;\n                        } else {\n                            peg$currPos = s2;\n                            s2 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s2;\n                        s2 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s2;\n                    s2 = peg$c2;\n                }\n                if (s2 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c46(s2);\n                    s0 = s1;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 45) {\n                    s1 = peg$c47;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c48);\n                    }\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$currPos;\n                    s3 = peg$parseDIGITS();\n                    if (s3 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 46) {\n                            s4 = peg$c16;\n                            peg$currPos++;\n                        } else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c17);\n                            }\n                        }\n                        if (s4 !== peg$FAILED) {\n                            s5 = peg$parseDIGITS();\n                            if (s5 !== peg$FAILED) {\n                                s3 = [\n                                    s3,\n                                    s4,\n                                    s5\n                                ];\n                                s2 = s3;\n                            } else {\n                                peg$currPos = s2;\n                                s2 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s2;\n                            s2 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s2;\n                        s2 = peg$c2;\n                    }\n                    if (s2 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c49(s2);\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseinteger() {\n            var s0, s1;\n            var key = peg$currPos * 49 + 25, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = peg$parseinteger_text();\n            if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c50(s1);\n            }\n            s0 = s1;\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseinteger_text() {\n            var s0, s1, s2, s3, s4;\n            var key = peg$currPos * 49 + 26, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 43) {\n                s1 = peg$c44;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c45);\n                }\n            }\n            if (s1 === peg$FAILED) {\n                s1 = peg$c25;\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$parseDIGIT_OR_UNDER();\n                if (s3 !== peg$FAILED) {\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parseDIGIT_OR_UNDER();\n                    }\n                } else {\n                    s2 = peg$c2;\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = peg$currPos;\n                    peg$silentFails++;\n                    if (input.charCodeAt(peg$currPos) === 46) {\n                        s4 = peg$c16;\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c17);\n                        }\n                    }\n                    peg$silentFails--;\n                    if (s4 === peg$FAILED) {\n                        s3 = peg$c5;\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$c2;\n                    }\n                    if (s3 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c46(s2);\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 45) {\n                    s1 = peg$c47;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c48);\n                    }\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parseDIGIT_OR_UNDER();\n                    if (s3 !== peg$FAILED) {\n                        while(s3 !== peg$FAILED){\n                            s2.push(s3);\n                            s3 = peg$parseDIGIT_OR_UNDER();\n                        }\n                    } else {\n                        s2 = peg$c2;\n                    }\n                    if (s2 !== peg$FAILED) {\n                        s3 = peg$currPos;\n                        peg$silentFails++;\n                        if (input.charCodeAt(peg$currPos) === 46) {\n                            s4 = peg$c16;\n                            peg$currPos++;\n                        } else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c17);\n                            }\n                        }\n                        peg$silentFails--;\n                        if (s4 === peg$FAILED) {\n                            s3 = peg$c5;\n                        } else {\n                            peg$currPos = s3;\n                            s3 = peg$c2;\n                        }\n                        if (s3 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c49(s2);\n                            s0 = s1;\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseboolean() {\n            var s0, s1;\n            var key = peg$currPos * 49 + 27, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 4) === peg$c51) {\n                s1 = peg$c51;\n                peg$currPos += 4;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c52);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c53();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 5) === peg$c54) {\n                    s1 = peg$c54;\n                    peg$currPos += 5;\n                } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c55);\n                    }\n                }\n                if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c56();\n                }\n                s0 = s1;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsearray() {\n            var s0, s1, s2, s3, s4;\n            var key = peg$currPos * 49 + 28, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 91) {\n                s1 = peg$c7;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c8);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$parsearray_sep();\n                while(s3 !== peg$FAILED){\n                    s2.push(s3);\n                    s3 = peg$parsearray_sep();\n                }\n                if (s2 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                        s3 = peg$c9;\n                        peg$currPos++;\n                    } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c10);\n                        }\n                    }\n                    if (s3 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c57();\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 91) {\n                    s1 = peg$c7;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c8);\n                    }\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parsearray_value();\n                    if (s2 === peg$FAILED) {\n                        s2 = peg$c25;\n                    }\n                    if (s2 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 93) {\n                            s3 = peg$c9;\n                            peg$currPos++;\n                        } else {\n                            s3 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c10);\n                            }\n                        }\n                        if (s3 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c58(s2);\n                            s0 = s1;\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n                if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 91) {\n                        s1 = peg$c7;\n                        peg$currPos++;\n                    } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c8);\n                        }\n                    }\n                    if (s1 !== peg$FAILED) {\n                        s2 = [];\n                        s3 = peg$parsearray_value_list();\n                        if (s3 !== peg$FAILED) {\n                            while(s3 !== peg$FAILED){\n                                s2.push(s3);\n                                s3 = peg$parsearray_value_list();\n                            }\n                        } else {\n                            s2 = peg$c2;\n                        }\n                        if (s2 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 93) {\n                                s3 = peg$c9;\n                                peg$currPos++;\n                            } else {\n                                s3 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c10);\n                                }\n                            }\n                            if (s3 !== peg$FAILED) {\n                                peg$reportedPos = s0;\n                                s1 = peg$c59(s2);\n                                s0 = s1;\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 91) {\n                            s1 = peg$c7;\n                            peg$currPos++;\n                        } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c8);\n                            }\n                        }\n                        if (s1 !== peg$FAILED) {\n                            s2 = [];\n                            s3 = peg$parsearray_value_list();\n                            if (s3 !== peg$FAILED) {\n                                while(s3 !== peg$FAILED){\n                                    s2.push(s3);\n                                    s3 = peg$parsearray_value_list();\n                                }\n                            } else {\n                                s2 = peg$c2;\n                            }\n                            if (s2 !== peg$FAILED) {\n                                s3 = peg$parsearray_value();\n                                if (s3 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 93) {\n                                        s4 = peg$c9;\n                                        peg$currPos++;\n                                    } else {\n                                        s4 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c10);\n                                        }\n                                    }\n                                    if (s4 !== peg$FAILED) {\n                                        peg$reportedPos = s0;\n                                        s1 = peg$c60(s2, s3);\n                                        s0 = s1;\n                                    } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$c2;\n                                    }\n                                } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c2;\n                                }\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    }\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsearray_value() {\n            var s0, s1, s2, s3, s4;\n            var key = peg$currPos * 49 + 29, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parsearray_sep();\n            while(s2 !== peg$FAILED){\n                s1.push(s2);\n                s2 = peg$parsearray_sep();\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsevalue();\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parsearray_sep();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parsearray_sep();\n                    }\n                    if (s3 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c61(s2);\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsearray_value_list() {\n            var s0, s1, s2, s3, s4, s5, s6;\n            var key = peg$currPos * 49 + 30, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parsearray_sep();\n            while(s2 !== peg$FAILED){\n                s1.push(s2);\n                s2 = peg$parsearray_sep();\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsevalue();\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parsearray_sep();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parsearray_sep();\n                    }\n                    if (s3 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s4 = peg$c62;\n                            peg$currPos++;\n                        } else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c63);\n                            }\n                        }\n                        if (s4 !== peg$FAILED) {\n                            s5 = [];\n                            s6 = peg$parsearray_sep();\n                            while(s6 !== peg$FAILED){\n                                s5.push(s6);\n                                s6 = peg$parsearray_sep();\n                            }\n                            if (s5 !== peg$FAILED) {\n                                peg$reportedPos = s0;\n                                s1 = peg$c61(s2);\n                                s0 = s1;\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsearray_sep() {\n            var s0;\n            var key = peg$currPos * 49 + 31, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$parseS();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parseNL();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parsecomment();\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseinline_table() {\n            var s0, s1, s2, s3, s4, s5;\n            var key = peg$currPos * 49 + 32, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n                s1 = peg$c64;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c65);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$parseS();\n                while(s3 !== peg$FAILED){\n                    s2.push(s3);\n                    s3 = peg$parseS();\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parseinline_table_assignment();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parseinline_table_assignment();\n                    }\n                    if (s3 !== peg$FAILED) {\n                        s4 = [];\n                        s5 = peg$parseS();\n                        while(s5 !== peg$FAILED){\n                            s4.push(s5);\n                            s5 = peg$parseS();\n                        }\n                        if (s4 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                                s5 = peg$c66;\n                                peg$currPos++;\n                            } else {\n                                s5 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c67);\n                                }\n                            }\n                            if (s5 !== peg$FAILED) {\n                                peg$reportedPos = s0;\n                                s1 = peg$c68(s3);\n                                s0 = s1;\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseinline_table_assignment() {\n            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n            var key = peg$currPos * 49 + 33, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parseS();\n            while(s2 !== peg$FAILED){\n                s1.push(s2);\n                s2 = peg$parseS();\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsekey();\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parseS();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parseS();\n                    }\n                    if (s3 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 61) {\n                            s4 = peg$c18;\n                            peg$currPos++;\n                        } else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c19);\n                            }\n                        }\n                        if (s4 !== peg$FAILED) {\n                            s5 = [];\n                            s6 = peg$parseS();\n                            while(s6 !== peg$FAILED){\n                                s5.push(s6);\n                                s6 = peg$parseS();\n                            }\n                            if (s5 !== peg$FAILED) {\n                                s6 = peg$parsevalue();\n                                if (s6 !== peg$FAILED) {\n                                    s7 = [];\n                                    s8 = peg$parseS();\n                                    while(s8 !== peg$FAILED){\n                                        s7.push(s8);\n                                        s8 = peg$parseS();\n                                    }\n                                    if (s7 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s8 = peg$c62;\n                                            peg$currPos++;\n                                        } else {\n                                            s8 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c63);\n                                            }\n                                        }\n                                        if (s8 !== peg$FAILED) {\n                                            s9 = [];\n                                            s10 = peg$parseS();\n                                            while(s10 !== peg$FAILED){\n                                                s9.push(s10);\n                                                s10 = peg$parseS();\n                                            }\n                                            if (s9 !== peg$FAILED) {\n                                                peg$reportedPos = s0;\n                                                s1 = peg$c69(s2, s6);\n                                                s0 = s1;\n                                            } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$c2;\n                                            }\n                                        } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$c2;\n                                        }\n                                    } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$c2;\n                                    }\n                                } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c2;\n                                }\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parseS();\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parseS();\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parsekey();\n                    if (s2 !== peg$FAILED) {\n                        s3 = [];\n                        s4 = peg$parseS();\n                        while(s4 !== peg$FAILED){\n                            s3.push(s4);\n                            s4 = peg$parseS();\n                        }\n                        if (s3 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 61) {\n                                s4 = peg$c18;\n                                peg$currPos++;\n                            } else {\n                                s4 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c19);\n                                }\n                            }\n                            if (s4 !== peg$FAILED) {\n                                s5 = [];\n                                s6 = peg$parseS();\n                                while(s6 !== peg$FAILED){\n                                    s5.push(s6);\n                                    s6 = peg$parseS();\n                                }\n                                if (s5 !== peg$FAILED) {\n                                    s6 = peg$parsevalue();\n                                    if (s6 !== peg$FAILED) {\n                                        peg$reportedPos = s0;\n                                        s1 = peg$c69(s2, s6);\n                                        s0 = s1;\n                                    } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$c2;\n                                    }\n                                } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c2;\n                                }\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsesecfragment() {\n            var s0, s1, s2;\n            var key = peg$currPos * 49 + 34, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 46) {\n                s1 = peg$c16;\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c17);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parseDIGITS();\n                if (s2 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c70(s2);\n                    s0 = s1;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsedate() {\n            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n            var key = peg$currPos * 49 + 35, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            s2 = peg$parseDIGIT_OR_UNDER();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseDIGIT_OR_UNDER();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parseDIGIT_OR_UNDER();\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parseDIGIT_OR_UNDER();\n                        if (s5 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 45) {\n                                s6 = peg$c47;\n                                peg$currPos++;\n                            } else {\n                                s6 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c48);\n                                }\n                            }\n                            if (s6 !== peg$FAILED) {\n                                s7 = peg$parseDIGIT_OR_UNDER();\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parseDIGIT_OR_UNDER();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 45) {\n                                            s9 = peg$c47;\n                                            peg$currPos++;\n                                        } else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c48);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parseDIGIT_OR_UNDER();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = peg$parseDIGIT_OR_UNDER();\n                                                if (s11 !== peg$FAILED) {\n                                                    s2 = [\n                                                        s2,\n                                                        s3,\n                                                        s4,\n                                                        s5,\n                                                        s6,\n                                                        s7,\n                                                        s8,\n                                                        s9,\n                                                        s10,\n                                                        s11\n                                                    ];\n                                                    s1 = s2;\n                                                } else {\n                                                    peg$currPos = s1;\n                                                    s1 = peg$c2;\n                                                }\n                                            } else {\n                                                peg$currPos = s1;\n                                                s1 = peg$c2;\n                                            }\n                                        } else {\n                                            peg$currPos = s1;\n                                            s1 = peg$c2;\n                                        }\n                                    } else {\n                                        peg$currPos = s1;\n                                        s1 = peg$c2;\n                                    }\n                                } else {\n                                    peg$currPos = s1;\n                                    s1 = peg$c2;\n                                }\n                            } else {\n                                peg$currPos = s1;\n                                s1 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s1;\n                            s1 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s1;\n                        s1 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s1;\n                    s1 = peg$c2;\n                }\n            } else {\n                peg$currPos = s1;\n                s1 = peg$c2;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c71(s1);\n            }\n            s0 = s1;\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsetime() {\n            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n            var key = peg$currPos * 49 + 36, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            s2 = peg$parseDIGIT_OR_UNDER();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseDIGIT_OR_UNDER();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 58) {\n                        s4 = peg$c72;\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c73);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parseDIGIT_OR_UNDER();\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parseDIGIT_OR_UNDER();\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 58) {\n                                    s7 = peg$c72;\n                                    peg$currPos++;\n                                } else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c73);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parseDIGIT_OR_UNDER();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$parseDIGIT_OR_UNDER();\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parsesecfragment();\n                                            if (s10 === peg$FAILED) {\n                                                s10 = peg$c25;\n                                            }\n                                            if (s10 !== peg$FAILED) {\n                                                s2 = [\n                                                    s2,\n                                                    s3,\n                                                    s4,\n                                                    s5,\n                                                    s6,\n                                                    s7,\n                                                    s8,\n                                                    s9,\n                                                    s10\n                                                ];\n                                                s1 = s2;\n                                            } else {\n                                                peg$currPos = s1;\n                                                s1 = peg$c2;\n                                            }\n                                        } else {\n                                            peg$currPos = s1;\n                                            s1 = peg$c2;\n                                        }\n                                    } else {\n                                        peg$currPos = s1;\n                                        s1 = peg$c2;\n                                    }\n                                } else {\n                                    peg$currPos = s1;\n                                    s1 = peg$c2;\n                                }\n                            } else {\n                                peg$currPos = s1;\n                                s1 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s1;\n                            s1 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s1;\n                        s1 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s1;\n                    s1 = peg$c2;\n                }\n            } else {\n                peg$currPos = s1;\n                s1 = peg$c2;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c74(s1);\n            }\n            s0 = s1;\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsetime_with_offset() {\n            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;\n            var key = peg$currPos * 49 + 37, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            s2 = peg$parseDIGIT_OR_UNDER();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseDIGIT_OR_UNDER();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 58) {\n                        s4 = peg$c72;\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c73);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parseDIGIT_OR_UNDER();\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parseDIGIT_OR_UNDER();\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 58) {\n                                    s7 = peg$c72;\n                                    peg$currPos++;\n                                } else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c73);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parseDIGIT_OR_UNDER();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$parseDIGIT_OR_UNDER();\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parsesecfragment();\n                                            if (s10 === peg$FAILED) {\n                                                s10 = peg$c25;\n                                            }\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 45) {\n                                                    s11 = peg$c47;\n                                                    peg$currPos++;\n                                                } else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c48);\n                                                    }\n                                                }\n                                                if (s11 === peg$FAILED) {\n                                                    if (input.charCodeAt(peg$currPos) === 43) {\n                                                        s11 = peg$c44;\n                                                        peg$currPos++;\n                                                    } else {\n                                                        s11 = peg$FAILED;\n                                                        if (peg$silentFails === 0) {\n                                                            peg$fail(peg$c45);\n                                                        }\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parseDIGIT_OR_UNDER();\n                                                    if (s12 !== peg$FAILED) {\n                                                        s13 = peg$parseDIGIT_OR_UNDER();\n                                                        if (s13 !== peg$FAILED) {\n                                                            if (input.charCodeAt(peg$currPos) === 58) {\n                                                                s14 = peg$c72;\n                                                                peg$currPos++;\n                                                            } else {\n                                                                s14 = peg$FAILED;\n                                                                if (peg$silentFails === 0) {\n                                                                    peg$fail(peg$c73);\n                                                                }\n                                                            }\n                                                            if (s14 !== peg$FAILED) {\n                                                                s15 = peg$parseDIGIT_OR_UNDER();\n                                                                if (s15 !== peg$FAILED) {\n                                                                    s16 = peg$parseDIGIT_OR_UNDER();\n                                                                    if (s16 !== peg$FAILED) {\n                                                                        s2 = [\n                                                                            s2,\n                                                                            s3,\n                                                                            s4,\n                                                                            s5,\n                                                                            s6,\n                                                                            s7,\n                                                                            s8,\n                                                                            s9,\n                                                                            s10,\n                                                                            s11,\n                                                                            s12,\n                                                                            s13,\n                                                                            s14,\n                                                                            s15,\n                                                                            s16\n                                                                        ];\n                                                                        s1 = s2;\n                                                                    } else {\n                                                                        peg$currPos = s1;\n                                                                        s1 = peg$c2;\n                                                                    }\n                                                                } else {\n                                                                    peg$currPos = s1;\n                                                                    s1 = peg$c2;\n                                                                }\n                                                            } else {\n                                                                peg$currPos = s1;\n                                                                s1 = peg$c2;\n                                                            }\n                                                        } else {\n                                                            peg$currPos = s1;\n                                                            s1 = peg$c2;\n                                                        }\n                                                    } else {\n                                                        peg$currPos = s1;\n                                                        s1 = peg$c2;\n                                                    }\n                                                } else {\n                                                    peg$currPos = s1;\n                                                    s1 = peg$c2;\n                                                }\n                                            } else {\n                                                peg$currPos = s1;\n                                                s1 = peg$c2;\n                                            }\n                                        } else {\n                                            peg$currPos = s1;\n                                            s1 = peg$c2;\n                                        }\n                                    } else {\n                                        peg$currPos = s1;\n                                        s1 = peg$c2;\n                                    }\n                                } else {\n                                    peg$currPos = s1;\n                                    s1 = peg$c2;\n                                }\n                            } else {\n                                peg$currPos = s1;\n                                s1 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s1;\n                            s1 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s1;\n                        s1 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s1;\n                    s1 = peg$c2;\n                }\n            } else {\n                peg$currPos = s1;\n                s1 = peg$c2;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c74(s1);\n            }\n            s0 = s1;\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parsedatetime() {\n            var s0, s1, s2, s3, s4;\n            var key = peg$currPos * 49 + 38, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = peg$parsedate();\n            if (s1 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 84) {\n                    s2 = peg$c75;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c76);\n                    }\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = peg$parsetime();\n                    if (s3 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 90) {\n                            s4 = peg$c77;\n                            peg$currPos++;\n                        } else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c78);\n                            }\n                        }\n                        if (s4 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c79(s1, s3);\n                            s0 = s1;\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsedate();\n                if (s1 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 84) {\n                        s2 = peg$c75;\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c76);\n                        }\n                    }\n                    if (s2 !== peg$FAILED) {\n                        s3 = peg$parsetime_with_offset();\n                        if (s3 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c80(s1, s3);\n                            s0 = s1;\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseS() {\n            var s0;\n            var key = peg$currPos * 49 + 39, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            if (peg$c81.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c82);\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseNL() {\n            var s0, s1, s2;\n            var key = peg$currPos * 49 + 40, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            if (input.charCodeAt(peg$currPos) === 10) {\n                s0 = peg$c83;\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c84);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 13) {\n                    s1 = peg$c85;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c86);\n                    }\n                }\n                if (s1 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 10) {\n                        s2 = peg$c83;\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c84);\n                        }\n                    }\n                    if (s2 !== peg$FAILED) {\n                        s1 = [\n                            s1,\n                            s2\n                        ];\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseNLS() {\n            var s0;\n            var key = peg$currPos * 49 + 41, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$parseNL();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parseS();\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseEOF() {\n            var s0, s1;\n            var key = peg$currPos * 49 + 42, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            peg$silentFails++;\n            if (input.length > peg$currPos) {\n                s1 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c6);\n                }\n            }\n            peg$silentFails--;\n            if (s1 === peg$FAILED) {\n                s0 = peg$c5;\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseHEX() {\n            var s0;\n            var key = peg$currPos * 49 + 43, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            if (peg$c87.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c88);\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseDIGIT_OR_UNDER() {\n            var s0, s1;\n            var key = peg$currPos * 49 + 44, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            if (peg$c89.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c90);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 95) {\n                    s1 = peg$c91;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c92);\n                    }\n                }\n                if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c93();\n                }\n                s0 = s1;\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseASCII_BASIC() {\n            var s0;\n            var key = peg$currPos * 49 + 45, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            if (peg$c94.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c95);\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseDIGITS() {\n            var s0, s1, s2;\n            var key = peg$currPos * 49 + 46, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parseDIGIT_OR_UNDER();\n            if (s2 !== peg$FAILED) {\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parseDIGIT_OR_UNDER();\n                }\n            } else {\n                s1 = peg$c2;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c96(s1);\n            }\n            s0 = s1;\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseESCAPED() {\n            var s0, s1;\n            var key = peg$currPos * 49 + 47, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c97) {\n                s1 = peg$c97;\n                peg$currPos += 2;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c98);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c99();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c100) {\n                    s1 = peg$c100;\n                    peg$currPos += 2;\n                } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c101);\n                    }\n                }\n                if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c102();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c103) {\n                        s1 = peg$c103;\n                        peg$currPos += 2;\n                    } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c104);\n                        }\n                    }\n                    if (s1 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c105();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.substr(peg$currPos, 2) === peg$c106) {\n                            s1 = peg$c106;\n                            peg$currPos += 2;\n                        } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c107);\n                            }\n                        }\n                        if (s1 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c108();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.substr(peg$currPos, 2) === peg$c109) {\n                                s1 = peg$c109;\n                                peg$currPos += 2;\n                            } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c110);\n                                }\n                            }\n                            if (s1 !== peg$FAILED) {\n                                peg$reportedPos = s0;\n                                s1 = peg$c111();\n                            }\n                            s0 = s1;\n                            if (s0 === peg$FAILED) {\n                                s0 = peg$currPos;\n                                if (input.substr(peg$currPos, 2) === peg$c112) {\n                                    s1 = peg$c112;\n                                    peg$currPos += 2;\n                                } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c113);\n                                    }\n                                }\n                                if (s1 !== peg$FAILED) {\n                                    peg$reportedPos = s0;\n                                    s1 = peg$c114();\n                                }\n                                s0 = s1;\n                                if (s0 === peg$FAILED) {\n                                    s0 = peg$currPos;\n                                    if (input.substr(peg$currPos, 2) === peg$c115) {\n                                        s1 = peg$c115;\n                                        peg$currPos += 2;\n                                    } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c116);\n                                        }\n                                    }\n                                    if (s1 !== peg$FAILED) {\n                                        peg$reportedPos = s0;\n                                        s1 = peg$c117();\n                                    }\n                                    s0 = s1;\n                                    if (s0 === peg$FAILED) {\n                                        s0 = peg$parseESCAPED_UNICODE();\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        function peg$parseESCAPED_UNICODE() {\n            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n            var key = peg$currPos * 49 + 48, cached = peg$cache[key];\n            if (cached) {\n                peg$currPos = cached.nextPos;\n                return cached.result;\n            }\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c118) {\n                s1 = peg$c118;\n                peg$currPos += 2;\n            } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c119);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$currPos;\n                s3 = peg$parseHEX();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parseHEX();\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parseHEX();\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parseHEX();\n                            if (s6 !== peg$FAILED) {\n                                s7 = peg$parseHEX();\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parseHEX();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$parseHEX();\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parseHEX();\n                                            if (s10 !== peg$FAILED) {\n                                                s3 = [\n                                                    s3,\n                                                    s4,\n                                                    s5,\n                                                    s6,\n                                                    s7,\n                                                    s8,\n                                                    s9,\n                                                    s10\n                                                ];\n                                                s2 = s3;\n                                            } else {\n                                                peg$currPos = s2;\n                                                s2 = peg$c2;\n                                            }\n                                        } else {\n                                            peg$currPos = s2;\n                                            s2 = peg$c2;\n                                        }\n                                    } else {\n                                        peg$currPos = s2;\n                                        s2 = peg$c2;\n                                    }\n                                } else {\n                                    peg$currPos = s2;\n                                    s2 = peg$c2;\n                                }\n                            } else {\n                                peg$currPos = s2;\n                                s2 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s2;\n                            s2 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s2;\n                        s2 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s2;\n                    s2 = peg$c2;\n                }\n                if (s2 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c120(s2);\n                    s0 = s1;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c121) {\n                    s1 = peg$c121;\n                    peg$currPos += 2;\n                } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c122);\n                    }\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$currPos;\n                    s3 = peg$parseHEX();\n                    if (s3 !== peg$FAILED) {\n                        s4 = peg$parseHEX();\n                        if (s4 !== peg$FAILED) {\n                            s5 = peg$parseHEX();\n                            if (s5 !== peg$FAILED) {\n                                s6 = peg$parseHEX();\n                                if (s6 !== peg$FAILED) {\n                                    s3 = [\n                                        s3,\n                                        s4,\n                                        s5,\n                                        s6\n                                    ];\n                                    s2 = s3;\n                                } else {\n                                    peg$currPos = s2;\n                                    s2 = peg$c2;\n                                }\n                            } else {\n                                peg$currPos = s2;\n                                s2 = peg$c2;\n                            }\n                        } else {\n                            peg$currPos = s2;\n                            s2 = peg$c2;\n                        }\n                    } else {\n                        peg$currPos = s2;\n                        s2 = peg$c2;\n                    }\n                    if (s2 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c120(s2);\n                        s0 = s1;\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                }\n            }\n            peg$cache[key] = {\n                nextPos: peg$currPos,\n                result: s0\n            };\n            return s0;\n        }\n        var nodes = [];\n        function genError(err, line, col) {\n            var ex = new Error(err);\n            ex.line = line;\n            ex.column = col;\n            throw ex;\n        }\n        function addNode(node) {\n            nodes.push(node);\n        }\n        function node(type, value, line, column, key) {\n            var obj = {\n                type: type,\n                value: value,\n                line: line(),\n                column: column()\n            };\n            if (key) obj.key = key;\n            return obj;\n        }\n        function convertCodePoint(str, line, col) {\n            var num = parseInt(\"0x\" + str);\n            if (!isFinite(num) || Math.floor(num) != num || num < 0 || num > 0x10FFFF || num > 0xD7FF && num < 0xE000) {\n                genError(\"Invalid Unicode escape code: \" + str, line, col);\n            } else {\n                return fromCodePoint(num);\n            }\n        }\n        function fromCodePoint() {\n            var MAX_SIZE = 0x4000;\n            var codeUnits = [];\n            var highSurrogate;\n            var lowSurrogate;\n            var index = -1;\n            var length = arguments.length;\n            if (!length) {\n                return \"\";\n            }\n            var result = \"\";\n            while(++index < length){\n                var codePoint = Number(arguments[index]);\n                if (codePoint <= 0xFFFF) {\n                    codeUnits.push(codePoint);\n                } else {\n                    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                    codePoint -= 0x10000;\n                    highSurrogate = (codePoint >> 10) + 0xD800;\n                    lowSurrogate = codePoint % 0x400 + 0xDC00;\n                    codeUnits.push(highSurrogate, lowSurrogate);\n                }\n                if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n                    result += String.fromCharCode.apply(null, codeUnits);\n                    codeUnits.length = 0;\n                }\n            }\n            return result;\n        }\n        peg$result = peg$startRuleFunction();\n        if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n            return peg$result;\n        } else {\n            if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n                peg$fail({\n                    type: \"end\",\n                    description: \"end of input\"\n                });\n            }\n            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n        }\n    }\n    return {\n        SyntaxError: SyntaxError,\n        parse: parse\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/toml/lib/parser.js\n");

/***/ })

};
;